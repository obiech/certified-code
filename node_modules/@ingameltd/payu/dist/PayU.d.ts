import { OrderCreateResponse } from "./orders/OrderCreateResponse";
import { Order } from "./orders/Order";
import { OrderStatusResponse } from "./orders/OrderStatusResponse";
export interface PayUOptions {
    sandbox?: boolean;
}
export declare class PayU {
    private readonly clientId;
    private readonly clientSecret;
    private readonly merchantPosId;
    private readonly secondKey;
    private readonly options;
    private baseEndpoint;
    private client;
    private oAuth;
    private ips;
    /**
     * Creates an instance of PayU.
     * @param {number} clientId - client id for merchant
     * @param {string} clientSecret - client secret from panel
     * @param {number} merchantPosId - pos id from panel
     * @param {string} secondKey - second key from panel
     * @param {PayUOptions} [options={ sandbox: false }] - additional options
     * @memberof PayU
     */
    constructor(clientId: number, clientSecret: string, merchantPosId: number, secondKey: string, options?: PayUOptions);
    /**
     * Get access token
     *
     * @returns {Promise<string>}
     * @throws {AuthenticationError}
     * @memberof PayU
     */
    getAccessToken(): Promise<string>;
    /**
     * Create a new order
     *
     * @param {Order} order - order to be created
     * @returns {Promise<OrderCreateResponse>}
     * @throws {PayUError}
     * @memberof PayU
     */
    createOrder(order: Order): Promise<OrderCreateResponse>;
    /**
     * Captures an order from payU making it approved
     *
     * @param {string} orderId
     * @returns {Promise<OrderStatusResponse>}
     * @throws {PayUError}
     * @memberof PayU
     */
    captureOrder(orderId: string): Promise<OrderStatusResponse>;
    /**
     * Cancels a PayU order
     *
     * @param {string} orderId
     * @returns {Promise<OrderStatusResponse>}
     * @memberof PayU
     */
    cancelOrder(orderId: string): Promise<OrderStatusResponse>;
    /**
     * Refunds a PayU order
     *
     * @param {string} orderId - payu order id
     * @param {string} description - description for refund
     * @returns {Promise<OrderStatusResponse>}
     * @memberof PayU
     */
    refundOrder(orderId: string, description: string): Promise<OrderStatusResponse>;
    /**
     * Convert a key=value; list to json
     *
     * @private
     * @param {string} data - key value string
     * @returns {Record<string, string>}
     * @memberof PayU
     */
    private parseHeaderToJson;
    /**
     * Verify notification result with signature
     *
     * @param {string} payuHeader - header string from **OpenPayu-Signature**
     * @param {string} jsonNotification - notification body as a string
     * @returns {boolean}
     * @memberof PayU
     */
    verifyNotification(payuHeader: string, jsonNotification: string): boolean;
    /**
     * Validates the IP address with PayU servers
     *
     * @param {string} ip - ip address
     * @returns {boolean}
     * @memberof PayU
     */
    isIpValid(ip: string): boolean;
}
//# sourceMappingURL=PayU.d.ts.map