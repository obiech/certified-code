import { CurrencyRateSymbol } from './types/currency.type';
export declare class WFP {
    readonly MERCHANT_ACCOUNT: string;
    readonly MERCHANT_SECRET_KEY: string;
    readonly SERVICE_URL: string;
    readonly MERCHANT_DOMAIN_NAME: string;
    prepareSignedWebhookResponse: (body: import("./types/webhook.type").WebhookWayforpayDto) => {
        orderReference: string;
        status: string;
        time: number;
        signature: string;
    };
    verifyIncomingWebhookOrPanic: (body: import("./types/webhook.type").WebhookWayforpayDto) => void;
    constructor(props: {
        MERCHANT_ACCOUNT: string;
        MERCHANT_SECRET_KEY: string;
        SERVICE_URL: string;
        MERCHANT_DOMAIN_NAME: string;
    });
    parseAndVerifyIncomingWebhook(body: object): import("./types/webhook.type").WebhookWayforpayDto;
    createInvoiceUrl(props: {
        orderReference: string;
        productName: string[];
        productCount: number[];
        productPrice: number[];
    }): Promise<{
        value: undefined;
        error: import("./code-mapping").DetailedError;
    } | {
        value: {
            invoiceUrl: string;
            qrCode: string;
        };
        error: undefined;
    }>;
    getCurrencyRates(): Promise<{
        value: undefined;
        error: import("./code-mapping").DetailedError;
    } | {
        value: {
            rates: Record<CurrencyRateSymbol, number>;
        };
        error: undefined;
    }>;
}
