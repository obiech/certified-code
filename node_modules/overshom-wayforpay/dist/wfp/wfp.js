"use strict";
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.WFP = void 0;
const invoice_params_1 = require("./types/invoice-params");
const rest_api_1 = require("./rest.api");
const util_1 = require("./util");
class WFP {
    constructor(props) {
        this.MERCHANT_ACCOUNT = props.MERCHANT_ACCOUNT;
        this.MERCHANT_SECRET_KEY = props.MERCHANT_SECRET_KEY;
        this.SERVICE_URL = props.SERVICE_URL;
        this.MERCHANT_DOMAIN_NAME = props.MERCHANT_DOMAIN_NAME;
        this.prepareSignedWebhookResponse = util_1.prepareSignedWebhookResponse(props.MERCHANT_SECRET_KEY);
        this.verifyIncomingWebhookOrPanic = util_1.verifyIncomingWebhookOrPanic(props.MERCHANT_SECRET_KEY);
    }
    parseAndVerifyIncomingWebhook(body) {
        const parsed = util_1.parseWithoutVerificationWebhookWayforpayBody(body);
        this.verifyIncomingWebhookOrPanic(parsed);
        return parsed;
    }
    createInvoiceUrl(props) {
        return __awaiter(this, void 0, void 0, function* () {
            const amount = props.productPrice.reduce((a, v) => a + v, 0);
            const body = new invoice_params_1.InvoiceParams({
                orderReference: props.orderReference,
                merchantAccount: this.MERCHANT_ACCOUNT,
                serviceUrl: this.SERVICE_URL,
                merchantDomainName: this.MERCHANT_DOMAIN_NAME,
                MERCHANT_SECRET_KEY: this.MERCHANT_SECRET_KEY,
                amount,
                productName: props.productName,
                productCount: props.productCount,
                productPrice: props.productPrice,
            });
            const data = yield rest_api_1.restApi.baseCall(body);
            return data;
        });
    }
    getCurrencyRates() {
        return __awaiter(this, void 0, void 0, function* () {
            const body = util_1.prepareBodyForCurrencyRatesRequest({
                merchantAccount: this.MERCHANT_ACCOUNT,
                merchantSecretKey: this.MERCHANT_SECRET_KEY,
            });
            const data = yield rest_api_1.restApi.baseCall(body);
            return data;
        });
    }
}
exports.WFP = WFP;
//# sourceMappingURL=wfp.js.map