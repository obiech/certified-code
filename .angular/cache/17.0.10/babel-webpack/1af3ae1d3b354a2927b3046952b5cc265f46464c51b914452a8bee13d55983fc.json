{"ast":null,"code":"import { __extends } from \"tslib\";\nimport { each, isNumber } from '@antv/util';\nimport { timeFormat, toTimeStamp } from '../util/time';\nimport Category from './base';\n/**\n * 时间分类度量\n * @class\n */\nvar TimeCat = /** @class */function (_super) {\n  __extends(TimeCat, _super);\n  function TimeCat() {\n    var _this = _super !== null && _super.apply(this, arguments) || this;\n    _this.type = 'timeCat';\n    return _this;\n  }\n  /**\n   * @override\n   */\n  TimeCat.prototype.translate = function (value) {\n    value = toTimeStamp(value);\n    var index = this.values.indexOf(value);\n    if (index === -1) {\n      if (isNumber(value) && value < this.values.length) {\n        index = value;\n      } else {\n        index = NaN;\n      }\n    }\n    return index;\n  };\n  /**\n   * 由于时间类型数据需要转换一下，所以复写 getText\n   * @override\n   */\n  TimeCat.prototype.getText = function (value, tickIndex) {\n    var index = this.translate(value);\n    if (index > -1) {\n      var result = this.values[index];\n      var formatter = this.formatter;\n      result = formatter ? formatter(result, tickIndex) : timeFormat(result, this.mask);\n      return result;\n    }\n    return value;\n  };\n  TimeCat.prototype.initCfg = function () {\n    this.tickMethod = 'time-cat';\n    this.mask = 'YYYY-MM-DD';\n    this.tickCount = 7; // 一般时间数据会显示 7， 14， 30 天的数字\n  };\n\n  TimeCat.prototype.setDomain = function () {\n    var values = this.values;\n    // 针对时间分类类型，会将时间统一转换为时间戳\n    each(values, function (v, i) {\n      values[i] = toTimeStamp(v);\n    });\n    values.sort(function (v1, v2) {\n      return v1 - v2;\n    });\n    _super.prototype.setDomain.call(this);\n  };\n  return TimeCat;\n}(Category);\nexport default TimeCat;","map":{"version":3,"names":["__extends","each","isNumber","timeFormat","toTimeStamp","Category","TimeCat","_super","_this","apply","arguments","type","prototype","translate","value","index","values","indexOf","length","NaN","getText","tickIndex","result","formatter","mask","initCfg","tickMethod","tickCount","setDomain","v","i","sort","v1","v2","call"],"sources":["/Users/obiechina/Documents/ridy-flutter-full-taxi-solution 2/node_modules/@antv/scale/esm/category/time.js"],"sourcesContent":["import { __extends } from \"tslib\";\nimport { each, isNumber } from '@antv/util';\nimport { timeFormat, toTimeStamp } from '../util/time';\nimport Category from './base';\n/**\n * 时间分类度量\n * @class\n */\nvar TimeCat = /** @class */ (function (_super) {\n    __extends(TimeCat, _super);\n    function TimeCat() {\n        var _this = _super !== null && _super.apply(this, arguments) || this;\n        _this.type = 'timeCat';\n        return _this;\n    }\n    /**\n     * @override\n     */\n    TimeCat.prototype.translate = function (value) {\n        value = toTimeStamp(value);\n        var index = this.values.indexOf(value);\n        if (index === -1) {\n            if (isNumber(value) && value < this.values.length) {\n                index = value;\n            }\n            else {\n                index = NaN;\n            }\n        }\n        return index;\n    };\n    /**\n     * 由于时间类型数据需要转换一下，所以复写 getText\n     * @override\n     */\n    TimeCat.prototype.getText = function (value, tickIndex) {\n        var index = this.translate(value);\n        if (index > -1) {\n            var result = this.values[index];\n            var formatter = this.formatter;\n            result = formatter ? formatter(result, tickIndex) : timeFormat(result, this.mask);\n            return result;\n        }\n        return value;\n    };\n    TimeCat.prototype.initCfg = function () {\n        this.tickMethod = 'time-cat';\n        this.mask = 'YYYY-MM-DD';\n        this.tickCount = 7; // 一般时间数据会显示 7， 14， 30 天的数字\n    };\n    TimeCat.prototype.setDomain = function () {\n        var values = this.values;\n        // 针对时间分类类型，会将时间统一转换为时间戳\n        each(values, function (v, i) {\n            values[i] = toTimeStamp(v);\n        });\n        values.sort(function (v1, v2) {\n            return v1 - v2;\n        });\n        _super.prototype.setDomain.call(this);\n    };\n    return TimeCat;\n}(Category));\nexport default TimeCat;\n"],"mappings":"AAAA,SAASA,SAAS,QAAQ,OAAO;AACjC,SAASC,IAAI,EAAEC,QAAQ,QAAQ,YAAY;AAC3C,SAASC,UAAU,EAAEC,WAAW,QAAQ,cAAc;AACtD,OAAOC,QAAQ,MAAM,QAAQ;AAC7B;AACA;AACA;AACA;AACA,IAAIC,OAAO,GAAG,aAAe,UAAUC,MAAM,EAAE;EAC3CP,SAAS,CAACM,OAAO,EAAEC,MAAM,CAAC;EAC1B,SAASD,OAAOA,CAAA,EAAG;IACf,IAAIE,KAAK,GAAGD,MAAM,KAAK,IAAI,IAAIA,MAAM,CAACE,KAAK,CAAC,IAAI,EAAEC,SAAS,CAAC,IAAI,IAAI;IACpEF,KAAK,CAACG,IAAI,GAAG,SAAS;IACtB,OAAOH,KAAK;EAChB;EACA;AACJ;AACA;EACIF,OAAO,CAACM,SAAS,CAACC,SAAS,GAAG,UAAUC,KAAK,EAAE;IAC3CA,KAAK,GAAGV,WAAW,CAACU,KAAK,CAAC;IAC1B,IAAIC,KAAK,GAAG,IAAI,CAACC,MAAM,CAACC,OAAO,CAACH,KAAK,CAAC;IACtC,IAAIC,KAAK,KAAK,CAAC,CAAC,EAAE;MACd,IAAIb,QAAQ,CAACY,KAAK,CAAC,IAAIA,KAAK,GAAG,IAAI,CAACE,MAAM,CAACE,MAAM,EAAE;QAC/CH,KAAK,GAAGD,KAAK;MACjB,CAAC,MACI;QACDC,KAAK,GAAGI,GAAG;MACf;IACJ;IACA,OAAOJ,KAAK;EAChB,CAAC;EACD;AACJ;AACA;AACA;EACIT,OAAO,CAACM,SAAS,CAACQ,OAAO,GAAG,UAAUN,KAAK,EAAEO,SAAS,EAAE;IACpD,IAAIN,KAAK,GAAG,IAAI,CAACF,SAAS,CAACC,KAAK,CAAC;IACjC,IAAIC,KAAK,GAAG,CAAC,CAAC,EAAE;MACZ,IAAIO,MAAM,GAAG,IAAI,CAACN,MAAM,CAACD,KAAK,CAAC;MAC/B,IAAIQ,SAAS,GAAG,IAAI,CAACA,SAAS;MAC9BD,MAAM,GAAGC,SAAS,GAAGA,SAAS,CAACD,MAAM,EAAED,SAAS,CAAC,GAAGlB,UAAU,CAACmB,MAAM,EAAE,IAAI,CAACE,IAAI,CAAC;MACjF,OAAOF,MAAM;IACjB;IACA,OAAOR,KAAK;EAChB,CAAC;EACDR,OAAO,CAACM,SAAS,CAACa,OAAO,GAAG,YAAY;IACpC,IAAI,CAACC,UAAU,GAAG,UAAU;IAC5B,IAAI,CAACF,IAAI,GAAG,YAAY;IACxB,IAAI,CAACG,SAAS,GAAG,CAAC,CAAC,CAAC;EACxB,CAAC;;EACDrB,OAAO,CAACM,SAAS,CAACgB,SAAS,GAAG,YAAY;IACtC,IAAIZ,MAAM,GAAG,IAAI,CAACA,MAAM;IACxB;IACAf,IAAI,CAACe,MAAM,EAAE,UAAUa,CAAC,EAAEC,CAAC,EAAE;MACzBd,MAAM,CAACc,CAAC,CAAC,GAAG1B,WAAW,CAACyB,CAAC,CAAC;IAC9B,CAAC,CAAC;IACFb,MAAM,CAACe,IAAI,CAAC,UAAUC,EAAE,EAAEC,EAAE,EAAE;MAC1B,OAAOD,EAAE,GAAGC,EAAE;IAClB,CAAC,CAAC;IACF1B,MAAM,CAACK,SAAS,CAACgB,SAAS,CAACM,IAAI,CAAC,IAAI,CAAC;EACzC,CAAC;EACD,OAAO5B,OAAO;AAClB,CAAC,CAACD,QAAQ,CAAE;AACZ,eAAeC,OAAO","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}