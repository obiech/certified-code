{"ast":null,"code":"import { __extends } from \"tslib\";\nimport * as _ from '@antv/util';\nimport { DODGE_RATIO, MARGIN_RATIO } from '../constant';\nimport Adjust from './adjust';\nvar Dodge = /** @class */function (_super) {\n  __extends(Dodge, _super);\n  function Dodge(cfg) {\n    var _this = _super.call(this, cfg) || this;\n    _this.cacheMap = {};\n    _this.adjustDataArray = [];\n    _this.mergeData = [];\n    var _a = cfg.marginRatio,\n      marginRatio = _a === void 0 ? MARGIN_RATIO : _a,\n      _b = cfg.dodgeRatio,\n      dodgeRatio = _b === void 0 ? DODGE_RATIO : _b,\n      dodgeBy = cfg.dodgeBy,\n      intervalPadding = cfg.intervalPadding,\n      dodgePadding = cfg.dodgePadding,\n      xDimensionLength = cfg.xDimensionLength,\n      groupNum = cfg.groupNum,\n      defaultSize = cfg.defaultSize,\n      maxColumnWidth = cfg.maxColumnWidth,\n      minColumnWidth = cfg.minColumnWidth,\n      columnWidthRatio = cfg.columnWidthRatio,\n      customOffset = cfg.customOffset;\n    _this.marginRatio = marginRatio;\n    _this.dodgeRatio = dodgeRatio;\n    _this.dodgeBy = dodgeBy;\n    _this.intervalPadding = intervalPadding;\n    _this.dodgePadding = dodgePadding;\n    _this.xDimensionLegenth = xDimensionLength;\n    _this.groupNum = groupNum;\n    _this.defaultSize = defaultSize;\n    _this.maxColumnWidth = maxColumnWidth;\n    _this.minColumnWidth = minColumnWidth;\n    _this.columnWidthRatio = columnWidthRatio;\n    _this.customOffset = customOffset;\n    return _this;\n  }\n  Dodge.prototype.process = function (groupDataArray) {\n    var groupedDataArray = _.clone(groupDataArray);\n    // 将数据数组展开一层\n    var mergeData = _.flatten(groupedDataArray);\n    var dodgeBy = this.dodgeBy;\n    // 如果指定了分组 dim 的字段\n    var adjustDataArray = dodgeBy ? _.group(mergeData, dodgeBy) : groupedDataArray;\n    this.cacheMap = {};\n    this.adjustDataArray = adjustDataArray;\n    this.mergeData = mergeData;\n    this.adjustData(adjustDataArray, mergeData);\n    this.adjustDataArray = [];\n    this.mergeData = [];\n    return groupedDataArray;\n  };\n  Dodge.prototype.adjustDim = function (dim, values, data, frameIndex) {\n    var _this = this;\n    var customOffset = this.customOffset;\n    var map = this.getDistribution(dim);\n    var groupData = this.groupData(data, dim); // 根据值分组\n    _.each(groupData, function (group, key) {\n      var range;\n      // xField 中只有一个值，不需要做 dodge\n      if (values.length === 1) {\n        range = {\n          pre: values[0] - 1,\n          next: values[0] + 1\n        };\n      } else {\n        // 如果有多个，则需要获取调整的范围\n        range = _this.getAdjustRange(dim, parseFloat(key), values);\n      }\n      _.each(group, function (d) {\n        var value = d[dim];\n        var valueArr = map[value];\n        var valIndex = valueArr.indexOf(frameIndex);\n        if (!_.isNil(customOffset)) {\n          var pre = range.pre,\n            next = range.next;\n          d[dim] = _.isFunction(customOffset) ? customOffset(d, range) : (pre + next) / 2 + customOffset;\n        } else {\n          d[dim] = _this.getDodgeOffset(range, valIndex, valueArr.length);\n        }\n      });\n    });\n    return [];\n  };\n  Dodge.prototype.getDodgeOffset = function (range, idx, len) {\n    var _a = this,\n      dodgeRatio = _a.dodgeRatio,\n      marginRatio = _a.marginRatio,\n      intervalPadding = _a.intervalPadding,\n      dodgePadding = _a.dodgePadding;\n    var pre = range.pre,\n      next = range.next;\n    var tickLength = next - pre;\n    var position;\n    // 分多种输入情况\n    if (!_.isNil(intervalPadding) && _.isNil(dodgePadding) && intervalPadding >= 0) {\n      // 仅配置intervalPadding\n      var offset = this.getIntervalOnlyOffset(len, idx);\n      position = pre + offset;\n    } else if (!_.isNil(dodgePadding) && _.isNil(intervalPadding) && dodgePadding >= 0) {\n      // 仅配置dodgePadding\n      var offset = this.getDodgeOnlyOffset(len, idx);\n      position = pre + offset;\n    } else if (!_.isNil(intervalPadding) && !_.isNil(dodgePadding) && intervalPadding >= 0 && dodgePadding >= 0) {\n      // 同时配置intervalPadding和dodgePadding\n      var offset = this.getIntervalAndDodgeOffset(len, idx);\n      position = pre + offset;\n    } else {\n      // 默认情况\n      var width = tickLength * dodgeRatio / len;\n      var margin = marginRatio * width;\n      var offset = 1 / 2 * (tickLength - len * width - (len - 1) * margin) + ((idx + 1) * width + idx * margin) - 1 / 2 * width - 1 / 2 * tickLength;\n      position = (pre + next) / 2 + offset;\n    }\n    return position;\n  };\n  Dodge.prototype.getIntervalOnlyOffset = function (len, idx) {\n    var _a = this,\n      defaultSize = _a.defaultSize,\n      intervalPadding = _a.intervalPadding,\n      xDimensionLegenth = _a.xDimensionLegenth,\n      groupNum = _a.groupNum,\n      dodgeRatio = _a.dodgeRatio,\n      maxColumnWidth = _a.maxColumnWidth,\n      minColumnWidth = _a.minColumnWidth,\n      columnWidthRatio = _a.columnWidthRatio;\n    var normalizedIntervalPadding = intervalPadding / xDimensionLegenth;\n    var normalizedDodgePadding = (1 - (groupNum - 1) * normalizedIntervalPadding) / groupNum * dodgeRatio / (len - 1);\n    var geomWidth = ((1 - normalizedIntervalPadding * (groupNum - 1)) / groupNum - normalizedDodgePadding * (len - 1)) / len;\n    // 根据columnWidthRatio/defaultSize/maxColumnWidth/minColumnWidth调整宽度\n    geomWidth = !_.isNil(columnWidthRatio) ? 1 / groupNum / len * columnWidthRatio : geomWidth;\n    if (!_.isNil(maxColumnWidth)) {\n      var normalizedMaxWidht = maxColumnWidth / xDimensionLegenth;\n      geomWidth = Math.min(geomWidth, normalizedMaxWidht);\n    }\n    if (!_.isNil(minColumnWidth)) {\n      var normalizedMinWidht = minColumnWidth / xDimensionLegenth;\n      geomWidth = Math.max(geomWidth, normalizedMinWidht);\n    }\n    geomWidth = defaultSize ? defaultSize / xDimensionLegenth : geomWidth;\n    // 调整组内间隔\n    normalizedDodgePadding = ((1 - (groupNum - 1) * normalizedIntervalPadding) / groupNum - len * geomWidth) / (len - 1);\n    var offset = ((1 / 2 + idx) * geomWidth + idx * normalizedDodgePadding + 1 / 2 * normalizedIntervalPadding) * groupNum - normalizedIntervalPadding / 2;\n    return offset;\n  };\n  Dodge.prototype.getDodgeOnlyOffset = function (len, idx) {\n    var _a = this,\n      defaultSize = _a.defaultSize,\n      dodgePadding = _a.dodgePadding,\n      xDimensionLegenth = _a.xDimensionLegenth,\n      groupNum = _a.groupNum,\n      marginRatio = _a.marginRatio,\n      maxColumnWidth = _a.maxColumnWidth,\n      minColumnWidth = _a.minColumnWidth,\n      columnWidthRatio = _a.columnWidthRatio;\n    var normalizedDodgePadding = dodgePadding / xDimensionLegenth;\n    var normalizedIntervalPadding = 1 * marginRatio / (groupNum - 1);\n    var geomWidth = ((1 - normalizedIntervalPadding * (groupNum - 1)) / groupNum - normalizedDodgePadding * (len - 1)) / len;\n    // 根据columnWidthRatio/defaultSize/maxColumnWidth/minColumnWidth调整宽度\n    geomWidth = columnWidthRatio ? 1 / groupNum / len * columnWidthRatio : geomWidth;\n    if (!_.isNil(maxColumnWidth)) {\n      var normalizedMaxWidht = maxColumnWidth / xDimensionLegenth;\n      geomWidth = Math.min(geomWidth, normalizedMaxWidht);\n    }\n    if (!_.isNil(minColumnWidth)) {\n      var normalizedMinWidht = minColumnWidth / xDimensionLegenth;\n      geomWidth = Math.max(geomWidth, normalizedMinWidht);\n    }\n    geomWidth = defaultSize ? defaultSize / xDimensionLegenth : geomWidth;\n    // 调整组间距\n    normalizedIntervalPadding = (1 - (geomWidth * len + normalizedDodgePadding * (len - 1)) * groupNum) / (groupNum - 1);\n    var offset = ((1 / 2 + idx) * geomWidth + idx * normalizedDodgePadding + 1 / 2 * normalizedIntervalPadding) * groupNum - normalizedIntervalPadding / 2;\n    return offset;\n  };\n  Dodge.prototype.getIntervalAndDodgeOffset = function (len, idx) {\n    var _a = this,\n      intervalPadding = _a.intervalPadding,\n      dodgePadding = _a.dodgePadding,\n      xDimensionLegenth = _a.xDimensionLegenth,\n      groupNum = _a.groupNum;\n    var normalizedIntervalPadding = intervalPadding / xDimensionLegenth;\n    var normalizedDodgePadding = dodgePadding / xDimensionLegenth;\n    var geomWidth = ((1 - normalizedIntervalPadding * (groupNum - 1)) / groupNum - normalizedDodgePadding * (len - 1)) / len;\n    var offset = ((1 / 2 + idx) * geomWidth + idx * normalizedDodgePadding + 1 / 2 * normalizedIntervalPadding) * groupNum - normalizedIntervalPadding / 2;\n    return offset;\n  };\n  Dodge.prototype.getDistribution = function (dim) {\n    var groupedDataArray = this.adjustDataArray;\n    var cacheMap = this.cacheMap;\n    var map = cacheMap[dim];\n    if (!map) {\n      map = {};\n      _.each(groupedDataArray, function (data, index) {\n        var values = _.valuesOfKey(data, dim);\n        if (!values.length) {\n          values.push(0);\n        }\n        _.each(values, function (val) {\n          if (!map[val]) {\n            map[val] = [];\n          }\n          map[val].push(index);\n        });\n      });\n      cacheMap[dim] = map;\n    }\n    return map;\n  };\n  return Dodge;\n}(Adjust);\nexport default Dodge;","map":{"version":3,"names":["__extends","_","DODGE_RATIO","MARGIN_RATIO","Adjust","Dodge","_super","cfg","_this","call","cacheMap","adjustDataArray","mergeData","_a","marginRatio","_b","dodgeRatio","dodgeBy","intervalPadding","dodgePadding","xDimensionLength","groupNum","defaultSize","maxColumnWidth","minColumnWidth","columnWidthRatio","customOffset","xDimensionLegenth","prototype","process","groupDataArray","groupedDataArray","clone","flatten","group","adjustData","adjustDim","dim","values","data","frameIndex","map","getDistribution","groupData","each","key","range","length","pre","next","getAdjustRange","parseFloat","d","value","valueArr","valIndex","indexOf","isNil","isFunction","getDodgeOffset","idx","len","tickLength","position","offset","getIntervalOnlyOffset","getDodgeOnlyOffset","getIntervalAndDodgeOffset","width","margin","normalizedIntervalPadding","normalizedDodgePadding","geomWidth","normalizedMaxWidht","Math","min","normalizedMinWidht","max","index","valuesOfKey","push","val"],"sources":["/Users/obiechina/Documents/ridy-flutter-full-taxi-solution 2/node_modules/@antv/adjust/esm/adjusts/dodge.js"],"sourcesContent":["import { __extends } from \"tslib\";\nimport * as _ from '@antv/util';\nimport { DODGE_RATIO, MARGIN_RATIO } from '../constant';\nimport Adjust from './adjust';\nvar Dodge = /** @class */ (function (_super) {\n    __extends(Dodge, _super);\n    function Dodge(cfg) {\n        var _this = _super.call(this, cfg) || this;\n        _this.cacheMap = {};\n        _this.adjustDataArray = [];\n        _this.mergeData = [];\n        var _a = cfg.marginRatio, marginRatio = _a === void 0 ? MARGIN_RATIO : _a, _b = cfg.dodgeRatio, dodgeRatio = _b === void 0 ? DODGE_RATIO : _b, dodgeBy = cfg.dodgeBy, intervalPadding = cfg.intervalPadding, dodgePadding = cfg.dodgePadding, xDimensionLength = cfg.xDimensionLength, groupNum = cfg.groupNum, defaultSize = cfg.defaultSize, maxColumnWidth = cfg.maxColumnWidth, minColumnWidth = cfg.minColumnWidth, columnWidthRatio = cfg.columnWidthRatio, customOffset = cfg.customOffset;\n        _this.marginRatio = marginRatio;\n        _this.dodgeRatio = dodgeRatio;\n        _this.dodgeBy = dodgeBy;\n        _this.intervalPadding = intervalPadding;\n        _this.dodgePadding = dodgePadding;\n        _this.xDimensionLegenth = xDimensionLength;\n        _this.groupNum = groupNum;\n        _this.defaultSize = defaultSize;\n        _this.maxColumnWidth = maxColumnWidth;\n        _this.minColumnWidth = minColumnWidth;\n        _this.columnWidthRatio = columnWidthRatio;\n        _this.customOffset = customOffset;\n        return _this;\n    }\n    Dodge.prototype.process = function (groupDataArray) {\n        var groupedDataArray = _.clone(groupDataArray);\n        // 将数据数组展开一层\n        var mergeData = _.flatten(groupedDataArray);\n        var dodgeBy = this.dodgeBy;\n        // 如果指定了分组 dim 的字段\n        var adjustDataArray = dodgeBy ? _.group(mergeData, dodgeBy) : groupedDataArray;\n        this.cacheMap = {};\n        this.adjustDataArray = adjustDataArray;\n        this.mergeData = mergeData;\n        this.adjustData(adjustDataArray, mergeData);\n        this.adjustDataArray = [];\n        this.mergeData = [];\n        return groupedDataArray;\n    };\n    Dodge.prototype.adjustDim = function (dim, values, data, frameIndex) {\n        var _this = this;\n        var customOffset = this.customOffset;\n        var map = this.getDistribution(dim);\n        var groupData = this.groupData(data, dim); // 根据值分组\n        _.each(groupData, function (group, key) {\n            var range;\n            // xField 中只有一个值，不需要做 dodge\n            if (values.length === 1) {\n                range = {\n                    pre: values[0] - 1,\n                    next: values[0] + 1,\n                };\n            }\n            else {\n                // 如果有多个，则需要获取调整的范围\n                range = _this.getAdjustRange(dim, parseFloat(key), values);\n            }\n            _.each(group, function (d) {\n                var value = d[dim];\n                var valueArr = map[value];\n                var valIndex = valueArr.indexOf(frameIndex);\n                if (!_.isNil(customOffset)) {\n                    var pre = range.pre, next = range.next;\n                    d[dim] = _.isFunction(customOffset) ? customOffset(d, range) : (pre + next) / 2 + customOffset;\n                }\n                else {\n                    d[dim] = _this.getDodgeOffset(range, valIndex, valueArr.length);\n                }\n            });\n        });\n        return [];\n    };\n    Dodge.prototype.getDodgeOffset = function (range, idx, len) {\n        var _a = this, dodgeRatio = _a.dodgeRatio, marginRatio = _a.marginRatio, intervalPadding = _a.intervalPadding, dodgePadding = _a.dodgePadding;\n        var pre = range.pre, next = range.next;\n        var tickLength = next - pre;\n        var position;\n        // 分多种输入情况\n        if (!_.isNil(intervalPadding) && _.isNil(dodgePadding) && intervalPadding >= 0) {\n            // 仅配置intervalPadding\n            var offset = this.getIntervalOnlyOffset(len, idx);\n            position = pre + offset;\n        }\n        else if (!_.isNil(dodgePadding) && _.isNil(intervalPadding) && dodgePadding >= 0) {\n            // 仅配置dodgePadding\n            var offset = this.getDodgeOnlyOffset(len, idx);\n            position = pre + offset;\n        }\n        else if (!_.isNil(intervalPadding) &&\n            !_.isNil(dodgePadding) &&\n            intervalPadding >= 0 &&\n            dodgePadding >= 0) {\n            // 同时配置intervalPadding和dodgePadding\n            var offset = this.getIntervalAndDodgeOffset(len, idx);\n            position = pre + offset;\n        }\n        else {\n            // 默认情况\n            var width = (tickLength * dodgeRatio) / len;\n            var margin = marginRatio * width;\n            var offset = (1 / 2) * (tickLength - len * width - (len - 1) * margin) +\n                ((idx + 1) * width + idx * margin) -\n                (1 / 2) * width -\n                (1 / 2) * tickLength;\n            position = (pre + next) / 2 + offset;\n        }\n        return position;\n    };\n    Dodge.prototype.getIntervalOnlyOffset = function (len, idx) {\n        var _a = this, defaultSize = _a.defaultSize, intervalPadding = _a.intervalPadding, xDimensionLegenth = _a.xDimensionLegenth, groupNum = _a.groupNum, dodgeRatio = _a.dodgeRatio, maxColumnWidth = _a.maxColumnWidth, minColumnWidth = _a.minColumnWidth, columnWidthRatio = _a.columnWidthRatio;\n        var normalizedIntervalPadding = intervalPadding / xDimensionLegenth;\n        var normalizedDodgePadding = (1 - (groupNum - 1) * normalizedIntervalPadding) / groupNum * dodgeRatio / (len - 1);\n        var geomWidth = ((1 - normalizedIntervalPadding * (groupNum - 1)) / groupNum - normalizedDodgePadding * (len - 1)) / len;\n        // 根据columnWidthRatio/defaultSize/maxColumnWidth/minColumnWidth调整宽度\n        geomWidth = (!_.isNil(columnWidthRatio)) ? 1 / groupNum / len * columnWidthRatio : geomWidth;\n        if (!_.isNil(maxColumnWidth)) {\n            var normalizedMaxWidht = maxColumnWidth / xDimensionLegenth;\n            geomWidth = Math.min(geomWidth, normalizedMaxWidht);\n        }\n        if (!_.isNil(minColumnWidth)) {\n            var normalizedMinWidht = minColumnWidth / xDimensionLegenth;\n            geomWidth = Math.max(geomWidth, normalizedMinWidht);\n        }\n        geomWidth = defaultSize ? (defaultSize / xDimensionLegenth) : geomWidth;\n        // 调整组内间隔\n        normalizedDodgePadding = ((1 - (groupNum - 1) * normalizedIntervalPadding) / groupNum - len * geomWidth) / (len - 1);\n        var offset = ((1 / 2 + idx) * geomWidth + idx * normalizedDodgePadding +\n            (1 / 2) * normalizedIntervalPadding) * groupNum -\n            normalizedIntervalPadding / 2;\n        return offset;\n    };\n    Dodge.prototype.getDodgeOnlyOffset = function (len, idx) {\n        var _a = this, defaultSize = _a.defaultSize, dodgePadding = _a.dodgePadding, xDimensionLegenth = _a.xDimensionLegenth, groupNum = _a.groupNum, marginRatio = _a.marginRatio, maxColumnWidth = _a.maxColumnWidth, minColumnWidth = _a.minColumnWidth, columnWidthRatio = _a.columnWidthRatio;\n        var normalizedDodgePadding = dodgePadding / xDimensionLegenth;\n        var normalizedIntervalPadding = 1 * marginRatio / (groupNum - 1);\n        var geomWidth = ((1 - normalizedIntervalPadding * (groupNum - 1)) / groupNum - normalizedDodgePadding * (len - 1)) / len;\n        // 根据columnWidthRatio/defaultSize/maxColumnWidth/minColumnWidth调整宽度\n        geomWidth = columnWidthRatio ? 1 / groupNum / len * columnWidthRatio : geomWidth;\n        if (!_.isNil(maxColumnWidth)) {\n            var normalizedMaxWidht = maxColumnWidth / xDimensionLegenth;\n            geomWidth = Math.min(geomWidth, normalizedMaxWidht);\n        }\n        if (!_.isNil(minColumnWidth)) {\n            var normalizedMinWidht = minColumnWidth / xDimensionLegenth;\n            geomWidth = Math.max(geomWidth, normalizedMinWidht);\n        }\n        geomWidth = defaultSize ? (defaultSize / xDimensionLegenth) : geomWidth;\n        // 调整组间距\n        normalizedIntervalPadding = (1 - (geomWidth * len + normalizedDodgePadding * (len - 1)) * groupNum) / (groupNum - 1);\n        var offset = ((1 / 2 + idx) * geomWidth + idx * normalizedDodgePadding +\n            (1 / 2) * normalizedIntervalPadding) * groupNum -\n            normalizedIntervalPadding / 2;\n        return offset;\n    };\n    Dodge.prototype.getIntervalAndDodgeOffset = function (len, idx) {\n        var _a = this, intervalPadding = _a.intervalPadding, dodgePadding = _a.dodgePadding, xDimensionLegenth = _a.xDimensionLegenth, groupNum = _a.groupNum;\n        var normalizedIntervalPadding = intervalPadding / xDimensionLegenth;\n        var normalizedDodgePadding = dodgePadding / xDimensionLegenth;\n        var geomWidth = ((1 - normalizedIntervalPadding * (groupNum - 1)) / groupNum - normalizedDodgePadding * (len - 1)) / len;\n        var offset = ((1 / 2 + idx) * geomWidth + idx * normalizedDodgePadding +\n            (1 / 2) * normalizedIntervalPadding) * groupNum -\n            normalizedIntervalPadding / 2;\n        return offset;\n    };\n    Dodge.prototype.getDistribution = function (dim) {\n        var groupedDataArray = this.adjustDataArray;\n        var cacheMap = this.cacheMap;\n        var map = cacheMap[dim];\n        if (!map) {\n            map = {};\n            _.each(groupedDataArray, function (data, index) {\n                var values = _.valuesOfKey(data, dim);\n                if (!values.length) {\n                    values.push(0);\n                }\n                _.each(values, function (val) {\n                    if (!map[val]) {\n                        map[val] = [];\n                    }\n                    map[val].push(index);\n                });\n            });\n            cacheMap[dim] = map;\n        }\n        return map;\n    };\n    return Dodge;\n}(Adjust));\nexport default Dodge;\n"],"mappings":"AAAA,SAASA,SAAS,QAAQ,OAAO;AACjC,OAAO,KAAKC,CAAC,MAAM,YAAY;AAC/B,SAASC,WAAW,EAAEC,YAAY,QAAQ,aAAa;AACvD,OAAOC,MAAM,MAAM,UAAU;AAC7B,IAAIC,KAAK,GAAG,aAAe,UAAUC,MAAM,EAAE;EACzCN,SAAS,CAACK,KAAK,EAAEC,MAAM,CAAC;EACxB,SAASD,KAAKA,CAACE,GAAG,EAAE;IAChB,IAAIC,KAAK,GAAGF,MAAM,CAACG,IAAI,CAAC,IAAI,EAAEF,GAAG,CAAC,IAAI,IAAI;IAC1CC,KAAK,CAACE,QAAQ,GAAG,CAAC,CAAC;IACnBF,KAAK,CAACG,eAAe,GAAG,EAAE;IAC1BH,KAAK,CAACI,SAAS,GAAG,EAAE;IACpB,IAAIC,EAAE,GAAGN,GAAG,CAACO,WAAW;MAAEA,WAAW,GAAGD,EAAE,KAAK,KAAK,CAAC,GAAGV,YAAY,GAAGU,EAAE;MAAEE,EAAE,GAAGR,GAAG,CAACS,UAAU;MAAEA,UAAU,GAAGD,EAAE,KAAK,KAAK,CAAC,GAAGb,WAAW,GAAGa,EAAE;MAAEE,OAAO,GAAGV,GAAG,CAACU,OAAO;MAAEC,eAAe,GAAGX,GAAG,CAACW,eAAe;MAAEC,YAAY,GAAGZ,GAAG,CAACY,YAAY;MAAEC,gBAAgB,GAAGb,GAAG,CAACa,gBAAgB;MAAEC,QAAQ,GAAGd,GAAG,CAACc,QAAQ;MAAEC,WAAW,GAAGf,GAAG,CAACe,WAAW;MAAEC,cAAc,GAAGhB,GAAG,CAACgB,cAAc;MAAEC,cAAc,GAAGjB,GAAG,CAACiB,cAAc;MAAEC,gBAAgB,GAAGlB,GAAG,CAACkB,gBAAgB;MAAEC,YAAY,GAAGnB,GAAG,CAACmB,YAAY;IACjelB,KAAK,CAACM,WAAW,GAAGA,WAAW;IAC/BN,KAAK,CAACQ,UAAU,GAAGA,UAAU;IAC7BR,KAAK,CAACS,OAAO,GAAGA,OAAO;IACvBT,KAAK,CAACU,eAAe,GAAGA,eAAe;IACvCV,KAAK,CAACW,YAAY,GAAGA,YAAY;IACjCX,KAAK,CAACmB,iBAAiB,GAAGP,gBAAgB;IAC1CZ,KAAK,CAACa,QAAQ,GAAGA,QAAQ;IACzBb,KAAK,CAACc,WAAW,GAAGA,WAAW;IAC/Bd,KAAK,CAACe,cAAc,GAAGA,cAAc;IACrCf,KAAK,CAACgB,cAAc,GAAGA,cAAc;IACrChB,KAAK,CAACiB,gBAAgB,GAAGA,gBAAgB;IACzCjB,KAAK,CAACkB,YAAY,GAAGA,YAAY;IACjC,OAAOlB,KAAK;EAChB;EACAH,KAAK,CAACuB,SAAS,CAACC,OAAO,GAAG,UAAUC,cAAc,EAAE;IAChD,IAAIC,gBAAgB,GAAG9B,CAAC,CAAC+B,KAAK,CAACF,cAAc,CAAC;IAC9C;IACA,IAAIlB,SAAS,GAAGX,CAAC,CAACgC,OAAO,CAACF,gBAAgB,CAAC;IAC3C,IAAId,OAAO,GAAG,IAAI,CAACA,OAAO;IAC1B;IACA,IAAIN,eAAe,GAAGM,OAAO,GAAGhB,CAAC,CAACiC,KAAK,CAACtB,SAAS,EAAEK,OAAO,CAAC,GAAGc,gBAAgB;IAC9E,IAAI,CAACrB,QAAQ,GAAG,CAAC,CAAC;IAClB,IAAI,CAACC,eAAe,GAAGA,eAAe;IACtC,IAAI,CAACC,SAAS,GAAGA,SAAS;IAC1B,IAAI,CAACuB,UAAU,CAACxB,eAAe,EAAEC,SAAS,CAAC;IAC3C,IAAI,CAACD,eAAe,GAAG,EAAE;IACzB,IAAI,CAACC,SAAS,GAAG,EAAE;IACnB,OAAOmB,gBAAgB;EAC3B,CAAC;EACD1B,KAAK,CAACuB,SAAS,CAACQ,SAAS,GAAG,UAAUC,GAAG,EAAEC,MAAM,EAAEC,IAAI,EAAEC,UAAU,EAAE;IACjE,IAAIhC,KAAK,GAAG,IAAI;IAChB,IAAIkB,YAAY,GAAG,IAAI,CAACA,YAAY;IACpC,IAAIe,GAAG,GAAG,IAAI,CAACC,eAAe,CAACL,GAAG,CAAC;IACnC,IAAIM,SAAS,GAAG,IAAI,CAACA,SAAS,CAACJ,IAAI,EAAEF,GAAG,CAAC,CAAC,CAAC;IAC3CpC,CAAC,CAAC2C,IAAI,CAACD,SAAS,EAAE,UAAUT,KAAK,EAAEW,GAAG,EAAE;MACpC,IAAIC,KAAK;MACT;MACA,IAAIR,MAAM,CAACS,MAAM,KAAK,CAAC,EAAE;QACrBD,KAAK,GAAG;UACJE,GAAG,EAAEV,MAAM,CAAC,CAAC,CAAC,GAAG,CAAC;UAClBW,IAAI,EAAEX,MAAM,CAAC,CAAC,CAAC,GAAG;QACtB,CAAC;MACL,CAAC,MACI;QACD;QACAQ,KAAK,GAAGtC,KAAK,CAAC0C,cAAc,CAACb,GAAG,EAAEc,UAAU,CAACN,GAAG,CAAC,EAAEP,MAAM,CAAC;MAC9D;MACArC,CAAC,CAAC2C,IAAI,CAACV,KAAK,EAAE,UAAUkB,CAAC,EAAE;QACvB,IAAIC,KAAK,GAAGD,CAAC,CAACf,GAAG,CAAC;QAClB,IAAIiB,QAAQ,GAAGb,GAAG,CAACY,KAAK,CAAC;QACzB,IAAIE,QAAQ,GAAGD,QAAQ,CAACE,OAAO,CAAChB,UAAU,CAAC;QAC3C,IAAI,CAACvC,CAAC,CAACwD,KAAK,CAAC/B,YAAY,CAAC,EAAE;UACxB,IAAIsB,GAAG,GAAGF,KAAK,CAACE,GAAG;YAAEC,IAAI,GAAGH,KAAK,CAACG,IAAI;UACtCG,CAAC,CAACf,GAAG,CAAC,GAAGpC,CAAC,CAACyD,UAAU,CAAChC,YAAY,CAAC,GAAGA,YAAY,CAAC0B,CAAC,EAAEN,KAAK,CAAC,GAAG,CAACE,GAAG,GAAGC,IAAI,IAAI,CAAC,GAAGvB,YAAY;QAClG,CAAC,MACI;UACD0B,CAAC,CAACf,GAAG,CAAC,GAAG7B,KAAK,CAACmD,cAAc,CAACb,KAAK,EAAES,QAAQ,EAAED,QAAQ,CAACP,MAAM,CAAC;QACnE;MACJ,CAAC,CAAC;IACN,CAAC,CAAC;IACF,OAAO,EAAE;EACb,CAAC;EACD1C,KAAK,CAACuB,SAAS,CAAC+B,cAAc,GAAG,UAAUb,KAAK,EAAEc,GAAG,EAAEC,GAAG,EAAE;IACxD,IAAIhD,EAAE,GAAG,IAAI;MAAEG,UAAU,GAAGH,EAAE,CAACG,UAAU;MAAEF,WAAW,GAAGD,EAAE,CAACC,WAAW;MAAEI,eAAe,GAAGL,EAAE,CAACK,eAAe;MAAEC,YAAY,GAAGN,EAAE,CAACM,YAAY;IAC7I,IAAI6B,GAAG,GAAGF,KAAK,CAACE,GAAG;MAAEC,IAAI,GAAGH,KAAK,CAACG,IAAI;IACtC,IAAIa,UAAU,GAAGb,IAAI,GAAGD,GAAG;IAC3B,IAAIe,QAAQ;IACZ;IACA,IAAI,CAAC9D,CAAC,CAACwD,KAAK,CAACvC,eAAe,CAAC,IAAIjB,CAAC,CAACwD,KAAK,CAACtC,YAAY,CAAC,IAAID,eAAe,IAAI,CAAC,EAAE;MAC5E;MACA,IAAI8C,MAAM,GAAG,IAAI,CAACC,qBAAqB,CAACJ,GAAG,EAAED,GAAG,CAAC;MACjDG,QAAQ,GAAGf,GAAG,GAAGgB,MAAM;IAC3B,CAAC,MACI,IAAI,CAAC/D,CAAC,CAACwD,KAAK,CAACtC,YAAY,CAAC,IAAIlB,CAAC,CAACwD,KAAK,CAACvC,eAAe,CAAC,IAAIC,YAAY,IAAI,CAAC,EAAE;MAC9E;MACA,IAAI6C,MAAM,GAAG,IAAI,CAACE,kBAAkB,CAACL,GAAG,EAAED,GAAG,CAAC;MAC9CG,QAAQ,GAAGf,GAAG,GAAGgB,MAAM;IAC3B,CAAC,MACI,IAAI,CAAC/D,CAAC,CAACwD,KAAK,CAACvC,eAAe,CAAC,IAC9B,CAACjB,CAAC,CAACwD,KAAK,CAACtC,YAAY,CAAC,IACtBD,eAAe,IAAI,CAAC,IACpBC,YAAY,IAAI,CAAC,EAAE;MACnB;MACA,IAAI6C,MAAM,GAAG,IAAI,CAACG,yBAAyB,CAACN,GAAG,EAAED,GAAG,CAAC;MACrDG,QAAQ,GAAGf,GAAG,GAAGgB,MAAM;IAC3B,CAAC,MACI;MACD;MACA,IAAII,KAAK,GAAIN,UAAU,GAAG9C,UAAU,GAAI6C,GAAG;MAC3C,IAAIQ,MAAM,GAAGvD,WAAW,GAAGsD,KAAK;MAChC,IAAIJ,MAAM,GAAI,CAAC,GAAG,CAAC,IAAKF,UAAU,GAAGD,GAAG,GAAGO,KAAK,GAAG,CAACP,GAAG,GAAG,CAAC,IAAIQ,MAAM,CAAC,IACjE,CAACT,GAAG,GAAG,CAAC,IAAIQ,KAAK,GAAGR,GAAG,GAAGS,MAAM,CAAC,GACjC,CAAC,GAAG,CAAC,GAAID,KAAK,GACd,CAAC,GAAG,CAAC,GAAIN,UAAU;MACxBC,QAAQ,GAAG,CAACf,GAAG,GAAGC,IAAI,IAAI,CAAC,GAAGe,MAAM;IACxC;IACA,OAAOD,QAAQ;EACnB,CAAC;EACD1D,KAAK,CAACuB,SAAS,CAACqC,qBAAqB,GAAG,UAAUJ,GAAG,EAAED,GAAG,EAAE;IACxD,IAAI/C,EAAE,GAAG,IAAI;MAAES,WAAW,GAAGT,EAAE,CAACS,WAAW;MAAEJ,eAAe,GAAGL,EAAE,CAACK,eAAe;MAAES,iBAAiB,GAAGd,EAAE,CAACc,iBAAiB;MAAEN,QAAQ,GAAGR,EAAE,CAACQ,QAAQ;MAAEL,UAAU,GAAGH,EAAE,CAACG,UAAU;MAAEO,cAAc,GAAGV,EAAE,CAACU,cAAc;MAAEC,cAAc,GAAGX,EAAE,CAACW,cAAc;MAAEC,gBAAgB,GAAGZ,EAAE,CAACY,gBAAgB;IAC/R,IAAI6C,yBAAyB,GAAGpD,eAAe,GAAGS,iBAAiB;IACnE,IAAI4C,sBAAsB,GAAG,CAAC,CAAC,GAAG,CAAClD,QAAQ,GAAG,CAAC,IAAIiD,yBAAyB,IAAIjD,QAAQ,GAAGL,UAAU,IAAI6C,GAAG,GAAG,CAAC,CAAC;IACjH,IAAIW,SAAS,GAAG,CAAC,CAAC,CAAC,GAAGF,yBAAyB,IAAIjD,QAAQ,GAAG,CAAC,CAAC,IAAIA,QAAQ,GAAGkD,sBAAsB,IAAIV,GAAG,GAAG,CAAC,CAAC,IAAIA,GAAG;IACxH;IACAW,SAAS,GAAI,CAACvE,CAAC,CAACwD,KAAK,CAAChC,gBAAgB,CAAC,GAAI,CAAC,GAAGJ,QAAQ,GAAGwC,GAAG,GAAGpC,gBAAgB,GAAG+C,SAAS;IAC5F,IAAI,CAACvE,CAAC,CAACwD,KAAK,CAAClC,cAAc,CAAC,EAAE;MAC1B,IAAIkD,kBAAkB,GAAGlD,cAAc,GAAGI,iBAAiB;MAC3D6C,SAAS,GAAGE,IAAI,CAACC,GAAG,CAACH,SAAS,EAAEC,kBAAkB,CAAC;IACvD;IACA,IAAI,CAACxE,CAAC,CAACwD,KAAK,CAACjC,cAAc,CAAC,EAAE;MAC1B,IAAIoD,kBAAkB,GAAGpD,cAAc,GAAGG,iBAAiB;MAC3D6C,SAAS,GAAGE,IAAI,CAACG,GAAG,CAACL,SAAS,EAAEI,kBAAkB,CAAC;IACvD;IACAJ,SAAS,GAAGlD,WAAW,GAAIA,WAAW,GAAGK,iBAAiB,GAAI6C,SAAS;IACvE;IACAD,sBAAsB,GAAG,CAAC,CAAC,CAAC,GAAG,CAAClD,QAAQ,GAAG,CAAC,IAAIiD,yBAAyB,IAAIjD,QAAQ,GAAGwC,GAAG,GAAGW,SAAS,KAAKX,GAAG,GAAG,CAAC,CAAC;IACpH,IAAIG,MAAM,GAAG,CAAC,CAAC,CAAC,GAAG,CAAC,GAAGJ,GAAG,IAAIY,SAAS,GAAGZ,GAAG,GAAGW,sBAAsB,GACjE,CAAC,GAAG,CAAC,GAAID,yBAAyB,IAAIjD,QAAQ,GAC/CiD,yBAAyB,GAAG,CAAC;IACjC,OAAON,MAAM;EACjB,CAAC;EACD3D,KAAK,CAACuB,SAAS,CAACsC,kBAAkB,GAAG,UAAUL,GAAG,EAAED,GAAG,EAAE;IACrD,IAAI/C,EAAE,GAAG,IAAI;MAAES,WAAW,GAAGT,EAAE,CAACS,WAAW;MAAEH,YAAY,GAAGN,EAAE,CAACM,YAAY;MAAEQ,iBAAiB,GAAGd,EAAE,CAACc,iBAAiB;MAAEN,QAAQ,GAAGR,EAAE,CAACQ,QAAQ;MAAEP,WAAW,GAAGD,EAAE,CAACC,WAAW;MAAES,cAAc,GAAGV,EAAE,CAACU,cAAc;MAAEC,cAAc,GAAGX,EAAE,CAACW,cAAc;MAAEC,gBAAgB,GAAGZ,EAAE,CAACY,gBAAgB;IAC3R,IAAI8C,sBAAsB,GAAGpD,YAAY,GAAGQ,iBAAiB;IAC7D,IAAI2C,yBAAyB,GAAG,CAAC,GAAGxD,WAAW,IAAIO,QAAQ,GAAG,CAAC,CAAC;IAChE,IAAImD,SAAS,GAAG,CAAC,CAAC,CAAC,GAAGF,yBAAyB,IAAIjD,QAAQ,GAAG,CAAC,CAAC,IAAIA,QAAQ,GAAGkD,sBAAsB,IAAIV,GAAG,GAAG,CAAC,CAAC,IAAIA,GAAG;IACxH;IACAW,SAAS,GAAG/C,gBAAgB,GAAG,CAAC,GAAGJ,QAAQ,GAAGwC,GAAG,GAAGpC,gBAAgB,GAAG+C,SAAS;IAChF,IAAI,CAACvE,CAAC,CAACwD,KAAK,CAAClC,cAAc,CAAC,EAAE;MAC1B,IAAIkD,kBAAkB,GAAGlD,cAAc,GAAGI,iBAAiB;MAC3D6C,SAAS,GAAGE,IAAI,CAACC,GAAG,CAACH,SAAS,EAAEC,kBAAkB,CAAC;IACvD;IACA,IAAI,CAACxE,CAAC,CAACwD,KAAK,CAACjC,cAAc,CAAC,EAAE;MAC1B,IAAIoD,kBAAkB,GAAGpD,cAAc,GAAGG,iBAAiB;MAC3D6C,SAAS,GAAGE,IAAI,CAACG,GAAG,CAACL,SAAS,EAAEI,kBAAkB,CAAC;IACvD;IACAJ,SAAS,GAAGlD,WAAW,GAAIA,WAAW,GAAGK,iBAAiB,GAAI6C,SAAS;IACvE;IACAF,yBAAyB,GAAG,CAAC,CAAC,GAAG,CAACE,SAAS,GAAGX,GAAG,GAAGU,sBAAsB,IAAIV,GAAG,GAAG,CAAC,CAAC,IAAIxC,QAAQ,KAAKA,QAAQ,GAAG,CAAC,CAAC;IACpH,IAAI2C,MAAM,GAAG,CAAC,CAAC,CAAC,GAAG,CAAC,GAAGJ,GAAG,IAAIY,SAAS,GAAGZ,GAAG,GAAGW,sBAAsB,GACjE,CAAC,GAAG,CAAC,GAAID,yBAAyB,IAAIjD,QAAQ,GAC/CiD,yBAAyB,GAAG,CAAC;IACjC,OAAON,MAAM;EACjB,CAAC;EACD3D,KAAK,CAACuB,SAAS,CAACuC,yBAAyB,GAAG,UAAUN,GAAG,EAAED,GAAG,EAAE;IAC5D,IAAI/C,EAAE,GAAG,IAAI;MAAEK,eAAe,GAAGL,EAAE,CAACK,eAAe;MAAEC,YAAY,GAAGN,EAAE,CAACM,YAAY;MAAEQ,iBAAiB,GAAGd,EAAE,CAACc,iBAAiB;MAAEN,QAAQ,GAAGR,EAAE,CAACQ,QAAQ;IACrJ,IAAIiD,yBAAyB,GAAGpD,eAAe,GAAGS,iBAAiB;IACnE,IAAI4C,sBAAsB,GAAGpD,YAAY,GAAGQ,iBAAiB;IAC7D,IAAI6C,SAAS,GAAG,CAAC,CAAC,CAAC,GAAGF,yBAAyB,IAAIjD,QAAQ,GAAG,CAAC,CAAC,IAAIA,QAAQ,GAAGkD,sBAAsB,IAAIV,GAAG,GAAG,CAAC,CAAC,IAAIA,GAAG;IACxH,IAAIG,MAAM,GAAG,CAAC,CAAC,CAAC,GAAG,CAAC,GAAGJ,GAAG,IAAIY,SAAS,GAAGZ,GAAG,GAAGW,sBAAsB,GACjE,CAAC,GAAG,CAAC,GAAID,yBAAyB,IAAIjD,QAAQ,GAC/CiD,yBAAyB,GAAG,CAAC;IACjC,OAAON,MAAM;EACjB,CAAC;EACD3D,KAAK,CAACuB,SAAS,CAACc,eAAe,GAAG,UAAUL,GAAG,EAAE;IAC7C,IAAIN,gBAAgB,GAAG,IAAI,CAACpB,eAAe;IAC3C,IAAID,QAAQ,GAAG,IAAI,CAACA,QAAQ;IAC5B,IAAI+B,GAAG,GAAG/B,QAAQ,CAAC2B,GAAG,CAAC;IACvB,IAAI,CAACI,GAAG,EAAE;MACNA,GAAG,GAAG,CAAC,CAAC;MACRxC,CAAC,CAAC2C,IAAI,CAACb,gBAAgB,EAAE,UAAUQ,IAAI,EAAEuC,KAAK,EAAE;QAC5C,IAAIxC,MAAM,GAAGrC,CAAC,CAAC8E,WAAW,CAACxC,IAAI,EAAEF,GAAG,CAAC;QACrC,IAAI,CAACC,MAAM,CAACS,MAAM,EAAE;UAChBT,MAAM,CAAC0C,IAAI,CAAC,CAAC,CAAC;QAClB;QACA/E,CAAC,CAAC2C,IAAI,CAACN,MAAM,EAAE,UAAU2C,GAAG,EAAE;UAC1B,IAAI,CAACxC,GAAG,CAACwC,GAAG,CAAC,EAAE;YACXxC,GAAG,CAACwC,GAAG,CAAC,GAAG,EAAE;UACjB;UACAxC,GAAG,CAACwC,GAAG,CAAC,CAACD,IAAI,CAACF,KAAK,CAAC;QACxB,CAAC,CAAC;MACN,CAAC,CAAC;MACFpE,QAAQ,CAAC2B,GAAG,CAAC,GAAGI,GAAG;IACvB;IACA,OAAOA,GAAG;EACd,CAAC;EACD,OAAOpC,KAAK;AAChB,CAAC,CAACD,MAAM,CAAE;AACV,eAAeC,KAAK","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}