{"ast":null,"code":"import { getSectorPath } from './graphics';\nimport { isBetween } from './helper';\nimport { BBox } from './bbox';\n/**\n * @ignore\n * Gets x dimension length\n * @param coordinate\n * @returns x dimension length\n */\nexport function getXDimensionLength(coordinate) {\n  if (coordinate.isPolar && !coordinate.isTransposed) {\n    // 极坐标系下 width 为弧长\n    return (coordinate.endAngle - coordinate.startAngle) * coordinate.getRadius();\n  }\n  // 直角坐标系\n  var start = coordinate.convert({\n    x: 0,\n    y: 0\n  });\n  var end = coordinate.convert({\n    x: 1,\n    y: 0\n  });\n  // 坐标系有可能发生 transpose 等变换，所有通过两点之间的距离进行计算\n  return Math.sqrt(Math.pow(end.x - start.x, 2) + Math.pow(end.y - start.y, 2));\n}\n/**\n * @ignore\n * Determines whether full circle is\n * @param coordinate\n * @returns true if full circle\n */\nexport function isFullCircle(coordinate) {\n  if (coordinate.isPolar) {\n    var startAngle = coordinate.startAngle,\n      endAngle = coordinate.endAngle;\n    return endAngle - startAngle === Math.PI * 2;\n  }\n  return false;\n}\n/**\n * @ignore\n * 获取当前点到坐标系圆心的距离\n * @param coordinate 坐标系\n * @param point 当前点\n * @returns distance to center\n */\nexport function getDistanceToCenter(coordinate, point) {\n  var center = coordinate.getCenter();\n  return Math.sqrt(Math.pow(point.x - center.x, 2) + Math.pow(point.y - center.y, 2));\n}\n/**\n * @ignore\n * 坐标点是否在坐标系中\n * @param coordinate\n * @param point\n */\nexport function isPointInCoordinate(coordinate, point) {\n  var result = false;\n  if (coordinate) {\n    if (coordinate.type === 'theta') {\n      var start = coordinate.start,\n        end = coordinate.end;\n      result = isBetween(point.x, start.x, end.x) && isBetween(point.y, start.y, end.y);\n    } else {\n      var invertPoint = coordinate.invert(point);\n      result = isBetween(invertPoint.x, 0, 1) && isBetween(invertPoint.y, 0, 1);\n    }\n  }\n  return result;\n}\n/**\n * @ignore\n * 获取点到圆心的连线与水平方向的夹角\n */\nexport function getAngleByPoint(coordinate, point) {\n  var center = coordinate.getCenter();\n  return Math.atan2(point.y - center.y, point.x - center.x);\n}\n/**\n * @ignore\n * 获取同坐标系范围相同的剪切区域\n * @param coordinate\n * @returns\n */\nexport function getCoordinateClipCfg(coordinate, margin) {\n  if (margin === void 0) {\n    margin = 0;\n  }\n  var start = coordinate.start,\n    end = coordinate.end;\n  var width = coordinate.getWidth();\n  var height = coordinate.getHeight();\n  if (coordinate.isPolar) {\n    var startAngle_1 = coordinate.startAngle,\n      endAngle_1 = coordinate.endAngle;\n    var center_1 = coordinate.getCenter();\n    var radius_1 = coordinate.getRadius();\n    return {\n      type: 'path',\n      startState: {\n        path: getSectorPath(center_1.x, center_1.y, radius_1 + margin, startAngle_1, startAngle_1)\n      },\n      endState: function (ratio) {\n        var diff = (endAngle_1 - startAngle_1) * ratio + startAngle_1;\n        var path = getSectorPath(center_1.x, center_1.y, radius_1 + margin, startAngle_1, diff);\n        return {\n          path: path\n        };\n      },\n      attrs: {\n        path: getSectorPath(center_1.x, center_1.y, radius_1 + margin, startAngle_1, endAngle_1)\n      }\n    };\n  }\n  var endState;\n  if (coordinate.isTransposed) {\n    endState = {\n      height: height + margin * 2\n    };\n  } else {\n    endState = {\n      width: width + margin * 2\n    };\n  }\n  return {\n    type: 'rect',\n    startState: {\n      x: start.x - margin,\n      y: end.y - margin,\n      width: coordinate.isTransposed ? width + margin * 2 : 0,\n      height: coordinate.isTransposed ? 0 : height + margin * 2\n    },\n    endState: endState,\n    attrs: {\n      x: start.x - margin,\n      y: end.y - margin,\n      width: width + margin * 2,\n      height: height + margin * 2\n    }\n  };\n}\n/**\n * 获取坐标系范围的 BBox\n * @param coordinate\n * @param margin\n */\nexport function getCoordinateBBox(coordinate, margin) {\n  if (margin === void 0) {\n    margin = 0;\n  }\n  var start = coordinate.start,\n    end = coordinate.end;\n  var width = coordinate.getWidth();\n  var height = coordinate.getHeight();\n  var minX = Math.min(start.x, end.x);\n  var minY = Math.min(start.y, end.y);\n  return BBox.fromRange(minX - margin, minY - margin, minX + width + margin, minY + height + margin);\n}","map":{"version":3,"names":["getSectorPath","isBetween","BBox","getXDimensionLength","coordinate","isPolar","isTransposed","endAngle","startAngle","getRadius","start","convert","x","y","end","Math","sqrt","pow","isFullCircle","PI","getDistanceToCenter","point","center","getCenter","isPointInCoordinate","result","type","invertPoint","invert","getAngleByPoint","atan2","getCoordinateClipCfg","margin","width","getWidth","height","getHeight","startAngle_1","endAngle_1","center_1","radius_1","startState","path","endState","ratio","diff","attrs","getCoordinateBBox","minX","min","minY","fromRange"],"sources":["/Users/obiechina/Documents/ridy-flutter-full-taxi-solution 2/node_modules/@antv/g2/esm/util/coordinate.js"],"sourcesContent":["import { getSectorPath } from './graphics';\nimport { isBetween } from './helper';\nimport { BBox } from './bbox';\n/**\n * @ignore\n * Gets x dimension length\n * @param coordinate\n * @returns x dimension length\n */\nexport function getXDimensionLength(coordinate) {\n    if (coordinate.isPolar && !coordinate.isTransposed) {\n        // 极坐标系下 width 为弧长\n        return (coordinate.endAngle - coordinate.startAngle) * coordinate.getRadius();\n    }\n    // 直角坐标系\n    var start = coordinate.convert({ x: 0, y: 0 });\n    var end = coordinate.convert({ x: 1, y: 0 });\n    // 坐标系有可能发生 transpose 等变换，所有通过两点之间的距离进行计算\n    return Math.sqrt(Math.pow(end.x - start.x, 2) + Math.pow(end.y - start.y, 2));\n}\n/**\n * @ignore\n * Determines whether full circle is\n * @param coordinate\n * @returns true if full circle\n */\nexport function isFullCircle(coordinate) {\n    if (coordinate.isPolar) {\n        var startAngle = coordinate.startAngle, endAngle = coordinate.endAngle;\n        return endAngle - startAngle === Math.PI * 2;\n    }\n    return false;\n}\n/**\n * @ignore\n * 获取当前点到坐标系圆心的距离\n * @param coordinate 坐标系\n * @param point 当前点\n * @returns distance to center\n */\nexport function getDistanceToCenter(coordinate, point) {\n    var center = coordinate.getCenter();\n    return Math.sqrt(Math.pow((point.x - center.x), 2) + Math.pow((point.y - center.y), 2));\n}\n/**\n * @ignore\n * 坐标点是否在坐标系中\n * @param coordinate\n * @param point\n */\nexport function isPointInCoordinate(coordinate, point) {\n    var result = false;\n    if (coordinate) {\n        if (coordinate.type === 'theta') {\n            var start = coordinate.start, end = coordinate.end;\n            result = isBetween(point.x, start.x, end.x) && isBetween(point.y, start.y, end.y);\n        }\n        else {\n            var invertPoint = coordinate.invert(point);\n            result = isBetween(invertPoint.x, 0, 1) && isBetween(invertPoint.y, 0, 1);\n        }\n    }\n    return result;\n}\n/**\n * @ignore\n * 获取点到圆心的连线与水平方向的夹角\n */\nexport function getAngleByPoint(coordinate, point) {\n    var center = coordinate.getCenter();\n    return Math.atan2(point.y - center.y, point.x - center.x);\n}\n/**\n * @ignore\n * 获取同坐标系范围相同的剪切区域\n * @param coordinate\n * @returns\n */\nexport function getCoordinateClipCfg(coordinate, margin) {\n    if (margin === void 0) { margin = 0; }\n    var start = coordinate.start, end = coordinate.end;\n    var width = coordinate.getWidth();\n    var height = coordinate.getHeight();\n    if (coordinate.isPolar) {\n        var startAngle_1 = coordinate.startAngle, endAngle_1 = coordinate.endAngle;\n        var center_1 = coordinate.getCenter();\n        var radius_1 = coordinate.getRadius();\n        return {\n            type: 'path',\n            startState: {\n                path: getSectorPath(center_1.x, center_1.y, radius_1 + margin, startAngle_1, startAngle_1),\n            },\n            endState: function (ratio) {\n                var diff = (endAngle_1 - startAngle_1) * ratio + startAngle_1;\n                var path = getSectorPath(center_1.x, center_1.y, radius_1 + margin, startAngle_1, diff);\n                return {\n                    path: path,\n                };\n            },\n            attrs: {\n                path: getSectorPath(center_1.x, center_1.y, radius_1 + margin, startAngle_1, endAngle_1),\n            },\n        };\n    }\n    var endState;\n    if (coordinate.isTransposed) {\n        endState = {\n            height: height + margin * 2,\n        };\n    }\n    else {\n        endState = {\n            width: width + margin * 2,\n        };\n    }\n    return {\n        type: 'rect',\n        startState: {\n            x: start.x - margin,\n            y: end.y - margin,\n            width: coordinate.isTransposed ? width + margin * 2 : 0,\n            height: coordinate.isTransposed ? 0 : height + margin * 2,\n        },\n        endState: endState,\n        attrs: {\n            x: start.x - margin,\n            y: end.y - margin,\n            width: width + margin * 2,\n            height: height + margin * 2,\n        },\n    };\n}\n/**\n * 获取坐标系范围的 BBox\n * @param coordinate\n * @param margin\n */\nexport function getCoordinateBBox(coordinate, margin) {\n    if (margin === void 0) { margin = 0; }\n    var start = coordinate.start, end = coordinate.end;\n    var width = coordinate.getWidth();\n    var height = coordinate.getHeight();\n    var minX = Math.min(start.x, end.x);\n    var minY = Math.min(start.y, end.y);\n    return BBox.fromRange(minX - margin, minY - margin, minX + width + margin, minY + height + margin);\n}\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}