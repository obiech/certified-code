{"ast":null,"code":"import { __extends } from \"tslib\";\nimport Element from './element';\nimport { multiplyVec2 } from '../util/matrix';\nvar AbstractShape = /** @class */function (_super) {\n  __extends(AbstractShape, _super);\n  function AbstractShape(cfg) {\n    return _super.call(this, cfg) || this;\n  }\n  // 是否在包围盒内\n  AbstractShape.prototype._isInBBox = function (refX, refY) {\n    var bbox = this.getBBox();\n    return bbox.minX <= refX && bbox.maxX >= refX && bbox.minY <= refY && bbox.maxY >= refY;\n  };\n  /**\n   * 属性更改后需要做的事情\n   * @protected\n   * @param {ShapeAttrs} targetAttrs 渲染的图像属性\n   */\n  AbstractShape.prototype.afterAttrsChange = function (targetAttrs) {\n    _super.prototype.afterAttrsChange.call(this, targetAttrs);\n    this.clearCacheBBox();\n  };\n  // 计算包围盒时，需要缓存，这是一个高频的操作\n  AbstractShape.prototype.getBBox = function () {\n    var bbox = this.cfg.bbox;\n    if (!bbox) {\n      bbox = this.calculateBBox();\n      this.set('bbox', bbox);\n    }\n    return bbox;\n  };\n  // 计算相对于画布的包围盒\n  AbstractShape.prototype.getCanvasBBox = function () {\n    var canvasBBox = this.cfg.canvasBBox;\n    if (!canvasBBox) {\n      canvasBBox = this.calculateCanvasBBox();\n      this.set('canvasBBox', canvasBBox);\n    }\n    return canvasBBox;\n  };\n  AbstractShape.prototype.applyMatrix = function (matrix) {\n    _super.prototype.applyMatrix.call(this, matrix);\n    // 清理掉缓存的包围盒\n    this.set('canvasBBox', null);\n  };\n  /**\n   * 计算相对于画布的包围盒，默认等同于 bbox\n   * @return {BBox} 包围盒\n   */\n  AbstractShape.prototype.calculateCanvasBBox = function () {\n    var bbox = this.getBBox();\n    var totalMatrix = this.getTotalMatrix();\n    var minX = bbox.minX,\n      minY = bbox.minY,\n      maxX = bbox.maxX,\n      maxY = bbox.maxY;\n    if (totalMatrix) {\n      var topLeft = multiplyVec2(totalMatrix, [bbox.minX, bbox.minY]);\n      var topRight = multiplyVec2(totalMatrix, [bbox.maxX, bbox.minY]);\n      var bottomLeft = multiplyVec2(totalMatrix, [bbox.minX, bbox.maxY]);\n      var bottomRight = multiplyVec2(totalMatrix, [bbox.maxX, bbox.maxY]);\n      minX = Math.min(topLeft[0], topRight[0], bottomLeft[0], bottomRight[0]);\n      maxX = Math.max(topLeft[0], topRight[0], bottomLeft[0], bottomRight[0]);\n      minY = Math.min(topLeft[1], topRight[1], bottomLeft[1], bottomRight[1]);\n      maxY = Math.max(topLeft[1], topRight[1], bottomLeft[1], bottomRight[1]);\n    }\n    var attrs = this.attrs;\n    // 如果存在 shadow 则计算 shadow\n    if (attrs.shadowColor) {\n      var _a = attrs.shadowBlur,\n        shadowBlur = _a === void 0 ? 0 : _a,\n        _b = attrs.shadowOffsetX,\n        shadowOffsetX = _b === void 0 ? 0 : _b,\n        _c = attrs.shadowOffsetY,\n        shadowOffsetY = _c === void 0 ? 0 : _c;\n      var shadowLeft = minX - shadowBlur + shadowOffsetX;\n      var shadowRight = maxX + shadowBlur + shadowOffsetX;\n      var shadowTop = minY - shadowBlur + shadowOffsetY;\n      var shadowBottom = maxY + shadowBlur + shadowOffsetY;\n      minX = Math.min(minX, shadowLeft);\n      maxX = Math.max(maxX, shadowRight);\n      minY = Math.min(minY, shadowTop);\n      maxY = Math.max(maxY, shadowBottom);\n    }\n    return {\n      x: minX,\n      y: minY,\n      minX: minX,\n      minY: minY,\n      maxX: maxX,\n      maxY: maxY,\n      width: maxX - minX,\n      height: maxY - minY\n    };\n  };\n  /**\n   * @protected\n   * 清理缓存的 bbox\n   */\n  AbstractShape.prototype.clearCacheBBox = function () {\n    this.set('bbox', null);\n    this.set('canvasBBox', null);\n  };\n  // 实现接口\n  AbstractShape.prototype.isClipShape = function () {\n    return this.get('isClipShape');\n  };\n  /**\n   * @protected\n   * 不同的图形自己实现是否在图形内部的逻辑，要判断边和填充区域\n   * @param  {number}  refX 相对于图形的坐标 x\n   * @param  {number}  refY 相对于图形的坐标 Y\n   * @return {boolean} 点是否在图形内部\n   */\n  AbstractShape.prototype.isInShape = function (refX, refY) {\n    return false;\n  };\n  /**\n   * 是否仅仅使用 BBox 检测就可以判定拾取到图形\n   * 默认是 false，但是有些图形例如 image、marker 等都可直接使用 BBox 的检测而不需要使用图形拾取\n   * @return {Boolean} 仅仅使用 BBox 进行拾取\n   */\n  AbstractShape.prototype.isOnlyHitBox = function () {\n    return false;\n  };\n  // 不同的 Shape 各自实现\n  AbstractShape.prototype.isHit = function (x, y) {\n    var startArrowShape = this.get('startArrowShape');\n    var endArrowShape = this.get('endArrowShape');\n    var vec = [x, y, 1];\n    vec = this.invertFromMatrix(vec);\n    var refX = vec[0],\n      refY = vec[1];\n    var inBBox = this._isInBBox(refX, refY);\n    // 跳过图形的拾取，在某些图形中可以省略一倍的检测成本\n    if (this.isOnlyHitBox()) {\n      return inBBox;\n    }\n    // 被裁减掉的和不在包围盒内的不进行计算\n    if (inBBox && !this.isClipped(refX, refY)) {\n      // 对图形进行拾取判断\n      if (this.isInShape(refX, refY)) {\n        return true;\n      }\n      // 对起始箭头进行拾取判断\n      if (startArrowShape && startArrowShape.isHit(refX, refY)) {\n        return true;\n      }\n      // 对结束箭头进行拾取判断\n      if (endArrowShape && endArrowShape.isHit(refX, refY)) {\n        return true;\n      }\n    }\n    return false;\n  };\n  return AbstractShape;\n}(Element);\nexport default AbstractShape;","map":{"version":3,"names":["__extends","Element","multiplyVec2","AbstractShape","_super","cfg","call","prototype","_isInBBox","refX","refY","bbox","getBBox","minX","maxX","minY","maxY","afterAttrsChange","targetAttrs","clearCacheBBox","calculateBBox","set","getCanvasBBox","canvasBBox","calculateCanvasBBox","applyMatrix","matrix","totalMatrix","getTotalMatrix","topLeft","topRight","bottomLeft","bottomRight","Math","min","max","attrs","shadowColor","_a","shadowBlur","_b","shadowOffsetX","_c","shadowOffsetY","shadowLeft","shadowRight","shadowTop","shadowBottom","x","y","width","height","isClipShape","get","isInShape","isOnlyHitBox","isHit","startArrowShape","endArrowShape","vec","invertFromMatrix","inBBox","isClipped"],"sources":["/Users/obiechina/Documents/ridy-flutter-full-taxi-solution 2/node_modules/@antv/g-base/esm/abstract/shape.js"],"sourcesContent":["import { __extends } from \"tslib\";\nimport Element from './element';\nimport { multiplyVec2 } from '../util/matrix';\nvar AbstractShape = /** @class */ (function (_super) {\n    __extends(AbstractShape, _super);\n    function AbstractShape(cfg) {\n        return _super.call(this, cfg) || this;\n    }\n    // 是否在包围盒内\n    AbstractShape.prototype._isInBBox = function (refX, refY) {\n        var bbox = this.getBBox();\n        return bbox.minX <= refX && bbox.maxX >= refX && bbox.minY <= refY && bbox.maxY >= refY;\n    };\n    /**\n     * 属性更改后需要做的事情\n     * @protected\n     * @param {ShapeAttrs} targetAttrs 渲染的图像属性\n     */\n    AbstractShape.prototype.afterAttrsChange = function (targetAttrs) {\n        _super.prototype.afterAttrsChange.call(this, targetAttrs);\n        this.clearCacheBBox();\n    };\n    // 计算包围盒时，需要缓存，这是一个高频的操作\n    AbstractShape.prototype.getBBox = function () {\n        var bbox = this.cfg.bbox;\n        if (!bbox) {\n            bbox = this.calculateBBox();\n            this.set('bbox', bbox);\n        }\n        return bbox;\n    };\n    // 计算相对于画布的包围盒\n    AbstractShape.prototype.getCanvasBBox = function () {\n        var canvasBBox = this.cfg.canvasBBox;\n        if (!canvasBBox) {\n            canvasBBox = this.calculateCanvasBBox();\n            this.set('canvasBBox', canvasBBox);\n        }\n        return canvasBBox;\n    };\n    AbstractShape.prototype.applyMatrix = function (matrix) {\n        _super.prototype.applyMatrix.call(this, matrix);\n        // 清理掉缓存的包围盒\n        this.set('canvasBBox', null);\n    };\n    /**\n     * 计算相对于画布的包围盒，默认等同于 bbox\n     * @return {BBox} 包围盒\n     */\n    AbstractShape.prototype.calculateCanvasBBox = function () {\n        var bbox = this.getBBox();\n        var totalMatrix = this.getTotalMatrix();\n        var minX = bbox.minX, minY = bbox.minY, maxX = bbox.maxX, maxY = bbox.maxY;\n        if (totalMatrix) {\n            var topLeft = multiplyVec2(totalMatrix, [bbox.minX, bbox.minY]);\n            var topRight = multiplyVec2(totalMatrix, [bbox.maxX, bbox.minY]);\n            var bottomLeft = multiplyVec2(totalMatrix, [bbox.minX, bbox.maxY]);\n            var bottomRight = multiplyVec2(totalMatrix, [bbox.maxX, bbox.maxY]);\n            minX = Math.min(topLeft[0], topRight[0], bottomLeft[0], bottomRight[0]);\n            maxX = Math.max(topLeft[0], topRight[0], bottomLeft[0], bottomRight[0]);\n            minY = Math.min(topLeft[1], topRight[1], bottomLeft[1], bottomRight[1]);\n            maxY = Math.max(topLeft[1], topRight[1], bottomLeft[1], bottomRight[1]);\n        }\n        var attrs = this.attrs;\n        // 如果存在 shadow 则计算 shadow\n        if (attrs.shadowColor) {\n            var _a = attrs.shadowBlur, shadowBlur = _a === void 0 ? 0 : _a, _b = attrs.shadowOffsetX, shadowOffsetX = _b === void 0 ? 0 : _b, _c = attrs.shadowOffsetY, shadowOffsetY = _c === void 0 ? 0 : _c;\n            var shadowLeft = minX - shadowBlur + shadowOffsetX;\n            var shadowRight = maxX + shadowBlur + shadowOffsetX;\n            var shadowTop = minY - shadowBlur + shadowOffsetY;\n            var shadowBottom = maxY + shadowBlur + shadowOffsetY;\n            minX = Math.min(minX, shadowLeft);\n            maxX = Math.max(maxX, shadowRight);\n            minY = Math.min(minY, shadowTop);\n            maxY = Math.max(maxY, shadowBottom);\n        }\n        return {\n            x: minX,\n            y: minY,\n            minX: minX,\n            minY: minY,\n            maxX: maxX,\n            maxY: maxY,\n            width: maxX - minX,\n            height: maxY - minY,\n        };\n    };\n    /**\n     * @protected\n     * 清理缓存的 bbox\n     */\n    AbstractShape.prototype.clearCacheBBox = function () {\n        this.set('bbox', null);\n        this.set('canvasBBox', null);\n    };\n    // 实现接口\n    AbstractShape.prototype.isClipShape = function () {\n        return this.get('isClipShape');\n    };\n    /**\n     * @protected\n     * 不同的图形自己实现是否在图形内部的逻辑，要判断边和填充区域\n     * @param  {number}  refX 相对于图形的坐标 x\n     * @param  {number}  refY 相对于图形的坐标 Y\n     * @return {boolean} 点是否在图形内部\n     */\n    AbstractShape.prototype.isInShape = function (refX, refY) {\n        return false;\n    };\n    /**\n     * 是否仅仅使用 BBox 检测就可以判定拾取到图形\n     * 默认是 false，但是有些图形例如 image、marker 等都可直接使用 BBox 的检测而不需要使用图形拾取\n     * @return {Boolean} 仅仅使用 BBox 进行拾取\n     */\n    AbstractShape.prototype.isOnlyHitBox = function () {\n        return false;\n    };\n    // 不同的 Shape 各自实现\n    AbstractShape.prototype.isHit = function (x, y) {\n        var startArrowShape = this.get('startArrowShape');\n        var endArrowShape = this.get('endArrowShape');\n        var vec = [x, y, 1];\n        vec = this.invertFromMatrix(vec);\n        var refX = vec[0], refY = vec[1];\n        var inBBox = this._isInBBox(refX, refY);\n        // 跳过图形的拾取，在某些图形中可以省略一倍的检测成本\n        if (this.isOnlyHitBox()) {\n            return inBBox;\n        }\n        // 被裁减掉的和不在包围盒内的不进行计算\n        if (inBBox && !this.isClipped(refX, refY)) {\n            // 对图形进行拾取判断\n            if (this.isInShape(refX, refY)) {\n                return true;\n            }\n            // 对起始箭头进行拾取判断\n            if (startArrowShape && startArrowShape.isHit(refX, refY)) {\n                return true;\n            }\n            // 对结束箭头进行拾取判断\n            if (endArrowShape && endArrowShape.isHit(refX, refY)) {\n                return true;\n            }\n        }\n        return false;\n    };\n    return AbstractShape;\n}(Element));\nexport default AbstractShape;\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}