{"ast":null,"code":"import { InjectionToken, inject, Injector, afterNextRender } from '@angular/core';\nimport { Observable } from 'rxjs';\n\n/**\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://github.com/NG-ZORRO/ng-zorro-antd/blob/master/LICENSE\n */\n/**\n * An injection token representing `afterNextRender` as an observable rather\n * than a callback-based API has been added. This might be necessary in code\n * where streams of data are already being used and we need to wait until\n * the change detection ends before performing any tasks.\n */\nconst NZ_AFTER_NEXT_RENDER$ = new InjectionToken('nz-after-next-render', {\n  providedIn: 'root',\n  factory: () => {\n    const injector = inject(Injector);\n    return new Observable(subscriber => {\n      const ref = afterNextRender(() => {\n        subscriber.next();\n        subscriber.complete();\n      }, {\n        injector\n      });\n      return () => ref.destroy();\n    });\n  }\n});\n\n/**\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://github.com/NG-ZORRO/ng-zorro-antd/blob/master/LICENSE\n */\n\n/**\n * Generated bundle index. Do not edit.\n */\n\nexport { NZ_AFTER_NEXT_RENDER$ };","map":{"version":3,"names":["InjectionToken","inject","Injector","afterNextRender","Observable","NZ_AFTER_NEXT_RENDER$","providedIn","factory","injector","subscriber","ref","next","complete","destroy"],"sources":["/Users/obiechina/Documents/ridy-flutter-full-taxi-solution 2/node_modules/ng-zorro-antd/fesm2022/ng-zorro-antd-core-render.mjs"],"sourcesContent":["import { InjectionToken, inject, Injector, afterNextRender } from '@angular/core';\nimport { Observable } from 'rxjs';\n\n/**\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://github.com/NG-ZORRO/ng-zorro-antd/blob/master/LICENSE\n */\n/**\n * An injection token representing `afterNextRender` as an observable rather\n * than a callback-based API has been added. This might be necessary in code\n * where streams of data are already being used and we need to wait until\n * the change detection ends before performing any tasks.\n */\nconst NZ_AFTER_NEXT_RENDER$ = new InjectionToken('nz-after-next-render', {\n    providedIn: 'root',\n    factory: () => {\n        const injector = inject(Injector);\n        return new Observable(subscriber => {\n            const ref = afterNextRender(() => {\n                subscriber.next();\n                subscriber.complete();\n            }, { injector });\n            return () => ref.destroy();\n        });\n    }\n});\n\n/**\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://github.com/NG-ZORRO/ng-zorro-antd/blob/master/LICENSE\n */\n\n/**\n * Generated bundle index. Do not edit.\n */\n\nexport { NZ_AFTER_NEXT_RENDER$ };\n"],"mappings":"AAAA,SAASA,cAAc,EAAEC,MAAM,EAAEC,QAAQ,EAAEC,eAAe,QAAQ,eAAe;AACjF,SAASC,UAAU,QAAQ,MAAM;;AAEjC;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,MAAMC,qBAAqB,GAAG,IAAIL,cAAc,CAAC,sBAAsB,EAAE;EACrEM,UAAU,EAAE,MAAM;EAClBC,OAAO,EAAEA,CAAA,KAAM;IACX,MAAMC,QAAQ,GAAGP,MAAM,CAACC,QAAQ,CAAC;IACjC,OAAO,IAAIE,UAAU,CAACK,UAAU,IAAI;MAChC,MAAMC,GAAG,GAAGP,eAAe,CAAC,MAAM;QAC9BM,UAAU,CAACE,IAAI,CAAC,CAAC;QACjBF,UAAU,CAACG,QAAQ,CAAC,CAAC;MACzB,CAAC,EAAE;QAAEJ;MAAS,CAAC,CAAC;MAChB,OAAO,MAAME,GAAG,CAACG,OAAO,CAAC,CAAC;IAC9B,CAAC,CAAC;EACN;AACJ,CAAC,CAAC;;AAEF;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA,SAASR,qBAAqB","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}