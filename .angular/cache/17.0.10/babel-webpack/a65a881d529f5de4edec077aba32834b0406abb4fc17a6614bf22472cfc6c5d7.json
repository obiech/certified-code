{"ast":null,"code":"import { __read, __spreadArray } from \"tslib\";\nimport { isString, memoize, values, toString } from '@antv/util';\nimport { getCanvasContext } from './context';\n/**\n * 计算文本在画布中的宽度\n */\nexport var measureTextWidth = memoize(function (text, font) {\n  if (font === void 0) {\n    font = {};\n  }\n  var fontSize = font.fontSize,\n    fontFamily = font.fontFamily,\n    fontWeight = font.fontWeight,\n    fontStyle = font.fontStyle,\n    fontVariant = font.fontVariant;\n  var ctx = getCanvasContext();\n  ctx.font = [fontStyle, fontVariant, fontWeight, \"\".concat(fontSize, \"px\"), fontFamily].join(' ');\n  return ctx.measureText(isString(text) ? text : '').width;\n}, function (text, font) {\n  if (font === void 0) {\n    font = {};\n  }\n  return __spreadArray([text], __read(values(font)), false).join('');\n});\n/**\n * 获取文本的 ... 文本。\n * 算法（减少每次 measureText 的长度，measureText 的性能跟字符串时间相关）：\n * 1. 先通过 STEP 逐步计算，找到最后一个小于 maxWidth 的字符串\n * 2. 然后对最后这个字符串二分计算\n * @param text 需要计算的文本, 由于历史原因 除了支持string，还支持空值,number和数组等\n * @param maxWidth\n * @param font\n */\nexport var getEllipsisText = function (text, maxWidth, font) {\n  var STEP = 16; // 每次 16，调参工程师\n  var DOT_WIDTH = measureTextWidth('...', font);\n  var leftText;\n  if (!isString(text)) {\n    leftText = toString(text);\n  } else {\n    leftText = text;\n  }\n  var leftWidth = maxWidth;\n  var r = []; // 最终的分段字符串\n  var currentText;\n  var currentWidth;\n  if (measureTextWidth(text, font) <= maxWidth) {\n    return text;\n  }\n  // 首先通过 step 计算，找出最大的未超出长度的\n  while (true) {\n    // 更新字符串\n    currentText = leftText.substr(0, STEP);\n    // 计算宽度\n    currentWidth = measureTextWidth(currentText, font);\n    // 超出剩余宽度，则停止\n    if (currentWidth + DOT_WIDTH > leftWidth) {\n      if (currentWidth > leftWidth) {\n        break;\n      }\n    }\n    r.push(currentText);\n    // 没有超出，则计算剩余宽度\n    leftWidth -= currentWidth;\n    leftText = leftText.substr(STEP);\n    // 字符串整体没有超出\n    if (!leftText) {\n      return r.join('');\n    }\n  }\n  // 最下的最后一个 STEP，使用 1 递增（用二分效果更高）\n  while (true) {\n    // 更新字符串\n    currentText = leftText.substr(0, 1);\n    // 计算宽度\n    currentWidth = measureTextWidth(currentText, font);\n    // 超出剩余宽度，则停止\n    if (currentWidth + DOT_WIDTH > leftWidth) {\n      break;\n    }\n    r.push(currentText);\n    // 没有超出，则计算剩余宽度\n    leftWidth -= currentWidth;\n    leftText = leftText.substr(1);\n    if (!leftText) {\n      return r.join('');\n    }\n  }\n  return \"\".concat(r.join(''), \"...\");\n};","map":{"version":3,"names":["__read","__spreadArray","isString","memoize","values","toString","getCanvasContext","measureTextWidth","text","font","fontSize","fontFamily","fontWeight","fontStyle","fontVariant","ctx","concat","join","measureText","width","getEllipsisText","maxWidth","STEP","DOT_WIDTH","leftText","leftWidth","r","currentText","currentWidth","substr","push"],"sources":["/Users/obiechina/Documents/ridy-flutter-full-taxi-solution 2/node_modules/@antv/g2/esm/util/text.js"],"sourcesContent":["import { __read, __spreadArray } from \"tslib\";\nimport { isString, memoize, values, toString } from '@antv/util';\nimport { getCanvasContext } from './context';\n/**\n * 计算文本在画布中的宽度\n */\nexport var measureTextWidth = memoize(function (text, font) {\n    if (font === void 0) { font = {}; }\n    var fontSize = font.fontSize, fontFamily = font.fontFamily, fontWeight = font.fontWeight, fontStyle = font.fontStyle, fontVariant = font.fontVariant;\n    var ctx = getCanvasContext();\n    ctx.font = [fontStyle, fontVariant, fontWeight, \"\".concat(fontSize, \"px\"), fontFamily].join(' ');\n    return ctx.measureText(isString(text) ? text : '').width;\n}, function (text, font) {\n    if (font === void 0) { font = {}; }\n    return __spreadArray([text], __read(values(font)), false).join('');\n});\n/**\n * 获取文本的 ... 文本。\n * 算法（减少每次 measureText 的长度，measureText 的性能跟字符串时间相关）：\n * 1. 先通过 STEP 逐步计算，找到最后一个小于 maxWidth 的字符串\n * 2. 然后对最后这个字符串二分计算\n * @param text 需要计算的文本, 由于历史原因 除了支持string，还支持空值,number和数组等\n * @param maxWidth\n * @param font\n */\nexport var getEllipsisText = function (text, maxWidth, font) {\n    var STEP = 16; // 每次 16，调参工程师\n    var DOT_WIDTH = measureTextWidth('...', font);\n    var leftText;\n    if (!isString(text)) {\n        leftText = toString(text);\n    }\n    else {\n        leftText = text;\n    }\n    var leftWidth = maxWidth;\n    var r = []; // 最终的分段字符串\n    var currentText;\n    var currentWidth;\n    if (measureTextWidth(text, font) <= maxWidth) {\n        return text;\n    }\n    // 首先通过 step 计算，找出最大的未超出长度的\n    while (true) {\n        // 更新字符串\n        currentText = leftText.substr(0, STEP);\n        // 计算宽度\n        currentWidth = measureTextWidth(currentText, font);\n        // 超出剩余宽度，则停止\n        if (currentWidth + DOT_WIDTH > leftWidth) {\n            if (currentWidth > leftWidth) {\n                break;\n            }\n        }\n        r.push(currentText);\n        // 没有超出，则计算剩余宽度\n        leftWidth -= currentWidth;\n        leftText = leftText.substr(STEP);\n        // 字符串整体没有超出\n        if (!leftText) {\n            return r.join('');\n        }\n    }\n    // 最下的最后一个 STEP，使用 1 递增（用二分效果更高）\n    while (true) {\n        // 更新字符串\n        currentText = leftText.substr(0, 1);\n        // 计算宽度\n        currentWidth = measureTextWidth(currentText, font);\n        // 超出剩余宽度，则停止\n        if (currentWidth + DOT_WIDTH > leftWidth) {\n            break;\n        }\n        r.push(currentText);\n        // 没有超出，则计算剩余宽度\n        leftWidth -= currentWidth;\n        leftText = leftText.substr(1);\n        if (!leftText) {\n            return r.join('');\n        }\n    }\n    return \"\".concat(r.join(''), \"...\");\n};\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}