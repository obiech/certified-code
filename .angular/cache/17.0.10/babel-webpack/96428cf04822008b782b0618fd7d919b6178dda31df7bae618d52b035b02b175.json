{"ast":null,"code":"import { RouterModule } from '@angular/router';\nimport { ServiceOptionViewComponent } from './service-option-view/service-option-view.component';\nimport { ServiceOptionViewResolver } from './service-option-view/service-option-view.resolver';\nimport { ServiceOptionsListComponent } from './service-options-list/service-options-list.component';\nimport { ServiceOptionsListResolver } from './service-options-list/service-options-list.resolver';\nimport * as i0 from \"@angular/core\";\nimport * as i1 from \"@angular/router\";\nconst routes = [{\n  path: '',\n  component: ServiceOptionsListComponent,\n  resolve: {\n    serviceOptions: ServiceOptionsListResolver\n  },\n  runGuardsAndResolvers: 'paramsOrQueryParamsChange'\n}, {\n  path: 'view/:id',\n  component: ServiceOptionViewComponent,\n  resolve: {\n    serviceOption: ServiceOptionViewResolver\n  }\n}, {\n  path: 'new',\n  component: ServiceOptionViewComponent\n}];\nexport class ManagementServiceOptionsRoutingModule {\n  static {\n    this.ɵfac = function ManagementServiceOptionsRoutingModule_Factory(t) {\n      return new (t || ManagementServiceOptionsRoutingModule)();\n    };\n  }\n  static {\n    this.ɵmod = /*@__PURE__*/i0.ɵɵdefineNgModule({\n      type: ManagementServiceOptionsRoutingModule\n    });\n  }\n  static {\n    this.ɵinj = /*@__PURE__*/i0.ɵɵdefineInjector({\n      providers: [ServiceOptionsListResolver, ServiceOptionViewResolver],\n      imports: [RouterModule.forChild(routes), RouterModule]\n    });\n  }\n}\n(function () {\n  (typeof ngJitMode === \"undefined\" || ngJitMode) && i0.ɵɵsetNgModuleScope(ManagementServiceOptionsRoutingModule, {\n    imports: [i1.RouterModule],\n    exports: [RouterModule]\n  });\n})();","map":{"version":3,"names":["RouterModule","ServiceOptionViewComponent","ServiceOptionViewResolver","ServiceOptionsListComponent","ServiceOptionsListResolver","routes","path","component","resolve","serviceOptions","runGuardsAndResolvers","serviceOption","ManagementServiceOptionsRoutingModule","imports","forChild","i1","exports"],"sources":["/Users/obiechina/Documents/ridy-flutter-full-taxi-solution 2/apps/admin-panel/src/app/cms/management/management-service-options/management-service-options-routing.module.ts"],"sourcesContent":["import { NgModule } from '@angular/core';\nimport { Routes, RouterModule } from '@angular/router';\nimport { ServiceOptionViewComponent } from './service-option-view/service-option-view.component';\nimport { ServiceOptionViewResolver } from './service-option-view/service-option-view.resolver';\nimport { ServiceOptionsListComponent } from './service-options-list/service-options-list.component';\nimport { ServiceOptionsListResolver } from './service-options-list/service-options-list.resolver';\n\n\nconst routes: Routes = [\n  { path: '', component: ServiceOptionsListComponent, resolve: { serviceOptions: ServiceOptionsListResolver }, runGuardsAndResolvers: 'paramsOrQueryParamsChange' },\n  { path: 'view/:id', component: ServiceOptionViewComponent, resolve: { serviceOption: ServiceOptionViewResolver } },\n  { path: 'new', component: ServiceOptionViewComponent }\n];\n\n@NgModule({\n  imports: [RouterModule.forChild(routes)],\n  exports: [RouterModule],\n  providers: [\n    ServiceOptionsListResolver,\n    ServiceOptionViewResolver\n  ]\n})\nexport class ManagementServiceOptionsRoutingModule { }\n"],"mappings":"AACA,SAAiBA,YAAY,QAAQ,iBAAiB;AACtD,SAASC,0BAA0B,QAAQ,qDAAqD;AAChG,SAASC,yBAAyB,QAAQ,oDAAoD;AAC9F,SAASC,2BAA2B,QAAQ,uDAAuD;AACnG,SAASC,0BAA0B,QAAQ,sDAAsD;;;AAGjG,MAAMC,MAAM,GAAW,CACrB;EAAEC,IAAI,EAAE,EAAE;EAAEC,SAAS,EAAEJ,2BAA2B;EAAEK,OAAO,EAAE;IAAEC,cAAc,EAAEL;EAA0B,CAAE;EAAEM,qBAAqB,EAAE;AAA2B,CAAE,EACjK;EAAEJ,IAAI,EAAE,UAAU;EAAEC,SAAS,EAAEN,0BAA0B;EAAEO,OAAO,EAAE;IAAEG,aAAa,EAAET;EAAyB;AAAE,CAAE,EAClH;EAAEI,IAAI,EAAE,KAAK;EAAEC,SAAS,EAAEN;AAA0B,CAAE,CACvD;AAUD,OAAM,MAAOW,qCAAqC;;;uBAArCA,qCAAqC;IAAA;EAAA;;;YAArCA;IAAqC;EAAA;;;iBALrC,CACTR,0BAA0B,EAC1BF,yBAAyB,CAC1B;MAAAW,OAAA,GALSb,YAAY,CAACc,QAAQ,CAACT,MAAM,CAAC,EAC7BL,YAAY;IAAA;EAAA;;;2EAMXY,qCAAqC;IAAAC,OAAA,GAAAE,EAAA,CAAAf,YAAA;IAAAgB,OAAA,GANtChB,YAAY;EAAA;AAAA","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}