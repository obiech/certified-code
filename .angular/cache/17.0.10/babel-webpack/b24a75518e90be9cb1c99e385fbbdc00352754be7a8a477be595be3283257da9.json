{"ast":null,"code":"import * as _ from '@antv/util';\nimport { DEFAULT_Y } from '../constant';\nvar Adjust = /** @class */function () {\n  function Adjust(cfg) {\n    var xField = cfg.xField,\n      yField = cfg.yField,\n      _a = cfg.adjustNames,\n      adjustNames = _a === void 0 ? ['x', 'y'] : _a,\n      dimValuesMap = cfg.dimValuesMap;\n    this.adjustNames = adjustNames;\n    this.xField = xField;\n    this.yField = yField;\n    this.dimValuesMap = dimValuesMap;\n  }\n  /**\n   * 查看维度是否是 adjust 字段\n   * @param dim\n   */\n  Adjust.prototype.isAdjust = function (dim) {\n    return this.adjustNames.indexOf(dim) >= 0;\n  };\n  Adjust.prototype.getAdjustRange = function (dim, dimValue, values) {\n    var yField = this.yField;\n    var index = values.indexOf(dimValue);\n    var length = values.length;\n    var pre;\n    var next;\n    // 没有 y 字段，但是需要根据 y 调整\n    if (!yField && this.isAdjust('y')) {\n      pre = 0;\n      next = 1;\n    } else if (length > 1) {\n      // 如果以其开头，则取之，否则取他前面一个\n      pre = values[index === 0 ? 0 : index - 1];\n      // 如果以其结尾，则取之，否则取他后面一个\n      next = values[index === length - 1 ? length - 1 : index + 1];\n      if (index !== 0) {\n        pre += (dimValue - pre) / 2;\n      } else {\n        pre -= (next - dimValue) / 2;\n      }\n      if (index !== length - 1) {\n        next -= (next - dimValue) / 2;\n      } else {\n        next += (dimValue - values[length - 2]) / 2;\n      }\n    } else {\n      pre = dimValue === 0 ? 0 : dimValue - 0.5;\n      next = dimValue === 0 ? 1 : dimValue + 0.5;\n    }\n    return {\n      pre: pre,\n      next: next\n    };\n  };\n  Adjust.prototype.adjustData = function (groupedDataArray, mergedData) {\n    var _this = this;\n    // 所有调整维度的值数组\n    var dimValuesMap = this.getDimValues(mergedData);\n    // 按照每一个分组来进行调整\n    _.each(groupedDataArray, function (dataArray, index) {\n      // 遍历所有数据集合\n      // 每个分组中，分别按照不同的 dim 进行调整\n      _.each(dimValuesMap, function (values, dim) {\n        // 根据不同的度量分别调整位置\n        _this.adjustDim(dim, values, dataArray, index);\n      });\n    });\n  };\n  /**\n   * 对数据进行分组adjustData\n   * @param data 数据\n   * @param dim 分组的字段\n   * @return 分组结果\n   */\n  Adjust.prototype.groupData = function (data, dim) {\n    // 补齐数据空数据为默认值\n    _.each(data, function (record) {\n      if (record[dim] === undefined) {\n        record[dim] = DEFAULT_Y;\n      }\n    });\n    // 按照 dim 维度分组\n    return _.groupBy(data, dim);\n  };\n  /** @override */\n  Adjust.prototype.adjustDim = function (dim, values, data, index) {};\n  /**\n   * 获取可调整度量对应的值\n   * @param mergedData 数据\n   * @return 值的映射\n   */\n  Adjust.prototype.getDimValues = function (mergedData) {\n    var _a = this,\n      xField = _a.xField,\n      yField = _a.yField;\n    var dimValuesMap = _.assign({}, this.dimValuesMap);\n    // 所有的维度\n    var dims = [];\n    if (xField && this.isAdjust('x')) {\n      dims.push(xField);\n    }\n    if (yField && this.isAdjust('y')) {\n      dims.push(yField);\n    }\n    dims.forEach(function (dim) {\n      if (dimValuesMap && dimValuesMap[dim]) {\n        return;\n      }\n      // 在每个维度上，所有的值\n      dimValuesMap[dim] = _.valuesOfKey(mergedData, dim).sort(function (v1, v2) {\n        return v1 - v2;\n      });\n    });\n    // 只有一维的情况下，同时调整 y，赋予默认值\n    if (!yField && this.isAdjust('y')) {\n      var dim = 'y';\n      dimValuesMap[dim] = [DEFAULT_Y, 1]; // 默认分布在 y 轴的 0 与 1 之间\n    }\n\n    return dimValuesMap;\n  };\n  return Adjust;\n}();\nexport default Adjust;","map":{"version":3,"names":["_","DEFAULT_Y","Adjust","cfg","xField","yField","_a","adjustNames","dimValuesMap","prototype","isAdjust","dim","indexOf","getAdjustRange","dimValue","values","index","length","pre","next","adjustData","groupedDataArray","mergedData","_this","getDimValues","each","dataArray","adjustDim","groupData","data","record","undefined","groupBy","assign","dims","push","forEach","valuesOfKey","sort","v1","v2"],"sources":["/Users/obiechina/Documents/ridy-flutter-full-taxi-solution 2/node_modules/@antv/adjust/esm/adjusts/adjust.js"],"sourcesContent":["import * as _ from '@antv/util';\nimport { DEFAULT_Y } from '../constant';\nvar Adjust = /** @class */ (function () {\n    function Adjust(cfg) {\n        var xField = cfg.xField, yField = cfg.yField, _a = cfg.adjustNames, adjustNames = _a === void 0 ? ['x', 'y'] : _a, dimValuesMap = cfg.dimValuesMap;\n        this.adjustNames = adjustNames;\n        this.xField = xField;\n        this.yField = yField;\n        this.dimValuesMap = dimValuesMap;\n    }\n    /**\n     * 查看维度是否是 adjust 字段\n     * @param dim\n     */\n    Adjust.prototype.isAdjust = function (dim) {\n        return this.adjustNames.indexOf(dim) >= 0;\n    };\n    Adjust.prototype.getAdjustRange = function (dim, dimValue, values) {\n        var yField = this.yField;\n        var index = values.indexOf(dimValue);\n        var length = values.length;\n        var pre;\n        var next;\n        // 没有 y 字段，但是需要根据 y 调整\n        if (!yField && this.isAdjust('y')) {\n            pre = 0;\n            next = 1;\n        }\n        else if (length > 1) {\n            // 如果以其开头，则取之，否则取他前面一个\n            pre = values[index === 0 ? 0 : index - 1];\n            // 如果以其结尾，则取之，否则取他后面一个\n            next = values[index === length - 1 ? length - 1 : index + 1];\n            if (index !== 0) {\n                pre += (dimValue - pre) / 2;\n            }\n            else {\n                pre -= (next - dimValue) / 2;\n            }\n            if (index !== length - 1) {\n                next -= (next - dimValue) / 2;\n            }\n            else {\n                next += (dimValue - values[length - 2]) / 2;\n            }\n        }\n        else {\n            pre = dimValue === 0 ? 0 : dimValue - 0.5;\n            next = dimValue === 0 ? 1 : dimValue + 0.5;\n        }\n        return {\n            pre: pre,\n            next: next,\n        };\n    };\n    Adjust.prototype.adjustData = function (groupedDataArray, mergedData) {\n        var _this = this;\n        // 所有调整维度的值数组\n        var dimValuesMap = this.getDimValues(mergedData);\n        // 按照每一个分组来进行调整\n        _.each(groupedDataArray, function (dataArray, index) {\n            // 遍历所有数据集合\n            // 每个分组中，分别按照不同的 dim 进行调整\n            _.each(dimValuesMap, function (values, dim) {\n                // 根据不同的度量分别调整位置\n                _this.adjustDim(dim, values, dataArray, index);\n            });\n        });\n    };\n    /**\n     * 对数据进行分组adjustData\n     * @param data 数据\n     * @param dim 分组的字段\n     * @return 分组结果\n     */\n    Adjust.prototype.groupData = function (data, dim) {\n        // 补齐数据空数据为默认值\n        _.each(data, function (record) {\n            if (record[dim] === undefined) {\n                record[dim] = DEFAULT_Y;\n            }\n        });\n        // 按照 dim 维度分组\n        return _.groupBy(data, dim);\n    };\n    /** @override */\n    Adjust.prototype.adjustDim = function (dim, values, data, index) { };\n    /**\n     * 获取可调整度量对应的值\n     * @param mergedData 数据\n     * @return 值的映射\n     */\n    Adjust.prototype.getDimValues = function (mergedData) {\n        var _a = this, xField = _a.xField, yField = _a.yField;\n        var dimValuesMap = _.assign({}, this.dimValuesMap);\n        // 所有的维度\n        var dims = [];\n        if (xField && this.isAdjust('x')) {\n            dims.push(xField);\n        }\n        if (yField && this.isAdjust('y')) {\n            dims.push(yField);\n        }\n        dims.forEach(function (dim) {\n            if (dimValuesMap && dimValuesMap[dim]) {\n                return;\n            }\n            // 在每个维度上，所有的值\n            dimValuesMap[dim] = _.valuesOfKey(mergedData, dim).sort(function (v1, v2) { return v1 - v2; });\n        });\n        // 只有一维的情况下，同时调整 y，赋予默认值\n        if (!yField && this.isAdjust('y')) {\n            var dim = 'y';\n            dimValuesMap[dim] = [DEFAULT_Y, 1]; // 默认分布在 y 轴的 0 与 1 之间\n        }\n        return dimValuesMap;\n    };\n    return Adjust;\n}());\nexport default Adjust;\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}