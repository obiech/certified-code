{"ast":null,"code":"import { __assign, __extends } from \"tslib\";\nimport { deepMix, each, get, isArray, isEmpty, isEqual, isFunction, isString } from '@antv/util';\n// 暂未发包\n// @ts-ignore\nimport { propagationDelegate } from '@antv/component';\nimport { doAnimate } from '../../animate';\nimport Base from '../../base';\nimport { getReplaceAttrs } from '../../util/graphics';\nimport { GEOMETRY_LIFE_CIRCLE } from '../../constant';\nimport { BACKGROUND_SHAPE } from '../shape/constant';\n/**\n * Element 图形元素。\n * 定义：在 G2 中，我们会将数据通过图形语法映射成不同的图形，比如点图，数据集中的每条数据会对应一个点，柱状图每条数据对应一个柱子，线图则是一组数据对应一条折线，Element 即一条/一组数据对应的图形元素，它代表一条数据或者一个数据集，在图形层面，它可以是单个 Shape 也可以是多个 Shape，我们称之为图形元素。\n */\nvar Element = /** @class */function (_super) {\n  __extends(Element, _super);\n  function Element(cfg) {\n    var _this = _super.call(this, cfg) || this;\n    /** 保存 shape 对应的 label */\n    _this.labelShape = [];\n    // 存储当前开启的状态\n    _this.states = [];\n    var shapeFactory = cfg.shapeFactory,\n      container = cfg.container,\n      offscreenGroup = cfg.offscreenGroup,\n      elementIndex = cfg.elementIndex,\n      _a = cfg.visible,\n      visible = _a === void 0 ? true : _a;\n    _this.shapeFactory = shapeFactory;\n    _this.container = container;\n    _this.offscreenGroup = offscreenGroup;\n    _this.visible = visible;\n    _this.elementIndex = elementIndex;\n    return _this;\n  }\n  /**\n   * 绘制图形。\n   * @param model 绘制数据。\n   * @param isUpdate 可选，是否是更新发生后的绘制。\n   */\n  Element.prototype.draw = function (model, isUpdate) {\n    if (isUpdate === void 0) {\n      isUpdate = false;\n    }\n    this.model = model;\n    this.data = model.data; // 存储原始数据\n    this.shapeType = this.getShapeType(model);\n    // 绘制图形\n    this.drawShape(model, isUpdate);\n    if (this.visible === false) {\n      // 用户在初始化的时候声明 visible: false\n      this.changeVisible(false);\n    }\n  };\n  /**\n   * 更新图形。\n   * @param model 更新的绘制数据。\n   */\n  Element.prototype.update = function (model) {\n    var _a = this,\n      shapeFactory = _a.shapeFactory,\n      shape = _a.shape;\n    if (!shape) {\n      return;\n    }\n    // 更新数据\n    this.model = model;\n    this.data = model.data;\n    this.shapeType = this.getShapeType(model);\n    // step 1: 更新 shape 携带的信息\n    this.setShapeInfo(shape, model);\n    // step 2: 使用虚拟 Group 重新绘制 shape，然后更新当前 shape\n    var offscreenGroup = this.getOffscreenGroup();\n    var newShape = shapeFactory.drawShape(this.shapeType, model, offscreenGroup);\n    // @ts-ignore\n    newShape.cfg.data = this.data;\n    // @ts-ignore\n    newShape.cfg.origin = model;\n    // label 需要使用\n    newShape.cfg.element = this;\n    // step 3: 同步 shape 样式\n    this.syncShapeStyle(shape, newShape, this.getStates(), this.getAnimateCfg('update'));\n  };\n  /**\n   * 销毁 element 实例。\n   */\n  Element.prototype.destroy = function () {\n    var _a = this,\n      shapeFactory = _a.shapeFactory,\n      shape = _a.shape;\n    if (shape) {\n      var animateCfg = this.getAnimateCfg('leave');\n      if (animateCfg) {\n        // 指定了动画配置则执行销毁动画\n        doAnimate(shape, animateCfg, {\n          coordinate: shapeFactory.coordinate,\n          toAttrs: __assign({}, shape.attr())\n        });\n      } else {\n        // 否则直接销毁\n        shape.remove(true);\n      }\n    }\n    // reset\n    this.states = [];\n    this.shapeFactory = undefined;\n    this.container = undefined;\n    this.shape = undefined;\n    this.animate = undefined;\n    this.geometry = undefined;\n    this.labelShape = [];\n    this.model = undefined;\n    this.data = undefined;\n    this.offscreenGroup = undefined;\n    this.statesStyle = undefined;\n    _super.prototype.destroy.call(this);\n  };\n  /**\n   * 显示或者隐藏 element。\n   * @param visible 是否可见。\n   */\n  Element.prototype.changeVisible = function (visible) {\n    _super.prototype.changeVisible.call(this, visible);\n    if (visible) {\n      if (this.shape) {\n        this.shape.show();\n      }\n      if (this.labelShape) {\n        this.labelShape.forEach(function (label) {\n          label.show();\n        });\n      }\n    } else {\n      if (this.shape) {\n        this.shape.hide();\n      }\n      if (this.labelShape) {\n        this.labelShape.forEach(function (label) {\n          label.hide();\n        });\n      }\n    }\n  };\n  /**\n   * 设置 Element 的状态。\n   *\n   * 目前 Element 开放三种状态：\n   * 1. active\n   * 2. selected\n   * 3. inactive\n   *\n   * 这三种状态相互独立，可以进行叠加。\n   *\n   * 这三种状态的样式可在 [[Theme]] 主题中或者通过 `geometry.state()` 接口进行配置。\n   *\n   * ```ts\n   * // 激活 active 状态\n   * setState('active', true);\n   * ```\n   *\n   * @param stateName 状态名\n   * @param stateStatus 是否开启状态\n   */\n  Element.prototype.setState = function (stateName, stateStatus) {\n    var _a = this,\n      states = _a.states,\n      shapeFactory = _a.shapeFactory,\n      model = _a.model,\n      shape = _a.shape,\n      shapeType = _a.shapeType;\n    var index = states.indexOf(stateName);\n    if (stateStatus) {\n      // 开启状态\n      if (index > -1) {\n        // 该状态已经开启，则返回\n        return;\n      }\n      states.push(stateName);\n      if (stateName === 'active' || stateName === 'selected') {\n        shape === null || shape === void 0 ? void 0 : shape.toFront();\n      }\n    } else {\n      if (index === -1) {\n        // 关闭状态，但是状态未设置过\n        return;\n      }\n      states.splice(index, 1);\n      if (stateName === 'active' || stateName === 'selected') {\n        var _b = this.geometry,\n          sortZIndex = _b.sortZIndex,\n          zIndexReversed = _b.zIndexReversed;\n        var idx = zIndexReversed ? this.geometry.elements.length - this.elementIndex : this.elementIndex;\n        sortZIndex ? shape.setZIndex(idx) : shape.set('zIndex', idx);\n      }\n    }\n    // 使用虚拟 group 重新绘制 shape，然后对这个 shape 应用状态样式后，更新当前 shape。\n    var offscreenShape = shapeFactory.drawShape(shapeType, model, this.getOffscreenGroup());\n    if (states.length) {\n      // 应用当前状态\n      this.syncShapeStyle(shape, offscreenShape, states, null);\n    } else {\n      // 如果没有状态，则需要恢复至原始状态\n      this.syncShapeStyle(shape, offscreenShape, ['reset'], null);\n    }\n    offscreenShape.remove(true); // 销毁，减少内存占用\n    var eventObject = {\n      state: stateName,\n      stateStatus: stateStatus,\n      element: this,\n      target: this.container\n    };\n    this.container.emit('statechange', eventObject);\n    // @ts-ignore\n    propagationDelegate(this.shape, 'statechange', eventObject);\n  };\n  /**\n   * 清空状量态，恢复至初始状态。\n   */\n  Element.prototype.clearStates = function () {\n    var _this = this;\n    var states = this.states;\n    each(states, function (state) {\n      _this.setState(state, false);\n    });\n    this.states = [];\n  };\n  /**\n   * 查询当前 Element 上是否已设置 `stateName` 对应的状态。\n   * @param stateName 状态名称。\n   * @returns true 表示存在，false 表示不存在。\n   */\n  Element.prototype.hasState = function (stateName) {\n    return this.states.includes(stateName);\n  };\n  /**\n   * 获取当前 Element 上所有的状态。\n   * @returns 当前 Element 上所有的状态数组。\n   */\n  Element.prototype.getStates = function () {\n    return this.states;\n  };\n  /**\n   * 获取 Element 对应的原始数据。\n   * @returns 原始数据。\n   */\n  Element.prototype.getData = function () {\n    return this.data;\n  };\n  /**\n   * 获取 Element 对应的图形绘制数据。\n   * @returns 图形绘制数据。\n   */\n  Element.prototype.getModel = function () {\n    return this.model;\n  };\n  /**\n   * 返回 Element 元素整体的 bbox，包含文本及文本连线（有的话）。\n   * @returns 整体包围盒。\n   */\n  Element.prototype.getBBox = function () {\n    var _a = this,\n      shape = _a.shape,\n      labelShape = _a.labelShape;\n    var bbox = {\n      x: 0,\n      y: 0,\n      minX: 0,\n      minY: 0,\n      maxX: 0,\n      maxY: 0,\n      width: 0,\n      height: 0\n    };\n    if (shape) {\n      bbox = shape.getCanvasBBox();\n    }\n    if (labelShape) {\n      labelShape.forEach(function (label) {\n        var labelBBox = label.getCanvasBBox();\n        bbox.x = Math.min(labelBBox.x, bbox.x);\n        bbox.y = Math.min(labelBBox.y, bbox.y);\n        bbox.minX = Math.min(labelBBox.minX, bbox.minX);\n        bbox.minY = Math.min(labelBBox.minY, bbox.minY);\n        bbox.maxX = Math.max(labelBBox.maxX, bbox.maxX);\n        bbox.maxY = Math.max(labelBBox.maxY, bbox.maxY);\n      });\n    }\n    bbox.width = bbox.maxX - bbox.minX;\n    bbox.height = bbox.maxY - bbox.minY;\n    return bbox;\n  };\n  Element.prototype.getStatesStyle = function () {\n    if (!this.statesStyle) {\n      var _a = this,\n        shapeType = _a.shapeType,\n        geometry = _a.geometry,\n        shapeFactory = _a.shapeFactory;\n      var stateOption = geometry.stateOption;\n      var defaultShapeType = shapeFactory.defaultShapeType;\n      var stateTheme = shapeFactory.theme[shapeType] || shapeFactory.theme[defaultShapeType];\n      this.statesStyle = deepMix({}, stateTheme, stateOption);\n    }\n    return this.statesStyle;\n  };\n  // 从主题中获取对应状态量的样式\n  Element.prototype.getStateStyle = function (stateName, shapeKey) {\n    var statesStyle = this.getStatesStyle();\n    var stateCfg = get(statesStyle, [stateName, 'style'], {});\n    var shapeStyle = stateCfg[shapeKey] || stateCfg;\n    if (isFunction(shapeStyle)) {\n      return shapeStyle(this);\n    }\n    return shapeStyle;\n  };\n  // 获取动画配置\n  Element.prototype.getAnimateCfg = function (animateType) {\n    var _this = this;\n    var animate = this.animate;\n    if (animate) {\n      var cfg_1 = animate[animateType];\n      if (cfg_1) {\n        // 增加动画的回调函数，如果外部传入了，则先执行外部，然后发射 geometry 的 animate 事件\n        return __assign(__assign({}, cfg_1), {\n          callback: function () {\n            var _a;\n            isFunction(cfg_1.callback) && cfg_1.callback();\n            (_a = _this.geometry) === null || _a === void 0 ? void 0 : _a.emit(GEOMETRY_LIFE_CIRCLE.AFTER_DRAW_ANIMATE);\n          }\n        });\n      }\n      return cfg_1;\n    }\n    return null;\n  };\n  // 绘制图形\n  Element.prototype.drawShape = function (model, isUpdate) {\n    var _a;\n    if (isUpdate === void 0) {\n      isUpdate = false;\n    }\n    var _b = this,\n      shapeFactory = _b.shapeFactory,\n      container = _b.container,\n      shapeType = _b.shapeType;\n    // 自定义 shape 有可能返回空 shape\n    this.shape = shapeFactory.drawShape(shapeType, model, container);\n    if (this.shape) {\n      this.setShapeInfo(this.shape, model); // 存储绘图数据\n      // @ts-ignore\n      var name_1 = this.shape.cfg.name;\n      // 附加 element 的 name, name 现在支持数组了，很好用了\n      if (!name_1) {\n        // 这个地方如果用户添加了 name, 则附加 name ，否则就添加自己的 name\n        // @ts-ignore\n        this.shape.cfg.name = ['element', this.shapeFactory.geometryType];\n      } else if (isString(name_1)) {\n        // @ts-ignore\n        this.shape.cfg.name = ['element', name_1];\n      }\n      // 执行入场动画\n      var animateType = isUpdate ? 'enter' : 'appear';\n      var animateCfg = this.getAnimateCfg(animateType);\n      if (animateCfg) {\n        // 开始执行动画的生命周期\n        (_a = this.geometry) === null || _a === void 0 ? void 0 : _a.emit(GEOMETRY_LIFE_CIRCLE.BEFORE_DRAW_ANIMATE);\n        doAnimate(this.shape, animateCfg, {\n          coordinate: shapeFactory.coordinate,\n          toAttrs: __assign({}, this.shape.attr())\n        });\n      }\n    }\n  };\n  // 获取虚拟 Group\n  Element.prototype.getOffscreenGroup = function () {\n    if (!this.offscreenGroup) {\n      var GroupCtor = this.container.getGroupBase(); // 获取分组的构造函数\n      this.offscreenGroup = new GroupCtor({});\n    }\n    return this.offscreenGroup;\n  };\n  // 设置 shape 上需要携带的信息\n  Element.prototype.setShapeInfo = function (shape, data) {\n    var _this = this;\n    // @ts-ignore\n    shape.cfg.origin = data;\n    // @ts-ignore\n    shape.cfg.element = this;\n    if (shape.isGroup()) {\n      var children = shape.get('children');\n      children.forEach(function (child) {\n        _this.setShapeInfo(child, data);\n      });\n    }\n  };\n  // 更新当前 shape 的样式\n  Element.prototype.syncShapeStyle = function (sourceShape, targetShape, states, animateCfg, index) {\n    var _this = this;\n    var _a;\n    if (states === void 0) {\n      states = [];\n    }\n    if (index === void 0) {\n      index = 0;\n    }\n    if (!sourceShape || !targetShape) {\n      return;\n    }\n    // 所有的 shape 都需要同步 clip\n    var clip = sourceShape.get('clipShape');\n    var newClip = targetShape.get('clipShape');\n    this.syncShapeStyle(clip, newClip, states, animateCfg);\n    if (sourceShape.isGroup()) {\n      var children = sourceShape.get('children');\n      var newChildren = targetShape.get('children');\n      for (var i = 0; i < children.length; i++) {\n        this.syncShapeStyle(children[i], newChildren[i], states, animateCfg, index + i);\n      }\n    } else {\n      if (!isEmpty(states) && !isEqual(states, ['reset'])) {\n        var name_2 = sourceShape.get('name');\n        if (isArray(name_2)) {\n          // 会附加 element 的 name\n          name_2 = name_2[1];\n        }\n        each(states, function (state) {\n          // background shape 不进行状态样式设置\n          if (targetShape.get('name') !== BACKGROUND_SHAPE) {\n            var style = _this.getStateStyle(state, name_2 || index); // 如果用户没有设置 name，则默认根据索引值\n            targetShape.attr(style);\n          }\n        });\n      }\n      var newAttrs = getReplaceAttrs(sourceShape, targetShape);\n      if (this.animate) {\n        if (animateCfg) {\n          (_a = this.geometry) === null || _a === void 0 ? void 0 : _a.emit(GEOMETRY_LIFE_CIRCLE.BEFORE_DRAW_ANIMATE);\n          // 需要进行动画\n          doAnimate(sourceShape, animateCfg, {\n            coordinate: this.shapeFactory.coordinate,\n            toAttrs: newAttrs,\n            shapeModel: this.model\n          });\n        } else if (!isEmpty(states)) {\n          sourceShape.stopAnimate();\n          sourceShape.animate(newAttrs, {\n            duration: 300\n          });\n        } else {\n          sourceShape.attr(newAttrs);\n        }\n      } else {\n        sourceShape.attr(newAttrs);\n      }\n    }\n  };\n  Element.prototype.getShapeType = function (model) {\n    var shape = get(model, 'shape');\n    return isArray(shape) ? shape[0] : shape;\n  };\n  return Element;\n}(Base);\nexport default Element;","map":{"version":3,"names":["__assign","__extends","deepMix","each","get","isArray","isEmpty","isEqual","isFunction","isString","propagationDelegate","doAnimate","Base","getReplaceAttrs","GEOMETRY_LIFE_CIRCLE","BACKGROUND_SHAPE","Element","_super","cfg","_this","call","labelShape","states","shapeFactory","container","offscreenGroup","elementIndex","_a","visible","prototype","draw","model","isUpdate","data","shapeType","getShapeType","drawShape","changeVisible","update","shape","setShapeInfo","getOffscreenGroup","newShape","origin","element","syncShapeStyle","getStates","getAnimateCfg","destroy","animateCfg","coordinate","toAttrs","attr","remove","undefined","animate","geometry","statesStyle","show","forEach","label","hide","setState","stateName","stateStatus","index","indexOf","push","toFront","splice","_b","sortZIndex","zIndexReversed","idx","elements","length","setZIndex","set","offscreenShape","eventObject","state","target","emit","clearStates","hasState","includes","getData","getModel","getBBox","bbox","x","y","minX","minY","maxX","maxY","width","height","getCanvasBBox","labelBBox","Math","min","max","getStatesStyle","stateOption","defaultShapeType","stateTheme","theme","getStateStyle","shapeKey","stateCfg","shapeStyle","animateType","cfg_1","callback","AFTER_DRAW_ANIMATE","name_1","name","geometryType","BEFORE_DRAW_ANIMATE","GroupCtor","getGroupBase","isGroup","children","child","sourceShape","targetShape","clip","newClip","newChildren","i","name_2","style","newAttrs","shapeModel","stopAnimate","duration"],"sources":["/Users/obiechina/Documents/ridy-flutter-full-taxi-solution 2/node_modules/@antv/g2/esm/geometry/element/index.js"],"sourcesContent":["import { __assign, __extends } from \"tslib\";\nimport { deepMix, each, get, isArray, isEmpty, isEqual, isFunction, isString } from '@antv/util';\n// 暂未发包\n// @ts-ignore\nimport { propagationDelegate } from '@antv/component';\nimport { doAnimate } from '../../animate';\nimport Base from '../../base';\nimport { getReplaceAttrs } from '../../util/graphics';\nimport { GEOMETRY_LIFE_CIRCLE } from '../../constant';\nimport { BACKGROUND_SHAPE } from '../shape/constant';\n/**\n * Element 图形元素。\n * 定义：在 G2 中，我们会将数据通过图形语法映射成不同的图形，比如点图，数据集中的每条数据会对应一个点，柱状图每条数据对应一个柱子，线图则是一组数据对应一条折线，Element 即一条/一组数据对应的图形元素，它代表一条数据或者一个数据集，在图形层面，它可以是单个 Shape 也可以是多个 Shape，我们称之为图形元素。\n */\nvar Element = /** @class */ (function (_super) {\n    __extends(Element, _super);\n    function Element(cfg) {\n        var _this = _super.call(this, cfg) || this;\n        /** 保存 shape 对应的 label */\n        _this.labelShape = [];\n        // 存储当前开启的状态\n        _this.states = [];\n        var shapeFactory = cfg.shapeFactory, container = cfg.container, offscreenGroup = cfg.offscreenGroup, elementIndex = cfg.elementIndex, _a = cfg.visible, visible = _a === void 0 ? true : _a;\n        _this.shapeFactory = shapeFactory;\n        _this.container = container;\n        _this.offscreenGroup = offscreenGroup;\n        _this.visible = visible;\n        _this.elementIndex = elementIndex;\n        return _this;\n    }\n    /**\n     * 绘制图形。\n     * @param model 绘制数据。\n     * @param isUpdate 可选，是否是更新发生后的绘制。\n     */\n    Element.prototype.draw = function (model, isUpdate) {\n        if (isUpdate === void 0) { isUpdate = false; }\n        this.model = model;\n        this.data = model.data; // 存储原始数据\n        this.shapeType = this.getShapeType(model);\n        // 绘制图形\n        this.drawShape(model, isUpdate);\n        if (this.visible === false) {\n            // 用户在初始化的时候声明 visible: false\n            this.changeVisible(false);\n        }\n    };\n    /**\n     * 更新图形。\n     * @param model 更新的绘制数据。\n     */\n    Element.prototype.update = function (model) {\n        var _a = this, shapeFactory = _a.shapeFactory, shape = _a.shape;\n        if (!shape) {\n            return;\n        }\n        // 更新数据\n        this.model = model;\n        this.data = model.data;\n        this.shapeType = this.getShapeType(model);\n        // step 1: 更新 shape 携带的信息\n        this.setShapeInfo(shape, model);\n        // step 2: 使用虚拟 Group 重新绘制 shape，然后更新当前 shape\n        var offscreenGroup = this.getOffscreenGroup();\n        var newShape = shapeFactory.drawShape(this.shapeType, model, offscreenGroup);\n        // @ts-ignore\n        newShape.cfg.data = this.data;\n        // @ts-ignore\n        newShape.cfg.origin = model;\n        // label 需要使用\n        newShape.cfg.element = this;\n        // step 3: 同步 shape 样式\n        this.syncShapeStyle(shape, newShape, this.getStates(), this.getAnimateCfg('update'));\n    };\n    /**\n     * 销毁 element 实例。\n     */\n    Element.prototype.destroy = function () {\n        var _a = this, shapeFactory = _a.shapeFactory, shape = _a.shape;\n        if (shape) {\n            var animateCfg = this.getAnimateCfg('leave');\n            if (animateCfg) {\n                // 指定了动画配置则执行销毁动画\n                doAnimate(shape, animateCfg, {\n                    coordinate: shapeFactory.coordinate,\n                    toAttrs: __assign({}, shape.attr()),\n                });\n            }\n            else {\n                // 否则直接销毁\n                shape.remove(true);\n            }\n        }\n        // reset\n        this.states = [];\n        this.shapeFactory = undefined;\n        this.container = undefined;\n        this.shape = undefined;\n        this.animate = undefined;\n        this.geometry = undefined;\n        this.labelShape = [];\n        this.model = undefined;\n        this.data = undefined;\n        this.offscreenGroup = undefined;\n        this.statesStyle = undefined;\n        _super.prototype.destroy.call(this);\n    };\n    /**\n     * 显示或者隐藏 element。\n     * @param visible 是否可见。\n     */\n    Element.prototype.changeVisible = function (visible) {\n        _super.prototype.changeVisible.call(this, visible);\n        if (visible) {\n            if (this.shape) {\n                this.shape.show();\n            }\n            if (this.labelShape) {\n                this.labelShape.forEach(function (label) {\n                    label.show();\n                });\n            }\n        }\n        else {\n            if (this.shape) {\n                this.shape.hide();\n            }\n            if (this.labelShape) {\n                this.labelShape.forEach(function (label) {\n                    label.hide();\n                });\n            }\n        }\n    };\n    /**\n     * 设置 Element 的状态。\n     *\n     * 目前 Element 开放三种状态：\n     * 1. active\n     * 2. selected\n     * 3. inactive\n     *\n     * 这三种状态相互独立，可以进行叠加。\n     *\n     * 这三种状态的样式可在 [[Theme]] 主题中或者通过 `geometry.state()` 接口进行配置。\n     *\n     * ```ts\n     * // 激活 active 状态\n     * setState('active', true);\n     * ```\n     *\n     * @param stateName 状态名\n     * @param stateStatus 是否开启状态\n     */\n    Element.prototype.setState = function (stateName, stateStatus) {\n        var _a = this, states = _a.states, shapeFactory = _a.shapeFactory, model = _a.model, shape = _a.shape, shapeType = _a.shapeType;\n        var index = states.indexOf(stateName);\n        if (stateStatus) {\n            // 开启状态\n            if (index > -1) {\n                // 该状态已经开启，则返回\n                return;\n            }\n            states.push(stateName);\n            if (stateName === 'active' || stateName === 'selected') {\n                shape === null || shape === void 0 ? void 0 : shape.toFront();\n            }\n        }\n        else {\n            if (index === -1) {\n                // 关闭状态，但是状态未设置过\n                return;\n            }\n            states.splice(index, 1);\n            if (stateName === 'active' || stateName === 'selected') {\n                var _b = this.geometry, sortZIndex = _b.sortZIndex, zIndexReversed = _b.zIndexReversed;\n                var idx = zIndexReversed ? this.geometry.elements.length - this.elementIndex : this.elementIndex;\n                sortZIndex ? shape.setZIndex(idx) : shape.set('zIndex', idx);\n            }\n        }\n        // 使用虚拟 group 重新绘制 shape，然后对这个 shape 应用状态样式后，更新当前 shape。\n        var offscreenShape = shapeFactory.drawShape(shapeType, model, this.getOffscreenGroup());\n        if (states.length) {\n            // 应用当前状态\n            this.syncShapeStyle(shape, offscreenShape, states, null);\n        }\n        else {\n            // 如果没有状态，则需要恢复至原始状态\n            this.syncShapeStyle(shape, offscreenShape, ['reset'], null);\n        }\n        offscreenShape.remove(true); // 销毁，减少内存占用\n        var eventObject = {\n            state: stateName,\n            stateStatus: stateStatus,\n            element: this,\n            target: this.container,\n        };\n        this.container.emit('statechange', eventObject);\n        // @ts-ignore\n        propagationDelegate(this.shape, 'statechange', eventObject);\n    };\n    /**\n     * 清空状量态，恢复至初始状态。\n     */\n    Element.prototype.clearStates = function () {\n        var _this = this;\n        var states = this.states;\n        each(states, function (state) {\n            _this.setState(state, false);\n        });\n        this.states = [];\n    };\n    /**\n     * 查询当前 Element 上是否已设置 `stateName` 对应的状态。\n     * @param stateName 状态名称。\n     * @returns true 表示存在，false 表示不存在。\n     */\n    Element.prototype.hasState = function (stateName) {\n        return this.states.includes(stateName);\n    };\n    /**\n     * 获取当前 Element 上所有的状态。\n     * @returns 当前 Element 上所有的状态数组。\n     */\n    Element.prototype.getStates = function () {\n        return this.states;\n    };\n    /**\n     * 获取 Element 对应的原始数据。\n     * @returns 原始数据。\n     */\n    Element.prototype.getData = function () {\n        return this.data;\n    };\n    /**\n     * 获取 Element 对应的图形绘制数据。\n     * @returns 图形绘制数据。\n     */\n    Element.prototype.getModel = function () {\n        return this.model;\n    };\n    /**\n     * 返回 Element 元素整体的 bbox，包含文本及文本连线（有的话）。\n     * @returns 整体包围盒。\n     */\n    Element.prototype.getBBox = function () {\n        var _a = this, shape = _a.shape, labelShape = _a.labelShape;\n        var bbox = {\n            x: 0,\n            y: 0,\n            minX: 0,\n            minY: 0,\n            maxX: 0,\n            maxY: 0,\n            width: 0,\n            height: 0,\n        };\n        if (shape) {\n            bbox = shape.getCanvasBBox();\n        }\n        if (labelShape) {\n            labelShape.forEach(function (label) {\n                var labelBBox = label.getCanvasBBox();\n                bbox.x = Math.min(labelBBox.x, bbox.x);\n                bbox.y = Math.min(labelBBox.y, bbox.y);\n                bbox.minX = Math.min(labelBBox.minX, bbox.minX);\n                bbox.minY = Math.min(labelBBox.minY, bbox.minY);\n                bbox.maxX = Math.max(labelBBox.maxX, bbox.maxX);\n                bbox.maxY = Math.max(labelBBox.maxY, bbox.maxY);\n            });\n        }\n        bbox.width = bbox.maxX - bbox.minX;\n        bbox.height = bbox.maxY - bbox.minY;\n        return bbox;\n    };\n    Element.prototype.getStatesStyle = function () {\n        if (!this.statesStyle) {\n            var _a = this, shapeType = _a.shapeType, geometry = _a.geometry, shapeFactory = _a.shapeFactory;\n            var stateOption = geometry.stateOption;\n            var defaultShapeType = shapeFactory.defaultShapeType;\n            var stateTheme = shapeFactory.theme[shapeType] || shapeFactory.theme[defaultShapeType];\n            this.statesStyle = deepMix({}, stateTheme, stateOption);\n        }\n        return this.statesStyle;\n    };\n    // 从主题中获取对应状态量的样式\n    Element.prototype.getStateStyle = function (stateName, shapeKey) {\n        var statesStyle = this.getStatesStyle();\n        var stateCfg = get(statesStyle, [stateName, 'style'], {});\n        var shapeStyle = stateCfg[shapeKey] || stateCfg;\n        if (isFunction(shapeStyle)) {\n            return shapeStyle(this);\n        }\n        return shapeStyle;\n    };\n    // 获取动画配置\n    Element.prototype.getAnimateCfg = function (animateType) {\n        var _this = this;\n        var animate = this.animate;\n        if (animate) {\n            var cfg_1 = animate[animateType];\n            if (cfg_1) {\n                // 增加动画的回调函数，如果外部传入了，则先执行外部，然后发射 geometry 的 animate 事件\n                return __assign(__assign({}, cfg_1), { callback: function () {\n                        var _a;\n                        isFunction(cfg_1.callback) && cfg_1.callback();\n                        (_a = _this.geometry) === null || _a === void 0 ? void 0 : _a.emit(GEOMETRY_LIFE_CIRCLE.AFTER_DRAW_ANIMATE);\n                    } });\n            }\n            return cfg_1;\n        }\n        return null;\n    };\n    // 绘制图形\n    Element.prototype.drawShape = function (model, isUpdate) {\n        var _a;\n        if (isUpdate === void 0) { isUpdate = false; }\n        var _b = this, shapeFactory = _b.shapeFactory, container = _b.container, shapeType = _b.shapeType;\n        // 自定义 shape 有可能返回空 shape\n        this.shape = shapeFactory.drawShape(shapeType, model, container);\n        if (this.shape) {\n            this.setShapeInfo(this.shape, model); // 存储绘图数据\n            // @ts-ignore\n            var name_1 = this.shape.cfg.name;\n            // 附加 element 的 name, name 现在支持数组了，很好用了\n            if (!name_1) {\n                // 这个地方如果用户添加了 name, 则附加 name ，否则就添加自己的 name\n                // @ts-ignore\n                this.shape.cfg.name = ['element', this.shapeFactory.geometryType];\n            }\n            else if (isString(name_1)) {\n                // @ts-ignore\n                this.shape.cfg.name = ['element', name_1];\n            }\n            // 执行入场动画\n            var animateType = isUpdate ? 'enter' : 'appear';\n            var animateCfg = this.getAnimateCfg(animateType);\n            if (animateCfg) {\n                // 开始执行动画的生命周期\n                (_a = this.geometry) === null || _a === void 0 ? void 0 : _a.emit(GEOMETRY_LIFE_CIRCLE.BEFORE_DRAW_ANIMATE);\n                doAnimate(this.shape, animateCfg, {\n                    coordinate: shapeFactory.coordinate,\n                    toAttrs: __assign({}, this.shape.attr()),\n                });\n            }\n        }\n    };\n    // 获取虚拟 Group\n    Element.prototype.getOffscreenGroup = function () {\n        if (!this.offscreenGroup) {\n            var GroupCtor = this.container.getGroupBase(); // 获取分组的构造函数\n            this.offscreenGroup = new GroupCtor({});\n        }\n        return this.offscreenGroup;\n    };\n    // 设置 shape 上需要携带的信息\n    Element.prototype.setShapeInfo = function (shape, data) {\n        var _this = this;\n        // @ts-ignore\n        shape.cfg.origin = data;\n        // @ts-ignore\n        shape.cfg.element = this;\n        if (shape.isGroup()) {\n            var children = shape.get('children');\n            children.forEach(function (child) {\n                _this.setShapeInfo(child, data);\n            });\n        }\n    };\n    // 更新当前 shape 的样式\n    Element.prototype.syncShapeStyle = function (sourceShape, targetShape, states, animateCfg, index) {\n        var _this = this;\n        var _a;\n        if (states === void 0) { states = []; }\n        if (index === void 0) { index = 0; }\n        if (!sourceShape || !targetShape) {\n            return;\n        }\n        // 所有的 shape 都需要同步 clip\n        var clip = sourceShape.get('clipShape');\n        var newClip = targetShape.get('clipShape');\n        this.syncShapeStyle(clip, newClip, states, animateCfg);\n        if (sourceShape.isGroup()) {\n            var children = sourceShape.get('children');\n            var newChildren = targetShape.get('children');\n            for (var i = 0; i < children.length; i++) {\n                this.syncShapeStyle(children[i], newChildren[i], states, animateCfg, index + i);\n            }\n        }\n        else {\n            if (!isEmpty(states) && !isEqual(states, ['reset'])) {\n                var name_2 = sourceShape.get('name');\n                if (isArray(name_2)) {\n                    // 会附加 element 的 name\n                    name_2 = name_2[1];\n                }\n                each(states, function (state) {\n                    // background shape 不进行状态样式设置\n                    if (targetShape.get('name') !== BACKGROUND_SHAPE) {\n                        var style = _this.getStateStyle(state, name_2 || index); // 如果用户没有设置 name，则默认根据索引值\n                        targetShape.attr(style);\n                    }\n                });\n            }\n            var newAttrs = getReplaceAttrs(sourceShape, targetShape);\n            if (this.animate) {\n                if (animateCfg) {\n                    (_a = this.geometry) === null || _a === void 0 ? void 0 : _a.emit(GEOMETRY_LIFE_CIRCLE.BEFORE_DRAW_ANIMATE);\n                    // 需要进行动画\n                    doAnimate(sourceShape, animateCfg, {\n                        coordinate: this.shapeFactory.coordinate,\n                        toAttrs: newAttrs,\n                        shapeModel: this.model,\n                    });\n                }\n                else if (!isEmpty(states)) {\n                    sourceShape.stopAnimate();\n                    sourceShape.animate(newAttrs, {\n                        duration: 300,\n                    });\n                }\n                else {\n                    sourceShape.attr(newAttrs);\n                }\n            }\n            else {\n                sourceShape.attr(newAttrs);\n            }\n        }\n    };\n    Element.prototype.getShapeType = function (model) {\n        var shape = get(model, 'shape');\n        return isArray(shape) ? shape[0] : shape;\n    };\n    return Element;\n}(Base));\nexport default Element;\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}