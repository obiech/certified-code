{"ast":null,"code":"import { gql } from 'apollo-angular';\nimport * as Apollo from 'apollo-angular';\nimport * as i0 from \"@angular/core\";\nimport * as i1 from \"apollo-angular\";\nexport var AddressSortFields;\n(function (AddressSortFields) {\n  AddressSortFields[\"Id\"] = \"id\";\n})(AddressSortFields || (AddressSortFields = {}));\nexport var AnnouncementSortFields;\n(function (AnnouncementSortFields) {\n  AnnouncementSortFields[\"Id\"] = \"id\";\n})(AnnouncementSortFields || (AnnouncementSortFields = {}));\nexport var AnnouncementUserType;\n(function (AnnouncementUserType) {\n  AnnouncementUserType[\"Driver\"] = \"Driver\";\n  AnnouncementUserType[\"Operator\"] = \"Operator\";\n  AnnouncementUserType[\"Rider\"] = \"Rider\";\n})(AnnouncementUserType || (AnnouncementUserType = {}));\nexport var CalculateFareError;\n(function (CalculateFareError) {\n  CalculateFareError[\"NoServiceInRegion\"] = \"NoServiceInRegion\";\n  CalculateFareError[\"RegionUnsupported\"] = \"RegionUnsupported\";\n})(CalculateFareError || (CalculateFareError = {}));\nexport var CarColorSortFields;\n(function (CarColorSortFields) {\n  CarColorSortFields[\"Id\"] = \"id\";\n})(CarColorSortFields || (CarColorSortFields = {}));\nexport var CarModelSortFields;\n(function (CarModelSortFields) {\n  CarModelSortFields[\"Id\"] = \"id\";\n})(CarModelSortFields || (CarModelSortFields = {}));\nexport var ChartTimeframe;\n(function (ChartTimeframe) {\n  ChartTimeframe[\"Daily\"] = \"Daily\";\n  ChartTimeframe[\"Monthly\"] = \"Monthly\";\n  ChartTimeframe[\"Weekly\"] = \"Weekly\";\n  ChartTimeframe[\"Yearly\"] = \"Yearly\";\n})(ChartTimeframe || (ChartTimeframe = {}));\nexport var ComplaintActivitySortFields;\n(function (ComplaintActivitySortFields) {\n  ComplaintActivitySortFields[\"ComplaintId\"] = \"complaintId\";\n  ComplaintActivitySortFields[\"Id\"] = \"id\";\n})(ComplaintActivitySortFields || (ComplaintActivitySortFields = {}));\nexport var ComplaintActivityType;\n(function (ComplaintActivityType) {\n  ComplaintActivityType[\"AssignToOperator\"] = \"AssignToOperator\";\n  ComplaintActivityType[\"Resolved\"] = \"Resolved\";\n  ComplaintActivityType[\"Update\"] = \"Update\";\n})(ComplaintActivityType || (ComplaintActivityType = {}));\nexport var ComplaintSortFields;\n(function (ComplaintSortFields) {\n  ComplaintSortFields[\"Id\"] = \"id\";\n  ComplaintSortFields[\"RequestId\"] = \"requestId\";\n  ComplaintSortFields[\"Status\"] = \"status\";\n})(ComplaintSortFields || (ComplaintSortFields = {}));\nexport var ComplaintStatus;\n(function (ComplaintStatus) {\n  ComplaintStatus[\"Resolved\"] = \"Resolved\";\n  ComplaintStatus[\"Submitted\"] = \"Submitted\";\n  ComplaintStatus[\"UnderInvestigation\"] = \"UnderInvestigation\";\n})(ComplaintStatus || (ComplaintStatus = {}));\nexport var CouponSortFields;\n(function (CouponSortFields) {\n  CouponSortFields[\"Id\"] = \"id\";\n})(CouponSortFields || (CouponSortFields = {}));\nexport var DistressSignalSortFields;\n(function (DistressSignalSortFields) {\n  DistressSignalSortFields[\"Id\"] = \"id\";\n  DistressSignalSortFields[\"Status\"] = \"status\";\n})(DistressSignalSortFields || (DistressSignalSortFields = {}));\nexport var DriverDeductTransactionType;\n(function (DriverDeductTransactionType) {\n  DriverDeductTransactionType[\"Commission\"] = \"Commission\";\n  DriverDeductTransactionType[\"Correction\"] = \"Correction\";\n  DriverDeductTransactionType[\"Withdraw\"] = \"Withdraw\";\n})(DriverDeductTransactionType || (DriverDeductTransactionType = {}));\nexport var DriverRechargeTransactionType;\n(function (DriverRechargeTransactionType) {\n  DriverRechargeTransactionType[\"BankTransfer\"] = \"BankTransfer\";\n  DriverRechargeTransactionType[\"Gift\"] = \"Gift\";\n  DriverRechargeTransactionType[\"InAppPayment\"] = \"InAppPayment\";\n  DriverRechargeTransactionType[\"OrderFee\"] = \"OrderFee\";\n})(DriverRechargeTransactionType || (DriverRechargeTransactionType = {}));\nexport var DriverSortFields;\n(function (DriverSortFields) {\n  DriverSortFields[\"FleetId\"] = \"fleetId\";\n  DriverSortFields[\"Id\"] = \"id\";\n  DriverSortFields[\"LastName\"] = \"lastName\";\n  DriverSortFields[\"MobileNumber\"] = \"mobileNumber\";\n  DriverSortFields[\"Status\"] = \"status\";\n})(DriverSortFields || (DriverSortFields = {}));\nexport var DriverStatus;\n(function (DriverStatus) {\n  DriverStatus[\"Blocked\"] = \"Blocked\";\n  DriverStatus[\"HardReject\"] = \"HardReject\";\n  DriverStatus[\"InService\"] = \"InService\";\n  DriverStatus[\"Offline\"] = \"Offline\";\n  DriverStatus[\"Online\"] = \"Online\";\n  DriverStatus[\"PendingApproval\"] = \"PendingApproval\";\n  DriverStatus[\"SoftReject\"] = \"SoftReject\";\n  DriverStatus[\"WaitingDocuments\"] = \"WaitingDocuments\";\n})(DriverStatus || (DriverStatus = {}));\nexport var DriverTransactionSortFields;\n(function (DriverTransactionSortFields) {\n  DriverTransactionSortFields[\"Amount\"] = \"amount\";\n  DriverTransactionSortFields[\"CreatedAt\"] = \"createdAt\";\n  DriverTransactionSortFields[\"DriverId\"] = \"driverId\";\n  DriverTransactionSortFields[\"Id\"] = \"id\";\n  DriverTransactionSortFields[\"PaymentGatewayId\"] = \"paymentGatewayId\";\n  DriverTransactionSortFields[\"PayoutAccountId\"] = \"payoutAccountId\";\n  DriverTransactionSortFields[\"PayoutMethodId\"] = \"payoutMethodId\";\n  DriverTransactionSortFields[\"PayoutSessionId\"] = \"payoutSessionId\";\n  DriverTransactionSortFields[\"Status\"] = \"status\";\n})(DriverTransactionSortFields || (DriverTransactionSortFields = {}));\nexport var DriverWalletSortFields;\n(function (DriverWalletSortFields) {\n  DriverWalletSortFields[\"Balance\"] = \"balance\";\n  DriverWalletSortFields[\"Currency\"] = \"currency\";\n  DriverWalletSortFields[\"DriverId\"] = \"driverId\";\n  DriverWalletSortFields[\"Id\"] = \"id\";\n})(DriverWalletSortFields || (DriverWalletSortFields = {}));\nexport var ExportTable;\n(function (ExportTable) {\n  ExportTable[\"DriverWallet\"] = \"DriverWallet\";\n  ExportTable[\"FleetWallet\"] = \"FleetWallet\";\n  ExportTable[\"ProviderWallet\"] = \"ProviderWallet\";\n  ExportTable[\"RiderWallet\"] = \"RiderWallet\";\n})(ExportTable || (ExportTable = {}));\nexport var ExportType;\n(function (ExportType) {\n  ExportType[\"Csv\"] = \"CSV\";\n})(ExportType || (ExportType = {}));\nexport var FeedbackParameterSortFields;\n(function (FeedbackParameterSortFields) {\n  FeedbackParameterSortFields[\"Id\"] = \"id\";\n  FeedbackParameterSortFields[\"IsGood\"] = \"isGood\";\n  FeedbackParameterSortFields[\"Title\"] = \"title\";\n})(FeedbackParameterSortFields || (FeedbackParameterSortFields = {}));\nexport var FeedbackSortFields;\n(function (FeedbackSortFields) {\n  FeedbackSortFields[\"DriverId\"] = \"driverId\";\n  FeedbackSortFields[\"Id\"] = \"id\";\n  FeedbackSortFields[\"RequestId\"] = \"requestId\";\n})(FeedbackSortFields || (FeedbackSortFields = {}));\nexport var FleetSortFields;\n(function (FleetSortFields) {\n  FleetSortFields[\"Id\"] = \"id\";\n  FleetSortFields[\"Name\"] = \"name\";\n})(FleetSortFields || (FleetSortFields = {}));\nexport var FleetTransactionSortFields;\n(function (FleetTransactionSortFields) {\n  FleetTransactionSortFields[\"FleetId\"] = \"fleetId\";\n  FleetTransactionSortFields[\"Id\"] = \"id\";\n  FleetTransactionSortFields[\"OperatorId\"] = \"operatorId\";\n  FleetTransactionSortFields[\"RequestId\"] = \"requestId\";\n})(FleetTransactionSortFields || (FleetTransactionSortFields = {}));\nexport var FleetWalletSortFields;\n(function (FleetWalletSortFields) {\n  FleetWalletSortFields[\"Balance\"] = \"balance\";\n  FleetWalletSortFields[\"Currency\"] = \"currency\";\n  FleetWalletSortFields[\"FleetId\"] = \"fleetId\";\n  FleetWalletSortFields[\"Id\"] = \"id\";\n})(FleetWalletSortFields || (FleetWalletSortFields = {}));\nexport var Gender;\n(function (Gender) {\n  Gender[\"Female\"] = \"Female\";\n  Gender[\"Male\"] = \"Male\";\n  Gender[\"Unknown\"] = \"Unknown\";\n})(Gender || (Gender = {}));\nexport var GiftBatchSortFields;\n(function (GiftBatchSortFields) {\n  GiftBatchSortFields[\"Id\"] = \"id\";\n})(GiftBatchSortFields || (GiftBatchSortFields = {}));\nexport var GiftCodeSortFields;\n(function (GiftCodeSortFields) {\n  GiftCodeSortFields[\"Id\"] = \"id\";\n  GiftCodeSortFields[\"UsedAt\"] = \"usedAt\";\n})(GiftCodeSortFields || (GiftCodeSortFields = {}));\n/** Group by */\nexport var GroupBy;\n(function (GroupBy) {\n  GroupBy[\"Day\"] = \"DAY\";\n  GroupBy[\"Month\"] = \"MONTH\";\n  GroupBy[\"Week\"] = \"WEEK\";\n  GroupBy[\"Year\"] = \"YEAR\";\n})(GroupBy || (GroupBy = {}));\nexport var MediaSortFields;\n(function (MediaSortFields) {\n  MediaSortFields[\"Id\"] = \"id\";\n})(MediaSortFields || (MediaSortFields = {}));\nexport var MessageStatus;\n(function (MessageStatus) {\n  MessageStatus[\"Delivered\"] = \"Delivered\";\n  MessageStatus[\"Seen\"] = \"Seen\";\n  MessageStatus[\"Sent\"] = \"Sent\";\n})(MessageStatus || (MessageStatus = {}));\nexport var OperatorPermission;\n(function (OperatorPermission) {\n  OperatorPermission[\"AnnouncementsEdit\"] = \"Announcements_Edit\";\n  OperatorPermission[\"AnnouncementsView\"] = \"Announcements_View\";\n  OperatorPermission[\"CarsEdit\"] = \"Cars_Edit\";\n  OperatorPermission[\"CarsView\"] = \"Cars_View\";\n  OperatorPermission[\"ComplaintsEdit\"] = \"Complaints_Edit\";\n  OperatorPermission[\"ComplaintsView\"] = \"Complaints_View\";\n  OperatorPermission[\"CouponsEdit\"] = \"Coupons_Edit\";\n  OperatorPermission[\"CouponsView\"] = \"Coupons_View\";\n  OperatorPermission[\"DriverWalletEdit\"] = \"DriverWallet_Edit\";\n  OperatorPermission[\"DriverWalletView\"] = \"DriverWallet_View\";\n  OperatorPermission[\"DriversEdit\"] = \"Drivers_Edit\";\n  OperatorPermission[\"DriversView\"] = \"Drivers_View\";\n  OperatorPermission[\"FleetWalletEdit\"] = \"FleetWallet_Edit\";\n  OperatorPermission[\"FleetWalletView\"] = \"FleetWallet_View\";\n  OperatorPermission[\"FleetsEdit\"] = \"Fleets_Edit\";\n  OperatorPermission[\"FleetsView\"] = \"Fleets_View\";\n  OperatorPermission[\"GatewaysEdit\"] = \"Gateways_Edit\";\n  OperatorPermission[\"GatewaysView\"] = \"Gateways_View\";\n  OperatorPermission[\"GiftBatchCreate\"] = \"GiftBatch_Create\";\n  OperatorPermission[\"GiftBatchView\"] = \"GiftBatch_View\";\n  OperatorPermission[\"GiftBatchViewCodes\"] = \"GiftBatch_ViewCodes\";\n  OperatorPermission[\"PayoutsEdit\"] = \"Payouts_Edit\";\n  OperatorPermission[\"PayoutsView\"] = \"Payouts_View\";\n  OperatorPermission[\"ProviderWalletEdit\"] = \"ProviderWallet_Edit\";\n  OperatorPermission[\"ProviderWalletView\"] = \"ProviderWallet_View\";\n  OperatorPermission[\"RegionsEdit\"] = \"Regions_Edit\";\n  OperatorPermission[\"RegionsView\"] = \"Regions_View\";\n  OperatorPermission[\"RequestsView\"] = \"Requests_View\";\n  OperatorPermission[\"ReviewParameterEdit\"] = \"ReviewParameter_Edit\";\n  OperatorPermission[\"RiderWalletEdit\"] = \"RiderWallet_Edit\";\n  OperatorPermission[\"RiderWalletView\"] = \"RiderWallet_View\";\n  OperatorPermission[\"RidersEdit\"] = \"Riders_Edit\";\n  OperatorPermission[\"RidersView\"] = \"Riders_View\";\n  OperatorPermission[\"SmsProvidersEdit\"] = \"SMSProviders_Edit\";\n  OperatorPermission[\"SmsProvidersView\"] = \"SMSProviders_View\";\n  OperatorPermission[\"ServicesEdit\"] = \"Services_Edit\";\n  OperatorPermission[\"ServicesView\"] = \"Services_View\";\n  OperatorPermission[\"UsersEdit\"] = \"Users_Edit\";\n  OperatorPermission[\"UsersView\"] = \"Users_View\";\n})(OperatorPermission || (OperatorPermission = {}));\nexport var OperatorRoleSortFields;\n(function (OperatorRoleSortFields) {\n  OperatorRoleSortFields[\"Id\"] = \"id\";\n})(OperatorRoleSortFields || (OperatorRoleSortFields = {}));\nexport var OperatorSortFields;\n(function (OperatorSortFields) {\n  OperatorSortFields[\"Id\"] = \"id\";\n})(OperatorSortFields || (OperatorSortFields = {}));\nexport var OrderCancelReasonSortFields;\n(function (OrderCancelReasonSortFields) {\n  OrderCancelReasonSortFields[\"Id\"] = \"id\";\n})(OrderCancelReasonSortFields || (OrderCancelReasonSortFields = {}));\nexport var OrderMessageSortFields;\n(function (OrderMessageSortFields) {\n  OrderMessageSortFields[\"Id\"] = \"id\";\n})(OrderMessageSortFields || (OrderMessageSortFields = {}));\nexport var OrderSortFields;\n(function (OrderSortFields) {\n  OrderSortFields[\"CreatedOn\"] = \"createdOn\";\n  OrderSortFields[\"DriverId\"] = \"driverId\";\n  OrderSortFields[\"Id\"] = \"id\";\n  OrderSortFields[\"RiderId\"] = \"riderId\";\n  OrderSortFields[\"Status\"] = \"status\";\n})(OrderSortFields || (OrderSortFields = {}));\nexport var OrderStatus;\n(function (OrderStatus) {\n  OrderStatus[\"Arrived\"] = \"Arrived\";\n  OrderStatus[\"Booked\"] = \"Booked\";\n  OrderStatus[\"DriverAccepted\"] = \"DriverAccepted\";\n  OrderStatus[\"DriverCanceled\"] = \"DriverCanceled\";\n  OrderStatus[\"Expired\"] = \"Expired\";\n  OrderStatus[\"Finished\"] = \"Finished\";\n  OrderStatus[\"Found\"] = \"Found\";\n  OrderStatus[\"NoCloseFound\"] = \"NoCloseFound\";\n  OrderStatus[\"NotFound\"] = \"NotFound\";\n  OrderStatus[\"Requested\"] = \"Requested\";\n  OrderStatus[\"RiderCanceled\"] = \"RiderCanceled\";\n  OrderStatus[\"Started\"] = \"Started\";\n  OrderStatus[\"WaitingForPostPay\"] = \"WaitingForPostPay\";\n  OrderStatus[\"WaitingForPrePay\"] = \"WaitingForPrePay\";\n  OrderStatus[\"WaitingForReview\"] = \"WaitingForReview\";\n})(OrderStatus || (OrderStatus = {}));\nexport var PaymentGatewaySortFields;\n(function (PaymentGatewaySortFields) {\n  PaymentGatewaySortFields[\"Id\"] = \"id\";\n})(PaymentGatewaySortFields || (PaymentGatewaySortFields = {}));\nexport var PaymentGatewayType;\n(function (PaymentGatewayType) {\n  PaymentGatewayType[\"AmazonPaymentServices\"] = \"AmazonPaymentServices\";\n  PaymentGatewayType[\"BinancePay\"] = \"BinancePay\";\n  PaymentGatewayType[\"BrainTree\"] = \"BrainTree\";\n  PaymentGatewayType[\"CustomLink\"] = \"CustomLink\";\n  PaymentGatewayType[\"Flutterwave\"] = \"Flutterwave\";\n  PaymentGatewayType[\"Instamojo\"] = \"Instamojo\";\n  PaymentGatewayType[\"Mips\"] = \"MIPS\";\n  PaymentGatewayType[\"MercadoPago\"] = \"MercadoPago\";\n  PaymentGatewayType[\"MyFatoorah\"] = \"MyFatoorah\";\n  PaymentGatewayType[\"MyTMoney\"] = \"MyTMoney\";\n  PaymentGatewayType[\"OpenPix\"] = \"OpenPix\";\n  PaymentGatewayType[\"PayGate\"] = \"PayGate\";\n  PaymentGatewayType[\"PayPal\"] = \"PayPal\";\n  PaymentGatewayType[\"PayTr\"] = \"PayTR\";\n  PaymentGatewayType[\"PayU\"] = \"PayU\";\n  PaymentGatewayType[\"Paystack\"] = \"Paystack\";\n  PaymentGatewayType[\"Paytm\"] = \"Paytm\";\n  PaymentGatewayType[\"Razorpay\"] = \"Razorpay\";\n  PaymentGatewayType[\"SberBank\"] = \"SberBank\";\n  PaymentGatewayType[\"Stripe\"] = \"Stripe\";\n  PaymentGatewayType[\"WayForPay\"] = \"WayForPay\";\n})(PaymentGatewayType || (PaymentGatewayType = {}));\nexport var PayoutAccountSortFields;\n(function (PayoutAccountSortFields) {\n  PayoutAccountSortFields[\"Id\"] = \"id\";\n  PayoutAccountSortFields[\"IsDefault\"] = \"isDefault\";\n})(PayoutAccountSortFields || (PayoutAccountSortFields = {}));\nexport var PayoutMethodSortFields;\n(function (PayoutMethodSortFields) {\n  PayoutMethodSortFields[\"Id\"] = \"id\";\n})(PayoutMethodSortFields || (PayoutMethodSortFields = {}));\n/** The type of payout method */\nexport var PayoutMethodType;\n(function (PayoutMethodType) {\n  PayoutMethodType[\"BankTransfer\"] = \"BankTransfer\";\n  PayoutMethodType[\"Stripe\"] = \"Stripe\";\n})(PayoutMethodType || (PayoutMethodType = {}));\nexport var PayoutSessionSortFields;\n(function (PayoutSessionSortFields) {\n  PayoutSessionSortFields[\"Id\"] = \"id\";\n})(PayoutSessionSortFields || (PayoutSessionSortFields = {}));\nexport var PayoutSessionStatus;\n(function (PayoutSessionStatus) {\n  PayoutSessionStatus[\"Cancelled\"] = \"CANCELLED\";\n  PayoutSessionStatus[\"Failed\"] = \"FAILED\";\n  PayoutSessionStatus[\"Paid\"] = \"PAID\";\n  PayoutSessionStatus[\"Pending\"] = \"PENDING\";\n})(PayoutSessionStatus || (PayoutSessionStatus = {}));\nexport var ProviderDeductTransactionType;\n(function (ProviderDeductTransactionType) {\n  ProviderDeductTransactionType[\"Withdraw\"] = \"Withdraw\";\n})(ProviderDeductTransactionType || (ProviderDeductTransactionType = {}));\nexport var ProviderRechargeTransactionType;\n(function (ProviderRechargeTransactionType) {\n  ProviderRechargeTransactionType[\"Commission\"] = \"Commission\";\n})(ProviderRechargeTransactionType || (ProviderRechargeTransactionType = {}));\nexport var ProviderTransactionSortFields;\n(function (ProviderTransactionSortFields) {\n  ProviderTransactionSortFields[\"Id\"] = \"id\";\n  ProviderTransactionSortFields[\"OperatorId\"] = \"operatorId\";\n  ProviderTransactionSortFields[\"RequestId\"] = \"requestId\";\n})(ProviderTransactionSortFields || (ProviderTransactionSortFields = {}));\nexport var ProviderWalletSortFields;\n(function (ProviderWalletSortFields) {\n  ProviderWalletSortFields[\"Balance\"] = \"balance\";\n  ProviderWalletSortFields[\"Currency\"] = \"currency\";\n  ProviderWalletSortFields[\"Id\"] = \"id\";\n})(ProviderWalletSortFields || (ProviderWalletSortFields = {}));\nexport var RegionSortFields;\n(function (RegionSortFields) {\n  RegionSortFields[\"Currency\"] = \"currency\";\n  RegionSortFields[\"Id\"] = \"id\";\n})(RegionSortFields || (RegionSortFields = {}));\nexport var RequestActivitySortFields;\n(function (RequestActivitySortFields) {\n  RequestActivitySortFields[\"Id\"] = \"id\";\n})(RequestActivitySortFields || (RequestActivitySortFields = {}));\nexport var RequestActivityType;\n(function (RequestActivityType) {\n  RequestActivityType[\"ArrivedToDestination\"] = \"ArrivedToDestination\";\n  RequestActivityType[\"ArrivedToPickupPoint\"] = \"ArrivedToPickupPoint\";\n  RequestActivityType[\"BookedByOperator\"] = \"BookedByOperator\";\n  RequestActivityType[\"BookedByRider\"] = \"BookedByRider\";\n  RequestActivityType[\"CanceledByDriver\"] = \"CanceledByDriver\";\n  RequestActivityType[\"CanceledByOperator\"] = \"CanceledByOperator\";\n  RequestActivityType[\"CanceledByRider\"] = \"CanceledByRider\";\n  RequestActivityType[\"DriverAccepted\"] = \"DriverAccepted\";\n  RequestActivityType[\"Expired\"] = \"Expired\";\n  RequestActivityType[\"Paid\"] = \"Paid\";\n  RequestActivityType[\"RequestedByOperator\"] = \"RequestedByOperator\";\n  RequestActivityType[\"RequestedByRider\"] = \"RequestedByRider\";\n  RequestActivityType[\"Reviewed\"] = \"Reviewed\";\n  RequestActivityType[\"Started\"] = \"Started\";\n})(RequestActivityType || (RequestActivityType = {}));\nexport var RewardAppType;\n(function (RewardAppType) {\n  RewardAppType[\"Driver\"] = \"Driver\";\n  RewardAppType[\"Rider\"] = \"Rider\";\n})(RewardAppType || (RewardAppType = {}));\nexport var RewardBeneficiary;\n(function (RewardBeneficiary) {\n  RewardBeneficiary[\"Referrer\"] = \"Referrer\";\n  RewardBeneficiary[\"Self\"] = \"Self\";\n})(RewardBeneficiary || (RewardBeneficiary = {}));\nexport var RewardEvent;\n(function (RewardEvent) {\n  RewardEvent[\"Register\"] = \"Register\";\n  RewardEvent[\"ServiceCompleted\"] = \"ServiceCompleted\";\n})(RewardEvent || (RewardEvent = {}));\nexport var RewardSortFields;\n(function (RewardSortFields) {\n  RewardSortFields[\"Id\"] = \"id\";\n})(RewardSortFields || (RewardSortFields = {}));\nexport var RiderAddressSortFields;\n(function (RiderAddressSortFields) {\n  RiderAddressSortFields[\"Id\"] = \"id\";\n  RiderAddressSortFields[\"RiderId\"] = \"riderId\";\n})(RiderAddressSortFields || (RiderAddressSortFields = {}));\nexport var RiderAddressType;\n(function (RiderAddressType) {\n  RiderAddressType[\"Cafe\"] = \"Cafe\";\n  RiderAddressType[\"Gym\"] = \"Gym\";\n  RiderAddressType[\"Home\"] = \"Home\";\n  RiderAddressType[\"Other\"] = \"Other\";\n  RiderAddressType[\"Parent\"] = \"Parent\";\n  RiderAddressType[\"Park\"] = \"Park\";\n  RiderAddressType[\"Partner\"] = \"Partner\";\n  RiderAddressType[\"Work\"] = \"Work\";\n})(RiderAddressType || (RiderAddressType = {}));\nexport var RiderDeductTransactionType;\n(function (RiderDeductTransactionType) {\n  RiderDeductTransactionType[\"CancellationFee\"] = \"CancellationFee\";\n  RiderDeductTransactionType[\"Correction\"] = \"Correction\";\n  RiderDeductTransactionType[\"OrderFee\"] = \"OrderFee\";\n  RiderDeductTransactionType[\"ParkingFee\"] = \"ParkingFee\";\n  RiderDeductTransactionType[\"Withdraw\"] = \"Withdraw\";\n})(RiderDeductTransactionType || (RiderDeductTransactionType = {}));\nexport var RiderRechargeTransactionType;\n(function (RiderRechargeTransactionType) {\n  RiderRechargeTransactionType[\"BankTransfer\"] = \"BankTransfer\";\n  RiderRechargeTransactionType[\"Correction\"] = \"Correction\";\n  RiderRechargeTransactionType[\"Gift\"] = \"Gift\";\n  RiderRechargeTransactionType[\"InAppPayment\"] = \"InAppPayment\";\n})(RiderRechargeTransactionType || (RiderRechargeTransactionType = {}));\nexport var RiderSortFields;\n(function (RiderSortFields) {\n  RiderSortFields[\"FirstName\"] = \"firstName\";\n  RiderSortFields[\"Id\"] = \"id\";\n  RiderSortFields[\"LastName\"] = \"lastName\";\n  RiderSortFields[\"MobileNumber\"] = \"mobileNumber\";\n})(RiderSortFields || (RiderSortFields = {}));\nexport var RiderStatus;\n(function (RiderStatus) {\n  RiderStatus[\"Disabled\"] = \"Disabled\";\n  RiderStatus[\"Enabled\"] = \"Enabled\";\n})(RiderStatus || (RiderStatus = {}));\nexport var RiderTransactionSortFields;\n(function (RiderTransactionSortFields) {\n  RiderTransactionSortFields[\"Amount\"] = \"amount\";\n  RiderTransactionSortFields[\"CreatedAt\"] = \"createdAt\";\n  RiderTransactionSortFields[\"Currency\"] = \"currency\";\n  RiderTransactionSortFields[\"Id\"] = \"id\";\n  RiderTransactionSortFields[\"RiderId\"] = \"riderId\";\n})(RiderTransactionSortFields || (RiderTransactionSortFields = {}));\nexport var RiderWalletSortFields;\n(function (RiderWalletSortFields) {\n  RiderWalletSortFields[\"Balance\"] = \"balance\";\n  RiderWalletSortFields[\"Id\"] = \"id\";\n  RiderWalletSortFields[\"RiderId\"] = \"riderId\";\n})(RiderWalletSortFields || (RiderWalletSortFields = {}));\nexport var SmsProviderSortFields;\n(function (SmsProviderSortFields) {\n  SmsProviderSortFields[\"Id\"] = \"id\";\n})(SmsProviderSortFields || (SmsProviderSortFields = {}));\n/** The type of the SMS provider */\nexport var SmsProviderType;\n(function (SmsProviderType) {\n  SmsProviderType[\"BroadNet\"] = \"BroadNet\";\n  SmsProviderType[\"ClickSend\"] = \"ClickSend\";\n  SmsProviderType[\"Firebase\"] = \"Firebase\";\n  SmsProviderType[\"Infobip\"] = \"Infobip\";\n  SmsProviderType[\"MessageBird\"] = \"MessageBird\";\n  SmsProviderType[\"Pahappa\"] = \"Pahappa\";\n  SmsProviderType[\"Plivo\"] = \"Plivo\";\n  SmsProviderType[\"Twilio\"] = \"Twilio\";\n  SmsProviderType[\"Vonage\"] = \"Vonage\";\n})(SmsProviderType || (SmsProviderType = {}));\nexport var SosActivityAction;\n(function (SosActivityAction) {\n  SosActivityAction[\"ContactAuthorities\"] = \"ContactAuthorities\";\n  SosActivityAction[\"ContactDriver\"] = \"ContactDriver\";\n  SosActivityAction[\"MarkedAsFalseAlarm\"] = \"MarkedAsFalseAlarm\";\n  SosActivityAction[\"MarkedAsResolved\"] = \"MarkedAsResolved\";\n  SosActivityAction[\"Seen\"] = \"Seen\";\n  SosActivityAction[\"Submitted\"] = \"Submitted\";\n})(SosActivityAction || (SosActivityAction = {}));\nexport var SosActivitySortFields;\n(function (SosActivitySortFields) {\n  SosActivitySortFields[\"Id\"] = \"id\";\n})(SosActivitySortFields || (SosActivitySortFields = {}));\nexport var SosStatus;\n(function (SosStatus) {\n  SosStatus[\"FalseAlarm\"] = \"FalseAlarm\";\n  SosStatus[\"Resolved\"] = \"Resolved\";\n  SosStatus[\"Submitted\"] = \"Submitted\";\n  SosStatus[\"UnderReview\"] = \"UnderReview\";\n})(SosStatus || (SosStatus = {}));\n/** Saved payment method type */\nexport var SavedPaymentMethodType;\n(function (SavedPaymentMethodType) {\n  SavedPaymentMethodType[\"BankAccount\"] = \"BANK_ACCOUNT\";\n  SavedPaymentMethodType[\"Card\"] = \"CARD\";\n})(SavedPaymentMethodType || (SavedPaymentMethodType = {}));\nexport var ServiceCategorySortFields;\n(function (ServiceCategorySortFields) {\n  ServiceCategorySortFields[\"Id\"] = \"id\";\n})(ServiceCategorySortFields || (ServiceCategorySortFields = {}));\nexport var ServiceOptionIcon;\n(function (ServiceOptionIcon) {\n  ServiceOptionIcon[\"Custom1\"] = \"Custom1\";\n  ServiceOptionIcon[\"Custom2\"] = \"Custom2\";\n  ServiceOptionIcon[\"Custom3\"] = \"Custom3\";\n  ServiceOptionIcon[\"Custom4\"] = \"Custom4\";\n  ServiceOptionIcon[\"Custom5\"] = \"Custom5\";\n  ServiceOptionIcon[\"Luggage\"] = \"Luggage\";\n  ServiceOptionIcon[\"PackageDelivery\"] = \"PackageDelivery\";\n  ServiceOptionIcon[\"Pet\"] = \"Pet\";\n  ServiceOptionIcon[\"Shopping\"] = \"Shopping\";\n  ServiceOptionIcon[\"TwoWay\"] = \"TwoWay\";\n})(ServiceOptionIcon || (ServiceOptionIcon = {}));\nexport var ServiceOptionSortFields;\n(function (ServiceOptionSortFields) {\n  ServiceOptionSortFields[\"Id\"] = \"id\";\n})(ServiceOptionSortFields || (ServiceOptionSortFields = {}));\nexport var ServiceOptionType;\n(function (ServiceOptionType) {\n  ServiceOptionType[\"Free\"] = \"Free\";\n  ServiceOptionType[\"Paid\"] = \"Paid\";\n  ServiceOptionType[\"TwoWay\"] = \"TwoWay\";\n})(ServiceOptionType || (ServiceOptionType = {}));\nexport var ServicePaymentMethod;\n(function (ServicePaymentMethod) {\n  ServicePaymentMethod[\"CashCredit\"] = \"CashCredit\";\n  ServicePaymentMethod[\"OnlyCash\"] = \"OnlyCash\";\n  ServicePaymentMethod[\"OnlyCredit\"] = \"OnlyCredit\";\n})(ServicePaymentMethod || (ServicePaymentMethod = {}));\nexport var ServiceSortFields;\n(function (ServiceSortFields) {\n  ServiceSortFields[\"CategoryId\"] = \"categoryId\";\n  ServiceSortFields[\"Id\"] = \"id\";\n})(ServiceSortFields || (ServiceSortFields = {}));\n/** Sort Directions */\nexport var SortDirection;\n(function (SortDirection) {\n  SortDirection[\"Asc\"] = \"ASC\";\n  SortDirection[\"Desc\"] = \"DESC\";\n})(SortDirection || (SortDirection = {}));\n/** Sort Nulls Options */\nexport var SortNulls;\n(function (SortNulls) {\n  SortNulls[\"NullsFirst\"] = \"NULLS_FIRST\";\n  SortNulls[\"NullsLast\"] = \"NULLS_LAST\";\n})(SortNulls || (SortNulls = {}));\nexport var TransactionAction;\n(function (TransactionAction) {\n  TransactionAction[\"Deduct\"] = \"Deduct\";\n  TransactionAction[\"Recharge\"] = \"Recharge\";\n})(TransactionAction || (TransactionAction = {}));\nexport var TransactionStatus;\n(function (TransactionStatus) {\n  TransactionStatus[\"Canceled\"] = \"Canceled\";\n  TransactionStatus[\"Done\"] = \"Done\";\n  TransactionStatus[\"Processing\"] = \"Processing\";\n  TransactionStatus[\"Rejected\"] = \"Rejected\";\n})(TransactionStatus || (TransactionStatus = {}));\nexport var UpdateConfigStatus;\n(function (UpdateConfigStatus) {\n  UpdateConfigStatus[\"Invalid\"] = \"INVALID\";\n  UpdateConfigStatus[\"Ok\"] = \"OK\";\n})(UpdateConfigStatus || (UpdateConfigStatus = {}));\nexport var UpdatePurchaseCodeStatus;\n(function (UpdatePurchaseCodeStatus) {\n  UpdatePurchaseCodeStatus[\"ClientFound\"] = \"CLIENT_FOUND\";\n  UpdatePurchaseCodeStatus[\"Invalid\"] = \"INVALID\";\n  UpdatePurchaseCodeStatus[\"Ok\"] = \"OK\";\n  UpdatePurchaseCodeStatus[\"Overused\"] = \"OVERUSED\";\n})(UpdatePurchaseCodeStatus || (UpdatePurchaseCodeStatus = {}));\nexport var Weekday;\n(function (Weekday) {\n  Weekday[\"Friday\"] = \"Friday\";\n  Weekday[\"Monday\"] = \"Monday\";\n  Weekday[\"Saturday\"] = \"Saturday\";\n  Weekday[\"Sunday\"] = \"Sunday\";\n  Weekday[\"Thursday\"] = \"Thursday\";\n  Weekday[\"Tuesday\"] = \"Tuesday\";\n  Weekday[\"Wednesday\"] = \"Wednesday\";\n})(Weekday || (Weekday = {}));\nexport var ZonePriceSortFields;\n(function (ZonePriceSortFields) {\n  ZonePriceSortFields[\"Id\"] = \"id\";\n})(ZonePriceSortFields || (ZonePriceSortFields = {}));\nexport const DriverOverviewInfoFragmentDoc = gql`\n    fragment DriverOverviewInfo on Driver {\n  id\n  firstName\n  lastName\n  mobileNumber\n  status\n}\n    `;\nexport const DriverLocationFragmentDoc = gql`\n    fragment DriverLocation on OnlineDriver {\n  location {\n    lat\n    lng\n  }\n  driverId\n  lastUpdatedAt\n}\n    `;\nexport const NotificationsDocument = gql`\n    query Notifications {\n  complaintAggregate(filter: {status: {in: [UnderInvestigation, Submitted]}}) {\n    count {\n      id\n    }\n  }\n  distressSignalAggregate(filter: {status: {in: [UnderReview, Submitted]}}) {\n    count {\n      id\n    }\n  }\n  driverAggregate(filter: {status: {in: [PendingApproval]}}) {\n    count {\n      id\n    }\n  }\n}\n    `;\nexport class NotificationsGQL extends Apollo.Query {\n  constructor(apollo) {\n    super(apollo);\n    this.document = NotificationsDocument;\n  }\n  static {\n    this.ɵfac = function NotificationsGQL_Factory(t) {\n      return new (t || NotificationsGQL)(i0.ɵɵinject(i1.Apollo));\n    };\n  }\n  static {\n    this.ɵprov = /*@__PURE__*/i0.ɵɵdefineInjectable({\n      token: NotificationsGQL,\n      factory: NotificationsGQL.ɵfac,\n      providedIn: 'root'\n    });\n  }\n}\nexport const SosSubscriptionDocument = gql`\n    subscription SOSSubscription {\n  sosCreated {\n    id\n    status\n  }\n}\n    `;\nexport class SosSubscriptionGQL extends Apollo.Subscription {\n  constructor(apollo) {\n    super(apollo);\n    this.document = SosSubscriptionDocument;\n  }\n  static {\n    this.ɵfac = function SosSubscriptionGQL_Factory(t) {\n      return new (t || SosSubscriptionGQL)(i0.ɵɵinject(i1.Apollo));\n    };\n  }\n  static {\n    this.ɵprov = /*@__PURE__*/i0.ɵɵdefineInjectable({\n      token: SosSubscriptionGQL,\n      factory: SosSubscriptionGQL.ɵfac,\n      providedIn: 'root'\n    });\n  }\n}\nexport const ComplaintSubscriptionDocument = gql`\n    subscription ComplaintSubscription {\n  complaintCreated {\n    id\n    status\n  }\n}\n    `;\nexport class ComplaintSubscriptionGQL extends Apollo.Subscription {\n  constructor(apollo) {\n    super(apollo);\n    this.document = ComplaintSubscriptionDocument;\n  }\n  static {\n    this.ɵfac = function ComplaintSubscriptionGQL_Factory(t) {\n      return new (t || ComplaintSubscriptionGQL)(i0.ɵɵinject(i1.Apollo));\n    };\n  }\n  static {\n    this.ɵprov = /*@__PURE__*/i0.ɵɵdefineInjectable({\n      token: ComplaintSubscriptionGQL,\n      factory: ComplaintSubscriptionGQL.ɵfac,\n      providedIn: 'root'\n    });\n  }\n}\nexport const ViewComplaintDocument = gql`\n    query ViewComplaint($id: ID!) {\n  complaint(id: $id) {\n    id\n    inscriptionTimestamp\n    status\n    subject\n    content\n    requestedByDriver\n    activities {\n      type\n      comment\n      actor {\n        firstName\n        lastName\n      }\n      assignedTo {\n        firstName\n        lastName\n      }\n    }\n    order {\n      id\n      status\n      createdOn\n      startTimestamp\n      finishTimestamp\n      expectedTimestamp\n      costBest\n      costAfterCoupon\n      addresses\n      currency\n      rider {\n        id\n        mobileNumber\n        status\n        firstName\n        lastName\n        registrationTimestamp\n      }\n      driver {\n        id\n        mobileNumber\n        status\n        firstName\n        lastName\n        registrationTimestamp\n      }\n    }\n  }\n}\n    `;\nexport class ViewComplaintGQL extends Apollo.Query {\n  constructor(apollo) {\n    super(apollo);\n    this.document = ViewComplaintDocument;\n  }\n  static {\n    this.ɵfac = function ViewComplaintGQL_Factory(t) {\n      return new (t || ViewComplaintGQL)(i0.ɵɵinject(i1.Apollo));\n    };\n  }\n  static {\n    this.ɵprov = /*@__PURE__*/i0.ɵɵdefineInjectable({\n      token: ViewComplaintGQL,\n      factory: ViewComplaintGQL.ɵfac,\n      providedIn: 'root'\n    });\n  }\n}\nexport const UpdateComplaintStatusDocument = gql`\n    mutation UpdateComplaintStatus($id: ID!, $status: ComplaintStatus!) {\n  updateOneComplaint(input: {id: $id, update: {status: $status}}) {\n    id\n  }\n}\n    `;\nexport class UpdateComplaintStatusGQL extends Apollo.Mutation {\n  constructor(apollo) {\n    super(apollo);\n    this.document = UpdateComplaintStatusDocument;\n  }\n  static {\n    this.ɵfac = function UpdateComplaintStatusGQL_Factory(t) {\n      return new (t || UpdateComplaintStatusGQL)(i0.ɵɵinject(i1.Apollo));\n    };\n  }\n  static {\n    this.ɵprov = /*@__PURE__*/i0.ɵɵdefineInjectable({\n      token: UpdateComplaintStatusGQL,\n      factory: UpdateComplaintStatusGQL.ɵfac,\n      providedIn: 'root'\n    });\n  }\n}\nexport const ComplaintsListDocument = gql`\n    query ComplaintsList($paging: OffsetPaging) {\n  complaints(paging: $paging) {\n    nodes {\n      id\n      inscriptionTimestamp\n      subject\n      status\n      content\n    }\n    totalCount\n  }\n}\n    `;\nexport class ComplaintsListGQL extends Apollo.Query {\n  constructor(apollo) {\n    super(apollo);\n    this.document = ComplaintsListDocument;\n  }\n  static {\n    this.ɵfac = function ComplaintsListGQL_Factory(t) {\n      return new (t || ComplaintsListGQL)(i0.ɵɵinject(i1.Apollo));\n    };\n  }\n  static {\n    this.ɵprov = /*@__PURE__*/i0.ɵɵdefineInjectable({\n      token: ComplaintsListGQL,\n      factory: ComplaintsListGQL.ɵfac,\n      providedIn: 'root'\n    });\n  }\n}\nexport const CreateDriverDocument = gql`\n    mutation CreateDriver($input: UpdateDriverInput!) {\n  createOneDriver(input: {driver: $input}) {\n    id\n  }\n}\n    `;\nexport class CreateDriverGQL extends Apollo.Mutation {\n  constructor(apollo) {\n    super(apollo);\n    this.document = CreateDriverDocument;\n  }\n  static {\n    this.ɵfac = function CreateDriverGQL_Factory(t) {\n      return new (t || CreateDriverGQL)(i0.ɵɵinject(i1.Apollo));\n    };\n  }\n  static {\n    this.ɵprov = /*@__PURE__*/i0.ɵɵdefineInjectable({\n      token: CreateDriverGQL,\n      factory: CreateDriverGQL.ɵfac,\n      providedIn: 'root'\n    });\n  }\n}\nexport const ViewDriverDocument = gql`\n    query ViewDriver($id: ID!) {\n  driver(id: $id) {\n    id\n    firstName\n    lastName\n    mobileNumber\n    registrationTimestamp\n    lastSeenTimestamp\n    status\n    gender\n    carId\n    carColorId\n    fleetId\n    carProductionYear\n    carPlate\n    accountNumber\n    bankName\n    bankRoutingNumber\n    bankSwift\n    address\n    email\n    feedbacks {\n      nodes {\n        parametersAggregate {\n          groupBy {\n            title\n            isGood\n          }\n          count {\n            id\n          }\n        }\n      }\n    }\n    enabledServices {\n      id\n    }\n    documents {\n      id\n      address\n    }\n    mediaId\n    media {\n      address\n    }\n    rating\n    reviewCount\n  }\n  services {\n    id\n    name\n  }\n  fleets {\n    nodes {\n      id\n      name\n    }\n  }\n  driverFeedbackParametersSummary(driverId: $id) {\n    title\n    isGood\n    count\n  }\n  carModels(paging: {limit: 100}) {\n    nodes {\n      id\n      name\n    }\n  }\n  carColors {\n    id\n    name\n  }\n}\n    `;\nexport class ViewDriverGQL extends Apollo.Query {\n  constructor(apollo) {\n    super(apollo);\n    this.document = ViewDriverDocument;\n  }\n  static {\n    this.ɵfac = function ViewDriverGQL_Factory(t) {\n      return new (t || ViewDriverGQL)(i0.ɵɵinject(i1.Apollo));\n    };\n  }\n  static {\n    this.ɵprov = /*@__PURE__*/i0.ɵɵdefineInjectable({\n      token: ViewDriverGQL,\n      factory: ViewDriverGQL.ɵfac,\n      providedIn: 'root'\n    });\n  }\n}\nexport const UpdateDriverProfileDocument = gql`\n    mutation UpdateDriverProfile($id: ID!, $update: UpdateDriverInput!, $serviceIds: [ID!]!) {\n  updateOneDriver(input: {id: $id, update: $update}) {\n    id\n  }\n  setEnabledServicesOnDriver(input: {id: $id, relationIds: $serviceIds}) {\n    id\n  }\n}\n    `;\nexport class UpdateDriverProfileGQL extends Apollo.Mutation {\n  constructor(apollo) {\n    super(apollo);\n    this.document = UpdateDriverProfileDocument;\n  }\n  static {\n    this.ɵfac = function UpdateDriverProfileGQL_Factory(t) {\n      return new (t || UpdateDriverProfileGQL)(i0.ɵɵinject(i1.Apollo));\n    };\n  }\n  static {\n    this.ɵprov = /*@__PURE__*/i0.ɵɵdefineInjectable({\n      token: UpdateDriverProfileGQL,\n      factory: UpdateDriverProfileGQL.ɵfac,\n      providedIn: 'root'\n    });\n  }\n}\nexport const UpdateDriverStatusDocument = gql`\n    mutation UpdateDriverStatus($id: ID!, $status: DriverStatus) {\n  updateOneDriver(input: {id: $id, update: {status: $status}}) {\n    id\n  }\n}\n    `;\nexport class UpdateDriverStatusGQL extends Apollo.Mutation {\n  constructor(apollo) {\n    super(apollo);\n    this.document = UpdateDriverStatusDocument;\n  }\n  static {\n    this.ɵfac = function UpdateDriverStatusGQL_Factory(t) {\n      return new (t || UpdateDriverStatusGQL)(i0.ɵɵinject(i1.Apollo));\n    };\n  }\n  static {\n    this.ɵprov = /*@__PURE__*/i0.ɵɵdefineInjectable({\n      token: UpdateDriverStatusGQL,\n      factory: UpdateDriverStatusGQL.ɵfac,\n      providedIn: 'root'\n    });\n  }\n}\nexport const DriverFinancialsDocument = gql`\n    query DriverFinancials($id: ID!, $paging: OffsetPaging, $filter: DriverTransactionFilter, $sorting: [DriverTransactionSort!]) {\n  driver(id: $id) {\n    transactions(filter: $filter, paging: $paging, sorting: $sorting) {\n      nodes {\n        status\n        createdAt\n        amount\n        description\n        currency\n        action\n        deductType\n        rechargeType\n        refrenceNumber\n        requestId\n        paymentGatewayId\n        operatorId\n      }\n      totalCount\n    }\n    wallets {\n      balance\n      currency\n    }\n  }\n  regions {\n    nodes {\n      currency\n    }\n  }\n}\n    `;\nexport class DriverFinancialsGQL extends Apollo.Query {\n  constructor(apollo) {\n    super(apollo);\n    this.document = DriverFinancialsDocument;\n  }\n  static {\n    this.ɵfac = function DriverFinancialsGQL_Factory(t) {\n      return new (t || DriverFinancialsGQL)(i0.ɵɵinject(i1.Apollo));\n    };\n  }\n  static {\n    this.ɵprov = /*@__PURE__*/i0.ɵɵdefineInjectable({\n      token: DriverFinancialsGQL,\n      factory: DriverFinancialsGQL.ɵfac,\n      providedIn: 'root'\n    });\n  }\n}\nexport const DriverFeedbacksDocument = gql`\n    query DriverFeedbacks($id: ID!, $paging: OffsetPaging) {\n  feedbacks(filter: {driverId: {eq: $id}}, paging: $paging) {\n    nodes {\n      id\n      requestId\n      reviewTimestamp\n      score\n      description\n      parameters {\n        isGood\n        title\n      }\n    }\n  }\n}\n    `;\nexport class DriverFeedbacksGQL extends Apollo.Query {\n  constructor(apollo) {\n    super(apollo);\n    this.document = DriverFeedbacksDocument;\n  }\n  static {\n    this.ɵfac = function DriverFeedbacksGQL_Factory(t) {\n      return new (t || DriverFeedbacksGQL)(i0.ɵɵinject(i1.Apollo));\n    };\n  }\n  static {\n    this.ɵprov = /*@__PURE__*/i0.ɵɵdefineInjectable({\n      token: DriverFeedbacksGQL,\n      factory: DriverFeedbacksGQL.ɵfac,\n      providedIn: 'root'\n    });\n  }\n}\nexport const DriverOrdersDocument = gql`\n    query DriverOrders($driverId: ID!, $filter: OrderFilter, $paging: OffsetPaging, $sorting: [OrderSort!]) {\n  driver(id: $driverId) {\n    orders(filter: $filter, paging: $paging, sorting: $sorting) {\n      nodes {\n        id\n        createdOn\n        status\n        distanceBest\n        durationBest\n        costBest\n        costAfterCoupon\n        currency\n        addresses\n        points {\n          lat\n          lng\n        }\n        expectedTimestamp\n      }\n      totalCount\n    }\n  }\n}\n    `;\nexport class DriverOrdersGQL extends Apollo.Query {\n  constructor(apollo) {\n    super(apollo);\n    this.document = DriverOrdersDocument;\n  }\n  static {\n    this.ɵfac = function DriverOrdersGQL_Factory(t) {\n      return new (t || DriverOrdersGQL)(i0.ɵɵinject(i1.Apollo));\n    };\n  }\n  static {\n    this.ɵprov = /*@__PURE__*/i0.ɵɵdefineInjectable({\n      token: DriverOrdersGQL,\n      factory: DriverOrdersGQL.ɵfac,\n      providedIn: 'root'\n    });\n  }\n}\nexport const CreateDriverTransactionDocument = gql`\n    mutation CreateDriverTransaction($input: DriverTransactionInput!) {\n  createDriverTransaction(input: $input) {\n    id\n  }\n}\n    `;\nexport class CreateDriverTransactionGQL extends Apollo.Mutation {\n  constructor(apollo) {\n    super(apollo);\n    this.document = CreateDriverTransactionDocument;\n  }\n  static {\n    this.ɵfac = function CreateDriverTransactionGQL_Factory(t) {\n      return new (t || CreateDriverTransactionGQL)(i0.ɵɵinject(i1.Apollo));\n    };\n  }\n  static {\n    this.ɵprov = /*@__PURE__*/i0.ɵɵdefineInjectable({\n      token: CreateDriverTransactionGQL,\n      factory: CreateDriverTransactionGQL.ɵfac,\n      providedIn: 'root'\n    });\n  }\n}\nexport const DeleteDriverDocument = gql`\n    mutation DeleteDriver($id: ID!) {\n  deleteOneDriver(id: $id) {\n    id\n  }\n}\n    `;\nexport class DeleteDriverGQL extends Apollo.Mutation {\n  constructor(apollo) {\n    super(apollo);\n    this.document = DeleteDriverDocument;\n  }\n  static {\n    this.ɵfac = function DeleteDriverGQL_Factory(t) {\n      return new (t || DeleteDriverGQL)(i0.ɵɵinject(i1.Apollo));\n    };\n  }\n  static {\n    this.ɵprov = /*@__PURE__*/i0.ɵɵdefineInjectable({\n      token: DeleteDriverGQL,\n      factory: DeleteDriverGQL.ɵfac,\n      providedIn: 'root'\n    });\n  }\n}\nexport const DriversListDocument = gql`\n    query DriversList($paging: OffsetPaging, $filter: DriverFilter, $sorting: [DriverSort!]) {\n  drivers(paging: $paging, filter: $filter, sorting: $sorting) {\n    nodes {\n      id\n      firstName\n      lastName\n      gender\n      mobileNumber\n      status\n      registrationTimestamp\n    }\n    totalCount\n  }\n}\n    `;\nexport class DriversListGQL extends Apollo.Query {\n  constructor(apollo) {\n    super(apollo);\n    this.document = DriversListDocument;\n  }\n  static {\n    this.ɵfac = function DriversListGQL_Factory(t) {\n      return new (t || DriversListGQL)(i0.ɵɵinject(i1.Apollo));\n    };\n  }\n  static {\n    this.ɵprov = /*@__PURE__*/i0.ɵɵdefineInjectable({\n      token: DriversListGQL,\n      factory: DriversListGQL.ɵfac,\n      providedIn: 'root'\n    });\n  }\n}\nexport const ProviderWalletsListDocument = gql`\n    query ProviderWalletsList($paging: OffsetPaging) {\n  providerTransactions(paging: $paging) {\n    nodes {\n      createdAt\n      action\n      deductType\n      rechargeType\n      amount\n      currency\n      description\n      requestId\n      operatorId\n    }\n    totalCount\n  }\n  providerWallets {\n    balance\n    currency\n  }\n  regions {\n    nodes {\n      currency\n    }\n  }\n}\n    `;\nexport class ProviderWalletsListGQL extends Apollo.Query {\n  constructor(apollo) {\n    super(apollo);\n    this.document = ProviderWalletsListDocument;\n  }\n  static {\n    this.ɵfac = function ProviderWalletsListGQL_Factory(t) {\n      return new (t || ProviderWalletsListGQL)(i0.ɵɵinject(i1.Apollo));\n    };\n  }\n  static {\n    this.ɵprov = /*@__PURE__*/i0.ɵɵdefineInjectable({\n      token: ProviderWalletsListGQL,\n      factory: ProviderWalletsListGQL.ɵfac,\n      providedIn: 'root'\n    });\n  }\n}\nexport const ExportDocument = gql`\n    query Export($input: ExportArgs!) {\n  export(input: $input) {\n    url\n  }\n}\n    `;\nexport class ExportGQL extends Apollo.Query {\n  constructor(apollo) {\n    super(apollo);\n    this.document = ExportDocument;\n  }\n  static {\n    this.ɵfac = function ExportGQL_Factory(t) {\n      return new (t || ExportGQL)(i0.ɵɵinject(i1.Apollo));\n    };\n  }\n  static {\n    this.ɵprov = /*@__PURE__*/i0.ɵɵdefineInjectable({\n      token: ExportGQL,\n      factory: ExportGQL.ɵfac,\n      providedIn: 'root'\n    });\n  }\n}\nexport const DriverWalletsListDocument = gql`\n    query DriverWalletsList($paging: OffsetPaging) {\n  driverWallets(paging: $paging) {\n    nodes {\n      id\n      driverId\n      balance\n      currency\n      driver {\n        firstName\n        lastName\n      }\n    }\n    totalCount\n  }\n  regions {\n    nodes {\n      currency\n    }\n  }\n}\n    `;\nexport class DriverWalletsListGQL extends Apollo.Query {\n  constructor(apollo) {\n    super(apollo);\n    this.document = DriverWalletsListDocument;\n  }\n  static {\n    this.ɵfac = function DriverWalletsListGQL_Factory(t) {\n      return new (t || DriverWalletsListGQL)(i0.ɵɵinject(i1.Apollo));\n    };\n  }\n  static {\n    this.ɵprov = /*@__PURE__*/i0.ɵɵdefineInjectable({\n      token: DriverWalletsListGQL,\n      factory: DriverWalletsListGQL.ɵfac,\n      providedIn: 'root'\n    });\n  }\n}\nexport const FleetWalletsListDocument = gql`\n    query FleetWalletsList($paging: OffsetPaging, $filter: FleetWalletFilter) {\n  fleetWallets(paging: $paging, filter: $filter) {\n    nodes {\n      id\n      balance\n      currency\n      fleetId\n      fleet {\n        name\n      }\n    }\n    totalCount\n  }\n  regions {\n    nodes {\n      currency\n    }\n  }\n}\n    `;\nexport class FleetWalletsListGQL extends Apollo.Query {\n  constructor(apollo) {\n    super(apollo);\n    this.document = FleetWalletsListDocument;\n  }\n  static {\n    this.ɵfac = function FleetWalletsListGQL_Factory(t) {\n      return new (t || FleetWalletsListGQL)(i0.ɵɵinject(i1.Apollo));\n    };\n  }\n  static {\n    this.ɵprov = /*@__PURE__*/i0.ɵɵdefineInjectable({\n      token: FleetWalletsListGQL,\n      factory: FleetWalletsListGQL.ɵfac,\n      providedIn: 'root'\n    });\n  }\n}\nexport const RiderWalletsListDocument = gql`\n    query RiderWalletsList($paging: OffsetPaging) {\n  riderWallets(paging: $paging) {\n    nodes {\n      balance\n      currency\n      riderId\n      rider {\n        firstName\n        lastName\n      }\n    }\n    totalCount\n  }\n  regions {\n    nodes {\n      currency\n    }\n  }\n}\n    `;\nexport class RiderWalletsListGQL extends Apollo.Query {\n  constructor(apollo) {\n    super(apollo);\n    this.document = RiderWalletsListDocument;\n  }\n  static {\n    this.ɵfac = function RiderWalletsListGQL_Factory(t) {\n      return new (t || RiderWalletsListGQL)(i0.ɵɵinject(i1.Apollo));\n    };\n  }\n  static {\n    this.ɵprov = /*@__PURE__*/i0.ɵɵdefineInjectable({\n      token: RiderWalletsListGQL,\n      factory: RiderWalletsListGQL.ɵfac,\n      providedIn: 'root'\n    });\n  }\n}\nexport const DispatcherCalculateFareDocument = gql`\n    query DispatcherCalculateFare($points: [PointInput!]!, $riderId: ID!) {\n  calculateFare(input: {points: $points, riderId: $riderId}) {\n    currency\n    distance\n    duration\n    services {\n      name\n      services {\n        id\n        name\n        cost\n      }\n    }\n  }\n}\n    `;\nexport class DispatcherCalculateFareGQL extends Apollo.Query {\n  constructor(apollo) {\n    super(apollo);\n    this.document = DispatcherCalculateFareDocument;\n  }\n  static {\n    this.ɵfac = function DispatcherCalculateFareGQL_Factory(t) {\n      return new (t || DispatcherCalculateFareGQL)(i0.ɵɵinject(i1.Apollo));\n    };\n  }\n  static {\n    this.ɵprov = /*@__PURE__*/i0.ɵɵdefineInjectable({\n      token: DispatcherCalculateFareGQL,\n      factory: DispatcherCalculateFareGQL.ɵfac,\n      providedIn: 'root'\n    });\n  }\n}\nexport const CreateOrderDocument = gql`\n    mutation CreateOrder($riderId: ID!, $points: [PointInput!]!, $addresses: [String!]!, $serviceId: ID!, $intervalMinutes: Int!) {\n  createOrder(\n    input: {points: $points, serviceId: $serviceId, addresses: $addresses, intervalMinutes: $intervalMinutes, riderId: $riderId}\n  ) {\n    id\n  }\n}\n    `;\nexport class CreateOrderGQL extends Apollo.Mutation {\n  constructor(apollo) {\n    super(apollo);\n    this.document = CreateOrderDocument;\n  }\n  static {\n    this.ɵfac = function CreateOrderGQL_Factory(t) {\n      return new (t || CreateOrderGQL)(i0.ɵɵinject(i1.Apollo));\n    };\n  }\n  static {\n    this.ɵprov = /*@__PURE__*/i0.ɵɵdefineInjectable({\n      token: CreateOrderGQL,\n      factory: CreateOrderGQL.ɵfac,\n      providedIn: 'root'\n    });\n  }\n}\nexport const OrderUpdatedDocument = gql`\n    subscription OrderUpdated($id: ID!) {\n  orderUpdated(orderId: $id) {\n    id\n    status\n    driver {\n      firstName\n      lastName\n      mobileNumber\n    }\n  }\n}\n    `;\nexport class OrderUpdatedGQL extends Apollo.Subscription {\n  constructor(apollo) {\n    super(apollo);\n    this.document = OrderUpdatedDocument;\n  }\n  static {\n    this.ɵfac = function OrderUpdatedGQL_Factory(t) {\n      return new (t || OrderUpdatedGQL)(i0.ɵɵinject(i1.Apollo));\n    };\n  }\n  static {\n    this.ɵprov = /*@__PURE__*/i0.ɵɵdefineInjectable({\n      token: OrderUpdatedGQL,\n      factory: OrderUpdatedGQL.ɵfac,\n      providedIn: 'root'\n    });\n  }\n}\nexport const CancelOrderDocument = gql`\n    mutation CancelOrder($orderId: ID!) {\n  cancelOrder(orderId: $orderId) {\n    id\n    status\n  }\n}\n    `;\nexport class CancelOrderGQL extends Apollo.Mutation {\n  constructor(apollo) {\n    super(apollo);\n    this.document = CancelOrderDocument;\n  }\n  static {\n    this.ɵfac = function CancelOrderGQL_Factory(t) {\n      return new (t || CancelOrderGQL)(i0.ɵɵinject(i1.Apollo));\n    };\n  }\n  static {\n    this.ɵprov = /*@__PURE__*/i0.ɵɵdefineInjectable({\n      token: CancelOrderGQL,\n      factory: CancelOrderGQL.ɵfac,\n      providedIn: 'root'\n    });\n  }\n}\nexport const OverviewDocument = gql`\n    query Overview {\n  complaintAggregate(filter: {status: {in: [Submitted, UnderInvestigation]}}) {\n    count {\n      id\n    }\n  }\n  driverAggregate(filter: {status: {eq: PendingApproval}}) {\n    count {\n      id\n    }\n  }\n  activeOrders: orderAggregate(\n    filter: {status: {in: [DriverAccepted, Arrived, Started, WaitingForPostPay]}}\n  ) {\n    count {\n      id\n    }\n  }\n  bookedOrders: orderAggregate(filter: {status: {eq: Booked}}) {\n    count {\n      id\n    }\n  }\n  getDriversLocation(center: {lat: 45, lng: 45}, count: 150) {\n    ...DriverLocation\n  }\n}\n    ${DriverLocationFragmentDoc}`;\nexport class OverviewGQL extends Apollo.Query {\n  constructor(apollo) {\n    super(apollo);\n    this.document = OverviewDocument;\n  }\n  static {\n    this.ɵfac = function OverviewGQL_Factory(t) {\n      return new (t || OverviewGQL)(i0.ɵɵinject(i1.Apollo));\n    };\n  }\n  static {\n    this.ɵprov = /*@__PURE__*/i0.ɵɵdefineInjectable({\n      token: OverviewGQL,\n      factory: OverviewGQL.ɵfac,\n      providedIn: 'root'\n    });\n  }\n}\nexport const OverviewDriverPagingDocument = gql`\n    query OverviewDriverPaging($ids: [ID!]!) {\n  drivers(filter: {id: {in: $ids}}) {\n    nodes {\n      ...DriverOverviewInfo\n    }\n    totalCount\n  }\n}\n    ${DriverOverviewInfoFragmentDoc}`;\nexport class OverviewDriverPagingGQL extends Apollo.Query {\n  constructor(apollo) {\n    super(apollo);\n    this.document = OverviewDriverPagingDocument;\n  }\n  static {\n    this.ɵfac = function OverviewDriverPagingGQL_Factory(t) {\n      return new (t || OverviewDriverPagingGQL)(i0.ɵɵinject(i1.Apollo));\n    };\n  }\n  static {\n    this.ɵprov = /*@__PURE__*/i0.ɵɵdefineInjectable({\n      token: OverviewDriverPagingGQL,\n      factory: OverviewDriverPagingGQL.ɵfac,\n      providedIn: 'root'\n    });\n  }\n}\nexport const RequestsChartDocument = gql`\n    query RequestsChart($timeframe: ChartTimeframe!) {\n  requestChart(timeframe: $timeframe) {\n    time\n    count\n    status\n  }\n}\n    `;\nexport class RequestsChartGQL extends Apollo.Query {\n  constructor(apollo) {\n    super(apollo);\n    this.document = RequestsChartDocument;\n  }\n  static {\n    this.ɵfac = function RequestsChartGQL_Factory(t) {\n      return new (t || RequestsChartGQL)(i0.ɵɵinject(i1.Apollo));\n    };\n  }\n  static {\n    this.ɵprov = /*@__PURE__*/i0.ɵɵdefineInjectable({\n      token: RequestsChartGQL,\n      factory: RequestsChartGQL.ɵfac,\n      providedIn: 'root'\n    });\n  }\n}\nexport const IncomeChartDocument = gql`\n    query IncomeChart($timeframe: ChartTimeframe!) {\n  incomeChart(timeframe: $timeframe) {\n    time\n    sum\n    currency\n  }\n}\n    `;\nexport class IncomeChartGQL extends Apollo.Query {\n  constructor(apollo) {\n    super(apollo);\n    this.document = IncomeChartDocument;\n  }\n  static {\n    this.ɵfac = function IncomeChartGQL_Factory(t) {\n      return new (t || IncomeChartGQL)(i0.ɵɵinject(i1.Apollo));\n    };\n  }\n  static {\n    this.ɵprov = /*@__PURE__*/i0.ɵɵdefineInjectable({\n      token: IncomeChartGQL,\n      factory: IncomeChartGQL.ɵfac,\n      providedIn: 'root'\n    });\n  }\n}\nexport const DriverRegistrationsDocument = gql`\n    query DriverRegistrations($timeframe: ChartTimeframe!) {\n  driverRegistrations(timeframe: $timeframe) {\n    time\n    count\n  }\n}\n    `;\nexport class DriverRegistrationsGQL extends Apollo.Query {\n  constructor(apollo) {\n    super(apollo);\n    this.document = DriverRegistrationsDocument;\n  }\n  static {\n    this.ɵfac = function DriverRegistrationsGQL_Factory(t) {\n      return new (t || DriverRegistrationsGQL)(i0.ɵɵinject(i1.Apollo));\n    };\n  }\n  static {\n    this.ɵprov = /*@__PURE__*/i0.ɵɵdefineInjectable({\n      token: DriverRegistrationsGQL,\n      factory: DriverRegistrationsGQL.ɵfac,\n      providedIn: 'root'\n    });\n  }\n}\nexport const RiderRegistrationsDocument = gql`\n    query RiderRegistrations($timeframe: ChartTimeframe!) {\n  riderRegistrations(timeframe: $timeframe) {\n    time\n    count\n  }\n}\n    `;\nexport class RiderRegistrationsGQL extends Apollo.Query {\n  constructor(apollo) {\n    super(apollo);\n    this.document = RiderRegistrationsDocument;\n  }\n  static {\n    this.ɵfac = function RiderRegistrationsGQL_Factory(t) {\n      return new (t || RiderRegistrationsGQL)(i0.ɵɵinject(i1.Apollo));\n    };\n  }\n  static {\n    this.ɵprov = /*@__PURE__*/i0.ɵɵdefineInjectable({\n      token: RiderRegistrationsGQL,\n      factory: RiderRegistrationsGQL.ɵfac,\n      providedIn: 'root'\n    });\n  }\n}\nexport const CarsListDocument = gql`\n    query CarsList {\n  carModels(paging: {limit: 100}) {\n    nodes {\n      id\n      name\n    }\n  }\n  carColors {\n    id\n    name\n  }\n}\n    `;\nexport class CarsListGQL extends Apollo.Query {\n  constructor(apollo) {\n    super(apollo);\n    this.document = CarsListDocument;\n  }\n  static {\n    this.ɵfac = function CarsListGQL_Factory(t) {\n      return new (t || CarsListGQL)(i0.ɵɵinject(i1.Apollo));\n    };\n  }\n  static {\n    this.ɵprov = /*@__PURE__*/i0.ɵɵdefineInjectable({\n      token: CarsListGQL,\n      factory: CarsListGQL.ɵfac,\n      providedIn: 'root'\n    });\n  }\n}\nexport const DeleteCarModelDocument = gql`\n    mutation DeleteCarModel($id: ID!) {\n  deleteOneCarModel(input: {id: $id}) {\n    id\n  }\n}\n    `;\nexport class DeleteCarModelGQL extends Apollo.Mutation {\n  constructor(apollo) {\n    super(apollo);\n    this.document = DeleteCarModelDocument;\n  }\n  static {\n    this.ɵfac = function DeleteCarModelGQL_Factory(t) {\n      return new (t || DeleteCarModelGQL)(i0.ɵɵinject(i1.Apollo));\n    };\n  }\n  static {\n    this.ɵprov = /*@__PURE__*/i0.ɵɵdefineInjectable({\n      token: DeleteCarModelGQL,\n      factory: DeleteCarModelGQL.ɵfac,\n      providedIn: 'root'\n    });\n  }\n}\nexport const DeleteCarColorDocument = gql`\n    mutation DeleteCarColor($id: ID!) {\n  deleteOneCarColor(input: {id: $id}) {\n    id\n  }\n}\n    `;\nexport class DeleteCarColorGQL extends Apollo.Mutation {\n  constructor(apollo) {\n    super(apollo);\n    this.document = DeleteCarColorDocument;\n  }\n  static {\n    this.ɵfac = function DeleteCarColorGQL_Factory(t) {\n      return new (t || DeleteCarColorGQL)(i0.ɵɵinject(i1.Apollo));\n    };\n  }\n  static {\n    this.ɵprov = /*@__PURE__*/i0.ɵɵdefineInjectable({\n      token: DeleteCarColorGQL,\n      factory: DeleteCarColorGQL.ɵfac,\n      providedIn: 'root'\n    });\n  }\n}\nexport const CreateCarModelDocument = gql`\n    mutation CreateCarModel($input: CarModelInput!) {\n  createOneCarModel(input: {carModel: $input}) {\n    id\n  }\n}\n    `;\nexport class CreateCarModelGQL extends Apollo.Mutation {\n  constructor(apollo) {\n    super(apollo);\n    this.document = CreateCarModelDocument;\n  }\n  static {\n    this.ɵfac = function CreateCarModelGQL_Factory(t) {\n      return new (t || CreateCarModelGQL)(i0.ɵɵinject(i1.Apollo));\n    };\n  }\n  static {\n    this.ɵprov = /*@__PURE__*/i0.ɵɵdefineInjectable({\n      token: CreateCarModelGQL,\n      factory: CreateCarModelGQL.ɵfac,\n      providedIn: 'root'\n    });\n  }\n}\nexport const CreateCarColorDocument = gql`\n    mutation CreateCarColor($input: CarColorInput!) {\n  createOneCarColor(input: {carColor: $input}) {\n    id\n  }\n}\n    `;\nexport class CreateCarColorGQL extends Apollo.Mutation {\n  constructor(apollo) {\n    super(apollo);\n    this.document = CreateCarColorDocument;\n  }\n  static {\n    this.ɵfac = function CreateCarColorGQL_Factory(t) {\n      return new (t || CreateCarColorGQL)(i0.ɵɵinject(i1.Apollo));\n    };\n  }\n  static {\n    this.ɵprov = /*@__PURE__*/i0.ɵɵdefineInjectable({\n      token: CreateCarColorGQL,\n      factory: CreateCarColorGQL.ɵfac,\n      providedIn: 'root'\n    });\n  }\n}\nexport const UpdateCarModelDocument = gql`\n    mutation UpdateCarModel($id: ID!, $input: CarModelInput!) {\n  updateOneCarModel(input: {id: $id, update: $input}) {\n    id\n  }\n}\n    `;\nexport class UpdateCarModelGQL extends Apollo.Mutation {\n  constructor(apollo) {\n    super(apollo);\n    this.document = UpdateCarModelDocument;\n  }\n  static {\n    this.ɵfac = function UpdateCarModelGQL_Factory(t) {\n      return new (t || UpdateCarModelGQL)(i0.ɵɵinject(i1.Apollo));\n    };\n  }\n  static {\n    this.ɵprov = /*@__PURE__*/i0.ɵɵdefineInjectable({\n      token: UpdateCarModelGQL,\n      factory: UpdateCarModelGQL.ɵfac,\n      providedIn: 'root'\n    });\n  }\n}\nexport const UpdateCarColorDocument = gql`\n    mutation UpdateCarColor($id: ID!, $input: CarColorInput!) {\n  updateOneCarColor(input: {id: $id, update: $input}) {\n    id\n  }\n}\n    `;\nexport class UpdateCarColorGQL extends Apollo.Mutation {\n  constructor(apollo) {\n    super(apollo);\n    this.document = UpdateCarColorDocument;\n  }\n  static {\n    this.ɵfac = function UpdateCarColorGQL_Factory(t) {\n      return new (t || UpdateCarColorGQL)(i0.ɵɵinject(i1.Apollo));\n    };\n  }\n  static {\n    this.ɵprov = /*@__PURE__*/i0.ɵɵdefineInjectable({\n      token: UpdateCarColorGQL,\n      factory: UpdateCarColorGQL.ɵfac,\n      providedIn: 'root'\n    });\n  }\n}\nexport const CreateFleetDocument = gql`\n    mutation CreateFleet($input: FleetInput!) {\n  createOneFleet(input: {fleet: $input}) {\n    id\n  }\n}\n    `;\nexport class CreateFleetGQL extends Apollo.Mutation {\n  constructor(apollo) {\n    super(apollo);\n    this.document = CreateFleetDocument;\n  }\n  static {\n    this.ɵfac = function CreateFleetGQL_Factory(t) {\n      return new (t || CreateFleetGQL)(i0.ɵɵinject(i1.Apollo));\n    };\n  }\n  static {\n    this.ɵprov = /*@__PURE__*/i0.ɵɵdefineInjectable({\n      token: CreateFleetGQL,\n      factory: CreateFleetGQL.ɵfac,\n      providedIn: 'root'\n    });\n  }\n}\nexport const ViewFleetDocument = gql`\n    query ViewFleet($id: ID!) {\n  fleet(id: $id) {\n    id\n    name\n    phoneNumber\n    address\n    mobileNumber\n    accountNumber\n    userName\n    password\n    commissionSharePercent\n    commissionShareFlat\n    feeMultiplier\n    exclusivityAreas {\n      lat\n      lng\n    }\n  }\n}\n    `;\nexport class ViewFleetGQL extends Apollo.Query {\n  constructor(apollo) {\n    super(apollo);\n    this.document = ViewFleetDocument;\n  }\n  static {\n    this.ɵfac = function ViewFleetGQL_Factory(t) {\n      return new (t || ViewFleetGQL)(i0.ɵɵinject(i1.Apollo));\n    };\n  }\n  static {\n    this.ɵprov = /*@__PURE__*/i0.ɵɵdefineInjectable({\n      token: ViewFleetGQL,\n      factory: ViewFleetGQL.ɵfac,\n      providedIn: 'root'\n    });\n  }\n}\nexport const FleetFinancialsDocument = gql`\n    query FleetFinancials($id: ID!, $paging: OffsetPaging, $filter: FleetTransactionFilter, $sorting: [FleetTransactionSort!]) {\n  fleet(id: $id) {\n    transactions(paging: $paging, filter: $filter, sorting: $sorting) {\n      nodes {\n        transactionTimestamp\n        amount\n        currency\n        action\n        deductType\n        rechargeType\n        refrenceNumber\n        operatorId\n        requestId\n        description\n      }\n      totalCount\n    }\n    wallets {\n      currency\n      balance\n    }\n  }\n  regions {\n    nodes {\n      currency\n    }\n  }\n}\n    `;\nexport class FleetFinancialsGQL extends Apollo.Query {\n  constructor(apollo) {\n    super(apollo);\n    this.document = FleetFinancialsDocument;\n  }\n  static {\n    this.ɵfac = function FleetFinancialsGQL_Factory(t) {\n      return new (t || FleetFinancialsGQL)(i0.ɵɵinject(i1.Apollo));\n    };\n  }\n  static {\n    this.ɵprov = /*@__PURE__*/i0.ɵɵdefineInjectable({\n      token: FleetFinancialsGQL,\n      factory: FleetFinancialsGQL.ɵfac,\n      providedIn: 'root'\n    });\n  }\n}\nexport const FleetZonePricesDocument = gql`\n    query FleetZonePrices($id: ID!, $paging: OffsetPaging, $filter: ZonePriceFilter, $sorting: [ZonePriceSort!]) {\n  fleet(id: $id) {\n    zonePrices(paging: $paging, filter: $filter, sorting: $sorting) {\n      nodes {\n        id\n        name\n      }\n      totalCount\n    }\n  }\n}\n    `;\nexport class FleetZonePricesGQL extends Apollo.Query {\n  constructor(apollo) {\n    super(apollo);\n    this.document = FleetZonePricesDocument;\n  }\n  static {\n    this.ɵfac = function FleetZonePricesGQL_Factory(t) {\n      return new (t || FleetZonePricesGQL)(i0.ɵɵinject(i1.Apollo));\n    };\n  }\n  static {\n    this.ɵprov = /*@__PURE__*/i0.ɵɵdefineInjectable({\n      token: FleetZonePricesGQL,\n      factory: FleetZonePricesGQL.ɵfac,\n      providedIn: 'root'\n    });\n  }\n}\nexport const FleetDriversDocument = gql`\n    query FleetDrivers($id: ID!, $paging: OffsetPaging) {\n  drivers(filter: {fleetId: {eq: $id}}, paging: $paging) {\n    nodes {\n      id\n      firstName\n      lastName\n      mobileNumber\n    }\n  }\n}\n    `;\nexport class FleetDriversGQL extends Apollo.Query {\n  constructor(apollo) {\n    super(apollo);\n    this.document = FleetDriversDocument;\n  }\n  static {\n    this.ɵfac = function FleetDriversGQL_Factory(t) {\n      return new (t || FleetDriversGQL)(i0.ɵɵinject(i1.Apollo));\n    };\n  }\n  static {\n    this.ɵprov = /*@__PURE__*/i0.ɵɵdefineInjectable({\n      token: FleetDriversGQL,\n      factory: FleetDriversGQL.ɵfac,\n      providedIn: 'root'\n    });\n  }\n}\nexport const UpdateFleetDocument = gql`\n    mutation UpdateFleet($id: ID!, $update: FleetInput!) {\n  updateOneFleet(input: {id: $id, update: $update}) {\n    id\n  }\n}\n    `;\nexport class UpdateFleetGQL extends Apollo.Mutation {\n  constructor(apollo) {\n    super(apollo);\n    this.document = UpdateFleetDocument;\n  }\n  static {\n    this.ɵfac = function UpdateFleetGQL_Factory(t) {\n      return new (t || UpdateFleetGQL)(i0.ɵɵinject(i1.Apollo));\n    };\n  }\n  static {\n    this.ɵprov = /*@__PURE__*/i0.ɵɵdefineInjectable({\n      token: UpdateFleetGQL,\n      factory: UpdateFleetGQL.ɵfac,\n      providedIn: 'root'\n    });\n  }\n}\nexport const CreateFleetTransactionDocument = gql`\n    mutation CreateFleetTransaction($input: FleetTransactionInput!) {\n  createFleetTransaction(input: $input) {\n    id\n  }\n}\n    `;\nexport class CreateFleetTransactionGQL extends Apollo.Mutation {\n  constructor(apollo) {\n    super(apollo);\n    this.document = CreateFleetTransactionDocument;\n  }\n  static {\n    this.ɵfac = function CreateFleetTransactionGQL_Factory(t) {\n      return new (t || CreateFleetTransactionGQL)(i0.ɵɵinject(i1.Apollo));\n    };\n  }\n  static {\n    this.ɵprov = /*@__PURE__*/i0.ɵɵdefineInjectable({\n      token: CreateFleetTransactionGQL,\n      factory: CreateFleetTransactionGQL.ɵfac,\n      providedIn: 'root'\n    });\n  }\n}\nexport const FleetsListDocument = gql`\n    query FleetsList($paging: OffsetPaging, $filter: FleetFilter) {\n  fleets(paging: $paging, filter: $filter) {\n    nodes {\n      id\n      name\n      phoneNumber\n      address\n    }\n    totalCount\n  }\n}\n    `;\nexport class FleetsListGQL extends Apollo.Query {\n  constructor(apollo) {\n    super(apollo);\n    this.document = FleetsListDocument;\n  }\n  static {\n    this.ɵfac = function FleetsListGQL_Factory(t) {\n      return new (t || FleetsListGQL)(i0.ɵɵinject(i1.Apollo));\n    };\n  }\n  static {\n    this.ɵprov = /*@__PURE__*/i0.ɵɵdefineInjectable({\n      token: FleetsListGQL,\n      factory: FleetsListGQL.ɵfac,\n      providedIn: 'root'\n    });\n  }\n}\nexport const OrderCancelReasonListDocument = gql`\n    query OrderCancelReasonList($paging: OffsetPaging) {\n  orderCancelReasons(paging: $paging) {\n    nodes {\n      id\n      title\n      isEnabled\n      userType\n    }\n    totalCount\n  }\n}\n    `;\nexport class OrderCancelReasonListGQL extends Apollo.Query {\n  constructor(apollo) {\n    super(apollo);\n    this.document = OrderCancelReasonListDocument;\n  }\n  static {\n    this.ɵfac = function OrderCancelReasonListGQL_Factory(t) {\n      return new (t || OrderCancelReasonListGQL)(i0.ɵɵinject(i1.Apollo));\n    };\n  }\n  static {\n    this.ɵprov = /*@__PURE__*/i0.ɵɵdefineInjectable({\n      token: OrderCancelReasonListGQL,\n      factory: OrderCancelReasonListGQL.ɵfac,\n      providedIn: 'root'\n    });\n  }\n}\nexport const OrderCancelReasonViewDocument = gql`\n    query OrderCancelReasonView($id: ID!) {\n  orderCancelReason(id: $id) {\n    id\n    title\n    userType\n    isEnabled\n  }\n}\n    `;\nexport class OrderCancelReasonViewGQL extends Apollo.Query {\n  constructor(apollo) {\n    super(apollo);\n    this.document = OrderCancelReasonViewDocument;\n  }\n  static {\n    this.ɵfac = function OrderCancelReasonViewGQL_Factory(t) {\n      return new (t || OrderCancelReasonViewGQL)(i0.ɵɵinject(i1.Apollo));\n    };\n  }\n  static {\n    this.ɵprov = /*@__PURE__*/i0.ɵɵdefineInjectable({\n      token: OrderCancelReasonViewGQL,\n      factory: OrderCancelReasonViewGQL.ɵfac,\n      providedIn: 'root'\n    });\n  }\n}\nexport const UpdateOrderCancelReasonDocument = gql`\n    mutation UpdateOrderCancelReason($id: ID!, $update: OrderCancelReasonInput!) {\n  updateOneOrderCancelReason(input: {id: $id, update: $update}) {\n    id\n  }\n}\n    `;\nexport class UpdateOrderCancelReasonGQL extends Apollo.Mutation {\n  constructor(apollo) {\n    super(apollo);\n    this.document = UpdateOrderCancelReasonDocument;\n  }\n  static {\n    this.ɵfac = function UpdateOrderCancelReasonGQL_Factory(t) {\n      return new (t || UpdateOrderCancelReasonGQL)(i0.ɵɵinject(i1.Apollo));\n    };\n  }\n  static {\n    this.ɵprov = /*@__PURE__*/i0.ɵɵdefineInjectable({\n      token: UpdateOrderCancelReasonGQL,\n      factory: UpdateOrderCancelReasonGQL.ɵfac,\n      providedIn: 'root'\n    });\n  }\n}\nexport const CreateOrderCancelReasonDocument = gql`\n    mutation CreateOrderCancelReason($input: OrderCancelReasonInput!) {\n  createOneOrderCancelReason(input: {orderCancelReason: $input}) {\n    id\n  }\n}\n    `;\nexport class CreateOrderCancelReasonGQL extends Apollo.Mutation {\n  constructor(apollo) {\n    super(apollo);\n    this.document = CreateOrderCancelReasonDocument;\n  }\n  static {\n    this.ɵfac = function CreateOrderCancelReasonGQL_Factory(t) {\n      return new (t || CreateOrderCancelReasonGQL)(i0.ɵɵinject(i1.Apollo));\n    };\n  }\n  static {\n    this.ɵprov = /*@__PURE__*/i0.ɵɵdefineInjectable({\n      token: CreateOrderCancelReasonGQL,\n      factory: CreateOrderCancelReasonGQL.ɵfac,\n      providedIn: 'root'\n    });\n  }\n}\nexport const ViewPaymentGatewayDocument = gql`\n    query ViewPaymentGateway($id: ID!) {\n  paymentGateway(id: $id) {\n    id\n    title\n    type\n    enabled\n    privateKey\n    publicKey\n    merchantId\n    saltKey\n    mediaId\n    media {\n      address\n    }\n  }\n}\n    `;\nexport class ViewPaymentGatewayGQL extends Apollo.Query {\n  constructor(apollo) {\n    super(apollo);\n    this.document = ViewPaymentGatewayDocument;\n  }\n  static {\n    this.ɵfac = function ViewPaymentGatewayGQL_Factory(t) {\n      return new (t || ViewPaymentGatewayGQL)(i0.ɵɵinject(i1.Apollo));\n    };\n  }\n  static {\n    this.ɵprov = /*@__PURE__*/i0.ɵɵdefineInjectable({\n      token: ViewPaymentGatewayGQL,\n      factory: ViewPaymentGatewayGQL.ɵfac,\n      providedIn: 'root'\n    });\n  }\n}\nexport const CreatePaymentGatewayDocument = gql`\n    mutation CreatePaymentGateway($input: PaymentGatewayInput!) {\n  createOnePaymentGateway(input: {paymentGateway: $input}) {\n    id\n  }\n}\n    `;\nexport class CreatePaymentGatewayGQL extends Apollo.Mutation {\n  constructor(apollo) {\n    super(apollo);\n    this.document = CreatePaymentGatewayDocument;\n  }\n  static {\n    this.ɵfac = function CreatePaymentGatewayGQL_Factory(t) {\n      return new (t || CreatePaymentGatewayGQL)(i0.ɵɵinject(i1.Apollo));\n    };\n  }\n  static {\n    this.ɵprov = /*@__PURE__*/i0.ɵɵdefineInjectable({\n      token: CreatePaymentGatewayGQL,\n      factory: CreatePaymentGatewayGQL.ɵfac,\n      providedIn: 'root'\n    });\n  }\n}\nexport const UpdatePaymentGatewayDocument = gql`\n    mutation UpdatePaymentGateway($id: ID!, $input: PaymentGatewayInput!) {\n  updateOnePaymentGateway(input: {id: $id, update: $input}) {\n    id\n  }\n}\n    `;\nexport class UpdatePaymentGatewayGQL extends Apollo.Mutation {\n  constructor(apollo) {\n    super(apollo);\n    this.document = UpdatePaymentGatewayDocument;\n  }\n  static {\n    this.ɵfac = function UpdatePaymentGatewayGQL_Factory(t) {\n      return new (t || UpdatePaymentGatewayGQL)(i0.ɵɵinject(i1.Apollo));\n    };\n  }\n  static {\n    this.ɵprov = /*@__PURE__*/i0.ɵɵdefineInjectable({\n      token: UpdatePaymentGatewayGQL,\n      factory: UpdatePaymentGatewayGQL.ɵfac,\n      providedIn: 'root'\n    });\n  }\n}\nexport const PaymentGatewaysDocument = gql`\n    query PaymentGateways($paging: OffsetPaging) {\n  paymentGateways(paging: $paging) {\n    nodes {\n      id\n      enabled\n      title\n      type\n      media {\n        address\n      }\n    }\n    totalCount\n  }\n}\n    `;\nexport class PaymentGatewaysGQL extends Apollo.Query {\n  constructor(apollo) {\n    super(apollo);\n    this.document = PaymentGatewaysDocument;\n  }\n  static {\n    this.ɵfac = function PaymentGatewaysGQL_Factory(t) {\n      return new (t || PaymentGatewaysGQL)(i0.ɵɵinject(i1.Apollo));\n    };\n  }\n  static {\n    this.ɵprov = /*@__PURE__*/i0.ɵɵdefineInjectable({\n      token: PaymentGatewaysGQL,\n      factory: PaymentGatewaysGQL.ɵfac,\n      providedIn: 'root'\n    });\n  }\n}\nexport const RegionListDocument = gql`\n    query RegionList($paging: OffsetPaging) {\n  regions(paging: $paging) {\n    nodes {\n      id\n      name\n      currency\n      enabled\n      location {\n        lat\n        lng\n      }\n    }\n    totalCount\n  }\n}\n    `;\nexport class RegionListGQL extends Apollo.Query {\n  constructor(apollo) {\n    super(apollo);\n    this.document = RegionListDocument;\n  }\n  static {\n    this.ɵfac = function RegionListGQL_Factory(t) {\n      return new (t || RegionListGQL)(i0.ɵɵinject(i1.Apollo));\n    };\n  }\n  static {\n    this.ɵprov = /*@__PURE__*/i0.ɵɵdefineInjectable({\n      token: RegionListGQL,\n      factory: RegionListGQL.ɵfac,\n      providedIn: 'root'\n    });\n  }\n}\nexport const RegionViewDocument = gql`\n    query RegionView($id: ID!) {\n  region(id: $id) {\n    id\n    name\n    currency\n    enabled\n    location {\n      lat\n      lng\n    }\n  }\n}\n    `;\nexport class RegionViewGQL extends Apollo.Query {\n  constructor(apollo) {\n    super(apollo);\n    this.document = RegionViewDocument;\n  }\n  static {\n    this.ɵfac = function RegionViewGQL_Factory(t) {\n      return new (t || RegionViewGQL)(i0.ɵɵinject(i1.Apollo));\n    };\n  }\n  static {\n    this.ɵprov = /*@__PURE__*/i0.ɵɵdefineInjectable({\n      token: RegionViewGQL,\n      factory: RegionViewGQL.ɵfac,\n      providedIn: 'root'\n    });\n  }\n}\nexport const UpdateRegionDocument = gql`\n    mutation UpdateRegion($id: ID!, $update: RegionInput!) {\n  updateOneRegion(input: {id: $id, update: $update}) {\n    id\n  }\n}\n    `;\nexport class UpdateRegionGQL extends Apollo.Mutation {\n  constructor(apollo) {\n    super(apollo);\n    this.document = UpdateRegionDocument;\n  }\n  static {\n    this.ɵfac = function UpdateRegionGQL_Factory(t) {\n      return new (t || UpdateRegionGQL)(i0.ɵɵinject(i1.Apollo));\n    };\n  }\n  static {\n    this.ɵprov = /*@__PURE__*/i0.ɵɵdefineInjectable({\n      token: UpdateRegionGQL,\n      factory: UpdateRegionGQL.ɵfac,\n      providedIn: 'root'\n    });\n  }\n}\nexport const CreateRegionDocument = gql`\n    mutation CreateRegion($input: RegionInput!) {\n  createOneRegion(input: {region: $input}) {\n    id\n  }\n}\n    `;\nexport class CreateRegionGQL extends Apollo.Mutation {\n  constructor(apollo) {\n    super(apollo);\n    this.document = CreateRegionDocument;\n  }\n  static {\n    this.ɵfac = function CreateRegionGQL_Factory(t) {\n      return new (t || CreateRegionGQL)(i0.ɵɵinject(i1.Apollo));\n    };\n  }\n  static {\n    this.ɵprov = /*@__PURE__*/i0.ɵɵdefineInjectable({\n      token: CreateRegionGQL,\n      factory: CreateRegionGQL.ɵfac,\n      providedIn: 'root'\n    });\n  }\n}\nexport const ReviewParameterViewDocument = gql`\n    query ReviewParameterView($id: ID!) {\n  feedbackParameter(id: $id) {\n    id\n    title\n    isGood\n  }\n}\n    `;\nexport class ReviewParameterViewGQL extends Apollo.Query {\n  constructor(apollo) {\n    super(apollo);\n    this.document = ReviewParameterViewDocument;\n  }\n  static {\n    this.ɵfac = function ReviewParameterViewGQL_Factory(t) {\n      return new (t || ReviewParameterViewGQL)(i0.ɵɵinject(i1.Apollo));\n    };\n  }\n  static {\n    this.ɵprov = /*@__PURE__*/i0.ɵɵdefineInjectable({\n      token: ReviewParameterViewGQL,\n      factory: ReviewParameterViewGQL.ɵfac,\n      providedIn: 'root'\n    });\n  }\n}\nexport const UpdateReviewParameterDocument = gql`\n    mutation UpdateReviewParameter($id: ID!, $update: FeedbackParameterInput!) {\n  updateOneFeedbackParameter(input: {id: $id, update: $update}) {\n    id\n  }\n}\n    `;\nexport class UpdateReviewParameterGQL extends Apollo.Mutation {\n  constructor(apollo) {\n    super(apollo);\n    this.document = UpdateReviewParameterDocument;\n  }\n  static {\n    this.ɵfac = function UpdateReviewParameterGQL_Factory(t) {\n      return new (t || UpdateReviewParameterGQL)(i0.ɵɵinject(i1.Apollo));\n    };\n  }\n  static {\n    this.ɵprov = /*@__PURE__*/i0.ɵɵdefineInjectable({\n      token: UpdateReviewParameterGQL,\n      factory: UpdateReviewParameterGQL.ɵfac,\n      providedIn: 'root'\n    });\n  }\n}\nexport const CreateReviewParameterDocument = gql`\n    mutation CreateReviewParameter($input: FeedbackParameterInput!) {\n  createOneFeedbackParameter(input: {feedbackParameter: $input}) {\n    id\n  }\n}\n    `;\nexport class CreateReviewParameterGQL extends Apollo.Mutation {\n  constructor(apollo) {\n    super(apollo);\n    this.document = CreateReviewParameterDocument;\n  }\n  static {\n    this.ɵfac = function CreateReviewParameterGQL_Factory(t) {\n      return new (t || CreateReviewParameterGQL)(i0.ɵɵinject(i1.Apollo));\n    };\n  }\n  static {\n    this.ɵprov = /*@__PURE__*/i0.ɵɵdefineInjectable({\n      token: CreateReviewParameterGQL,\n      factory: CreateReviewParameterGQL.ɵfac,\n      providedIn: 'root'\n    });\n  }\n}\nexport const ReviewParametersListDocument = gql`\n    query ReviewParametersList {\n  feedbackParameters {\n    id\n    title\n    isGood\n  }\n}\n    `;\nexport class ReviewParametersListGQL extends Apollo.Query {\n  constructor(apollo) {\n    super(apollo);\n    this.document = ReviewParametersListDocument;\n  }\n  static {\n    this.ɵfac = function ReviewParametersListGQL_Factory(t) {\n      return new (t || ReviewParametersListGQL)(i0.ɵɵinject(i1.Apollo));\n    };\n  }\n  static {\n    this.ɵprov = /*@__PURE__*/i0.ɵɵdefineInjectable({\n      token: ReviewParametersListGQL,\n      factory: ReviewParametersListGQL.ɵfac,\n      providedIn: 'root'\n    });\n  }\n}\nexport const RolesDocument = gql`\n    query Roles {\n  operatorRoles {\n    id\n    title\n  }\n}\n    `;\nexport class RolesGQL extends Apollo.Query {\n  constructor(apollo) {\n    super(apollo);\n    this.document = RolesDocument;\n  }\n  static {\n    this.ɵfac = function RolesGQL_Factory(t) {\n      return new (t || RolesGQL)(i0.ɵɵinject(i1.Apollo));\n    };\n  }\n  static {\n    this.ɵprov = /*@__PURE__*/i0.ɵɵdefineInjectable({\n      token: RolesGQL,\n      factory: RolesGQL.ɵfac,\n      providedIn: 'root'\n    });\n  }\n}\nexport const RoleDocument = gql`\n    query Role($id: ID!) {\n  operatorRole(id: $id) {\n    id\n    title\n    permissions\n  }\n}\n    `;\nexport class RoleGQL extends Apollo.Query {\n  constructor(apollo) {\n    super(apollo);\n    this.document = RoleDocument;\n  }\n  static {\n    this.ɵfac = function RoleGQL_Factory(t) {\n      return new (t || RoleGQL)(i0.ɵɵinject(i1.Apollo));\n    };\n  }\n  static {\n    this.ɵprov = /*@__PURE__*/i0.ɵɵdefineInjectable({\n      token: RoleGQL,\n      factory: RoleGQL.ɵfac,\n      providedIn: 'root'\n    });\n  }\n}\nexport const CreateRoleDocument = gql`\n    mutation CreateRole($input: OperatorRoleInput!) {\n  createOneOperatorRole(input: {operatorRole: $input}) {\n    id\n    title\n    permissions\n  }\n}\n    `;\nexport class CreateRoleGQL extends Apollo.Mutation {\n  constructor(apollo) {\n    super(apollo);\n    this.document = CreateRoleDocument;\n  }\n  static {\n    this.ɵfac = function CreateRoleGQL_Factory(t) {\n      return new (t || CreateRoleGQL)(i0.ɵɵinject(i1.Apollo));\n    };\n  }\n  static {\n    this.ɵprov = /*@__PURE__*/i0.ɵɵdefineInjectable({\n      token: CreateRoleGQL,\n      factory: CreateRoleGQL.ɵfac,\n      providedIn: 'root'\n    });\n  }\n}\nexport const UpdateRoleDocument = gql`\n    mutation UpdateRole($id: ID!, $input: OperatorRoleInput!) {\n  updateOneOperatorRole(input: {id: $id, update: $input}) {\n    id\n  }\n}\n    `;\nexport class UpdateRoleGQL extends Apollo.Mutation {\n  constructor(apollo) {\n    super(apollo);\n    this.document = UpdateRoleDocument;\n  }\n  static {\n    this.ɵfac = function UpdateRoleGQL_Factory(t) {\n      return new (t || UpdateRoleGQL)(i0.ɵɵinject(i1.Apollo));\n    };\n  }\n  static {\n    this.ɵprov = /*@__PURE__*/i0.ɵɵdefineInjectable({\n      token: UpdateRoleGQL,\n      factory: UpdateRoleGQL.ɵfac,\n      providedIn: 'root'\n    });\n  }\n}\nexport const ServiceOptionViewDocument = gql`\n    query ServiceOptionView($id: ID!) {\n  serviceOption(id: $id) {\n    id\n    name\n    type\n    icon\n    additionalFee\n  }\n}\n    `;\nexport class ServiceOptionViewGQL extends Apollo.Query {\n  constructor(apollo) {\n    super(apollo);\n    this.document = ServiceOptionViewDocument;\n  }\n  static {\n    this.ɵfac = function ServiceOptionViewGQL_Factory(t) {\n      return new (t || ServiceOptionViewGQL)(i0.ɵɵinject(i1.Apollo));\n    };\n  }\n  static {\n    this.ɵprov = /*@__PURE__*/i0.ɵɵdefineInjectable({\n      token: ServiceOptionViewGQL,\n      factory: ServiceOptionViewGQL.ɵfac,\n      providedIn: 'root'\n    });\n  }\n}\nexport const UpdateServiceOptionDocument = gql`\n    mutation UpdateServiceOption($id: ID!, $update: ServiceOptionInput!) {\n  updateOneServiceOption(input: {id: $id, update: $update}) {\n    id\n  }\n}\n    `;\nexport class UpdateServiceOptionGQL extends Apollo.Mutation {\n  constructor(apollo) {\n    super(apollo);\n    this.document = UpdateServiceOptionDocument;\n  }\n  static {\n    this.ɵfac = function UpdateServiceOptionGQL_Factory(t) {\n      return new (t || UpdateServiceOptionGQL)(i0.ɵɵinject(i1.Apollo));\n    };\n  }\n  static {\n    this.ɵprov = /*@__PURE__*/i0.ɵɵdefineInjectable({\n      token: UpdateServiceOptionGQL,\n      factory: UpdateServiceOptionGQL.ɵfac,\n      providedIn: 'root'\n    });\n  }\n}\nexport const CreateServiceOptionDocument = gql`\n    mutation CreateServiceOption($input: ServiceOptionInput!) {\n  createOneServiceOption(input: {serviceOption: $input}) {\n    id\n  }\n}\n    `;\nexport class CreateServiceOptionGQL extends Apollo.Mutation {\n  constructor(apollo) {\n    super(apollo);\n    this.document = CreateServiceOptionDocument;\n  }\n  static {\n    this.ɵfac = function CreateServiceOptionGQL_Factory(t) {\n      return new (t || CreateServiceOptionGQL)(i0.ɵɵinject(i1.Apollo));\n    };\n  }\n  static {\n    this.ɵprov = /*@__PURE__*/i0.ɵɵdefineInjectable({\n      token: CreateServiceOptionGQL,\n      factory: CreateServiceOptionGQL.ɵfac,\n      providedIn: 'root'\n    });\n  }\n}\nexport const ServiceOptionsListDocument = gql`\n    query ServiceOptionsList {\n  serviceOptions {\n    id\n    name\n    icon\n    type\n    additionalFee\n  }\n}\n    `;\nexport class ServiceOptionsListGQL extends Apollo.Query {\n  constructor(apollo) {\n    super(apollo);\n    this.document = ServiceOptionsListDocument;\n  }\n  static {\n    this.ɵfac = function ServiceOptionsListGQL_Factory(t) {\n      return new (t || ServiceOptionsListGQL)(i0.ɵɵinject(i1.Apollo));\n    };\n  }\n  static {\n    this.ɵprov = /*@__PURE__*/i0.ɵɵdefineInjectable({\n      token: ServiceOptionsListGQL,\n      factory: ServiceOptionsListGQL.ɵfac,\n      providedIn: 'root'\n    });\n  }\n}\nexport const ViewServiceCategoryDocument = gql`\n    query ViewServiceCategory($id: ID!) {\n  serviceCategory(id: $id) {\n    id\n    name\n  }\n}\n    `;\nexport class ViewServiceCategoryGQL extends Apollo.Query {\n  constructor(apollo) {\n    super(apollo);\n    this.document = ViewServiceCategoryDocument;\n  }\n  static {\n    this.ɵfac = function ViewServiceCategoryGQL_Factory(t) {\n      return new (t || ViewServiceCategoryGQL)(i0.ɵɵinject(i1.Apollo));\n    };\n  }\n  static {\n    this.ɵprov = /*@__PURE__*/i0.ɵɵdefineInjectable({\n      token: ViewServiceCategoryGQL,\n      factory: ViewServiceCategoryGQL.ɵfac,\n      providedIn: 'root'\n    });\n  }\n}\nexport const CreateServiceCategoryDocument = gql`\n    mutation CreateServiceCategory($input: ServiceCategoryInput!) {\n  createOneServiceCategory(input: {serviceCategory: $input}) {\n    id\n  }\n}\n    `;\nexport class CreateServiceCategoryGQL extends Apollo.Mutation {\n  constructor(apollo) {\n    super(apollo);\n    this.document = CreateServiceCategoryDocument;\n  }\n  static {\n    this.ɵfac = function CreateServiceCategoryGQL_Factory(t) {\n      return new (t || CreateServiceCategoryGQL)(i0.ɵɵinject(i1.Apollo));\n    };\n  }\n  static {\n    this.ɵprov = /*@__PURE__*/i0.ɵɵdefineInjectable({\n      token: CreateServiceCategoryGQL,\n      factory: CreateServiceCategoryGQL.ɵfac,\n      providedIn: 'root'\n    });\n  }\n}\nexport const UpdateServiceCategoryDocument = gql`\n    mutation UpdateServiceCategory($id: ID!, $input: ServiceCategoryInput!) {\n  updateOneServiceCategory(input: {id: $id, update: $input}) {\n    id\n  }\n}\n    `;\nexport class UpdateServiceCategoryGQL extends Apollo.Mutation {\n  constructor(apollo) {\n    super(apollo);\n    this.document = UpdateServiceCategoryDocument;\n  }\n  static {\n    this.ɵfac = function UpdateServiceCategoryGQL_Factory(t) {\n      return new (t || UpdateServiceCategoryGQL)(i0.ɵɵinject(i1.Apollo));\n    };\n  }\n  static {\n    this.ɵprov = /*@__PURE__*/i0.ɵɵdefineInjectable({\n      token: UpdateServiceCategoryGQL,\n      factory: UpdateServiceCategoryGQL.ɵfac,\n      providedIn: 'root'\n    });\n  }\n}\nexport const DeleteServiceCategoryDocument = gql`\n    mutation DeleteServiceCategory($id: ID!) {\n  deleteOneServiceCategory(input: {id: $id}) {\n    id\n  }\n}\n    `;\nexport class DeleteServiceCategoryGQL extends Apollo.Mutation {\n  constructor(apollo) {\n    super(apollo);\n    this.document = DeleteServiceCategoryDocument;\n  }\n  static {\n    this.ɵfac = function DeleteServiceCategoryGQL_Factory(t) {\n      return new (t || DeleteServiceCategoryGQL)(i0.ɵɵinject(i1.Apollo));\n    };\n  }\n  static {\n    this.ɵprov = /*@__PURE__*/i0.ɵɵdefineInjectable({\n      token: DeleteServiceCategoryGQL,\n      factory: DeleteServiceCategoryGQL.ɵfac,\n      providedIn: 'root'\n    });\n  }\n}\nexport const ServicesListDocument = gql`\n    query ServicesList {\n  serviceCategories {\n    id\n    name\n    services {\n      id\n      name\n      description\n      media {\n        address\n      }\n    }\n  }\n}\n    `;\nexport class ServicesListGQL extends Apollo.Query {\n  constructor(apollo) {\n    super(apollo);\n    this.document = ServicesListDocument;\n  }\n  static {\n    this.ɵfac = function ServicesListGQL_Factory(t) {\n      return new (t || ServicesListGQL)(i0.ɵɵinject(i1.Apollo));\n    };\n  }\n  static {\n    this.ɵprov = /*@__PURE__*/i0.ɵɵdefineInjectable({\n      token: ServicesListGQL,\n      factory: ServicesListGQL.ɵfac,\n      providedIn: 'root'\n    });\n  }\n}\nexport const ViewServiceDocument = gql`\n    query ViewService($id: ID!) {\n  service(id: $id) {\n    id\n    name\n    categoryId\n    baseFare\n    perHundredMeters\n    perMinuteDrive\n    perMinuteWait\n    minimumFee\n    searchRadius\n    maximumDestinationDistance\n    paymentMethod\n    cancellationTotalFee\n    cancellationDriverShare\n    providerShareFlat\n    providerSharePercent\n    prepayPercent\n    searchRadius\n    mediaId\n    description\n    personCapacity\n    roundingFactor\n    media {\n      address\n    }\n    timeMultipliers {\n      startTime\n      endTime\n      multiply\n    }\n    distanceMultipliers {\n      distanceFrom\n      distanceTo\n      multiply\n    }\n    weekdayMultipliers {\n      weekday\n      multiply\n    }\n    dateRangeMultipliers {\n      startDate\n      endDate\n      multiply\n    }\n    options {\n      id\n      name\n      type\n      additionalFee\n      icon\n    }\n    regions {\n      id\n      name\n      currency\n    }\n  }\n  regions {\n    nodes {\n      id\n      name\n      currency\n    }\n  }\n  serviceCategories {\n    id\n    name\n  }\n  serviceOptions {\n    id\n    name\n    icon\n    type\n    additionalFee\n  }\n}\n    `;\nexport class ViewServiceGQL extends Apollo.Query {\n  constructor(apollo) {\n    super(apollo);\n    this.document = ViewServiceDocument;\n  }\n  static {\n    this.ɵfac = function ViewServiceGQL_Factory(t) {\n      return new (t || ViewServiceGQL)(i0.ɵɵinject(i1.Apollo));\n    };\n  }\n  static {\n    this.ɵprov = /*@__PURE__*/i0.ɵɵdefineInjectable({\n      token: ViewServiceGQL,\n      factory: ViewServiceGQL.ɵfac,\n      providedIn: 'root'\n    });\n  }\n}\nexport const NewServiceDocument = gql`\n    query NewService {\n  regions {\n    nodes {\n      id\n      name\n      currency\n    }\n  }\n  serviceCategories {\n    id\n    name\n  }\n  serviceOptions {\n    id\n    name\n    icon\n    type\n    additionalFee\n  }\n}\n    `;\nexport class NewServiceGQL extends Apollo.Query {\n  constructor(apollo) {\n    super(apollo);\n    this.document = NewServiceDocument;\n  }\n  static {\n    this.ɵfac = function NewServiceGQL_Factory(t) {\n      return new (t || NewServiceGQL)(i0.ɵɵinject(i1.Apollo));\n    };\n  }\n  static {\n    this.ɵprov = /*@__PURE__*/i0.ɵɵdefineInjectable({\n      token: NewServiceGQL,\n      factory: NewServiceGQL.ɵfac,\n      providedIn: 'root'\n    });\n  }\n}\nexport const CreateServiceDocument = gql`\n    mutation CreateService($input: ServiceInput!) {\n  createOneService(input: {service: $input}) {\n    id\n  }\n}\n    `;\nexport class CreateServiceGQL extends Apollo.Mutation {\n  constructor(apollo) {\n    super(apollo);\n    this.document = CreateServiceDocument;\n  }\n  static {\n    this.ɵfac = function CreateServiceGQL_Factory(t) {\n      return new (t || CreateServiceGQL)(i0.ɵɵinject(i1.Apollo));\n    };\n  }\n  static {\n    this.ɵprov = /*@__PURE__*/i0.ɵɵdefineInjectable({\n      token: CreateServiceGQL,\n      factory: CreateServiceGQL.ɵfac,\n      providedIn: 'root'\n    });\n  }\n}\nexport const DeleteServiceDocument = gql`\n    mutation DeleteService($id: ID!) {\n  deleteOneService(input: {id: $id}) {\n    id\n  }\n}\n    `;\nexport class DeleteServiceGQL extends Apollo.Mutation {\n  constructor(apollo) {\n    super(apollo);\n    this.document = DeleteServiceDocument;\n  }\n  static {\n    this.ɵfac = function DeleteServiceGQL_Factory(t) {\n      return new (t || DeleteServiceGQL)(i0.ɵɵinject(i1.Apollo));\n    };\n  }\n  static {\n    this.ɵprov = /*@__PURE__*/i0.ɵɵdefineInjectable({\n      token: DeleteServiceGQL,\n      factory: DeleteServiceGQL.ɵfac,\n      providedIn: 'root'\n    });\n  }\n}\nexport const UpdateServiceDocument = gql`\n    mutation UpdateService($id: ID!, $input: ServiceInput!) {\n  updateOneService(input: {id: $id, update: $input}) {\n    id\n  }\n}\n    `;\nexport class UpdateServiceGQL extends Apollo.Mutation {\n  constructor(apollo) {\n    super(apollo);\n    this.document = UpdateServiceDocument;\n  }\n  static {\n    this.ɵfac = function UpdateServiceGQL_Factory(t) {\n      return new (t || UpdateServiceGQL)(i0.ɵɵinject(i1.Apollo));\n    };\n  }\n  static {\n    this.ɵprov = /*@__PURE__*/i0.ɵɵdefineInjectable({\n      token: UpdateServiceGQL,\n      factory: UpdateServiceGQL.ɵfac,\n      providedIn: 'root'\n    });\n  }\n}\nexport const SetRegionsOnServiceDocument = gql`\n    mutation SetRegionsOnService($id: ID!, $relationIds: [ID!]!) {\n  setRegionsOnService(input: {id: $id, relationIds: $relationIds}) {\n    id\n  }\n}\n    `;\nexport class SetRegionsOnServiceGQL extends Apollo.Mutation {\n  constructor(apollo) {\n    super(apollo);\n    this.document = SetRegionsOnServiceDocument;\n  }\n  static {\n    this.ɵfac = function SetRegionsOnServiceGQL_Factory(t) {\n      return new (t || SetRegionsOnServiceGQL)(i0.ɵɵinject(i1.Apollo));\n    };\n  }\n  static {\n    this.ɵprov = /*@__PURE__*/i0.ɵɵdefineInjectable({\n      token: SetRegionsOnServiceGQL,\n      factory: SetRegionsOnServiceGQL.ɵfac,\n      providedIn: 'root'\n    });\n  }\n}\nexport const SetOptionsOnServiceDocument = gql`\n    mutation SetOptionsOnService($id: ID!, $relationIds: [ID!]!) {\n  setOptionsOnService(input: {id: $id, relationIds: $relationIds}) {\n    id\n  }\n}\n    `;\nexport class SetOptionsOnServiceGQL extends Apollo.Mutation {\n  constructor(apollo) {\n    super(apollo);\n    this.document = SetOptionsOnServiceDocument;\n  }\n  static {\n    this.ɵfac = function SetOptionsOnServiceGQL_Factory(t) {\n      return new (t || SetOptionsOnServiceGQL)(i0.ɵɵinject(i1.Apollo));\n    };\n  }\n  static {\n    this.ɵprov = /*@__PURE__*/i0.ɵɵdefineInjectable({\n      token: SetOptionsOnServiceGQL,\n      factory: SetOptionsOnServiceGQL.ɵfac,\n      providedIn: 'root'\n    });\n  }\n}\nexport const UpdatePasswordDocument = gql`\n    mutation UpdatePassword($input: UpdatePasswordInput!) {\n  updatePassword(input: $input) {\n    id\n  }\n}\n    `;\nexport class UpdatePasswordGQL extends Apollo.Mutation {\n  constructor(apollo) {\n    super(apollo);\n    this.document = UpdatePasswordDocument;\n  }\n  static {\n    this.ɵfac = function UpdatePasswordGQL_Factory(t) {\n      return new (t || UpdatePasswordGQL)(i0.ɵɵinject(i1.Apollo));\n    };\n  }\n  static {\n    this.ɵprov = /*@__PURE__*/i0.ɵɵdefineInjectable({\n      token: UpdatePasswordGQL,\n      factory: UpdatePasswordGQL.ɵfac,\n      providedIn: 'root'\n    });\n  }\n}\nexport const GetConfigurationDocument = gql`\n    query GetConfiguration {\n  currentConfiguration {\n    backendMapsAPIKey\n    twilioAccountSid\n    twilioAuthToken\n    twilioFromNumber\n    twilioVerificationCodeSMSTemplate\n  }\n}\n    `;\nexport class GetConfigurationGQL extends Apollo.Query {\n  constructor(apollo) {\n    super(apollo);\n    this.document = GetConfigurationDocument;\n  }\n  static {\n    this.ɵfac = function GetConfigurationGQL_Factory(t) {\n      return new (t || GetConfigurationGQL)(i0.ɵɵinject(i1.Apollo));\n    };\n  }\n  static {\n    this.ɵprov = /*@__PURE__*/i0.ɵɵdefineInjectable({\n      token: GetConfigurationGQL,\n      factory: GetConfigurationGQL.ɵfac,\n      providedIn: 'root'\n    });\n  }\n}\nexport const UpdateConfigDocument = gql`\n    mutation UpdateConfig($input: UpdateConfigInput!) {\n  saveConfiguration(input: $input) {\n    backendMapsAPIKey\n    twilioAccountSid\n    twilioAuthToken\n    twilioFromNumber\n    twilioVerificationCodeSMSTemplate\n  }\n}\n    `;\nexport class UpdateConfigGQL extends Apollo.Mutation {\n  constructor(apollo) {\n    super(apollo);\n    this.document = UpdateConfigDocument;\n  }\n  static {\n    this.ɵfac = function UpdateConfigGQL_Factory(t) {\n      return new (t || UpdateConfigGQL)(i0.ɵɵinject(i1.Apollo));\n    };\n  }\n  static {\n    this.ɵprov = /*@__PURE__*/i0.ɵɵdefineInjectable({\n      token: UpdateConfigGQL,\n      factory: UpdateConfigGQL.ɵfac,\n      providedIn: 'root'\n    });\n  }\n}\nexport const SmsProvidersDocument = gql`\n    query SMSProviders($paging: OffsetPaging) {\n  smsProviders(paging: $paging) {\n    nodes {\n      id\n      isDefault\n      name\n      type\n    }\n    totalCount\n  }\n}\n    `;\nexport class SmsProvidersGQL extends Apollo.Query {\n  constructor(apollo) {\n    super(apollo);\n    this.document = SmsProvidersDocument;\n  }\n  static {\n    this.ɵfac = function SmsProvidersGQL_Factory(t) {\n      return new (t || SmsProvidersGQL)(i0.ɵɵinject(i1.Apollo));\n    };\n  }\n  static {\n    this.ɵprov = /*@__PURE__*/i0.ɵɵdefineInjectable({\n      token: SmsProvidersGQL,\n      factory: SmsProvidersGQL.ɵfac,\n      providedIn: 'root'\n    });\n  }\n}\nexport const ViewSmsProviderDocument = gql`\n    query ViewSMSProvider($id: ID!) {\n  smsProvider(id: $id) {\n    id\n    name\n    type\n    isDefault\n    authToken\n    accountId\n    fromNumber\n    verificationTemplate\n    smsType\n  }\n}\n    `;\nexport class ViewSmsProviderGQL extends Apollo.Query {\n  constructor(apollo) {\n    super(apollo);\n    this.document = ViewSmsProviderDocument;\n  }\n  static {\n    this.ɵfac = function ViewSmsProviderGQL_Factory(t) {\n      return new (t || ViewSmsProviderGQL)(i0.ɵɵinject(i1.Apollo));\n    };\n  }\n  static {\n    this.ɵprov = /*@__PURE__*/i0.ɵɵdefineInjectable({\n      token: ViewSmsProviderGQL,\n      factory: ViewSmsProviderGQL.ɵfac,\n      providedIn: 'root'\n    });\n  }\n}\nexport const CreateSmsProviderDocument = gql`\n    mutation CreateSMSProvider($input: SMSProviderInput!) {\n  createOneSMSProvider(input: {sMSProvider: $input}) {\n    id\n  }\n}\n    `;\nexport class CreateSmsProviderGQL extends Apollo.Mutation {\n  constructor(apollo) {\n    super(apollo);\n    this.document = CreateSmsProviderDocument;\n  }\n  static {\n    this.ɵfac = function CreateSmsProviderGQL_Factory(t) {\n      return new (t || CreateSmsProviderGQL)(i0.ɵɵinject(i1.Apollo));\n    };\n  }\n  static {\n    this.ɵprov = /*@__PURE__*/i0.ɵɵdefineInjectable({\n      token: CreateSmsProviderGQL,\n      factory: CreateSmsProviderGQL.ɵfac,\n      providedIn: 'root'\n    });\n  }\n}\nexport const UpdateSmsProviderDocument = gql`\n    mutation UpdateSMSProvider($id: ID!, $input: SMSProviderInput!) {\n  updateOneSMSProvider(input: {id: $id, update: $input}) {\n    id\n  }\n}\n    `;\nexport class UpdateSmsProviderGQL extends Apollo.Mutation {\n  constructor(apollo) {\n    super(apollo);\n    this.document = UpdateSmsProviderDocument;\n  }\n  static {\n    this.ɵfac = function UpdateSmsProviderGQL_Factory(t) {\n      return new (t || UpdateSmsProviderGQL)(i0.ɵɵinject(i1.Apollo));\n    };\n  }\n  static {\n    this.ɵprov = /*@__PURE__*/i0.ɵɵdefineInjectable({\n      token: UpdateSmsProviderGQL,\n      factory: UpdateSmsProviderGQL.ɵfac,\n      providedIn: 'root'\n    });\n  }\n}\nexport const MarkSmsProviderAsDefaultDocument = gql`\n    mutation MarkSMSProviderAsDefault($id: ID!) {\n  markSMSProviderAsDefault(id: $id) {\n    id\n  }\n}\n    `;\nexport class MarkSmsProviderAsDefaultGQL extends Apollo.Mutation {\n  constructor(apollo) {\n    super(apollo);\n    this.document = MarkSmsProviderAsDefaultDocument;\n  }\n  static {\n    this.ɵfac = function MarkSmsProviderAsDefaultGQL_Factory(t) {\n      return new (t || MarkSmsProviderAsDefaultGQL)(i0.ɵɵinject(i1.Apollo));\n    };\n  }\n  static {\n    this.ɵprov = /*@__PURE__*/i0.ɵɵdefineInjectable({\n      token: MarkSmsProviderAsDefaultGQL,\n      factory: MarkSmsProviderAsDefaultGQL.ɵfac,\n      providedIn: 'root'\n    });\n  }\n}\nexport const CreateOperatorDocument = gql`\n    mutation CreateOperator($input: CreateOperatorInput!) {\n  createOneOperator(input: {operator: $input}) {\n    id\n  }\n}\n    `;\nexport class CreateOperatorGQL extends Apollo.Mutation {\n  constructor(apollo) {\n    super(apollo);\n    this.document = CreateOperatorDocument;\n  }\n  static {\n    this.ɵfac = function CreateOperatorGQL_Factory(t) {\n      return new (t || CreateOperatorGQL)(i0.ɵɵinject(i1.Apollo));\n    };\n  }\n  static {\n    this.ɵprov = /*@__PURE__*/i0.ɵɵdefineInjectable({\n      token: CreateOperatorGQL,\n      factory: CreateOperatorGQL.ɵfac,\n      providedIn: 'root'\n    });\n  }\n}\nexport const ViewOperatorDocument = gql`\n    query ViewOperator($id: ID!) {\n  operator(id: $id) {\n    id\n    firstName\n    lastName\n    mobileNumber\n    userName\n    email\n    roleId\n  }\n  operatorRoles {\n    id\n    title\n  }\n}\n    `;\nexport class ViewOperatorGQL extends Apollo.Query {\n  constructor(apollo) {\n    super(apollo);\n    this.document = ViewOperatorDocument;\n  }\n  static {\n    this.ɵfac = function ViewOperatorGQL_Factory(t) {\n      return new (t || ViewOperatorGQL)(i0.ɵɵinject(i1.Apollo));\n    };\n  }\n  static {\n    this.ɵprov = /*@__PURE__*/i0.ɵɵdefineInjectable({\n      token: ViewOperatorGQL,\n      factory: ViewOperatorGQL.ɵfac,\n      providedIn: 'root'\n    });\n  }\n}\nexport const NewOperatorDocument = gql`\n    query NewOperator {\n  operatorRoles {\n    id\n    title\n  }\n}\n    `;\nexport class NewOperatorGQL extends Apollo.Query {\n  constructor(apollo) {\n    super(apollo);\n    this.document = NewOperatorDocument;\n  }\n  static {\n    this.ɵfac = function NewOperatorGQL_Factory(t) {\n      return new (t || NewOperatorGQL)(i0.ɵɵinject(i1.Apollo));\n    };\n  }\n  static {\n    this.ɵprov = /*@__PURE__*/i0.ɵɵdefineInjectable({\n      token: NewOperatorGQL,\n      factory: NewOperatorGQL.ɵfac,\n      providedIn: 'root'\n    });\n  }\n}\nexport const UpdateOperatorDocument = gql`\n    mutation UpdateOperator($id: ID!, $update: UpdateOperator!) {\n  updateOneOperator(input: {id: $id, update: $update}) {\n    id\n  }\n}\n    `;\nexport class UpdateOperatorGQL extends Apollo.Mutation {\n  constructor(apollo) {\n    super(apollo);\n    this.document = UpdateOperatorDocument;\n  }\n  static {\n    this.ɵfac = function UpdateOperatorGQL_Factory(t) {\n      return new (t || UpdateOperatorGQL)(i0.ɵɵinject(i1.Apollo));\n    };\n  }\n  static {\n    this.ɵprov = /*@__PURE__*/i0.ɵɵdefineInjectable({\n      token: UpdateOperatorGQL,\n      factory: UpdateOperatorGQL.ɵfac,\n      providedIn: 'root'\n    });\n  }\n}\nexport const UsersListDocument = gql`\n    query UsersList($paging: OffsetPaging) {\n  operators(paging: $paging) {\n    nodes {\n      id\n      userName\n      firstName\n      lastName\n      role {\n        title\n      }\n    }\n    totalCount\n  }\n}\n    `;\nexport class UsersListGQL extends Apollo.Query {\n  constructor(apollo) {\n    super(apollo);\n    this.document = UsersListDocument;\n  }\n  static {\n    this.ɵfac = function UsersListGQL_Factory(t) {\n      return new (t || UsersListGQL)(i0.ɵɵinject(i1.Apollo));\n    };\n  }\n  static {\n    this.ɵprov = /*@__PURE__*/i0.ɵɵdefineInjectable({\n      token: UsersListGQL,\n      factory: UsersListGQL.ɵfac,\n      providedIn: 'root'\n    });\n  }\n}\nexport const ZonePriceViewDocument = gql`\n    query ZonePriceView($id: ID!) {\n  zonePrice(id: $id) {\n    id\n    name\n    from {\n      lat\n      lng\n    }\n    to {\n      lat\n      lng\n    }\n    cost\n    services {\n      id\n    }\n    fleets {\n      id\n    }\n    timeMultipliers {\n      startTime\n      endTime\n      multiply\n    }\n  }\n  fleets(paging: {limit: 50}) {\n    nodes {\n      id\n      name\n    }\n  }\n  services {\n    id\n    name\n  }\n}\n    `;\nexport class ZonePriceViewGQL extends Apollo.Query {\n  constructor(apollo) {\n    super(apollo);\n    this.document = ZonePriceViewDocument;\n  }\n  static {\n    this.ɵfac = function ZonePriceViewGQL_Factory(t) {\n      return new (t || ZonePriceViewGQL)(i0.ɵɵinject(i1.Apollo));\n    };\n  }\n  static {\n    this.ɵprov = /*@__PURE__*/i0.ɵɵdefineInjectable({\n      token: ZonePriceViewGQL,\n      factory: ZonePriceViewGQL.ɵfac,\n      providedIn: 'root'\n    });\n  }\n}\nexport const ZonePriceNewDocument = gql`\n    query ZonePriceNew {\n  fleets(paging: {limit: 50}) {\n    nodes {\n      id\n      name\n    }\n  }\n  services {\n    id\n    name\n  }\n}\n    `;\nexport class ZonePriceNewGQL extends Apollo.Query {\n  constructor(apollo) {\n    super(apollo);\n    this.document = ZonePriceNewDocument;\n  }\n  static {\n    this.ɵfac = function ZonePriceNewGQL_Factory(t) {\n      return new (t || ZonePriceNewGQL)(i0.ɵɵinject(i1.Apollo));\n    };\n  }\n  static {\n    this.ɵprov = /*@__PURE__*/i0.ɵɵdefineInjectable({\n      token: ZonePriceNewGQL,\n      factory: ZonePriceNewGQL.ɵfac,\n      providedIn: 'root'\n    });\n  }\n}\nexport const UpdateZonePriceDocument = gql`\n    mutation UpdateZonePrice($id: ID!, $update: ZonePriceInput!) {\n  updateOneZonePrice(input: {id: $id, update: $update}) {\n    id\n  }\n}\n    `;\nexport class UpdateZonePriceGQL extends Apollo.Mutation {\n  constructor(apollo) {\n    super(apollo);\n    this.document = UpdateZonePriceDocument;\n  }\n  static {\n    this.ɵfac = function UpdateZonePriceGQL_Factory(t) {\n      return new (t || UpdateZonePriceGQL)(i0.ɵɵinject(i1.Apollo));\n    };\n  }\n  static {\n    this.ɵprov = /*@__PURE__*/i0.ɵɵdefineInjectable({\n      token: UpdateZonePriceGQL,\n      factory: UpdateZonePriceGQL.ɵfac,\n      providedIn: 'root'\n    });\n  }\n}\nexport const CreateZonePriceDocument = gql`\n    mutation CreateZonePrice($input: ZonePriceInput!) {\n  createOneZonePrice(input: {zonePrice: $input}) {\n    id\n  }\n}\n    `;\nexport class CreateZonePriceGQL extends Apollo.Mutation {\n  constructor(apollo) {\n    super(apollo);\n    this.document = CreateZonePriceDocument;\n  }\n  static {\n    this.ɵfac = function CreateZonePriceGQL_Factory(t) {\n      return new (t || CreateZonePriceGQL)(i0.ɵɵinject(i1.Apollo));\n    };\n  }\n  static {\n    this.ɵprov = /*@__PURE__*/i0.ɵɵdefineInjectable({\n      token: CreateZonePriceGQL,\n      factory: CreateZonePriceGQL.ɵfac,\n      providedIn: 'root'\n    });\n  }\n}\nexport const DeleteZonePriceDocument = gql`\n    mutation DeleteZonePrice($id: ID!) {\n  deleteOneZonePrice(input: {id: $id}) {\n    id\n  }\n}\n    `;\nexport class DeleteZonePriceGQL extends Apollo.Mutation {\n  constructor(apollo) {\n    super(apollo);\n    this.document = DeleteZonePriceDocument;\n  }\n  static {\n    this.ɵfac = function DeleteZonePriceGQL_Factory(t) {\n      return new (t || DeleteZonePriceGQL)(i0.ɵɵinject(i1.Apollo));\n    };\n  }\n  static {\n    this.ɵprov = /*@__PURE__*/i0.ɵɵdefineInjectable({\n      token: DeleteZonePriceGQL,\n      factory: DeleteZonePriceGQL.ɵfac,\n      providedIn: 'root'\n    });\n  }\n}\nexport const SetZonePriceRelationsDocument = gql`\n    mutation SetZonePriceRelations($id: ID!, $services: [ID!]!, $fleets: [ID!]!) {\n  setServicesOnZonePrice(input: {id: $id, relationIds: $services}) {\n    id\n  }\n  setFleetsOnZonePrice(input: {id: $id, relationIds: $fleets}) {\n    id\n  }\n}\n    `;\nexport class SetZonePriceRelationsGQL extends Apollo.Mutation {\n  constructor(apollo) {\n    super(apollo);\n    this.document = SetZonePriceRelationsDocument;\n  }\n  static {\n    this.ɵfac = function SetZonePriceRelationsGQL_Factory(t) {\n      return new (t || SetZonePriceRelationsGQL)(i0.ɵɵinject(i1.Apollo));\n    };\n  }\n  static {\n    this.ɵprov = /*@__PURE__*/i0.ɵɵdefineInjectable({\n      token: SetZonePriceRelationsGQL,\n      factory: SetZonePriceRelationsGQL.ɵfac,\n      providedIn: 'root'\n    });\n  }\n}\nexport const ZonePricesListDocument = gql`\n    query ZonePricesList($paging: OffsetPaging) {\n  zonePrices(paging: $paging) {\n    nodes {\n      id\n      name\n    }\n    totalCount\n  }\n}\n    `;\nexport class ZonePricesListGQL extends Apollo.Query {\n  constructor(apollo) {\n    super(apollo);\n    this.document = ZonePricesListDocument;\n  }\n  static {\n    this.ɵfac = function ZonePricesListGQL_Factory(t) {\n      return new (t || ZonePricesListGQL)(i0.ɵɵinject(i1.Apollo));\n    };\n  }\n  static {\n    this.ɵprov = /*@__PURE__*/i0.ɵɵdefineInjectable({\n      token: ZonePricesListGQL,\n      factory: ZonePricesListGQL.ɵfac,\n      providedIn: 'root'\n    });\n  }\n}\nexport const ViewAnnouncementDocument = gql`\n    query ViewAnnouncement($id: ID!) {\n  announcement(id: $id) {\n    id\n    title\n    userType\n    description\n    url\n    startAt\n    expireAt\n  }\n}\n    `;\nexport class ViewAnnouncementGQL extends Apollo.Query {\n  constructor(apollo) {\n    super(apollo);\n    this.document = ViewAnnouncementDocument;\n  }\n  static {\n    this.ɵfac = function ViewAnnouncementGQL_Factory(t) {\n      return new (t || ViewAnnouncementGQL)(i0.ɵɵinject(i1.Apollo));\n    };\n  }\n  static {\n    this.ɵprov = /*@__PURE__*/i0.ɵɵdefineInjectable({\n      token: ViewAnnouncementGQL,\n      factory: ViewAnnouncementGQL.ɵfac,\n      providedIn: 'root'\n    });\n  }\n}\nexport const CreateAnnouncementDocument = gql`\n    mutation CreateAnnouncement($input: AnnouncementInput!) {\n  createOneAnnouncement(input: {announcement: $input}) {\n    id\n  }\n}\n    `;\nexport class CreateAnnouncementGQL extends Apollo.Mutation {\n  constructor(apollo) {\n    super(apollo);\n    this.document = CreateAnnouncementDocument;\n  }\n  static {\n    this.ɵfac = function CreateAnnouncementGQL_Factory(t) {\n      return new (t || CreateAnnouncementGQL)(i0.ɵɵinject(i1.Apollo));\n    };\n  }\n  static {\n    this.ɵprov = /*@__PURE__*/i0.ɵɵdefineInjectable({\n      token: CreateAnnouncementGQL,\n      factory: CreateAnnouncementGQL.ɵfac,\n      providedIn: 'root'\n    });\n  }\n}\nexport const UpdateAnnouncementDocument = gql`\n    mutation UpdateAnnouncement($id: ID!, $input: AnnouncementInput!) {\n  updateOneAnnouncement(input: {id: $id, update: $input}) {\n    id\n  }\n}\n    `;\nexport class UpdateAnnouncementGQL extends Apollo.Mutation {\n  constructor(apollo) {\n    super(apollo);\n    this.document = UpdateAnnouncementDocument;\n  }\n  static {\n    this.ɵfac = function UpdateAnnouncementGQL_Factory(t) {\n      return new (t || UpdateAnnouncementGQL)(i0.ɵɵinject(i1.Apollo));\n    };\n  }\n  static {\n    this.ɵprov = /*@__PURE__*/i0.ɵɵdefineInjectable({\n      token: UpdateAnnouncementGQL,\n      factory: UpdateAnnouncementGQL.ɵfac,\n      providedIn: 'root'\n    });\n  }\n}\nexport const DeleteAnnouncementDocument = gql`\n    mutation DeleteAnnouncement($id: ID!) {\n  deleteOneAnnouncement(input: {id: $id}) {\n    id\n  }\n}\n    `;\nexport class DeleteAnnouncementGQL extends Apollo.Mutation {\n  constructor(apollo) {\n    super(apollo);\n    this.document = DeleteAnnouncementDocument;\n  }\n  static {\n    this.ɵfac = function DeleteAnnouncementGQL_Factory(t) {\n      return new (t || DeleteAnnouncementGQL)(i0.ɵɵinject(i1.Apollo));\n    };\n  }\n  static {\n    this.ɵprov = /*@__PURE__*/i0.ɵɵdefineInjectable({\n      token: DeleteAnnouncementGQL,\n      factory: DeleteAnnouncementGQL.ɵfac,\n      providedIn: 'root'\n    });\n  }\n}\nexport const AnnouncementsListDocument = gql`\n    query AnnouncementsList($paging: OffsetPaging) {\n  announcements(paging: $paging) {\n    nodes {\n      id\n      title\n      description\n      startAt\n      expireAt\n    }\n    totalCount\n  }\n}\n    `;\nexport class AnnouncementsListGQL extends Apollo.Query {\n  constructor(apollo) {\n    super(apollo);\n    this.document = AnnouncementsListDocument;\n  }\n  static {\n    this.ɵfac = function AnnouncementsListGQL_Factory(t) {\n      return new (t || AnnouncementsListGQL)(i0.ɵɵinject(i1.Apollo));\n    };\n  }\n  static {\n    this.ɵprov = /*@__PURE__*/i0.ɵɵdefineInjectable({\n      token: AnnouncementsListGQL,\n      factory: AnnouncementsListGQL.ɵfac,\n      providedIn: 'root'\n    });\n  }\n}\nexport const ViewCouponDocument = gql`\n    query ViewCoupon($id: ID!) {\n  coupon(id: $id) {\n    id\n    isEnabled\n    code\n    title\n    description\n    manyUsersCanUse\n    manyTimesUserCanUse\n    minimumCost\n    maximumCost\n    startAt\n    expireAt\n    discountPercent\n    discountFlat\n    creditGift\n    isEnabled\n    isFirstTravelOnly\n    allowedServices {\n      id\n      name\n    }\n  }\n}\n    `;\nexport class ViewCouponGQL extends Apollo.Query {\n  constructor(apollo) {\n    super(apollo);\n    this.document = ViewCouponDocument;\n  }\n  static {\n    this.ɵfac = function ViewCouponGQL_Factory(t) {\n      return new (t || ViewCouponGQL)(i0.ɵɵinject(i1.Apollo));\n    };\n  }\n  static {\n    this.ɵprov = /*@__PURE__*/i0.ɵɵdefineInjectable({\n      token: ViewCouponGQL,\n      factory: ViewCouponGQL.ɵfac,\n      providedIn: 'root'\n    });\n  }\n}\nexport const CreateCouponDocument = gql`\n    mutation CreateCoupon($input: CouponInput!) {\n  createOneCoupon(input: {coupon: $input}) {\n    id\n  }\n}\n    `;\nexport class CreateCouponGQL extends Apollo.Mutation {\n  constructor(apollo) {\n    super(apollo);\n    this.document = CreateCouponDocument;\n  }\n  static {\n    this.ɵfac = function CreateCouponGQL_Factory(t) {\n      return new (t || CreateCouponGQL)(i0.ɵɵinject(i1.Apollo));\n    };\n  }\n  static {\n    this.ɵprov = /*@__PURE__*/i0.ɵɵdefineInjectable({\n      token: CreateCouponGQL,\n      factory: CreateCouponGQL.ɵfac,\n      providedIn: 'root'\n    });\n  }\n}\nexport const UpdateCouponDocument = gql`\n    mutation UpdateCoupon($id: ID!, $input: CouponInput!) {\n  updateOneCoupon(input: {id: $id, update: $input}) {\n    id\n  }\n}\n    `;\nexport class UpdateCouponGQL extends Apollo.Mutation {\n  constructor(apollo) {\n    super(apollo);\n    this.document = UpdateCouponDocument;\n  }\n  static {\n    this.ɵfac = function UpdateCouponGQL_Factory(t) {\n      return new (t || UpdateCouponGQL)(i0.ɵɵinject(i1.Apollo));\n    };\n  }\n  static {\n    this.ɵprov = /*@__PURE__*/i0.ɵɵdefineInjectable({\n      token: UpdateCouponGQL,\n      factory: UpdateCouponGQL.ɵfac,\n      providedIn: 'root'\n    });\n  }\n}\nexport const DeleteCouponDocument = gql`\n    mutation DeleteCoupon($id: ID!) {\n  deleteOneCoupon(input: {id: $id}) {\n    id\n  }\n}\n    `;\nexport class DeleteCouponGQL extends Apollo.Mutation {\n  constructor(apollo) {\n    super(apollo);\n    this.document = DeleteCouponDocument;\n  }\n  static {\n    this.ɵfac = function DeleteCouponGQL_Factory(t) {\n      return new (t || DeleteCouponGQL)(i0.ɵɵinject(i1.Apollo));\n    };\n  }\n  static {\n    this.ɵprov = /*@__PURE__*/i0.ɵɵdefineInjectable({\n      token: DeleteCouponGQL,\n      factory: DeleteCouponGQL.ɵfac,\n      providedIn: 'root'\n    });\n  }\n}\nexport const CouponListDocument = gql`\n    query CouponList($paging: OffsetPaging) {\n  coupons(paging: $paging) {\n    nodes {\n      id\n      code\n      title\n      isEnabled\n      description\n      startAt\n      expireAt\n    }\n    totalCount\n  }\n}\n    `;\nexport class CouponListGQL extends Apollo.Query {\n  constructor(apollo) {\n    super(apollo);\n    this.document = CouponListDocument;\n  }\n  static {\n    this.ɵfac = function CouponListGQL_Factory(t) {\n      return new (t || CouponListGQL)(i0.ɵɵinject(i1.Apollo));\n    };\n  }\n  static {\n    this.ɵprov = /*@__PURE__*/i0.ɵɵdefineInjectable({\n      token: CouponListGQL,\n      factory: CouponListGQL.ɵfac,\n      providedIn: 'root'\n    });\n  }\n}\nexport const GiftBatchListDocument = gql`\n    query GiftBatchList($paging: OffsetPaging) {\n  giftBatches(paging: $paging) {\n    nodes {\n      id\n      name\n      currency\n      amount\n      availableFrom\n      expireAt\n      totalUsed: giftCodesAggregate(filter: {usedAt: {isNot: null}}) {\n        count {\n          id\n        }\n      }\n      totalUnused: giftCodesAggregate(filter: {usedAt: {is: null}}) {\n        count {\n          id\n        }\n      }\n    }\n    totalCount\n  }\n}\n    `;\nexport class GiftBatchListGQL extends Apollo.Query {\n  constructor(apollo) {\n    super(apollo);\n    this.document = GiftBatchListDocument;\n  }\n  static {\n    this.ɵfac = function GiftBatchListGQL_Factory(t) {\n      return new (t || GiftBatchListGQL)(i0.ɵɵinject(i1.Apollo));\n    };\n  }\n  static {\n    this.ɵprov = /*@__PURE__*/i0.ɵɵdefineInjectable({\n      token: GiftBatchListGQL,\n      factory: GiftBatchListGQL.ɵfac,\n      providedIn: 'root'\n    });\n  }\n}\nexport const CreateGiftBachDocument = gql`\n    mutation CreateGiftBach($input: CreateGiftBatchInput!) {\n  createGiftCardBatch(input: $input) {\n    id\n    name\n  }\n}\n    `;\nexport class CreateGiftBachGQL extends Apollo.Mutation {\n  constructor(apollo) {\n    super(apollo);\n    this.document = CreateGiftBachDocument;\n  }\n  static {\n    this.ɵfac = function CreateGiftBachGQL_Factory(t) {\n      return new (t || CreateGiftBachGQL)(i0.ɵɵinject(i1.Apollo));\n    };\n  }\n  static {\n    this.ɵprov = /*@__PURE__*/i0.ɵɵdefineInjectable({\n      token: CreateGiftBachGQL,\n      factory: CreateGiftBachGQL.ɵfac,\n      providedIn: 'root'\n    });\n  }\n}\nexport const ViewGiftBatchDocument = gql`\n    query ViewGiftBatch($id: ID!) {\n  giftBatch(id: $id) {\n    id\n    name\n    amount\n    currency\n    availableFrom\n    expireAt\n    totalUsed: giftCodesAggregate(filter: {usedAt: {isNot: null}}) {\n      count {\n        id\n      }\n    }\n    totalUnused: giftCodesAggregate(filter: {usedAt: {is: null}}) {\n      count {\n        id\n      }\n    }\n  }\n}\n    `;\nexport class ViewGiftBatchGQL extends Apollo.Query {\n  constructor(apollo) {\n    super(apollo);\n    this.document = ViewGiftBatchDocument;\n  }\n  static {\n    this.ɵfac = function ViewGiftBatchGQL_Factory(t) {\n      return new (t || ViewGiftBatchGQL)(i0.ɵɵinject(i1.Apollo));\n    };\n  }\n  static {\n    this.ɵprov = /*@__PURE__*/i0.ɵɵdefineInjectable({\n      token: ViewGiftBatchGQL,\n      factory: ViewGiftBatchGQL.ɵfac,\n      providedIn: 'root'\n    });\n  }\n}\nexport const GiftCodeListDocument = gql`\n    query GiftCodeList($giftBatchId: ID!, $paging: OffsetPaging!) {\n  giftBatch(id: $giftBatchId) {\n    giftCodes(paging: $paging) {\n      nodes {\n        id\n        code\n        usedAt\n        riderTransaction {\n          riderId\n          rider {\n            firstName\n            lastName\n          }\n        }\n        driverTransaction {\n          driverId\n          driver {\n            firstName\n            lastName\n          }\n        }\n      }\n      totalCount\n    }\n  }\n}\n    `;\nexport class GiftCodeListGQL extends Apollo.Query {\n  constructor(apollo) {\n    super(apollo);\n    this.document = GiftCodeListDocument;\n  }\n  static {\n    this.ɵfac = function GiftCodeListGQL_Factory(t) {\n      return new (t || GiftCodeListGQL)(i0.ɵɵinject(i1.Apollo));\n    };\n  }\n  static {\n    this.ɵprov = /*@__PURE__*/i0.ɵɵdefineInjectable({\n      token: GiftCodeListGQL,\n      factory: GiftCodeListGQL.ɵfac,\n      providedIn: 'root'\n    });\n  }\n}\nexport const ExportGiftBatchToCsvDocument = gql`\n    mutation ExportGiftBatchToCSV($giftBatchId: ID!) {\n  exportGiftCardBatch(batchId: $giftBatchId)\n}\n    `;\nexport class ExportGiftBatchToCsvGQL extends Apollo.Mutation {\n  constructor(apollo) {\n    super(apollo);\n    this.document = ExportGiftBatchToCsvDocument;\n  }\n  static {\n    this.ɵfac = function ExportGiftBatchToCsvGQL_Factory(t) {\n      return new (t || ExportGiftBatchToCsvGQL)(i0.ɵɵinject(i1.Apollo));\n    };\n  }\n  static {\n    this.ɵprov = /*@__PURE__*/i0.ɵɵdefineInjectable({\n      token: ExportGiftBatchToCsvGQL,\n      factory: ExportGiftBatchToCsvGQL.ɵfac,\n      providedIn: 'root'\n    });\n  }\n}\nexport const RewardListDocument = gql`\n    query RewardList($paging: OffsetPaging) {\n  rewards(paging: $paging) {\n    nodes {\n      id\n      title\n      startDate\n      endDate\n      beneficiary\n      event\n    }\n    totalCount\n  }\n}\n    `;\nexport class RewardListGQL extends Apollo.Query {\n  constructor(apollo) {\n    super(apollo);\n    this.document = RewardListDocument;\n  }\n  static {\n    this.ɵfac = function RewardListGQL_Factory(t) {\n      return new (t || RewardListGQL)(i0.ɵɵinject(i1.Apollo));\n    };\n  }\n  static {\n    this.ɵprov = /*@__PURE__*/i0.ɵɵdefineInjectable({\n      token: RewardListGQL,\n      factory: RewardListGQL.ɵfac,\n      providedIn: 'root'\n    });\n  }\n}\nexport const ViewRewardDocument = gql`\n    query ViewReward($id: ID!) {\n  reward(id: $id) {\n    id\n    title\n    startDate\n    endDate\n    appType\n    beneficiary\n    event\n    creditGift\n    tripFeePercentGift\n    creditCurrency\n    conditionTripCountsLessThan\n    conditionUserNumberFirstDigits\n  }\n}\n    `;\nexport class ViewRewardGQL extends Apollo.Query {\n  constructor(apollo) {\n    super(apollo);\n    this.document = ViewRewardDocument;\n  }\n  static {\n    this.ɵfac = function ViewRewardGQL_Factory(t) {\n      return new (t || ViewRewardGQL)(i0.ɵɵinject(i1.Apollo));\n    };\n  }\n  static {\n    this.ɵprov = /*@__PURE__*/i0.ɵɵdefineInjectable({\n      token: ViewRewardGQL,\n      factory: ViewRewardGQL.ɵfac,\n      providedIn: 'root'\n    });\n  }\n}\nexport const CreateRewardDocument = gql`\n    mutation CreateReward($input: CreateReward!) {\n  createOneReward(input: {reward: $input}) {\n    id\n  }\n}\n    `;\nexport class CreateRewardGQL extends Apollo.Mutation {\n  constructor(apollo) {\n    super(apollo);\n    this.document = CreateRewardDocument;\n  }\n  static {\n    this.ɵfac = function CreateRewardGQL_Factory(t) {\n      return new (t || CreateRewardGQL)(i0.ɵɵinject(i1.Apollo));\n    };\n  }\n  static {\n    this.ɵprov = /*@__PURE__*/i0.ɵɵdefineInjectable({\n      token: CreateRewardGQL,\n      factory: CreateRewardGQL.ɵfac,\n      providedIn: 'root'\n    });\n  }\n}\nexport const UpdateRewardDocument = gql`\n    mutation UpdateReward($id: ID!, $input: UpdateReward!) {\n  updateOneReward(input: {id: $id, update: $input}) {\n    id\n  }\n}\n    `;\nexport class UpdateRewardGQL extends Apollo.Mutation {\n  constructor(apollo) {\n    super(apollo);\n    this.document = UpdateRewardDocument;\n  }\n  static {\n    this.ɵfac = function UpdateRewardGQL_Factory(t) {\n      return new (t || UpdateRewardGQL)(i0.ɵɵinject(i1.Apollo));\n    };\n  }\n  static {\n    this.ɵprov = /*@__PURE__*/i0.ɵɵdefineInjectable({\n      token: UpdateRewardGQL,\n      factory: UpdateRewardGQL.ɵfac,\n      providedIn: 'root'\n    });\n  }\n}\nexport const CreatePayoutSessionFieldsDocument = gql`\n    query CreatePayoutSessionFields {\n  supportedCurrencies\n  payoutMethods {\n    id\n    name\n  }\n}\n    `;\nexport class CreatePayoutSessionFieldsGQL extends Apollo.Query {\n  constructor(apollo) {\n    super(apollo);\n    this.document = CreatePayoutSessionFieldsDocument;\n  }\n  static {\n    this.ɵfac = function CreatePayoutSessionFieldsGQL_Factory(t) {\n      return new (t || CreatePayoutSessionFieldsGQL)(i0.ɵɵinject(i1.Apollo));\n    };\n  }\n  static {\n    this.ɵprov = /*@__PURE__*/i0.ɵɵdefineInjectable({\n      token: CreatePayoutSessionFieldsGQL,\n      factory: CreatePayoutSessionFieldsGQL.ɵfac,\n      providedIn: 'root'\n    });\n  }\n}\nexport const CreatePayoutSessionDocument = gql`\n    mutation CreatePayoutSession($input: CreatePayoutSessionInput!) {\n  createPayoutSession(input: $input) {\n    id\n  }\n}\n    `;\nexport class CreatePayoutSessionGQL extends Apollo.Mutation {\n  constructor(apollo) {\n    super(apollo);\n    this.document = CreatePayoutSessionDocument;\n  }\n  static {\n    this.ɵfac = function CreatePayoutSessionGQL_Factory(t) {\n      return new (t || CreatePayoutSessionGQL)(i0.ɵɵinject(i1.Apollo));\n    };\n  }\n  static {\n    this.ɵprov = /*@__PURE__*/i0.ɵɵdefineInjectable({\n      token: CreatePayoutSessionGQL,\n      factory: CreatePayoutSessionGQL.ɵfac,\n      providedIn: 'root'\n    });\n  }\n}\nexport const PayoutMethodsDocument = gql`\n    query PayoutMethods {\n  payoutMethods {\n    id\n    name\n    description\n    type\n    media {\n      id\n      address\n    }\n  }\n}\n    `;\nexport class PayoutMethodsGQL extends Apollo.Query {\n  constructor(apollo) {\n    super(apollo);\n    this.document = PayoutMethodsDocument;\n  }\n  static {\n    this.ɵfac = function PayoutMethodsGQL_Factory(t) {\n      return new (t || PayoutMethodsGQL)(i0.ɵɵinject(i1.Apollo));\n    };\n  }\n  static {\n    this.ɵprov = /*@__PURE__*/i0.ɵɵdefineInjectable({\n      token: PayoutMethodsGQL,\n      factory: PayoutMethodsGQL.ɵfac,\n      providedIn: 'root'\n    });\n  }\n}\nexport const ViewPayoutMethodDocument = gql`\n    query ViewPayoutMethod($id: ID!) {\n  payoutMethod(id: $id) {\n    id\n    name\n    currency\n    description\n    type\n    privateKey\n    publicKey\n    saltKey\n    merchantId\n    media {\n      address\n    }\n  }\n}\n    `;\nexport class ViewPayoutMethodGQL extends Apollo.Query {\n  constructor(apollo) {\n    super(apollo);\n    this.document = ViewPayoutMethodDocument;\n  }\n  static {\n    this.ɵfac = function ViewPayoutMethodGQL_Factory(t) {\n      return new (t || ViewPayoutMethodGQL)(i0.ɵɵinject(i1.Apollo));\n    };\n  }\n  static {\n    this.ɵprov = /*@__PURE__*/i0.ɵɵdefineInjectable({\n      token: ViewPayoutMethodGQL,\n      factory: ViewPayoutMethodGQL.ɵfac,\n      providedIn: 'root'\n    });\n  }\n}\nexport const CreatePayoutMethodDocument = gql`\n    mutation CreatePayoutMethod($input: CreatePayoutMethodInput!) {\n  createOnePayoutMethod(input: {payoutMethod: $input}) {\n    id\n  }\n}\n    `;\nexport class CreatePayoutMethodGQL extends Apollo.Mutation {\n  constructor(apollo) {\n    super(apollo);\n    this.document = CreatePayoutMethodDocument;\n  }\n  static {\n    this.ɵfac = function CreatePayoutMethodGQL_Factory(t) {\n      return new (t || CreatePayoutMethodGQL)(i0.ɵɵinject(i1.Apollo));\n    };\n  }\n  static {\n    this.ɵprov = /*@__PURE__*/i0.ɵɵdefineInjectable({\n      token: CreatePayoutMethodGQL,\n      factory: CreatePayoutMethodGQL.ɵfac,\n      providedIn: 'root'\n    });\n  }\n}\nexport const UpdatePayoutMethodDocument = gql`\n    mutation UpdatePayoutMethod($id: ID!, $update: CreatePayoutMethodInput!) {\n  updateOnePayoutMethod(input: {id: $id, update: $update}) {\n    id\n  }\n}\n    `;\nexport class UpdatePayoutMethodGQL extends Apollo.Mutation {\n  constructor(apollo) {\n    super(apollo);\n    this.document = UpdatePayoutMethodDocument;\n  }\n  static {\n    this.ɵfac = function UpdatePayoutMethodGQL_Factory(t) {\n      return new (t || UpdatePayoutMethodGQL)(i0.ɵɵinject(i1.Apollo));\n    };\n  }\n  static {\n    this.ɵprov = /*@__PURE__*/i0.ɵɵdefineInjectable({\n      token: UpdatePayoutMethodGQL,\n      factory: UpdatePayoutMethodGQL.ɵfac,\n      providedIn: 'root'\n    });\n  }\n}\nexport const PayoutsDocument = gql`\n    query Payouts($sessionsPaging: OffsetPaging!, $currency: String) {\n  supportedCurrencies\n  payoutStatistics(currency: $currency) {\n    pendingAmount\n    lastPayoutAmount\n    currency\n    usersDefaultPayoutMethodStats {\n      payoutMethod {\n        id\n        name\n      }\n      totalCount\n    }\n  }\n  payoutSessions(paging: $sessionsPaging) {\n    nodes {\n      id\n      createdAt\n      processedAt\n      status\n      totalAmount\n      currency\n    }\n    totalCount\n  }\n}\n    `;\nexport class PayoutsGQL extends Apollo.Query {\n  constructor(apollo) {\n    super(apollo);\n    this.document = PayoutsDocument;\n  }\n  static {\n    this.ɵfac = function PayoutsGQL_Factory(t) {\n      return new (t || PayoutsGQL)(i0.ɵɵinject(i1.Apollo));\n    };\n  }\n  static {\n    this.ɵprov = /*@__PURE__*/i0.ɵɵdefineInjectable({\n      token: PayoutsGQL,\n      factory: PayoutsGQL.ɵfac,\n      providedIn: 'root'\n    });\n  }\n}\nexport const ViewPayoutSessionDocument = gql`\n    query ViewPayoutSession($id: ID!) {\n  payoutSession(id: $id) {\n    id\n    currency\n    createdAt\n    processedAt\n    totalAmount\n    status\n    payoutMethods {\n      id\n      type\n      name\n      description\n      currency\n      balance\n      media {\n        address\n      }\n    }\n    driverTransactions {\n      nodes {\n        amount\n        currency\n        status\n        createdAt\n        driver {\n          firstName\n          lastName\n          media {\n            address\n          }\n        }\n      }\n    }\n    amountToBePaidByPayoutMethod: driverTransactionsAggregate(\n      filter: {status: {eq: Processing}, payoutSessionId: {eq: $id}}\n    ) {\n      groupBy {\n        payoutMethodId\n      }\n      sum {\n        amount\n      }\n    }\n    unpaidAmount: driverTransactionsAggregate(filter: {status: {eq: Processing}}) {\n      sum {\n        amount\n      }\n    }\n    paidAmount: driverTransactionsAggregate(filter: {status: {eq: Done}}) {\n      sum {\n        amount\n      }\n    }\n  }\n}\n    `;\nexport class ViewPayoutSessionGQL extends Apollo.Query {\n  constructor(apollo) {\n    super(apollo);\n    this.document = ViewPayoutSessionDocument;\n  }\n  static {\n    this.ɵfac = function ViewPayoutSessionGQL_Factory(t) {\n      return new (t || ViewPayoutSessionGQL)(i0.ɵɵinject(i1.Apollo));\n    };\n  }\n  static {\n    this.ɵprov = /*@__PURE__*/i0.ɵɵdefineInjectable({\n      token: ViewPayoutSessionGQL,\n      factory: ViewPayoutSessionGQL.ɵfac,\n      providedIn: 'root'\n    });\n  }\n}\nexport const PayooutSessionTransactionsDocument = gql`\n    query PayooutSessionTransactions($id: ID!, $paging: OffsetPaging!) {\n  payoutSession(id: $id) {\n    driverTransactions(paging: $paging) {\n      nodes {\n        id\n        amount\n        currency\n        status\n        createdAt\n        driver {\n          firstName\n          lastName\n          media {\n            address\n          }\n          payoutAccounts(filter: {isDefault: {is: true}}) {\n            nodes {\n              id\n              name\n              type\n              accountNumber\n              routingNumber\n              bankName\n              branchName\n              accountHolderName\n              accountHolderCountry\n              accountHolderCity\n              accountHolderState\n              accountHolderZip\n              accountHolderAddress\n              accountHolderDateOfBirth\n              payoutMethod {\n                name\n                media {\n                  address\n                }\n              }\n            }\n          }\n        }\n      }\n    }\n  }\n}\n    `;\nexport class PayooutSessionTransactionsGQL extends Apollo.Query {\n  constructor(apollo) {\n    super(apollo);\n    this.document = PayooutSessionTransactionsDocument;\n  }\n  static {\n    this.ɵfac = function PayooutSessionTransactionsGQL_Factory(t) {\n      return new (t || PayooutSessionTransactionsGQL)(i0.ɵɵinject(i1.Apollo));\n    };\n  }\n  static {\n    this.ɵprov = /*@__PURE__*/i0.ɵɵdefineInjectable({\n      token: PayooutSessionTransactionsGQL,\n      factory: PayooutSessionTransactionsGQL.ɵfac,\n      providedIn: 'root'\n    });\n  }\n}\nexport const ExportToCsvDocument = gql`\n    mutation ExportToCSV($input: ExportSessionToCsvInput!) {\n  exportSessionToCsv(input: $input)\n}\n    `;\nexport class ExportToCsvGQL extends Apollo.Mutation {\n  constructor(apollo) {\n    super(apollo);\n    this.document = ExportToCsvDocument;\n  }\n  static {\n    this.ɵfac = function ExportToCsvGQL_Factory(t) {\n      return new (t || ExportToCsvGQL)(i0.ɵɵinject(i1.Apollo));\n    };\n  }\n  static {\n    this.ɵprov = /*@__PURE__*/i0.ɵɵdefineInjectable({\n      token: ExportToCsvGQL,\n      factory: ExportToCsvGQL.ɵfac,\n      providedIn: 'root'\n    });\n  }\n}\nexport const RunAutoPayoutDocument = gql`\n    mutation RunAutoPayout($input: RunAutoPayoutInput!) {\n  runAutoPayout(input: $input)\n}\n    `;\nexport class RunAutoPayoutGQL extends Apollo.Mutation {\n  constructor(apollo) {\n    super(apollo);\n    this.document = RunAutoPayoutDocument;\n  }\n  static {\n    this.ɵfac = function RunAutoPayoutGQL_Factory(t) {\n      return new (t || RunAutoPayoutGQL)(i0.ɵɵinject(i1.Apollo));\n    };\n  }\n  static {\n    this.ɵprov = /*@__PURE__*/i0.ɵɵdefineInjectable({\n      token: RunAutoPayoutGQL,\n      factory: RunAutoPayoutGQL.ɵfac,\n      providedIn: 'root'\n    });\n  }\n}\nexport const SaveManualPayoutItemDocument = gql`\n    mutation SaveManualPayoutItem($input: ManualPayoutInput!) {\n  manualPayout(input: $input) {\n    amount\n  }\n}\n    `;\nexport class SaveManualPayoutItemGQL extends Apollo.Mutation {\n  constructor(apollo) {\n    super(apollo);\n    this.document = SaveManualPayoutItemDocument;\n  }\n  static {\n    this.ɵfac = function SaveManualPayoutItemGQL_Factory(t) {\n      return new (t || SaveManualPayoutItemGQL)(i0.ɵɵinject(i1.Apollo));\n    };\n  }\n  static {\n    this.ɵprov = /*@__PURE__*/i0.ɵɵdefineInjectable({\n      token: SaveManualPayoutItemGQL,\n      factory: SaveManualPayoutItemGQL.ɵfac,\n      providedIn: 'root'\n    });\n  }\n}\nexport const UpdatePayoutSessionDocument = gql`\n    mutation UpdatePayoutSession($id: ID!, $update: UpdatePayoutSessionInput!) {\n  updatePayoutSession(id: $id, input: $update) {\n    id\n    status\n  }\n}\n    `;\nexport class UpdatePayoutSessionGQL extends Apollo.Mutation {\n  constructor(apollo) {\n    super(apollo);\n    this.document = UpdatePayoutSessionDocument;\n  }\n  static {\n    this.ɵfac = function UpdatePayoutSessionGQL_Factory(t) {\n      return new (t || UpdatePayoutSessionGQL)(i0.ɵɵinject(i1.Apollo));\n    };\n  }\n  static {\n    this.ɵprov = /*@__PURE__*/i0.ɵɵdefineInjectable({\n      token: UpdatePayoutSessionGQL,\n      factory: UpdatePayoutSessionGQL.ɵfac,\n      providedIn: 'root'\n    });\n  }\n}\nexport const AvailableDriversForOrderDocument = gql`\n    query AvailableDriversForOrder($center: PointInput!, $count: Int!) {\n  getDriversLocationWithData(center: $center, count: $count) {\n    id\n    location {\n      lat\n      lng\n    }\n    mobileNumber\n    firstName\n    lastName\n    lastUpdatedAt\n    rating\n    reviewCount\n    status\n  }\n}\n    `;\nexport class AvailableDriversForOrderGQL extends Apollo.Query {\n  constructor(apollo) {\n    super(apollo);\n    this.document = AvailableDriversForOrderDocument;\n  }\n  static {\n    this.ɵfac = function AvailableDriversForOrderGQL_Factory(t) {\n      return new (t || AvailableDriversForOrderGQL)(i0.ɵɵinject(i1.Apollo));\n    };\n  }\n  static {\n    this.ɵprov = /*@__PURE__*/i0.ɵɵdefineInjectable({\n      token: AvailableDriversForOrderGQL,\n      factory: AvailableDriversForOrderGQL.ɵfac,\n      providedIn: 'root'\n    });\n  }\n}\nexport const DriverSearchDocument = gql`\n    query DriverSearch($filter: String!) {\n  drivers(\n    filter: {or: [{mobileNumber: {like: $filter}}, {lastName: {like: $filter}}]}\n  ) {\n    nodes {\n      id\n      mobileNumber\n      firstName\n      lastName\n      rating\n      reviewCount\n      status\n    }\n  }\n}\n    `;\nexport class DriverSearchGQL extends Apollo.Query {\n  constructor(apollo) {\n    super(apollo);\n    this.document = DriverSearchDocument;\n  }\n  static {\n    this.ɵfac = function DriverSearchGQL_Factory(t) {\n      return new (t || DriverSearchGQL)(i0.ɵɵinject(i1.Apollo));\n    };\n  }\n  static {\n    this.ɵprov = /*@__PURE__*/i0.ɵɵdefineInjectable({\n      token: DriverSearchGQL,\n      factory: DriverSearchGQL.ɵfac,\n      providedIn: 'root'\n    });\n  }\n}\nexport const AssignDriverToOrderDocument = gql`\n    mutation AssignDriverToOrder($orderId: ID!, $driverId: ID!) {\n  assignDriverToOrder(orderId: $orderId, driverId: $driverId) {\n    id\n  }\n}\n    `;\nexport class AssignDriverToOrderGQL extends Apollo.Mutation {\n  constructor(apollo) {\n    super(apollo);\n    this.document = AssignDriverToOrderDocument;\n  }\n  static {\n    this.ɵfac = function AssignDriverToOrderGQL_Factory(t) {\n      return new (t || AssignDriverToOrderGQL)(i0.ɵɵinject(i1.Apollo));\n    };\n  }\n  static {\n    this.ɵprov = /*@__PURE__*/i0.ɵɵdefineInjectable({\n      token: AssignDriverToOrderGQL,\n      factory: AssignDriverToOrderGQL.ɵfac,\n      providedIn: 'root'\n    });\n  }\n}\nexport const ViewOrderDocument = gql`\n    query ViewOrder($id: ID!) {\n  order(id: $id) {\n    id\n    createdOn\n    expectedTimestamp\n    costBest\n    costAfterCoupon\n    status\n    currency\n    distanceBest\n    durationBest\n    startTimestamp\n    finishTimestamp\n    addresses\n    points {\n      lat\n      lng\n    }\n    service {\n      name\n    }\n    driver {\n      id\n      firstName\n      lastName\n      mobileNumber\n      registrationTimestamp\n      status\n      media {\n        address\n      }\n    }\n    rider {\n      id\n      firstName\n      lastName\n      mobileNumber\n      registrationTimestamp\n      status\n      media {\n        address\n      }\n    }\n    complaints {\n      id\n      subject\n      inscriptionTimestamp\n      content\n      requestedByDriver\n    }\n    conversations {\n      sentAt\n      sentByDriver\n      status\n      content\n    }\n    activities {\n      createdAt\n      type\n    }\n    coupon {\n      title\n      code\n      expireAt\n    }\n    riderTransactions {\n      action\n      rechargeType\n      deductType\n      amount\n      status\n      currency\n      refrenceNumber\n      paymentGateway {\n        title\n      }\n    }\n    driverTransactions {\n      action\n      rechargeType\n      deductType\n      amount\n      status\n      currency\n      refrenceNumber\n    }\n    providerTransactions {\n      action\n      rechargeType\n      deductType\n      amount\n      currency\n      refrenceNumber\n    }\n    fleetTransactions {\n      action\n      rechargeType\n      deductType\n      amount\n      currency\n      refrenceNumber\n    }\n  }\n}\n    `;\nexport class ViewOrderGQL extends Apollo.Query {\n  constructor(apollo) {\n    super(apollo);\n    this.document = ViewOrderDocument;\n  }\n  static {\n    this.ɵfac = function ViewOrderGQL_Factory(t) {\n      return new (t || ViewOrderGQL)(i0.ɵɵinject(i1.Apollo));\n    };\n  }\n  static {\n    this.ɵprov = /*@__PURE__*/i0.ɵɵdefineInjectable({\n      token: ViewOrderGQL,\n      factory: ViewOrderGQL.ɵfac,\n      providedIn: 'root'\n    });\n  }\n}\nexport const OrdersListDocument = gql`\n    query OrdersList($paging: OffsetPaging, $filter: OrderFilter, $sorting: [OrderSort!]) {\n  orders(paging: $paging, filter: $filter, sorting: $sorting) {\n    nodes {\n      id\n      status\n      createdOn\n      expectedTimestamp\n      costAfterCoupon\n      currency\n    }\n    totalCount\n  }\n}\n    `;\nexport class OrdersListGQL extends Apollo.Query {\n  constructor(apollo) {\n    super(apollo);\n    this.document = OrdersListDocument;\n  }\n  static {\n    this.ɵfac = function OrdersListGQL_Factory(t) {\n      return new (t || OrdersListGQL)(i0.ɵɵinject(i1.Apollo));\n    };\n  }\n  static {\n    this.ɵprov = /*@__PURE__*/i0.ɵɵdefineInjectable({\n      token: OrdersListGQL,\n      factory: OrdersListGQL.ɵfac,\n      providedIn: 'root'\n    });\n  }\n}\nexport const CreateRiderDocument = gql`\n    mutation CreateRider($input: RiderInput!) {\n  createOneRider(input: {rider: $input}) {\n    id\n    firstName\n    lastName\n    mobileNumber\n    gender\n  }\n}\n    `;\nexport class CreateRiderGQL extends Apollo.Mutation {\n  constructor(apollo) {\n    super(apollo);\n    this.document = CreateRiderDocument;\n  }\n  static {\n    this.ɵfac = function CreateRiderGQL_Factory(t) {\n      return new (t || CreateRiderGQL)(i0.ɵɵinject(i1.Apollo));\n    };\n  }\n  static {\n    this.ɵprov = /*@__PURE__*/i0.ɵɵdefineInjectable({\n      token: CreateRiderGQL,\n      factory: CreateRiderGQL.ɵfac,\n      providedIn: 'root'\n    });\n  }\n}\nexport const ViewRiderDocument = gql`\n    query ViewRider($id: ID!) {\n  rider(id: $id) {\n    id\n    status\n    firstName\n    lastName\n    mobileNumber\n    isResident\n    idNumber\n    media {\n      address\n    }\n    mobileNumber\n    registrationTimestamp\n    email\n    gender\n    wallets(sorting: [{field: balance, direction: DESC}], paging: {limit: 1}) {\n      nodes {\n        balance\n        currency\n      }\n    }\n  }\n}\n    `;\nexport class ViewRiderGQL extends Apollo.Query {\n  constructor(apollo) {\n    super(apollo);\n    this.document = ViewRiderDocument;\n  }\n  static {\n    this.ɵfac = function ViewRiderGQL_Factory(t) {\n      return new (t || ViewRiderGQL)(i0.ɵɵinject(i1.Apollo));\n    };\n  }\n  static {\n    this.ɵprov = /*@__PURE__*/i0.ɵɵdefineInjectable({\n      token: ViewRiderGQL,\n      factory: ViewRiderGQL.ɵfac,\n      providedIn: 'root'\n    });\n  }\n}\nexport const RiderAddressesDocument = gql`\n    query RiderAddresses($riderId: ID!, $paging: OffsetPaging) {\n  riderAddresses(filter: {riderId: {eq: $riderId}}, paging: $paging) {\n    nodes {\n      title\n      details\n      location {\n        lat\n        lng\n      }\n    }\n  }\n}\n    `;\nexport class RiderAddressesGQL extends Apollo.Query {\n  constructor(apollo) {\n    super(apollo);\n    this.document = RiderAddressesDocument;\n  }\n  static {\n    this.ɵfac = function RiderAddressesGQL_Factory(t) {\n      return new (t || RiderAddressesGQL)(i0.ɵɵinject(i1.Apollo));\n    };\n  }\n  static {\n    this.ɵprov = /*@__PURE__*/i0.ɵɵdefineInjectable({\n      token: RiderAddressesGQL,\n      factory: RiderAddressesGQL.ɵfac,\n      providedIn: 'root'\n    });\n  }\n}\nexport const RiderWalletDocument = gql`\n    query RiderWallet($riderId: ID!, $paging: OffsetPaging, $filter: RiderTransactionFilter, $sorting: [RiderTransactionSort!]) {\n  rider(id: $riderId) {\n    wallets {\n      nodes {\n        balance\n        currency\n      }\n    }\n    transactions(paging: $paging, sorting: $sorting, filter: $filter) {\n      nodes {\n        action\n        deductType\n        status\n        createdAt\n        rechargeType\n        amount\n        currency\n        refrenceNumber\n        description\n        paymentGatewayId\n        operatorId\n        requestId\n      }\n      totalCount\n    }\n  }\n  regions {\n    nodes {\n      currency\n    }\n  }\n}\n    `;\nexport class RiderWalletGQL extends Apollo.Query {\n  constructor(apollo) {\n    super(apollo);\n    this.document = RiderWalletDocument;\n  }\n  static {\n    this.ɵfac = function RiderWalletGQL_Factory(t) {\n      return new (t || RiderWalletGQL)(i0.ɵɵinject(i1.Apollo));\n    };\n  }\n  static {\n    this.ɵprov = /*@__PURE__*/i0.ɵɵdefineInjectable({\n      token: RiderWalletGQL,\n      factory: RiderWalletGQL.ɵfac,\n      providedIn: 'root'\n    });\n  }\n}\nexport const RiderOrdersDocument = gql`\n    query RiderOrders($riderId: ID!, $filter: OrderFilter, $paging: OffsetPaging, $sorting: [OrderSort!]) {\n  rider(id: $riderId) {\n    orders(paging: $paging, filter: $filter, sorting: $sorting) {\n      nodes {\n        id\n        createdOn\n        status\n        distanceBest\n        durationBest\n        costBest\n        costAfterCoupon\n        currency\n        addresses\n        points {\n          lat\n          lng\n        }\n        expectedTimestamp\n      }\n      totalCount\n    }\n  }\n}\n    `;\nexport class RiderOrdersGQL extends Apollo.Query {\n  constructor(apollo) {\n    super(apollo);\n    this.document = RiderOrdersDocument;\n  }\n  static {\n    this.ɵfac = function RiderOrdersGQL_Factory(t) {\n      return new (t || RiderOrdersGQL)(i0.ɵɵinject(i1.Apollo));\n    };\n  }\n  static {\n    this.ɵprov = /*@__PURE__*/i0.ɵɵdefineInjectable({\n      token: RiderOrdersGQL,\n      factory: RiderOrdersGQL.ɵfac,\n      providedIn: 'root'\n    });\n  }\n}\nexport const UpdateRiderDocument = gql`\n    mutation UpdateRider($id: ID!, $update: RiderInput!) {\n  updateOneRider(input: {id: $id, update: $update}) {\n    id\n  }\n}\n    `;\nexport class UpdateRiderGQL extends Apollo.Mutation {\n  constructor(apollo) {\n    super(apollo);\n    this.document = UpdateRiderDocument;\n  }\n  static {\n    this.ɵfac = function UpdateRiderGQL_Factory(t) {\n      return new (t || UpdateRiderGQL)(i0.ɵɵinject(i1.Apollo));\n    };\n  }\n  static {\n    this.ɵprov = /*@__PURE__*/i0.ɵɵdefineInjectable({\n      token: UpdateRiderGQL,\n      factory: UpdateRiderGQL.ɵfac,\n      providedIn: 'root'\n    });\n  }\n}\nexport const CreateRiderTransactionDocument = gql`\n    mutation CreateRiderTransaction($input: RiderTransactionInput!) {\n  createRiderTransaction(input: $input) {\n    id\n  }\n}\n    `;\nexport class CreateRiderTransactionGQL extends Apollo.Mutation {\n  constructor(apollo) {\n    super(apollo);\n    this.document = CreateRiderTransactionDocument;\n  }\n  static {\n    this.ɵfac = function CreateRiderTransactionGQL_Factory(t) {\n      return new (t || CreateRiderTransactionGQL)(i0.ɵɵinject(i1.Apollo));\n    };\n  }\n  static {\n    this.ɵprov = /*@__PURE__*/i0.ɵɵdefineInjectable({\n      token: CreateRiderTransactionGQL,\n      factory: CreateRiderTransactionGQL.ɵfac,\n      providedIn: 'root'\n    });\n  }\n}\nexport const DeleteRiderDocument = gql`\n    mutation DeleteRider($id: ID!) {\n  deleteOneRider(id: $id) {\n    id\n  }\n}\n    `;\nexport class DeleteRiderGQL extends Apollo.Mutation {\n  constructor(apollo) {\n    super(apollo);\n    this.document = DeleteRiderDocument;\n  }\n  static {\n    this.ɵfac = function DeleteRiderGQL_Factory(t) {\n      return new (t || DeleteRiderGQL)(i0.ɵɵinject(i1.Apollo));\n    };\n  }\n  static {\n    this.ɵprov = /*@__PURE__*/i0.ɵɵdefineInjectable({\n      token: DeleteRiderGQL,\n      factory: DeleteRiderGQL.ɵfac,\n      providedIn: 'root'\n    });\n  }\n}\nexport const RidersListDocument = gql`\n    query RidersList($filter: RiderFilter, $paging: OffsetPaging, $sorting: [RiderSort!]) {\n  riders(filter: $filter, paging: $paging, sorting: $sorting) {\n    nodes {\n      id\n      firstName\n      lastName\n      status\n      gender\n      mobileNumber\n      registrationTimestamp\n    }\n    totalCount\n  }\n}\n    `;\nexport class RidersListGQL extends Apollo.Query {\n  constructor(apollo) {\n    super(apollo);\n    this.document = RidersListDocument;\n  }\n  static {\n    this.ɵfac = function RidersListGQL_Factory(t) {\n      return new (t || RidersListGQL)(i0.ɵɵinject(i1.Apollo));\n    };\n  }\n  static {\n    this.ɵprov = /*@__PURE__*/i0.ɵɵdefineInjectable({\n      token: RidersListGQL,\n      factory: RidersListGQL.ɵfac,\n      providedIn: 'root'\n    });\n  }\n}\nexport const SosListDocument = gql`\n    query SOSList($paging: OffsetPaging) {\n  distressSignals(paging: $paging) {\n    nodes {\n      id\n      createdAt\n      status\n      location {\n        lat\n        lng\n      }\n    }\n    totalCount\n  }\n}\n    `;\nexport class SosListGQL extends Apollo.Query {\n  constructor(apollo) {\n    super(apollo);\n    this.document = SosListDocument;\n  }\n  static {\n    this.ɵfac = function SosListGQL_Factory(t) {\n      return new (t || SosListGQL)(i0.ɵɵinject(i1.Apollo));\n    };\n  }\n  static {\n    this.ɵprov = /*@__PURE__*/i0.ɵɵdefineInjectable({\n      token: SosListGQL,\n      factory: SosListGQL.ɵfac,\n      providedIn: 'root'\n    });\n  }\n}\nexport const ViewSosDocument = gql`\n    query ViewSOS($id: ID!) {\n  distressSignal(id: $id) {\n    id\n    createdAt\n    status\n    submittedByRider\n    location {\n      lat\n      lng\n    }\n    activities {\n      action\n      createdAt\n      note\n      operator {\n        id\n        firstName\n        lastName\n      }\n    }\n    order {\n      id\n      status\n      createdOn\n      startTimestamp\n      finishTimestamp\n      expectedTimestamp\n      costBest\n      costAfterCoupon\n      addresses\n      currency\n      rider {\n        id\n        mobileNumber\n        status\n        firstName\n        lastName\n        registrationTimestamp\n      }\n      driver {\n        id\n        mobileNumber\n        status\n        firstName\n        lastName\n        registrationTimestamp\n      }\n    }\n  }\n}\n    `;\nexport class ViewSosGQL extends Apollo.Query {\n  constructor(apollo) {\n    super(apollo);\n    this.document = ViewSosDocument;\n  }\n  static {\n    this.ɵfac = function ViewSosGQL_Factory(t) {\n      return new (t || ViewSosGQL)(i0.ɵɵinject(i1.Apollo));\n    };\n  }\n  static {\n    this.ɵprov = /*@__PURE__*/i0.ɵɵdefineInjectable({\n      token: ViewSosGQL,\n      factory: ViewSosGQL.ɵfac,\n      providedIn: 'root'\n    });\n  }\n}\nexport const CreateSosActivityDocument = gql`\n    mutation CreateSOSActivity($activity: CreateSOSAcitivtyInput!) {\n  createOneSOSActivity(input: {sOSActivity: $activity}) {\n    id\n  }\n}\n    `;\nexport class CreateSosActivityGQL extends Apollo.Mutation {\n  constructor(apollo) {\n    super(apollo);\n    this.document = CreateSosActivityDocument;\n  }\n  static {\n    this.ɵfac = function CreateSosActivityGQL_Factory(t) {\n      return new (t || CreateSosActivityGQL)(i0.ɵɵinject(i1.Apollo));\n    };\n  }\n  static {\n    this.ɵprov = /*@__PURE__*/i0.ɵɵdefineInjectable({\n      token: CreateSosActivityGQL,\n      factory: CreateSosActivityGQL.ɵfac,\n      providedIn: 'root'\n    });\n  }\n}\nexport const CurrentConfigurationDocument = gql`\n    query CurrentConfiguration {\n  currentConfiguration {\n    purchaseCode\n    backendMapsAPIKey\n    adminPanelAPIKey\n    firebaseProjectPrivateKey\n  }\n}\n    `;\nexport class CurrentConfigurationGQL extends Apollo.Query {\n  constructor(apollo) {\n    super(apollo);\n    this.document = CurrentConfigurationDocument;\n  }\n  static {\n    this.ɵfac = function CurrentConfigurationGQL_Factory(t) {\n      return new (t || CurrentConfigurationGQL)(i0.ɵɵinject(i1.Apollo));\n    };\n  }\n  static {\n    this.ɵprov = /*@__PURE__*/i0.ɵɵdefineInjectable({\n      token: CurrentConfigurationGQL,\n      factory: CurrentConfigurationGQL.ɵfac,\n      providedIn: 'root'\n    });\n  }\n}\nexport const UpdatePurchaseCodeDocument = gql`\n    mutation UpdatePurchaseCode($code: String!, $email: String) {\n  updatePurchaseCode(purchaseCode: $code, email: $email) {\n    status\n    message\n    clients {\n      ip\n    }\n  }\n}\n    `;\nexport class UpdatePurchaseCodeGQL extends Apollo.Mutation {\n  constructor(apollo) {\n    super(apollo);\n    this.document = UpdatePurchaseCodeDocument;\n  }\n  static {\n    this.ɵfac = function UpdatePurchaseCodeGQL_Factory(t) {\n      return new (t || UpdatePurchaseCodeGQL)(i0.ɵɵinject(i1.Apollo));\n    };\n  }\n  static {\n    this.ɵprov = /*@__PURE__*/i0.ɵɵdefineInjectable({\n      token: UpdatePurchaseCodeGQL,\n      factory: UpdatePurchaseCodeGQL.ɵfac,\n      providedIn: 'root'\n    });\n  }\n}\nexport const UpdateMapsApiKeyDocument = gql`\n    mutation UpdateMapsAPIKey($backend: String!, $adminPanel: String!) {\n  updateMapsAPIKey(backend: $backend, adminPanel: $adminPanel) {\n    status\n    message\n  }\n}\n    `;\nexport class UpdateMapsApiKeyGQL extends Apollo.Mutation {\n  constructor(apollo) {\n    super(apollo);\n    this.document = UpdateMapsApiKeyDocument;\n  }\n  static {\n    this.ɵfac = function UpdateMapsApiKeyGQL_Factory(t) {\n      return new (t || UpdateMapsApiKeyGQL)(i0.ɵɵinject(i1.Apollo));\n    };\n  }\n  static {\n    this.ɵprov = /*@__PURE__*/i0.ɵɵdefineInjectable({\n      token: UpdateMapsApiKeyGQL,\n      factory: UpdateMapsApiKeyGQL.ɵfac,\n      providedIn: 'root'\n    });\n  }\n}\nexport const UpdateFirebaseDocument = gql`\n    mutation UpdateFirebase($keyFileName: String!) {\n  updateFirebase(keyFileName: $keyFileName) {\n    status\n    message\n  }\n}\n    `;\nexport class UpdateFirebaseGQL extends Apollo.Mutation {\n  constructor(apollo) {\n    super(apollo);\n    this.document = UpdateFirebaseDocument;\n  }\n  static {\n    this.ɵfac = function UpdateFirebaseGQL_Factory(t) {\n      return new (t || UpdateFirebaseGQL)(i0.ɵɵinject(i1.Apollo));\n    };\n  }\n  static {\n    this.ɵprov = /*@__PURE__*/i0.ɵɵdefineInjectable({\n      token: UpdateFirebaseGQL,\n      factory: UpdateFirebaseGQL.ɵfac,\n      providedIn: 'root'\n    });\n  }\n}\nexport const DisableServerDocument = gql`\n    mutation DisableServer($ip: String!) {\n  disablePreviousServer(ip: $ip) {\n    status\n    message\n  }\n}\n    `;\nexport class DisableServerGQL extends Apollo.Mutation {\n  constructor(apollo) {\n    super(apollo);\n    this.document = DisableServerDocument;\n  }\n  static {\n    this.ɵfac = function DisableServerGQL_Factory(t) {\n      return new (t || DisableServerGQL)(i0.ɵɵinject(i1.Apollo));\n    };\n  }\n  static {\n    this.ɵprov = /*@__PURE__*/i0.ɵɵdefineInjectable({\n      token: DisableServerGQL,\n      factory: DisableServerGQL.ɵfac,\n      providedIn: 'root'\n    });\n  }\n}\nexport const LoginDocument = gql`\n    query Login($username: String!, $password: String!) {\n  login(userName: $username, password: $password) {\n    token\n  }\n}\n    `;\nexport class LoginGQL extends Apollo.Query {\n  constructor(apollo) {\n    super(apollo);\n    this.document = LoginDocument;\n  }\n  static {\n    this.ɵfac = function LoginGQL_Factory(t) {\n      return new (t || LoginGQL)(i0.ɵɵinject(i1.Apollo));\n    };\n  }\n  static {\n    this.ɵprov = /*@__PURE__*/i0.ɵɵdefineInjectable({\n      token: LoginGQL,\n      factory: LoginGQL.ɵfac,\n      providedIn: 'root'\n    });\n  }\n}","map":{"version":3,"names":["gql","Apollo","AddressSortFields","AnnouncementSortFields","AnnouncementUserType","CalculateFareError","CarColorSortFields","CarModelSortFields","ChartTimeframe","ComplaintActivitySortFields","ComplaintActivityType","ComplaintSortFields","ComplaintStatus","CouponSortFields","DistressSignalSortFields","DriverDeductTransactionType","DriverRechargeTransactionType","DriverSortFields","DriverStatus","DriverTransactionSortFields","DriverWalletSortFields","ExportTable","ExportType","FeedbackParameterSortFields","FeedbackSortFields","FleetSortFields","FleetTransactionSortFields","FleetWalletSortFields","Gender","GiftBatchSortFields","GiftCodeSortFields","GroupBy","MediaSortFields","MessageStatus","OperatorPermission","OperatorRoleSortFields","OperatorSortFields","OrderCancelReasonSortFields","OrderMessageSortFields","OrderSortFields","OrderStatus","PaymentGatewaySortFields","PaymentGatewayType","PayoutAccountSortFields","PayoutMethodSortFields","PayoutMethodType","PayoutSessionSortFields","PayoutSessionStatus","ProviderDeductTransactionType","ProviderRechargeTransactionType","ProviderTransactionSortFields","ProviderWalletSortFields","RegionSortFields","RequestActivitySortFields","RequestActivityType","RewardAppType","RewardBeneficiary","RewardEvent","RewardSortFields","RiderAddressSortFields","RiderAddressType","RiderDeductTransactionType","RiderRechargeTransactionType","RiderSortFields","RiderStatus","RiderTransactionSortFields","RiderWalletSortFields","SmsProviderSortFields","SmsProviderType","SosActivityAction","SosActivitySortFields","SosStatus","SavedPaymentMethodType","ServiceCategorySortFields","ServiceOptionIcon","ServiceOptionSortFields","ServiceOptionType","ServicePaymentMethod","ServiceSortFields","SortDirection","SortNulls","TransactionAction","TransactionStatus","UpdateConfigStatus","UpdatePurchaseCodeStatus","Weekday","ZonePriceSortFields","DriverOverviewInfoFragmentDoc","DriverLocationFragmentDoc","NotificationsDocument","NotificationsGQL","Query","constructor","apollo","document","i0","ɵɵinject","i1","factory","ɵfac","providedIn","SosSubscriptionDocument","SosSubscriptionGQL","Subscription","ComplaintSubscriptionDocument","ComplaintSubscriptionGQL","ViewComplaintDocument","ViewComplaintGQL","UpdateComplaintStatusDocument","UpdateComplaintStatusGQL","Mutation","ComplaintsListDocument","ComplaintsListGQL","CreateDriverDocument","CreateDriverGQL","ViewDriverDocument","ViewDriverGQL","UpdateDriverProfileDocument","UpdateDriverProfileGQL","UpdateDriverStatusDocument","UpdateDriverStatusGQL","DriverFinancialsDocument","DriverFinancialsGQL","DriverFeedbacksDocument","DriverFeedbacksGQL","DriverOrdersDocument","DriverOrdersGQL","CreateDriverTransactionDocument","CreateDriverTransactionGQL","DeleteDriverDocument","DeleteDriverGQL","DriversListDocument","DriversListGQL","ProviderWalletsListDocument","ProviderWalletsListGQL","ExportDocument","ExportGQL","DriverWalletsListDocument","DriverWalletsListGQL","FleetWalletsListDocument","FleetWalletsListGQL","RiderWalletsListDocument","RiderWalletsListGQL","DispatcherCalculateFareDocument","DispatcherCalculateFareGQL","CreateOrderDocument","CreateOrderGQL","OrderUpdatedDocument","OrderUpdatedGQL","CancelOrderDocument","CancelOrderGQL","OverviewDocument","OverviewGQL","OverviewDriverPagingDocument","OverviewDriverPagingGQL","RequestsChartDocument","RequestsChartGQL","IncomeChartDocument","IncomeChartGQL","DriverRegistrationsDocument","DriverRegistrationsGQL","RiderRegistrationsDocument","RiderRegistrationsGQL","CarsListDocument","CarsListGQL","DeleteCarModelDocument","DeleteCarModelGQL","DeleteCarColorDocument","DeleteCarColorGQL","CreateCarModelDocument","CreateCarModelGQL","CreateCarColorDocument","CreateCarColorGQL","UpdateCarModelDocument","UpdateCarModelGQL","UpdateCarColorDocument","UpdateCarColorGQL","CreateFleetDocument","CreateFleetGQL","ViewFleetDocument","ViewFleetGQL","FleetFinancialsDocument","FleetFinancialsGQL","FleetZonePricesDocument","FleetZonePricesGQL","FleetDriversDocument","FleetDriversGQL","UpdateFleetDocument","UpdateFleetGQL","CreateFleetTransactionDocument","CreateFleetTransactionGQL","FleetsListDocument","FleetsListGQL","OrderCancelReasonListDocument","OrderCancelReasonListGQL","OrderCancelReasonViewDocument","OrderCancelReasonViewGQL","UpdateOrderCancelReasonDocument","UpdateOrderCancelReasonGQL","CreateOrderCancelReasonDocument","CreateOrderCancelReasonGQL","ViewPaymentGatewayDocument","ViewPaymentGatewayGQL","CreatePaymentGatewayDocument","CreatePaymentGatewayGQL","UpdatePaymentGatewayDocument","UpdatePaymentGatewayGQL","PaymentGatewaysDocument","PaymentGatewaysGQL","RegionListDocument","RegionListGQL","RegionViewDocument","RegionViewGQL","UpdateRegionDocument","UpdateRegionGQL","CreateRegionDocument","CreateRegionGQL","ReviewParameterViewDocument","ReviewParameterViewGQL","UpdateReviewParameterDocument","UpdateReviewParameterGQL","CreateReviewParameterDocument","CreateReviewParameterGQL","ReviewParametersListDocument","ReviewParametersListGQL","RolesDocument","RolesGQL","RoleDocument","RoleGQL","CreateRoleDocument","CreateRoleGQL","UpdateRoleDocument","UpdateRoleGQL","ServiceOptionViewDocument","ServiceOptionViewGQL","UpdateServiceOptionDocument","UpdateServiceOptionGQL","CreateServiceOptionDocument","CreateServiceOptionGQL","ServiceOptionsListDocument","ServiceOptionsListGQL","ViewServiceCategoryDocument","ViewServiceCategoryGQL","CreateServiceCategoryDocument","CreateServiceCategoryGQL","UpdateServiceCategoryDocument","UpdateServiceCategoryGQL","DeleteServiceCategoryDocument","DeleteServiceCategoryGQL","ServicesListDocument","ServicesListGQL","ViewServiceDocument","ViewServiceGQL","NewServiceDocument","NewServiceGQL","CreateServiceDocument","CreateServiceGQL","DeleteServiceDocument","DeleteServiceGQL","UpdateServiceDocument","UpdateServiceGQL","SetRegionsOnServiceDocument","SetRegionsOnServiceGQL","SetOptionsOnServiceDocument","SetOptionsOnServiceGQL","UpdatePasswordDocument","UpdatePasswordGQL","GetConfigurationDocument","GetConfigurationGQL","UpdateConfigDocument","UpdateConfigGQL","SmsProvidersDocument","SmsProvidersGQL","ViewSmsProviderDocument","ViewSmsProviderGQL","CreateSmsProviderDocument","CreateSmsProviderGQL","UpdateSmsProviderDocument","UpdateSmsProviderGQL","MarkSmsProviderAsDefaultDocument","MarkSmsProviderAsDefaultGQL","CreateOperatorDocument","CreateOperatorGQL","ViewOperatorDocument","ViewOperatorGQL","NewOperatorDocument","NewOperatorGQL","UpdateOperatorDocument","UpdateOperatorGQL","UsersListDocument","UsersListGQL","ZonePriceViewDocument","ZonePriceViewGQL","ZonePriceNewDocument","ZonePriceNewGQL","UpdateZonePriceDocument","UpdateZonePriceGQL","CreateZonePriceDocument","CreateZonePriceGQL","DeleteZonePriceDocument","DeleteZonePriceGQL","SetZonePriceRelationsDocument","SetZonePriceRelationsGQL","ZonePricesListDocument","ZonePricesListGQL","ViewAnnouncementDocument","ViewAnnouncementGQL","CreateAnnouncementDocument","CreateAnnouncementGQL","UpdateAnnouncementDocument","UpdateAnnouncementGQL","DeleteAnnouncementDocument","DeleteAnnouncementGQL","AnnouncementsListDocument","AnnouncementsListGQL","ViewCouponDocument","ViewCouponGQL","CreateCouponDocument","CreateCouponGQL","UpdateCouponDocument","UpdateCouponGQL","DeleteCouponDocument","DeleteCouponGQL","CouponListDocument","CouponListGQL","GiftBatchListDocument","GiftBatchListGQL","CreateGiftBachDocument","CreateGiftBachGQL","ViewGiftBatchDocument","ViewGiftBatchGQL","GiftCodeListDocument","GiftCodeListGQL","ExportGiftBatchToCsvDocument","ExportGiftBatchToCsvGQL","RewardListDocument","RewardListGQL","ViewRewardDocument","ViewRewardGQL","CreateRewardDocument","CreateRewardGQL","UpdateRewardDocument","UpdateRewardGQL","CreatePayoutSessionFieldsDocument","CreatePayoutSessionFieldsGQL","CreatePayoutSessionDocument","CreatePayoutSessionGQL","PayoutMethodsDocument","PayoutMethodsGQL","ViewPayoutMethodDocument","ViewPayoutMethodGQL","CreatePayoutMethodDocument","CreatePayoutMethodGQL","UpdatePayoutMethodDocument","UpdatePayoutMethodGQL","PayoutsDocument","PayoutsGQL","ViewPayoutSessionDocument","ViewPayoutSessionGQL","PayooutSessionTransactionsDocument","PayooutSessionTransactionsGQL","ExportToCsvDocument","ExportToCsvGQL","RunAutoPayoutDocument","RunAutoPayoutGQL","SaveManualPayoutItemDocument","SaveManualPayoutItemGQL","UpdatePayoutSessionDocument","UpdatePayoutSessionGQL","AvailableDriversForOrderDocument","AvailableDriversForOrderGQL","DriverSearchDocument","DriverSearchGQL","AssignDriverToOrderDocument","AssignDriverToOrderGQL","ViewOrderDocument","ViewOrderGQL","OrdersListDocument","OrdersListGQL","CreateRiderDocument","CreateRiderGQL","ViewRiderDocument","ViewRiderGQL","RiderAddressesDocument","RiderAddressesGQL","RiderWalletDocument","RiderWalletGQL","RiderOrdersDocument","RiderOrdersGQL","UpdateRiderDocument","UpdateRiderGQL","CreateRiderTransactionDocument","CreateRiderTransactionGQL","DeleteRiderDocument","DeleteRiderGQL","RidersListDocument","RidersListGQL","SosListDocument","SosListGQL","ViewSosDocument","ViewSosGQL","CreateSosActivityDocument","CreateSosActivityGQL","CurrentConfigurationDocument","CurrentConfigurationGQL","UpdatePurchaseCodeDocument","UpdatePurchaseCodeGQL","UpdateMapsApiKeyDocument","UpdateMapsApiKeyGQL","UpdateFirebaseDocument","UpdateFirebaseGQL","DisableServerDocument","DisableServerGQL","LoginDocument","LoginGQL"],"sources":["/Users/obiechina/Documents/ridy-flutter-full-taxi-solution 2/apps/admin-panel/generated/graphql.ts"],"sourcesContent":["import { gql } from 'apollo-angular';\nimport { Injectable } from '@angular/core';\nimport * as Apollo from 'apollo-angular';\nexport type Maybe<T> = T | null;\nexport type InputMaybe<T> = Maybe<T>;\nexport type Exact<T extends { [key: string]: unknown }> = { [K in keyof T]: T[K] };\nexport type MakeOptional<T, K extends keyof T> = Omit<T, K> & { [SubKey in K]?: Maybe<T[SubKey]> };\nexport type MakeMaybe<T, K extends keyof T> = Omit<T, K> & { [SubKey in K]: Maybe<T[SubKey]> };\nexport type MakeEmpty<T extends { [key: string]: unknown }, K extends keyof T> = { [_ in K]?: never };\nexport type Incremental<T> = T | { [P in keyof T]?: P extends ' $fragmentName' | '__typename' ? T[P] : never };\n/** All built-in and custom scalars, mapped to their actual values */\nexport type Scalars = {\n  ID: { input: string; output: string; }\n  String: { input: string; output: string; }\n  Boolean: { input: boolean; output: boolean; }\n  Int: { input: number; output: number; }\n  Float: { input: number; output: number; }\n  /** Cursor for paging through collections */\n  ConnectionCursor: { input: any; output: any; }\n  /** A date-time string at UTC, such as 2019-12-03T09:54:33Z, compliant with the date-time format. */\n  DateTime: { input: any; output: any; }\n};\n\nexport type AddEnabledServicesToDriverInput = {\n  /** The id of the record. */\n  id: Scalars['ID']['input'];\n  /** The ids of the relations. */\n  relationIds: Array<Scalars['ID']['input']>;\n};\n\nexport type AddFleetsToZonePriceInput = {\n  /** The id of the record. */\n  id: Scalars['ID']['input'];\n  /** The ids of the relations. */\n  relationIds: Array<Scalars['ID']['input']>;\n};\n\nexport type AddOptionsToServiceInput = {\n  /** The id of the record. */\n  id: Scalars['ID']['input'];\n  /** The ids of the relations. */\n  relationIds: Array<Scalars['ID']['input']>;\n};\n\nexport type AddRegionsToServiceInput = {\n  /** The id of the record. */\n  id: Scalars['ID']['input'];\n  /** The ids of the relations. */\n  relationIds: Array<Scalars['ID']['input']>;\n};\n\nexport type AddServicesToZonePriceInput = {\n  /** The id of the record. */\n  id: Scalars['ID']['input'];\n  /** The ids of the relations. */\n  relationIds: Array<Scalars['ID']['input']>;\n};\n\nexport type Address = {\n  __typename?: 'Address';\n  details?: Maybe<Scalars['String']['output']>;\n  id: Scalars['ID']['output'];\n  location: Point;\n  title: Scalars['String']['output'];\n};\n\nexport type AddressConnection = {\n  __typename?: 'AddressConnection';\n  /** Array of edges. */\n  edges: Array<AddressEdge>;\n  /** Paging information */\n  pageInfo: PageInfo;\n};\n\nexport type AddressEdge = {\n  __typename?: 'AddressEdge';\n  /** Cursor for this node. */\n  cursor: Scalars['ConnectionCursor']['output'];\n  /** The node containing the Address */\n  node: Address;\n};\n\nexport type AddressFilter = {\n  and?: InputMaybe<Array<AddressFilter>>;\n  id?: InputMaybe<IdFilterComparison>;\n  or?: InputMaybe<Array<AddressFilter>>;\n};\n\nexport type AddressSort = {\n  direction: SortDirection;\n  field: AddressSortFields;\n  nulls?: InputMaybe<SortNulls>;\n};\n\nexport enum AddressSortFields {\n  Id = 'id'\n}\n\nexport type Announcement = {\n  __typename?: 'Announcement';\n  description: Scalars['String']['output'];\n  expireAt: Scalars['DateTime']['output'];\n  id: Scalars['ID']['output'];\n  startAt: Scalars['DateTime']['output'];\n  title: Scalars['String']['output'];\n  url?: Maybe<Scalars['String']['output']>;\n  userType: Array<AnnouncementUserType>;\n};\n\nexport type AnnouncementConnection = {\n  __typename?: 'AnnouncementConnection';\n  /** Array of nodes. */\n  nodes: Array<Announcement>;\n  /** Paging information */\n  pageInfo: OffsetPageInfo;\n  /** Fetch total count of records */\n  totalCount: Scalars['Int']['output'];\n};\n\nexport type AnnouncementDeleteResponse = {\n  __typename?: 'AnnouncementDeleteResponse';\n  description?: Maybe<Scalars['String']['output']>;\n  expireAt?: Maybe<Scalars['DateTime']['output']>;\n  id?: Maybe<Scalars['ID']['output']>;\n  startAt?: Maybe<Scalars['DateTime']['output']>;\n  title?: Maybe<Scalars['String']['output']>;\n  url?: Maybe<Scalars['String']['output']>;\n  userType?: Maybe<Array<AnnouncementUserType>>;\n};\n\nexport type AnnouncementFilter = {\n  and?: InputMaybe<Array<AnnouncementFilter>>;\n  id?: InputMaybe<IdFilterComparison>;\n  or?: InputMaybe<Array<AnnouncementFilter>>;\n};\n\nexport type AnnouncementInput = {\n  description: Scalars['String']['input'];\n  expireAt: Scalars['DateTime']['input'];\n  startAt: Scalars['DateTime']['input'];\n  title: Scalars['String']['input'];\n  url?: InputMaybe<Scalars['String']['input']>;\n  userType: Array<AnnouncementUserType>;\n};\n\nexport type AnnouncementSort = {\n  direction: SortDirection;\n  field: AnnouncementSortFields;\n  nulls?: InputMaybe<SortNulls>;\n};\n\nexport enum AnnouncementSortFields {\n  Id = 'id'\n}\n\nexport enum AnnouncementUserType {\n  Driver = 'Driver',\n  Operator = 'Operator',\n  Rider = 'Rider'\n}\n\nexport type BooleanFieldComparison = {\n  is?: InputMaybe<Scalars['Boolean']['input']>;\n  isNot?: InputMaybe<Scalars['Boolean']['input']>;\n};\n\nexport type CalculateFareDto = {\n  __typename?: 'CalculateFareDTO';\n  currency: Scalars['String']['output'];\n  distance: Scalars['Float']['output'];\n  duration: Scalars['Float']['output'];\n  error?: Maybe<CalculateFareError>;\n  services: Array<ServiceCategoryWithCost>;\n};\n\nexport enum CalculateFareError {\n  NoServiceInRegion = 'NoServiceInRegion',\n  RegionUnsupported = 'RegionUnsupported'\n}\n\nexport type CalculateFareInput = {\n  points: Array<PointInput>;\n  riderId: Scalars['ID']['input'];\n};\n\nexport type CarColor = {\n  __typename?: 'CarColor';\n  id: Scalars['ID']['output'];\n  name: Scalars['String']['output'];\n};\n\nexport type CarColorDeleteResponse = {\n  __typename?: 'CarColorDeleteResponse';\n  id?: Maybe<Scalars['ID']['output']>;\n  name?: Maybe<Scalars['String']['output']>;\n};\n\nexport type CarColorFilter = {\n  and?: InputMaybe<Array<CarColorFilter>>;\n  id?: InputMaybe<IdFilterComparison>;\n  or?: InputMaybe<Array<CarColorFilter>>;\n};\n\nexport type CarColorInput = {\n  name: Scalars['String']['input'];\n};\n\nexport type CarColorSort = {\n  direction: SortDirection;\n  field: CarColorSortFields;\n  nulls?: InputMaybe<SortNulls>;\n};\n\nexport enum CarColorSortFields {\n  Id = 'id'\n}\n\nexport type CarModel = {\n  __typename?: 'CarModel';\n  id: Scalars['ID']['output'];\n  name: Scalars['String']['output'];\n};\n\nexport type CarModelConnection = {\n  __typename?: 'CarModelConnection';\n  /** Array of nodes. */\n  nodes: Array<CarModel>;\n  /** Paging information */\n  pageInfo: OffsetPageInfo;\n  /** Fetch total count of records */\n  totalCount: Scalars['Int']['output'];\n};\n\nexport type CarModelDeleteResponse = {\n  __typename?: 'CarModelDeleteResponse';\n  id?: Maybe<Scalars['ID']['output']>;\n  name?: Maybe<Scalars['String']['output']>;\n};\n\nexport type CarModelFilter = {\n  and?: InputMaybe<Array<CarModelFilter>>;\n  id?: InputMaybe<IdFilterComparison>;\n  or?: InputMaybe<Array<CarModelFilter>>;\n};\n\nexport type CarModelInput = {\n  name: Scalars['String']['input'];\n};\n\nexport type CarModelSort = {\n  direction: SortDirection;\n  field: CarModelSortFields;\n  nulls?: InputMaybe<SortNulls>;\n};\n\nexport enum CarModelSortFields {\n  Id = 'id'\n}\n\nexport enum ChartTimeframe {\n  Daily = 'Daily',\n  Monthly = 'Monthly',\n  Weekly = 'Weekly',\n  Yearly = 'Yearly'\n}\n\nexport type Complaint = {\n  __typename?: 'Complaint';\n  activities: Array<ComplaintActivity>;\n  activitiesAggregate: Array<ComplaintActivitiesAggregateResponse>;\n  content?: Maybe<Scalars['String']['output']>;\n  id: Scalars['ID']['output'];\n  inscriptionTimestamp: Scalars['DateTime']['output'];\n  order: Order;\n  requestId: Scalars['ID']['output'];\n  requestedByDriver: Scalars['Boolean']['output'];\n  status: ComplaintStatus;\n  subject: Scalars['String']['output'];\n};\n\n\nexport type ComplaintActivitiesArgs = {\n  filter?: ComplaintActivityFilter;\n  sorting?: Array<ComplaintActivitySort>;\n};\n\n\nexport type ComplaintActivitiesAggregateArgs = {\n  filter?: InputMaybe<ComplaintActivityAggregateFilter>;\n};\n\nexport type ComplaintActivitiesAggregateGroupBy = {\n  __typename?: 'ComplaintActivitiesAggregateGroupBy';\n  complaintId?: Maybe<Scalars['ID']['output']>;\n  id?: Maybe<Scalars['ID']['output']>;\n};\n\nexport type ComplaintActivitiesAggregateResponse = {\n  __typename?: 'ComplaintActivitiesAggregateResponse';\n  avg?: Maybe<ComplaintActivitiesAvgAggregate>;\n  count?: Maybe<ComplaintActivitiesCountAggregate>;\n  groupBy?: Maybe<ComplaintActivitiesAggregateGroupBy>;\n  max?: Maybe<ComplaintActivitiesMaxAggregate>;\n  min?: Maybe<ComplaintActivitiesMinAggregate>;\n  sum?: Maybe<ComplaintActivitiesSumAggregate>;\n};\n\nexport type ComplaintActivitiesAvgAggregate = {\n  __typename?: 'ComplaintActivitiesAvgAggregate';\n  complaintId?: Maybe<Scalars['Float']['output']>;\n  id?: Maybe<Scalars['Float']['output']>;\n};\n\nexport type ComplaintActivitiesCountAggregate = {\n  __typename?: 'ComplaintActivitiesCountAggregate';\n  complaintId?: Maybe<Scalars['Int']['output']>;\n  id?: Maybe<Scalars['Int']['output']>;\n};\n\nexport type ComplaintActivitiesMaxAggregate = {\n  __typename?: 'ComplaintActivitiesMaxAggregate';\n  complaintId?: Maybe<Scalars['ID']['output']>;\n  id?: Maybe<Scalars['ID']['output']>;\n};\n\nexport type ComplaintActivitiesMinAggregate = {\n  __typename?: 'ComplaintActivitiesMinAggregate';\n  complaintId?: Maybe<Scalars['ID']['output']>;\n  id?: Maybe<Scalars['ID']['output']>;\n};\n\nexport type ComplaintActivitiesSumAggregate = {\n  __typename?: 'ComplaintActivitiesSumAggregate';\n  complaintId?: Maybe<Scalars['Float']['output']>;\n  id?: Maybe<Scalars['Float']['output']>;\n};\n\nexport type ComplaintActivity = {\n  __typename?: 'ComplaintActivity';\n  actor: Operator;\n  assignedTo?: Maybe<Operator>;\n  comment?: Maybe<Scalars['String']['output']>;\n  complaintId: Scalars['ID']['output'];\n  id: Scalars['ID']['output'];\n  type: ComplaintActivityType;\n};\n\nexport type ComplaintActivityAggregateFilter = {\n  and?: InputMaybe<Array<ComplaintActivityAggregateFilter>>;\n  complaintId?: InputMaybe<IdFilterComparison>;\n  id?: InputMaybe<IdFilterComparison>;\n  or?: InputMaybe<Array<ComplaintActivityAggregateFilter>>;\n};\n\nexport type ComplaintActivityFilter = {\n  and?: InputMaybe<Array<ComplaintActivityFilter>>;\n  complaintId?: InputMaybe<IdFilterComparison>;\n  id?: InputMaybe<IdFilterComparison>;\n  or?: InputMaybe<Array<ComplaintActivityFilter>>;\n};\n\nexport type ComplaintActivitySort = {\n  direction: SortDirection;\n  field: ComplaintActivitySortFields;\n  nulls?: InputMaybe<SortNulls>;\n};\n\nexport enum ComplaintActivitySortFields {\n  ComplaintId = 'complaintId',\n  Id = 'id'\n}\n\nexport enum ComplaintActivityType {\n  AssignToOperator = 'AssignToOperator',\n  Resolved = 'Resolved',\n  Update = 'Update'\n}\n\nexport type ComplaintAggregateFilter = {\n  and?: InputMaybe<Array<ComplaintAggregateFilter>>;\n  id?: InputMaybe<IdFilterComparison>;\n  or?: InputMaybe<Array<ComplaintAggregateFilter>>;\n  requestId?: InputMaybe<IdFilterComparison>;\n  status?: InputMaybe<ComplaintStatusFilterComparison>;\n};\n\nexport type ComplaintAggregateGroupBy = {\n  __typename?: 'ComplaintAggregateGroupBy';\n  id?: Maybe<Scalars['ID']['output']>;\n  requestId?: Maybe<Scalars['ID']['output']>;\n  status?: Maybe<ComplaintStatus>;\n};\n\nexport type ComplaintAggregateResponse = {\n  __typename?: 'ComplaintAggregateResponse';\n  avg?: Maybe<ComplaintAvgAggregate>;\n  count?: Maybe<ComplaintCountAggregate>;\n  groupBy?: Maybe<ComplaintAggregateGroupBy>;\n  max?: Maybe<ComplaintMaxAggregate>;\n  min?: Maybe<ComplaintMinAggregate>;\n  sum?: Maybe<ComplaintSumAggregate>;\n};\n\nexport type ComplaintAvgAggregate = {\n  __typename?: 'ComplaintAvgAggregate';\n  id?: Maybe<Scalars['Float']['output']>;\n  requestId?: Maybe<Scalars['Float']['output']>;\n};\n\nexport type ComplaintConnection = {\n  __typename?: 'ComplaintConnection';\n  /** Array of nodes. */\n  nodes: Array<Complaint>;\n  /** Paging information */\n  pageInfo: OffsetPageInfo;\n  /** Fetch total count of records */\n  totalCount: Scalars['Int']['output'];\n};\n\nexport type ComplaintCountAggregate = {\n  __typename?: 'ComplaintCountAggregate';\n  id?: Maybe<Scalars['Int']['output']>;\n  requestId?: Maybe<Scalars['Int']['output']>;\n  status?: Maybe<Scalars['Int']['output']>;\n};\n\nexport type ComplaintFilter = {\n  and?: InputMaybe<Array<ComplaintFilter>>;\n  id?: InputMaybe<IdFilterComparison>;\n  or?: InputMaybe<Array<ComplaintFilter>>;\n  requestId?: InputMaybe<IdFilterComparison>;\n  status?: InputMaybe<ComplaintStatusFilterComparison>;\n};\n\nexport type ComplaintMaxAggregate = {\n  __typename?: 'ComplaintMaxAggregate';\n  id?: Maybe<Scalars['ID']['output']>;\n  requestId?: Maybe<Scalars['ID']['output']>;\n  status?: Maybe<ComplaintStatus>;\n};\n\nexport type ComplaintMinAggregate = {\n  __typename?: 'ComplaintMinAggregate';\n  id?: Maybe<Scalars['ID']['output']>;\n  requestId?: Maybe<Scalars['ID']['output']>;\n  status?: Maybe<ComplaintStatus>;\n};\n\nexport type ComplaintSort = {\n  direction: SortDirection;\n  field: ComplaintSortFields;\n  nulls?: InputMaybe<SortNulls>;\n};\n\nexport enum ComplaintSortFields {\n  Id = 'id',\n  RequestId = 'requestId',\n  Status = 'status'\n}\n\nexport enum ComplaintStatus {\n  Resolved = 'Resolved',\n  Submitted = 'Submitted',\n  UnderInvestigation = 'UnderInvestigation'\n}\n\nexport type ComplaintStatusFilterComparison = {\n  eq?: InputMaybe<ComplaintStatus>;\n  gt?: InputMaybe<ComplaintStatus>;\n  gte?: InputMaybe<ComplaintStatus>;\n  iLike?: InputMaybe<ComplaintStatus>;\n  in?: InputMaybe<Array<ComplaintStatus>>;\n  is?: InputMaybe<Scalars['Boolean']['input']>;\n  isNot?: InputMaybe<Scalars['Boolean']['input']>;\n  like?: InputMaybe<ComplaintStatus>;\n  lt?: InputMaybe<ComplaintStatus>;\n  lte?: InputMaybe<ComplaintStatus>;\n  neq?: InputMaybe<ComplaintStatus>;\n  notILike?: InputMaybe<ComplaintStatus>;\n  notIn?: InputMaybe<Array<ComplaintStatus>>;\n  notLike?: InputMaybe<ComplaintStatus>;\n};\n\nexport type ComplaintSumAggregate = {\n  __typename?: 'ComplaintSumAggregate';\n  id?: Maybe<Scalars['Float']['output']>;\n  requestId?: Maybe<Scalars['Float']['output']>;\n};\n\nexport type Coupon = {\n  __typename?: 'Coupon';\n  allowedServices: Array<Service>;\n  code: Scalars['String']['output'];\n  creditGift: Scalars['Float']['output'];\n  description: Scalars['String']['output'];\n  discountFlat: Scalars['Int']['output'];\n  discountPercent: Scalars['Int']['output'];\n  expireAt: Scalars['DateTime']['output'];\n  id: Scalars['ID']['output'];\n  isEnabled: Scalars['Boolean']['output'];\n  isFirstTravelOnly: Scalars['Boolean']['output'];\n  manyTimesUserCanUse: Scalars['Int']['output'];\n  manyUsersCanUse: Scalars['Int']['output'];\n  maximumCost: Scalars['Float']['output'];\n  minimumCost: Scalars['Float']['output'];\n  startAt: Scalars['DateTime']['output'];\n  title: Scalars['String']['output'];\n};\n\n\nexport type CouponAllowedServicesArgs = {\n  filter?: ServiceFilter;\n  sorting?: Array<ServiceSort>;\n};\n\nexport type CouponConnection = {\n  __typename?: 'CouponConnection';\n  /** Array of nodes. */\n  nodes: Array<Coupon>;\n  /** Paging information */\n  pageInfo: OffsetPageInfo;\n  /** Fetch total count of records */\n  totalCount: Scalars['Int']['output'];\n};\n\nexport type CouponDeleteResponse = {\n  __typename?: 'CouponDeleteResponse';\n  code?: Maybe<Scalars['String']['output']>;\n  creditGift?: Maybe<Scalars['Float']['output']>;\n  description?: Maybe<Scalars['String']['output']>;\n  discountFlat?: Maybe<Scalars['Int']['output']>;\n  discountPercent?: Maybe<Scalars['Int']['output']>;\n  expireAt?: Maybe<Scalars['DateTime']['output']>;\n  id?: Maybe<Scalars['ID']['output']>;\n  isEnabled?: Maybe<Scalars['Boolean']['output']>;\n  isFirstTravelOnly?: Maybe<Scalars['Boolean']['output']>;\n  manyTimesUserCanUse?: Maybe<Scalars['Int']['output']>;\n  manyUsersCanUse?: Maybe<Scalars['Int']['output']>;\n  maximumCost?: Maybe<Scalars['Float']['output']>;\n  minimumCost?: Maybe<Scalars['Float']['output']>;\n  startAt?: Maybe<Scalars['DateTime']['output']>;\n  title?: Maybe<Scalars['String']['output']>;\n};\n\nexport type CouponFilter = {\n  and?: InputMaybe<Array<CouponFilter>>;\n  id?: InputMaybe<IdFilterComparison>;\n  or?: InputMaybe<Array<CouponFilter>>;\n};\n\nexport type CouponInput = {\n  code: Scalars['String']['input'];\n  creditGift: Scalars['Float']['input'];\n  description: Scalars['String']['input'];\n  discountFlat: Scalars['Int']['input'];\n  discountPercent: Scalars['Int']['input'];\n  expireAt: Scalars['DateTime']['input'];\n  isEnabled: Scalars['Boolean']['input'];\n  isFirstTravelOnly: Scalars['Boolean']['input'];\n  manyTimesUserCanUse: Scalars['Int']['input'];\n  manyUsersCanUse: Scalars['Int']['input'];\n  maximumCost: Scalars['Float']['input'];\n  minimumCost: Scalars['Float']['input'];\n  startAt: Scalars['DateTime']['input'];\n  title: Scalars['String']['input'];\n};\n\nexport type CouponSort = {\n  direction: SortDirection;\n  field: CouponSortFields;\n  nulls?: InputMaybe<SortNulls>;\n};\n\nexport enum CouponSortFields {\n  Id = 'id'\n}\n\nexport type CreateComplaintActivity = {\n  comment?: InputMaybe<Scalars['String']['input']>;\n  complaintId: Scalars['ID']['input'];\n  id: Scalars['ID']['input'];\n  type: ComplaintActivityType;\n};\n\nexport type CreateGiftBatchInput = {\n  amount: Scalars['Float']['input'];\n  availableFrom?: InputMaybe<Scalars['DateTime']['input']>;\n  currency: Scalars['String']['input'];\n  expireAt?: InputMaybe<Scalars['DateTime']['input']>;\n  name: Scalars['String']['input'];\n  quantity: Scalars['Float']['input'];\n};\n\nexport type CreateManyComplaintActivitiesInput = {\n  /** Array of records to create */\n  complaintActivities: Array<CreateComplaintActivity>;\n};\n\nexport type CreateManySmsProvidersInput = {\n  /** Array of records to create */\n  sMSProviders: Array<SmsProviderInput>;\n};\n\nexport type CreateOneAnnouncementInput = {\n  /** The record to create */\n  announcement: AnnouncementInput;\n};\n\nexport type CreateOneCarColorInput = {\n  /** The record to create */\n  carColor: CarColorInput;\n};\n\nexport type CreateOneCarModelInput = {\n  /** The record to create */\n  carModel: CarModelInput;\n};\n\nexport type CreateOneComplaintActivityInput = {\n  /** The record to create */\n  complaintActivity: CreateComplaintActivity;\n};\n\nexport type CreateOneCouponInput = {\n  /** The record to create */\n  coupon: CouponInput;\n};\n\nexport type CreateOneDriverInput = {\n  /** The record to create */\n  driver: UpdateDriverInput;\n};\n\nexport type CreateOneDriverTransactionInput = {\n  /** The record to create */\n  driverTransaction: DriverTransactionInput;\n};\n\nexport type CreateOneFeedbackParameterInput = {\n  /** The record to create */\n  feedbackParameter: FeedbackParameterInput;\n};\n\nexport type CreateOneFleetInput = {\n  /** The record to create */\n  fleet: FleetInput;\n};\n\nexport type CreateOneOperatorInput = {\n  /** The record to create */\n  operator: CreateOperatorInput;\n};\n\nexport type CreateOneOperatorRoleInput = {\n  /** The record to create */\n  operatorRole: OperatorRoleInput;\n};\n\nexport type CreateOneOrderCancelReasonInput = {\n  /** The record to create */\n  orderCancelReason: OrderCancelReasonInput;\n};\n\nexport type CreateOnePaymentGatewayInput = {\n  /** The record to create */\n  paymentGateway: PaymentGatewayInput;\n};\n\nexport type CreateOnePayoutMethodInput = {\n  /** The record to create */\n  payoutMethod: CreatePayoutMethodInput;\n};\n\nexport type CreateOneProviderTransactionInput = {\n  /** The record to create */\n  providerTransaction: ProviderTransactionInput;\n};\n\nexport type CreateOneRegionInput = {\n  /** The record to create */\n  region: RegionInput;\n};\n\nexport type CreateOneRewardInput = {\n  /** The record to create */\n  reward: CreateReward;\n};\n\nexport type CreateOneRiderAddressInput = {\n  /** The record to create */\n  riderAddress: CreateRiderAddress;\n};\n\nexport type CreateOneRiderInput = {\n  /** The record to create */\n  rider: RiderInput;\n};\n\nexport type CreateOneRiderTransactionInput = {\n  /** The record to create */\n  riderTransaction: CreateRiderTransaction;\n};\n\nexport type CreateOneSmsProviderInput = {\n  /** The record to create */\n  sMSProvider: SmsProviderInput;\n};\n\nexport type CreateOneSosActivityInput = {\n  /** The record to create */\n  sOSActivity: CreateSosAcitivtyInput;\n};\n\nexport type CreateOneServiceCategoryInput = {\n  /** The record to create */\n  serviceCategory: ServiceCategoryInput;\n};\n\nexport type CreateOneServiceInput = {\n  /** The record to create */\n  service: ServiceInput;\n};\n\nexport type CreateOneServiceOptionInput = {\n  /** The record to create */\n  serviceOption: ServiceOptionInput;\n};\n\nexport type CreateOneZonePriceInput = {\n  /** The record to create */\n  zonePrice: ZonePriceInput;\n};\n\nexport type CreateOperatorInput = {\n  email?: InputMaybe<Scalars['String']['input']>;\n  firstName?: InputMaybe<Scalars['String']['input']>;\n  lastName?: InputMaybe<Scalars['String']['input']>;\n  mobileNumber: Scalars['String']['input'];\n  password: Scalars['String']['input'];\n  roleId: Scalars['ID']['input'];\n  userName: Scalars['String']['input'];\n};\n\nexport type CreateOrderInput = {\n  addresses: Array<Scalars['String']['input']>;\n  intervalMinutes: Scalars['Int']['input'];\n  points: Array<PointInput>;\n  riderId: Scalars['ID']['input'];\n  serviceId: Scalars['ID']['input'];\n};\n\nexport type CreatePayoutMethodInput = {\n  currency: Scalars['String']['input'];\n  deletedAt?: InputMaybe<Scalars['DateTime']['input']>;\n  description: Scalars['String']['input'];\n  enabled?: InputMaybe<Scalars['Boolean']['input']>;\n  mediaId?: InputMaybe<Scalars['Float']['input']>;\n  merchantId?: InputMaybe<Scalars['String']['input']>;\n  name: Scalars['String']['input'];\n  privateKey?: InputMaybe<Scalars['String']['input']>;\n  publicKey?: InputMaybe<Scalars['String']['input']>;\n  saltKey?: InputMaybe<Scalars['String']['input']>;\n  type: PayoutMethodType;\n};\n\nexport type CreatePayoutSessionInput = {\n  currency: Scalars['String']['input'];\n  description?: InputMaybe<Scalars['String']['input']>;\n  minimumAmount: Scalars['Float']['input'];\n  payoutMethodIds: Array<Scalars['ID']['input']>;\n};\n\nexport type CreateReward = {\n  appType: RewardAppType;\n  beneficiary: RewardBeneficiary;\n  conditionTripCountsLessThan?: InputMaybe<Scalars['Float']['input']>;\n  conditionUserNumberFirstDigits?: InputMaybe<Array<Scalars['String']['input']>>;\n  creditCurrency?: InputMaybe<Scalars['String']['input']>;\n  creditGift: Scalars['Float']['input'];\n  endDate?: InputMaybe<Scalars['DateTime']['input']>;\n  event: RewardEvent;\n  id: Scalars['ID']['input'];\n  startDate?: InputMaybe<Scalars['DateTime']['input']>;\n  title: Scalars['String']['input'];\n  tripFeePercentGift?: InputMaybe<Scalars['Float']['input']>;\n};\n\nexport type CreateRiderAddress = {\n  details?: InputMaybe<Scalars['String']['input']>;\n  id: Scalars['ID']['input'];\n  location: PointInput;\n  riderId: Scalars['ID']['input'];\n  title: Scalars['String']['input'];\n  type: RiderAddressType;\n};\n\nexport type CreateRiderTransaction = {\n  action: TransactionAction;\n  amount: Scalars['Float']['input'];\n  createdAt: Scalars['DateTime']['input'];\n  currency: Scalars['String']['input'];\n  deductType?: InputMaybe<RiderDeductTransactionType>;\n  description?: InputMaybe<Scalars['String']['input']>;\n  id: Scalars['ID']['input'];\n  operatorId?: InputMaybe<Scalars['ID']['input']>;\n  paymentGatewayId?: InputMaybe<Scalars['ID']['input']>;\n  rechargeType?: InputMaybe<RiderRechargeTransactionType>;\n  refrenceNumber?: InputMaybe<Scalars['String']['input']>;\n  requestId?: InputMaybe<Scalars['ID']['input']>;\n  riderId: Scalars['ID']['input'];\n  status: TransactionStatus;\n};\n\nexport type CreateSosAcitivtyInput = {\n  action: SosActivityAction;\n  note?: InputMaybe<Scalars['String']['input']>;\n  sosId: Scalars['ID']['input'];\n};\n\nexport type CurrentConfiguration = {\n  __typename?: 'CurrentConfiguration';\n  adminPanelAPIKey?: Maybe<Scalars['String']['output']>;\n  backendMapsAPIKey?: Maybe<Scalars['String']['output']>;\n  firebaseProjectPrivateKey?: Maybe<Scalars['String']['output']>;\n  purchaseCode?: Maybe<Scalars['String']['output']>;\n  twilioAccountSid?: Maybe<Scalars['String']['output']>;\n  twilioAuthToken?: Maybe<Scalars['String']['output']>;\n  twilioFromNumber?: Maybe<Scalars['String']['output']>;\n  twilioVerificationCodeSMSTemplate?: Maybe<Scalars['String']['output']>;\n};\n\nexport type CursorPaging = {\n  /** Paginate after opaque cursor */\n  after?: InputMaybe<Scalars['ConnectionCursor']['input']>;\n  /** Paginate before opaque cursor */\n  before?: InputMaybe<Scalars['ConnectionCursor']['input']>;\n  /** Paginate first */\n  first?: InputMaybe<Scalars['Int']['input']>;\n  /** Paginate last */\n  last?: InputMaybe<Scalars['Int']['input']>;\n};\n\nexport type DateFieldComparison = {\n  between?: InputMaybe<DateFieldComparisonBetween>;\n  eq?: InputMaybe<Scalars['DateTime']['input']>;\n  gt?: InputMaybe<Scalars['DateTime']['input']>;\n  gte?: InputMaybe<Scalars['DateTime']['input']>;\n  in?: InputMaybe<Array<Scalars['DateTime']['input']>>;\n  is?: InputMaybe<Scalars['Boolean']['input']>;\n  isNot?: InputMaybe<Scalars['Boolean']['input']>;\n  lt?: InputMaybe<Scalars['DateTime']['input']>;\n  lte?: InputMaybe<Scalars['DateTime']['input']>;\n  neq?: InputMaybe<Scalars['DateTime']['input']>;\n  notBetween?: InputMaybe<DateFieldComparisonBetween>;\n  notIn?: InputMaybe<Array<Scalars['DateTime']['input']>>;\n};\n\nexport type DateFieldComparisonBetween = {\n  lower: Scalars['DateTime']['input'];\n  upper: Scalars['DateTime']['input'];\n};\n\nexport type DateRangeMultiplier = {\n  __typename?: 'DateRangeMultiplier';\n  endDate: Scalars['Float']['output'];\n  multiply: Scalars['Float']['output'];\n  startDate: Scalars['Float']['output'];\n};\n\nexport type DateRangeMultiplierInput = {\n  endDate: Scalars['Float']['input'];\n  multiply: Scalars['Float']['input'];\n  startDate: Scalars['Float']['input'];\n};\n\nexport type DeleteManyResponse = {\n  __typename?: 'DeleteManyResponse';\n  /** The number of records deleted. */\n  deletedCount: Scalars['Int']['output'];\n};\n\nexport type DeleteManySmsProvidersInput = {\n  /** Filter to find records to delete */\n  filter: SmsProviderDeleteFilter;\n};\n\nexport type DeleteOneAnnouncementInput = {\n  /** The id of the record to delete. */\n  id: Scalars['ID']['input'];\n};\n\nexport type DeleteOneCarColorInput = {\n  /** The id of the record to delete. */\n  id: Scalars['ID']['input'];\n};\n\nexport type DeleteOneCarModelInput = {\n  /** The id of the record to delete. */\n  id: Scalars['ID']['input'];\n};\n\nexport type DeleteOneCouponInput = {\n  /** The id of the record to delete. */\n  id: Scalars['ID']['input'];\n};\n\nexport type DeleteOneFeedbackParameterInput = {\n  /** The id of the record to delete. */\n  id: Scalars['ID']['input'];\n};\n\nexport type DeleteOneOrderCancelReasonInput = {\n  /** The id of the record to delete. */\n  id: Scalars['ID']['input'];\n};\n\nexport type DeleteOnePayoutMethodInput = {\n  /** The id of the record to delete. */\n  id: Scalars['ID']['input'];\n};\n\nexport type DeleteOneRegionInput = {\n  /** The id of the record to delete. */\n  id: Scalars['ID']['input'];\n};\n\nexport type DeleteOneRewardInput = {\n  /** The id of the record to delete. */\n  id: Scalars['ID']['input'];\n};\n\nexport type DeleteOneSmsProviderInput = {\n  /** The id of the record to delete. */\n  id: Scalars['ID']['input'];\n};\n\nexport type DeleteOneServiceCategoryInput = {\n  /** The id of the record to delete. */\n  id: Scalars['ID']['input'];\n};\n\nexport type DeleteOneServiceInput = {\n  /** The id of the record to delete. */\n  id: Scalars['ID']['input'];\n};\n\nexport type DeleteOneServiceOptionInput = {\n  /** The id of the record to delete. */\n  id: Scalars['ID']['input'];\n};\n\nexport type DeleteOneZonePriceInput = {\n  /** The id of the record to delete. */\n  id: Scalars['ID']['input'];\n};\n\nexport type DistanceMultiplier = {\n  __typename?: 'DistanceMultiplier';\n  distanceFrom: Scalars['Float']['output'];\n  distanceTo: Scalars['Float']['output'];\n  multiply: Scalars['Float']['output'];\n};\n\nexport type DistanceMultiplierInput = {\n  distanceFrom: Scalars['Float']['input'];\n  distanceTo: Scalars['Float']['input'];\n  multiply: Scalars['Float']['input'];\n};\n\nexport type DistressSignal = {\n  __typename?: 'DistressSignal';\n  activities: Array<SosActivity>;\n  activitiesAggregate: Array<DistressSignalActivitiesAggregateResponse>;\n  createdAt: Scalars['DateTime']['output'];\n  id: Scalars['ID']['output'];\n  location?: Maybe<Point>;\n  order: Order;\n  requestId: Scalars['Float']['output'];\n  status: SosStatus;\n  submittedByRider: Scalars['Boolean']['output'];\n};\n\n\nexport type DistressSignalActivitiesArgs = {\n  filter?: SosActivityFilter;\n  sorting?: Array<SosActivitySort>;\n};\n\n\nexport type DistressSignalActivitiesAggregateArgs = {\n  filter?: InputMaybe<SosActivityAggregateFilter>;\n};\n\nexport type DistressSignalActivitiesAggregateGroupBy = {\n  __typename?: 'DistressSignalActivitiesAggregateGroupBy';\n  id?: Maybe<Scalars['ID']['output']>;\n};\n\nexport type DistressSignalActivitiesAggregateResponse = {\n  __typename?: 'DistressSignalActivitiesAggregateResponse';\n  avg?: Maybe<DistressSignalActivitiesAvgAggregate>;\n  count?: Maybe<DistressSignalActivitiesCountAggregate>;\n  groupBy?: Maybe<DistressSignalActivitiesAggregateGroupBy>;\n  max?: Maybe<DistressSignalActivitiesMaxAggregate>;\n  min?: Maybe<DistressSignalActivitiesMinAggregate>;\n  sum?: Maybe<DistressSignalActivitiesSumAggregate>;\n};\n\nexport type DistressSignalActivitiesAvgAggregate = {\n  __typename?: 'DistressSignalActivitiesAvgAggregate';\n  id?: Maybe<Scalars['Float']['output']>;\n};\n\nexport type DistressSignalActivitiesCountAggregate = {\n  __typename?: 'DistressSignalActivitiesCountAggregate';\n  id?: Maybe<Scalars['Int']['output']>;\n};\n\nexport type DistressSignalActivitiesMaxAggregate = {\n  __typename?: 'DistressSignalActivitiesMaxAggregate';\n  id?: Maybe<Scalars['ID']['output']>;\n};\n\nexport type DistressSignalActivitiesMinAggregate = {\n  __typename?: 'DistressSignalActivitiesMinAggregate';\n  id?: Maybe<Scalars['ID']['output']>;\n};\n\nexport type DistressSignalActivitiesSumAggregate = {\n  __typename?: 'DistressSignalActivitiesSumAggregate';\n  id?: Maybe<Scalars['Float']['output']>;\n};\n\nexport type DistressSignalAggregateFilter = {\n  and?: InputMaybe<Array<DistressSignalAggregateFilter>>;\n  id?: InputMaybe<IdFilterComparison>;\n  or?: InputMaybe<Array<DistressSignalAggregateFilter>>;\n  status?: InputMaybe<SosStatusFilterComparison>;\n};\n\nexport type DistressSignalAggregateGroupBy = {\n  __typename?: 'DistressSignalAggregateGroupBy';\n  id?: Maybe<Scalars['ID']['output']>;\n  status?: Maybe<SosStatus>;\n};\n\nexport type DistressSignalAggregateResponse = {\n  __typename?: 'DistressSignalAggregateResponse';\n  avg?: Maybe<DistressSignalAvgAggregate>;\n  count?: Maybe<DistressSignalCountAggregate>;\n  groupBy?: Maybe<DistressSignalAggregateGroupBy>;\n  max?: Maybe<DistressSignalMaxAggregate>;\n  min?: Maybe<DistressSignalMinAggregate>;\n  sum?: Maybe<DistressSignalSumAggregate>;\n};\n\nexport type DistressSignalAvgAggregate = {\n  __typename?: 'DistressSignalAvgAggregate';\n  id?: Maybe<Scalars['Float']['output']>;\n};\n\nexport type DistressSignalConnection = {\n  __typename?: 'DistressSignalConnection';\n  /** Array of nodes. */\n  nodes: Array<DistressSignal>;\n  /** Paging information */\n  pageInfo: OffsetPageInfo;\n  /** Fetch total count of records */\n  totalCount: Scalars['Int']['output'];\n};\n\nexport type DistressSignalCountAggregate = {\n  __typename?: 'DistressSignalCountAggregate';\n  id?: Maybe<Scalars['Int']['output']>;\n  status?: Maybe<Scalars['Int']['output']>;\n};\n\nexport type DistressSignalFilter = {\n  and?: InputMaybe<Array<DistressSignalFilter>>;\n  id?: InputMaybe<IdFilterComparison>;\n  or?: InputMaybe<Array<DistressSignalFilter>>;\n  status?: InputMaybe<SosStatusFilterComparison>;\n};\n\nexport type DistressSignalMaxAggregate = {\n  __typename?: 'DistressSignalMaxAggregate';\n  id?: Maybe<Scalars['ID']['output']>;\n  status?: Maybe<SosStatus>;\n};\n\nexport type DistressSignalMinAggregate = {\n  __typename?: 'DistressSignalMinAggregate';\n  id?: Maybe<Scalars['ID']['output']>;\n  status?: Maybe<SosStatus>;\n};\n\nexport type DistressSignalSort = {\n  direction: SortDirection;\n  field: DistressSignalSortFields;\n  nulls?: InputMaybe<SortNulls>;\n};\n\nexport enum DistressSignalSortFields {\n  Id = 'id',\n  Status = 'status'\n}\n\nexport type DistressSignalSumAggregate = {\n  __typename?: 'DistressSignalSumAggregate';\n  id?: Maybe<Scalars['Float']['output']>;\n};\n\nexport type Driver = {\n  __typename?: 'Driver';\n  accountNumber?: Maybe<Scalars['String']['output']>;\n  address?: Maybe<Scalars['String']['output']>;\n  bankName?: Maybe<Scalars['String']['output']>;\n  bankRoutingNumber?: Maybe<Scalars['String']['output']>;\n  bankSwift?: Maybe<Scalars['String']['output']>;\n  carColorId?: Maybe<Scalars['ID']['output']>;\n  carId?: Maybe<Scalars['ID']['output']>;\n  carPlate?: Maybe<Scalars['String']['output']>;\n  carProductionYear?: Maybe<Scalars['Int']['output']>;\n  certificateNumber?: Maybe<Scalars['String']['output']>;\n  documents: Array<Media>;\n  documentsAggregate: Array<DriverDocumentsAggregateResponse>;\n  email?: Maybe<Scalars['String']['output']>;\n  enabledServices: Array<Service>;\n  enabledServicesAggregate: Array<DriverEnabledServicesAggregateResponse>;\n  feedbacks: DriverFeedbacksConnection;\n  feedbacksAggregate: Array<DriverFeedbacksAggregateResponse>;\n  firstName?: Maybe<Scalars['String']['output']>;\n  fleetId?: Maybe<Scalars['ID']['output']>;\n  gender?: Maybe<Gender>;\n  id: Scalars['ID']['output'];\n  lastName?: Maybe<Scalars['String']['output']>;\n  lastSeenTimestamp?: Maybe<Scalars['DateTime']['output']>;\n  media?: Maybe<Media>;\n  mediaId?: Maybe<Scalars['ID']['output']>;\n  mobileNumber: Scalars['String']['output'];\n  orders: DriverOrdersConnection;\n  ordersAggregate: Array<DriverOrdersAggregateResponse>;\n  payoutAccounts: DriverPayoutAccountsConnection;\n  payoutAccountsAggregate: Array<DriverPayoutAccountsAggregateResponse>;\n  rating?: Maybe<Scalars['Float']['output']>;\n  registrationTimestamp: Scalars['DateTime']['output'];\n  reviewCount: Scalars['Float']['output'];\n  softRejectionNote?: Maybe<Scalars['String']['output']>;\n  status: DriverStatus;\n  transactions: DriverTransactionsConnection;\n  transactionsAggregate: Array<DriverTransactionsAggregateResponse>;\n  wallets: Array<DriverWallet>;\n  walletsAggregate: Array<DriverWalletsAggregateResponse>;\n};\n\n\nexport type DriverDocumentsArgs = {\n  filter?: MediaFilter;\n  sorting?: Array<MediaSort>;\n};\n\n\nexport type DriverDocumentsAggregateArgs = {\n  filter?: InputMaybe<MediaAggregateFilter>;\n};\n\n\nexport type DriverEnabledServicesArgs = {\n  filter?: ServiceFilter;\n  sorting?: Array<ServiceSort>;\n};\n\n\nexport type DriverEnabledServicesAggregateArgs = {\n  filter?: InputMaybe<ServiceAggregateFilter>;\n};\n\n\nexport type DriverFeedbacksArgs = {\n  filter?: FeedbackFilter;\n  paging?: OffsetPaging;\n  sorting?: Array<FeedbackSort>;\n};\n\n\nexport type DriverFeedbacksAggregateArgs = {\n  filter?: InputMaybe<FeedbackAggregateFilter>;\n};\n\n\nexport type DriverOrdersArgs = {\n  filter?: OrderFilter;\n  paging?: OffsetPaging;\n  sorting?: Array<OrderSort>;\n};\n\n\nexport type DriverOrdersAggregateArgs = {\n  filter?: InputMaybe<OrderAggregateFilter>;\n};\n\n\nexport type DriverPayoutAccountsArgs = {\n  filter?: PayoutAccountFilter;\n  paging?: OffsetPaging;\n  sorting?: Array<PayoutAccountSort>;\n};\n\n\nexport type DriverPayoutAccountsAggregateArgs = {\n  filter?: InputMaybe<PayoutAccountAggregateFilter>;\n};\n\n\nexport type DriverTransactionsArgs = {\n  filter?: DriverTransactionFilter;\n  paging?: OffsetPaging;\n  sorting?: Array<DriverTransactionSort>;\n};\n\n\nexport type DriverTransactionsAggregateArgs = {\n  filter?: InputMaybe<DriverTransactionAggregateFilter>;\n};\n\n\nexport type DriverWalletsArgs = {\n  filter?: DriverWalletFilter;\n  sorting?: Array<DriverWalletSort>;\n};\n\n\nexport type DriverWalletsAggregateArgs = {\n  filter?: InputMaybe<DriverWalletAggregateFilter>;\n};\n\nexport type DriverAggregateFilter = {\n  and?: InputMaybe<Array<DriverAggregateFilter>>;\n  fleetId?: InputMaybe<IdFilterComparison>;\n  id?: InputMaybe<IdFilterComparison>;\n  lastName?: InputMaybe<StringFieldComparison>;\n  mobileNumber?: InputMaybe<StringFieldComparison>;\n  or?: InputMaybe<Array<DriverAggregateFilter>>;\n  status?: InputMaybe<DriverStatusFilterComparison>;\n};\n\nexport type DriverAggregateGroupBy = {\n  __typename?: 'DriverAggregateGroupBy';\n  fleetId?: Maybe<Scalars['ID']['output']>;\n  id?: Maybe<Scalars['ID']['output']>;\n  lastName?: Maybe<Scalars['String']['output']>;\n  mobileNumber?: Maybe<Scalars['String']['output']>;\n  status?: Maybe<DriverStatus>;\n};\n\nexport type DriverAggregateResponse = {\n  __typename?: 'DriverAggregateResponse';\n  avg?: Maybe<DriverAvgAggregate>;\n  count?: Maybe<DriverCountAggregate>;\n  groupBy?: Maybe<DriverAggregateGroupBy>;\n  max?: Maybe<DriverMaxAggregate>;\n  min?: Maybe<DriverMinAggregate>;\n  sum?: Maybe<DriverSumAggregate>;\n};\n\nexport type DriverAvgAggregate = {\n  __typename?: 'DriverAvgAggregate';\n  fleetId?: Maybe<Scalars['Float']['output']>;\n  id?: Maybe<Scalars['Float']['output']>;\n};\n\nexport type DriverConnection = {\n  __typename?: 'DriverConnection';\n  /** Array of nodes. */\n  nodes: Array<Driver>;\n  /** Paging information */\n  pageInfo: OffsetPageInfo;\n  /** Fetch total count of records */\n  totalCount: Scalars['Int']['output'];\n};\n\nexport type DriverCountAggregate = {\n  __typename?: 'DriverCountAggregate';\n  fleetId?: Maybe<Scalars['Int']['output']>;\n  id?: Maybe<Scalars['Int']['output']>;\n  lastName?: Maybe<Scalars['Int']['output']>;\n  mobileNumber?: Maybe<Scalars['Int']['output']>;\n  status?: Maybe<Scalars['Int']['output']>;\n};\n\nexport enum DriverDeductTransactionType {\n  Commission = 'Commission',\n  Correction = 'Correction',\n  Withdraw = 'Withdraw'\n}\n\nexport type DriverDocumentsAggregateGroupBy = {\n  __typename?: 'DriverDocumentsAggregateGroupBy';\n  id?: Maybe<Scalars['ID']['output']>;\n};\n\nexport type DriverDocumentsAggregateResponse = {\n  __typename?: 'DriverDocumentsAggregateResponse';\n  avg?: Maybe<DriverDocumentsAvgAggregate>;\n  count?: Maybe<DriverDocumentsCountAggregate>;\n  groupBy?: Maybe<DriverDocumentsAggregateGroupBy>;\n  max?: Maybe<DriverDocumentsMaxAggregate>;\n  min?: Maybe<DriverDocumentsMinAggregate>;\n  sum?: Maybe<DriverDocumentsSumAggregate>;\n};\n\nexport type DriverDocumentsAvgAggregate = {\n  __typename?: 'DriverDocumentsAvgAggregate';\n  id?: Maybe<Scalars['Float']['output']>;\n};\n\nexport type DriverDocumentsCountAggregate = {\n  __typename?: 'DriverDocumentsCountAggregate';\n  id?: Maybe<Scalars['Int']['output']>;\n};\n\nexport type DriverDocumentsMaxAggregate = {\n  __typename?: 'DriverDocumentsMaxAggregate';\n  id?: Maybe<Scalars['ID']['output']>;\n};\n\nexport type DriverDocumentsMinAggregate = {\n  __typename?: 'DriverDocumentsMinAggregate';\n  id?: Maybe<Scalars['ID']['output']>;\n};\n\nexport type DriverDocumentsSumAggregate = {\n  __typename?: 'DriverDocumentsSumAggregate';\n  id?: Maybe<Scalars['Float']['output']>;\n};\n\nexport type DriverEnabledServicesAggregateGroupBy = {\n  __typename?: 'DriverEnabledServicesAggregateGroupBy';\n  categoryId?: Maybe<Scalars['ID']['output']>;\n  id?: Maybe<Scalars['ID']['output']>;\n};\n\nexport type DriverEnabledServicesAggregateResponse = {\n  __typename?: 'DriverEnabledServicesAggregateResponse';\n  avg?: Maybe<DriverEnabledServicesAvgAggregate>;\n  count?: Maybe<DriverEnabledServicesCountAggregate>;\n  groupBy?: Maybe<DriverEnabledServicesAggregateGroupBy>;\n  max?: Maybe<DriverEnabledServicesMaxAggregate>;\n  min?: Maybe<DriverEnabledServicesMinAggregate>;\n  sum?: Maybe<DriverEnabledServicesSumAggregate>;\n};\n\nexport type DriverEnabledServicesAvgAggregate = {\n  __typename?: 'DriverEnabledServicesAvgAggregate';\n  categoryId?: Maybe<Scalars['Float']['output']>;\n  id?: Maybe<Scalars['Float']['output']>;\n};\n\nexport type DriverEnabledServicesCountAggregate = {\n  __typename?: 'DriverEnabledServicesCountAggregate';\n  categoryId?: Maybe<Scalars['Int']['output']>;\n  id?: Maybe<Scalars['Int']['output']>;\n};\n\nexport type DriverEnabledServicesMaxAggregate = {\n  __typename?: 'DriverEnabledServicesMaxAggregate';\n  categoryId?: Maybe<Scalars['ID']['output']>;\n  id?: Maybe<Scalars['ID']['output']>;\n};\n\nexport type DriverEnabledServicesMinAggregate = {\n  __typename?: 'DriverEnabledServicesMinAggregate';\n  categoryId?: Maybe<Scalars['ID']['output']>;\n  id?: Maybe<Scalars['ID']['output']>;\n};\n\nexport type DriverEnabledServicesSumAggregate = {\n  __typename?: 'DriverEnabledServicesSumAggregate';\n  categoryId?: Maybe<Scalars['Float']['output']>;\n  id?: Maybe<Scalars['Float']['output']>;\n};\n\nexport type DriverFeedbacksAggregateGroupBy = {\n  __typename?: 'DriverFeedbacksAggregateGroupBy';\n  driverId?: Maybe<Scalars['ID']['output']>;\n  id?: Maybe<Scalars['ID']['output']>;\n  requestId?: Maybe<Scalars['ID']['output']>;\n};\n\nexport type DriverFeedbacksAggregateResponse = {\n  __typename?: 'DriverFeedbacksAggregateResponse';\n  avg?: Maybe<DriverFeedbacksAvgAggregate>;\n  count?: Maybe<DriverFeedbacksCountAggregate>;\n  groupBy?: Maybe<DriverFeedbacksAggregateGroupBy>;\n  max?: Maybe<DriverFeedbacksMaxAggregate>;\n  min?: Maybe<DriverFeedbacksMinAggregate>;\n  sum?: Maybe<DriverFeedbacksSumAggregate>;\n};\n\nexport type DriverFeedbacksAvgAggregate = {\n  __typename?: 'DriverFeedbacksAvgAggregate';\n  driverId?: Maybe<Scalars['Float']['output']>;\n  id?: Maybe<Scalars['Float']['output']>;\n  requestId?: Maybe<Scalars['Float']['output']>;\n};\n\nexport type DriverFeedbacksConnection = {\n  __typename?: 'DriverFeedbacksConnection';\n  /** Array of nodes. */\n  nodes: Array<Feedback>;\n  /** Paging information */\n  pageInfo: OffsetPageInfo;\n  /** Fetch total count of records */\n  totalCount: Scalars['Int']['output'];\n};\n\nexport type DriverFeedbacksCountAggregate = {\n  __typename?: 'DriverFeedbacksCountAggregate';\n  driverId?: Maybe<Scalars['Int']['output']>;\n  id?: Maybe<Scalars['Int']['output']>;\n  requestId?: Maybe<Scalars['Int']['output']>;\n};\n\nexport type DriverFeedbacksMaxAggregate = {\n  __typename?: 'DriverFeedbacksMaxAggregate';\n  driverId?: Maybe<Scalars['ID']['output']>;\n  id?: Maybe<Scalars['ID']['output']>;\n  requestId?: Maybe<Scalars['ID']['output']>;\n};\n\nexport type DriverFeedbacksMinAggregate = {\n  __typename?: 'DriverFeedbacksMinAggregate';\n  driverId?: Maybe<Scalars['ID']['output']>;\n  id?: Maybe<Scalars['ID']['output']>;\n  requestId?: Maybe<Scalars['ID']['output']>;\n};\n\nexport type DriverFeedbacksSumAggregate = {\n  __typename?: 'DriverFeedbacksSumAggregate';\n  driverId?: Maybe<Scalars['Float']['output']>;\n  id?: Maybe<Scalars['Float']['output']>;\n  requestId?: Maybe<Scalars['Float']['output']>;\n};\n\nexport type DriverFilter = {\n  and?: InputMaybe<Array<DriverFilter>>;\n  fleetId?: InputMaybe<IdFilterComparison>;\n  id?: InputMaybe<IdFilterComparison>;\n  lastName?: InputMaybe<StringFieldComparison>;\n  mobileNumber?: InputMaybe<StringFieldComparison>;\n  or?: InputMaybe<Array<DriverFilter>>;\n  status?: InputMaybe<DriverStatusFilterComparison>;\n};\n\nexport type DriverMaxAggregate = {\n  __typename?: 'DriverMaxAggregate';\n  fleetId?: Maybe<Scalars['ID']['output']>;\n  id?: Maybe<Scalars['ID']['output']>;\n  lastName?: Maybe<Scalars['String']['output']>;\n  mobileNumber?: Maybe<Scalars['String']['output']>;\n  status?: Maybe<DriverStatus>;\n};\n\nexport type DriverMinAggregate = {\n  __typename?: 'DriverMinAggregate';\n  fleetId?: Maybe<Scalars['ID']['output']>;\n  id?: Maybe<Scalars['ID']['output']>;\n  lastName?: Maybe<Scalars['String']['output']>;\n  mobileNumber?: Maybe<Scalars['String']['output']>;\n  status?: Maybe<DriverStatus>;\n};\n\nexport type DriverOrdersAggregateGroupBy = {\n  __typename?: 'DriverOrdersAggregateGroupBy';\n  createdOn?: Maybe<Scalars['DateTime']['output']>;\n  driverId?: Maybe<Scalars['ID']['output']>;\n  id?: Maybe<Scalars['ID']['output']>;\n  riderId?: Maybe<Scalars['ID']['output']>;\n  status?: Maybe<OrderStatus>;\n};\n\nexport type DriverOrdersAggregateResponse = {\n  __typename?: 'DriverOrdersAggregateResponse';\n  avg?: Maybe<DriverOrdersAvgAggregate>;\n  count?: Maybe<DriverOrdersCountAggregate>;\n  groupBy?: Maybe<DriverOrdersAggregateGroupBy>;\n  max?: Maybe<DriverOrdersMaxAggregate>;\n  min?: Maybe<DriverOrdersMinAggregate>;\n  sum?: Maybe<DriverOrdersSumAggregate>;\n};\n\nexport type DriverOrdersAvgAggregate = {\n  __typename?: 'DriverOrdersAvgAggregate';\n  driverId?: Maybe<Scalars['Float']['output']>;\n  id?: Maybe<Scalars['Float']['output']>;\n  riderId?: Maybe<Scalars['Float']['output']>;\n};\n\nexport type DriverOrdersConnection = {\n  __typename?: 'DriverOrdersConnection';\n  /** Array of nodes. */\n  nodes: Array<Order>;\n  /** Paging information */\n  pageInfo: OffsetPageInfo;\n  /** Fetch total count of records */\n  totalCount: Scalars['Int']['output'];\n};\n\nexport type DriverOrdersCountAggregate = {\n  __typename?: 'DriverOrdersCountAggregate';\n  createdOn?: Maybe<Scalars['Int']['output']>;\n  driverId?: Maybe<Scalars['Int']['output']>;\n  id?: Maybe<Scalars['Int']['output']>;\n  riderId?: Maybe<Scalars['Int']['output']>;\n  status?: Maybe<Scalars['Int']['output']>;\n};\n\nexport type DriverOrdersMaxAggregate = {\n  __typename?: 'DriverOrdersMaxAggregate';\n  createdOn?: Maybe<Scalars['DateTime']['output']>;\n  driverId?: Maybe<Scalars['ID']['output']>;\n  id?: Maybe<Scalars['ID']['output']>;\n  riderId?: Maybe<Scalars['ID']['output']>;\n  status?: Maybe<OrderStatus>;\n};\n\nexport type DriverOrdersMinAggregate = {\n  __typename?: 'DriverOrdersMinAggregate';\n  createdOn?: Maybe<Scalars['DateTime']['output']>;\n  driverId?: Maybe<Scalars['ID']['output']>;\n  id?: Maybe<Scalars['ID']['output']>;\n  riderId?: Maybe<Scalars['ID']['output']>;\n  status?: Maybe<OrderStatus>;\n};\n\nexport type DriverOrdersSumAggregate = {\n  __typename?: 'DriverOrdersSumAggregate';\n  driverId?: Maybe<Scalars['Float']['output']>;\n  id?: Maybe<Scalars['Float']['output']>;\n  riderId?: Maybe<Scalars['Float']['output']>;\n};\n\nexport type DriverPayoutAccountsAggregateGroupBy = {\n  __typename?: 'DriverPayoutAccountsAggregateGroupBy';\n  id?: Maybe<Scalars['ID']['output']>;\n  isDefault?: Maybe<Scalars['Boolean']['output']>;\n};\n\nexport type DriverPayoutAccountsAggregateResponse = {\n  __typename?: 'DriverPayoutAccountsAggregateResponse';\n  avg?: Maybe<DriverPayoutAccountsAvgAggregate>;\n  count?: Maybe<DriverPayoutAccountsCountAggregate>;\n  groupBy?: Maybe<DriverPayoutAccountsAggregateGroupBy>;\n  max?: Maybe<DriverPayoutAccountsMaxAggregate>;\n  min?: Maybe<DriverPayoutAccountsMinAggregate>;\n  sum?: Maybe<DriverPayoutAccountsSumAggregate>;\n};\n\nexport type DriverPayoutAccountsAvgAggregate = {\n  __typename?: 'DriverPayoutAccountsAvgAggregate';\n  id?: Maybe<Scalars['Float']['output']>;\n};\n\nexport type DriverPayoutAccountsConnection = {\n  __typename?: 'DriverPayoutAccountsConnection';\n  /** Array of nodes. */\n  nodes: Array<PayoutAccount>;\n  /** Paging information */\n  pageInfo: OffsetPageInfo;\n  /** Fetch total count of records */\n  totalCount: Scalars['Int']['output'];\n};\n\nexport type DriverPayoutAccountsCountAggregate = {\n  __typename?: 'DriverPayoutAccountsCountAggregate';\n  id?: Maybe<Scalars['Int']['output']>;\n  isDefault?: Maybe<Scalars['Int']['output']>;\n};\n\nexport type DriverPayoutAccountsMaxAggregate = {\n  __typename?: 'DriverPayoutAccountsMaxAggregate';\n  id?: Maybe<Scalars['ID']['output']>;\n};\n\nexport type DriverPayoutAccountsMinAggregate = {\n  __typename?: 'DriverPayoutAccountsMinAggregate';\n  id?: Maybe<Scalars['ID']['output']>;\n};\n\nexport type DriverPayoutAccountsSumAggregate = {\n  __typename?: 'DriverPayoutAccountsSumAggregate';\n  id?: Maybe<Scalars['Float']['output']>;\n};\n\nexport enum DriverRechargeTransactionType {\n  BankTransfer = 'BankTransfer',\n  Gift = 'Gift',\n  InAppPayment = 'InAppPayment',\n  OrderFee = 'OrderFee'\n}\n\nexport type DriverSort = {\n  direction: SortDirection;\n  field: DriverSortFields;\n  nulls?: InputMaybe<SortNulls>;\n};\n\nexport enum DriverSortFields {\n  FleetId = 'fleetId',\n  Id = 'id',\n  LastName = 'lastName',\n  MobileNumber = 'mobileNumber',\n  Status = 'status'\n}\n\nexport enum DriverStatus {\n  Blocked = 'Blocked',\n  HardReject = 'HardReject',\n  InService = 'InService',\n  Offline = 'Offline',\n  Online = 'Online',\n  PendingApproval = 'PendingApproval',\n  SoftReject = 'SoftReject',\n  WaitingDocuments = 'WaitingDocuments'\n}\n\nexport type DriverStatusFilterComparison = {\n  eq?: InputMaybe<DriverStatus>;\n  gt?: InputMaybe<DriverStatus>;\n  gte?: InputMaybe<DriverStatus>;\n  iLike?: InputMaybe<DriverStatus>;\n  in?: InputMaybe<Array<DriverStatus>>;\n  is?: InputMaybe<Scalars['Boolean']['input']>;\n  isNot?: InputMaybe<Scalars['Boolean']['input']>;\n  like?: InputMaybe<DriverStatus>;\n  lt?: InputMaybe<DriverStatus>;\n  lte?: InputMaybe<DriverStatus>;\n  neq?: InputMaybe<DriverStatus>;\n  notILike?: InputMaybe<DriverStatus>;\n  notIn?: InputMaybe<Array<DriverStatus>>;\n  notLike?: InputMaybe<DriverStatus>;\n};\n\nexport type DriverSumAggregate = {\n  __typename?: 'DriverSumAggregate';\n  fleetId?: Maybe<Scalars['Float']['output']>;\n  id?: Maybe<Scalars['Float']['output']>;\n};\n\nexport type DriverTransaction = {\n  __typename?: 'DriverTransaction';\n  action: TransactionAction;\n  amount: Scalars['Float']['output'];\n  createdAt: Scalars['DateTime']['output'];\n  currency: Scalars['String']['output'];\n  deductType?: Maybe<DriverDeductTransactionType>;\n  description?: Maybe<Scalars['String']['output']>;\n  driver?: Maybe<Driver>;\n  driverId: Scalars['ID']['output'];\n  id: Scalars['ID']['output'];\n  operator?: Maybe<Operator>;\n  operatorId?: Maybe<Scalars['ID']['output']>;\n  paymentGatewayId?: Maybe<Scalars['ID']['output']>;\n  payoutAccount?: Maybe<PayoutAccount>;\n  payoutAccountId?: Maybe<Scalars['ID']['output']>;\n  payoutMethodId?: Maybe<Scalars['ID']['output']>;\n  payoutSessionId?: Maybe<Scalars['ID']['output']>;\n  rechargeType?: Maybe<DriverRechargeTransactionType>;\n  refrenceNumber?: Maybe<Scalars['String']['output']>;\n  requestId?: Maybe<Scalars['Float']['output']>;\n  status: TransactionStatus;\n};\n\nexport type DriverTransactionAggregateFilter = {\n  amount?: InputMaybe<NumberFieldComparison>;\n  and?: InputMaybe<Array<DriverTransactionAggregateFilter>>;\n  createdAt?: InputMaybe<DateFieldComparison>;\n  driverId?: InputMaybe<IdFilterComparison>;\n  id?: InputMaybe<IdFilterComparison>;\n  or?: InputMaybe<Array<DriverTransactionAggregateFilter>>;\n  paymentGatewayId?: InputMaybe<IdFilterComparison>;\n  payoutAccountId?: InputMaybe<IdFilterComparison>;\n  payoutMethodId?: InputMaybe<IdFilterComparison>;\n  payoutSessionId?: InputMaybe<IdFilterComparison>;\n  status?: InputMaybe<TransactionStatusFilterComparison>;\n};\n\nexport type DriverTransactionAggregateGroupBy = {\n  __typename?: 'DriverTransactionAggregateGroupBy';\n  amount?: Maybe<Scalars['Float']['output']>;\n  createdAt?: Maybe<Scalars['DateTime']['output']>;\n  driverId?: Maybe<Scalars['ID']['output']>;\n  id?: Maybe<Scalars['ID']['output']>;\n  paymentGatewayId?: Maybe<Scalars['ID']['output']>;\n  payoutAccountId?: Maybe<Scalars['ID']['output']>;\n  payoutMethodId?: Maybe<Scalars['ID']['output']>;\n  payoutSessionId?: Maybe<Scalars['ID']['output']>;\n  status?: Maybe<TransactionStatus>;\n};\n\n\nexport type DriverTransactionAggregateGroupByCreatedAtArgs = {\n  by?: GroupBy;\n};\n\nexport type DriverTransactionAggregateResponse = {\n  __typename?: 'DriverTransactionAggregateResponse';\n  avg?: Maybe<DriverTransactionAvgAggregate>;\n  count?: Maybe<DriverTransactionCountAggregate>;\n  groupBy?: Maybe<DriverTransactionAggregateGroupBy>;\n  max?: Maybe<DriverTransactionMaxAggregate>;\n  min?: Maybe<DriverTransactionMinAggregate>;\n  sum?: Maybe<DriverTransactionSumAggregate>;\n};\n\nexport type DriverTransactionAvgAggregate = {\n  __typename?: 'DriverTransactionAvgAggregate';\n  amount?: Maybe<Scalars['Float']['output']>;\n  driverId?: Maybe<Scalars['Float']['output']>;\n  id?: Maybe<Scalars['Float']['output']>;\n  paymentGatewayId?: Maybe<Scalars['Float']['output']>;\n  payoutAccountId?: Maybe<Scalars['Float']['output']>;\n  payoutMethodId?: Maybe<Scalars['Float']['output']>;\n  payoutSessionId?: Maybe<Scalars['Float']['output']>;\n};\n\nexport type DriverTransactionConnection = {\n  __typename?: 'DriverTransactionConnection';\n  /** Array of nodes. */\n  nodes: Array<DriverTransaction>;\n  /** Paging information */\n  pageInfo: OffsetPageInfo;\n  /** Fetch total count of records */\n  totalCount: Scalars['Int']['output'];\n};\n\nexport type DriverTransactionCountAggregate = {\n  __typename?: 'DriverTransactionCountAggregate';\n  amount?: Maybe<Scalars['Int']['output']>;\n  createdAt?: Maybe<Scalars['Int']['output']>;\n  driverId?: Maybe<Scalars['Int']['output']>;\n  id?: Maybe<Scalars['Int']['output']>;\n  paymentGatewayId?: Maybe<Scalars['Int']['output']>;\n  payoutAccountId?: Maybe<Scalars['Int']['output']>;\n  payoutMethodId?: Maybe<Scalars['Int']['output']>;\n  payoutSessionId?: Maybe<Scalars['Int']['output']>;\n  status?: Maybe<Scalars['Int']['output']>;\n};\n\nexport type DriverTransactionFilter = {\n  amount?: InputMaybe<NumberFieldComparison>;\n  and?: InputMaybe<Array<DriverTransactionFilter>>;\n  createdAt?: InputMaybe<DateFieldComparison>;\n  driverId?: InputMaybe<IdFilterComparison>;\n  id?: InputMaybe<IdFilterComparison>;\n  or?: InputMaybe<Array<DriverTransactionFilter>>;\n  paymentGatewayId?: InputMaybe<IdFilterComparison>;\n  payoutAccountId?: InputMaybe<IdFilterComparison>;\n  payoutMethodId?: InputMaybe<IdFilterComparison>;\n  payoutSessionId?: InputMaybe<IdFilterComparison>;\n  status?: InputMaybe<TransactionStatusFilterComparison>;\n};\n\nexport type DriverTransactionInput = {\n  action: TransactionAction;\n  amount: Scalars['Float']['input'];\n  currency: Scalars['String']['input'];\n  deductType?: InputMaybe<DriverDeductTransactionType>;\n  description?: InputMaybe<Scalars['String']['input']>;\n  driverId: Scalars['ID']['input'];\n  rechargeType?: InputMaybe<DriverRechargeTransactionType>;\n  refrenceNumber?: InputMaybe<Scalars['String']['input']>;\n};\n\nexport type DriverTransactionMaxAggregate = {\n  __typename?: 'DriverTransactionMaxAggregate';\n  amount?: Maybe<Scalars['Float']['output']>;\n  createdAt?: Maybe<Scalars['DateTime']['output']>;\n  driverId?: Maybe<Scalars['ID']['output']>;\n  id?: Maybe<Scalars['ID']['output']>;\n  paymentGatewayId?: Maybe<Scalars['ID']['output']>;\n  payoutAccountId?: Maybe<Scalars['ID']['output']>;\n  payoutMethodId?: Maybe<Scalars['ID']['output']>;\n  payoutSessionId?: Maybe<Scalars['ID']['output']>;\n  status?: Maybe<TransactionStatus>;\n};\n\nexport type DriverTransactionMinAggregate = {\n  __typename?: 'DriverTransactionMinAggregate';\n  amount?: Maybe<Scalars['Float']['output']>;\n  createdAt?: Maybe<Scalars['DateTime']['output']>;\n  driverId?: Maybe<Scalars['ID']['output']>;\n  id?: Maybe<Scalars['ID']['output']>;\n  paymentGatewayId?: Maybe<Scalars['ID']['output']>;\n  payoutAccountId?: Maybe<Scalars['ID']['output']>;\n  payoutMethodId?: Maybe<Scalars['ID']['output']>;\n  payoutSessionId?: Maybe<Scalars['ID']['output']>;\n  status?: Maybe<TransactionStatus>;\n};\n\nexport type DriverTransactionSort = {\n  direction: SortDirection;\n  field: DriverTransactionSortFields;\n  nulls?: InputMaybe<SortNulls>;\n};\n\nexport enum DriverTransactionSortFields {\n  Amount = 'amount',\n  CreatedAt = 'createdAt',\n  DriverId = 'driverId',\n  Id = 'id',\n  PaymentGatewayId = 'paymentGatewayId',\n  PayoutAccountId = 'payoutAccountId',\n  PayoutMethodId = 'payoutMethodId',\n  PayoutSessionId = 'payoutSessionId',\n  Status = 'status'\n}\n\nexport type DriverTransactionSumAggregate = {\n  __typename?: 'DriverTransactionSumAggregate';\n  amount?: Maybe<Scalars['Float']['output']>;\n  driverId?: Maybe<Scalars['Float']['output']>;\n  id?: Maybe<Scalars['Float']['output']>;\n  paymentGatewayId?: Maybe<Scalars['Float']['output']>;\n  payoutAccountId?: Maybe<Scalars['Float']['output']>;\n  payoutMethodId?: Maybe<Scalars['Float']['output']>;\n  payoutSessionId?: Maybe<Scalars['Float']['output']>;\n};\n\nexport type DriverTransactionsAggregateGroupBy = {\n  __typename?: 'DriverTransactionsAggregateGroupBy';\n  amount?: Maybe<Scalars['Float']['output']>;\n  createdAt?: Maybe<Scalars['DateTime']['output']>;\n  driverId?: Maybe<Scalars['ID']['output']>;\n  id?: Maybe<Scalars['ID']['output']>;\n  paymentGatewayId?: Maybe<Scalars['ID']['output']>;\n  payoutAccountId?: Maybe<Scalars['ID']['output']>;\n  payoutMethodId?: Maybe<Scalars['ID']['output']>;\n  payoutSessionId?: Maybe<Scalars['ID']['output']>;\n  status?: Maybe<TransactionStatus>;\n};\n\nexport type DriverTransactionsAggregateResponse = {\n  __typename?: 'DriverTransactionsAggregateResponse';\n  avg?: Maybe<DriverTransactionsAvgAggregate>;\n  count?: Maybe<DriverTransactionsCountAggregate>;\n  groupBy?: Maybe<DriverTransactionsAggregateGroupBy>;\n  max?: Maybe<DriverTransactionsMaxAggregate>;\n  min?: Maybe<DriverTransactionsMinAggregate>;\n  sum?: Maybe<DriverTransactionsSumAggregate>;\n};\n\nexport type DriverTransactionsAvgAggregate = {\n  __typename?: 'DriverTransactionsAvgAggregate';\n  amount?: Maybe<Scalars['Float']['output']>;\n  driverId?: Maybe<Scalars['Float']['output']>;\n  id?: Maybe<Scalars['Float']['output']>;\n  paymentGatewayId?: Maybe<Scalars['Float']['output']>;\n  payoutAccountId?: Maybe<Scalars['Float']['output']>;\n  payoutMethodId?: Maybe<Scalars['Float']['output']>;\n  payoutSessionId?: Maybe<Scalars['Float']['output']>;\n};\n\nexport type DriverTransactionsConnection = {\n  __typename?: 'DriverTransactionsConnection';\n  /** Array of nodes. */\n  nodes: Array<DriverTransaction>;\n  /** Paging information */\n  pageInfo: OffsetPageInfo;\n  /** Fetch total count of records */\n  totalCount: Scalars['Int']['output'];\n};\n\nexport type DriverTransactionsCountAggregate = {\n  __typename?: 'DriverTransactionsCountAggregate';\n  amount?: Maybe<Scalars['Int']['output']>;\n  createdAt?: Maybe<Scalars['Int']['output']>;\n  driverId?: Maybe<Scalars['Int']['output']>;\n  id?: Maybe<Scalars['Int']['output']>;\n  paymentGatewayId?: Maybe<Scalars['Int']['output']>;\n  payoutAccountId?: Maybe<Scalars['Int']['output']>;\n  payoutMethodId?: Maybe<Scalars['Int']['output']>;\n  payoutSessionId?: Maybe<Scalars['Int']['output']>;\n  status?: Maybe<Scalars['Int']['output']>;\n};\n\nexport type DriverTransactionsMaxAggregate = {\n  __typename?: 'DriverTransactionsMaxAggregate';\n  amount?: Maybe<Scalars['Float']['output']>;\n  createdAt?: Maybe<Scalars['DateTime']['output']>;\n  driverId?: Maybe<Scalars['ID']['output']>;\n  id?: Maybe<Scalars['ID']['output']>;\n  paymentGatewayId?: Maybe<Scalars['ID']['output']>;\n  payoutAccountId?: Maybe<Scalars['ID']['output']>;\n  payoutMethodId?: Maybe<Scalars['ID']['output']>;\n  payoutSessionId?: Maybe<Scalars['ID']['output']>;\n  status?: Maybe<TransactionStatus>;\n};\n\nexport type DriverTransactionsMinAggregate = {\n  __typename?: 'DriverTransactionsMinAggregate';\n  amount?: Maybe<Scalars['Float']['output']>;\n  createdAt?: Maybe<Scalars['DateTime']['output']>;\n  driverId?: Maybe<Scalars['ID']['output']>;\n  id?: Maybe<Scalars['ID']['output']>;\n  paymentGatewayId?: Maybe<Scalars['ID']['output']>;\n  payoutAccountId?: Maybe<Scalars['ID']['output']>;\n  payoutMethodId?: Maybe<Scalars['ID']['output']>;\n  payoutSessionId?: Maybe<Scalars['ID']['output']>;\n  status?: Maybe<TransactionStatus>;\n};\n\nexport type DriverTransactionsSumAggregate = {\n  __typename?: 'DriverTransactionsSumAggregate';\n  amount?: Maybe<Scalars['Float']['output']>;\n  driverId?: Maybe<Scalars['Float']['output']>;\n  id?: Maybe<Scalars['Float']['output']>;\n  paymentGatewayId?: Maybe<Scalars['Float']['output']>;\n  payoutAccountId?: Maybe<Scalars['Float']['output']>;\n  payoutMethodId?: Maybe<Scalars['Float']['output']>;\n  payoutSessionId?: Maybe<Scalars['Float']['output']>;\n};\n\nexport type DriverWallet = {\n  __typename?: 'DriverWallet';\n  balance: Scalars['Float']['output'];\n  currency: Scalars['String']['output'];\n  driver?: Maybe<Driver>;\n  driverId?: Maybe<Scalars['ID']['output']>;\n  id: Scalars['ID']['output'];\n};\n\nexport type DriverWalletAggregateFilter = {\n  and?: InputMaybe<Array<DriverWalletAggregateFilter>>;\n  balance?: InputMaybe<FloatFieldComparison>;\n  currency?: InputMaybe<StringFieldComparison>;\n  driverId?: InputMaybe<IdFilterComparison>;\n  id?: InputMaybe<IdFilterComparison>;\n  or?: InputMaybe<Array<DriverWalletAggregateFilter>>;\n};\n\nexport type DriverWalletConnection = {\n  __typename?: 'DriverWalletConnection';\n  /** Array of nodes. */\n  nodes: Array<DriverWallet>;\n  /** Paging information */\n  pageInfo: OffsetPageInfo;\n  /** Fetch total count of records */\n  totalCount: Scalars['Int']['output'];\n};\n\nexport type DriverWalletFilter = {\n  and?: InputMaybe<Array<DriverWalletFilter>>;\n  balance?: InputMaybe<FloatFieldComparison>;\n  currency?: InputMaybe<StringFieldComparison>;\n  driverId?: InputMaybe<IdFilterComparison>;\n  id?: InputMaybe<IdFilterComparison>;\n  or?: InputMaybe<Array<DriverWalletFilter>>;\n};\n\nexport type DriverWalletSort = {\n  direction: SortDirection;\n  field: DriverWalletSortFields;\n  nulls?: InputMaybe<SortNulls>;\n};\n\nexport enum DriverWalletSortFields {\n  Balance = 'balance',\n  Currency = 'currency',\n  DriverId = 'driverId',\n  Id = 'id'\n}\n\nexport type DriverWalletsAggregateGroupBy = {\n  __typename?: 'DriverWalletsAggregateGroupBy';\n  balance?: Maybe<Scalars['Float']['output']>;\n  currency?: Maybe<Scalars['String']['output']>;\n  driverId?: Maybe<Scalars['ID']['output']>;\n  id?: Maybe<Scalars['ID']['output']>;\n};\n\nexport type DriverWalletsAggregateResponse = {\n  __typename?: 'DriverWalletsAggregateResponse';\n  avg?: Maybe<DriverWalletsAvgAggregate>;\n  count?: Maybe<DriverWalletsCountAggregate>;\n  groupBy?: Maybe<DriverWalletsAggregateGroupBy>;\n  max?: Maybe<DriverWalletsMaxAggregate>;\n  min?: Maybe<DriverWalletsMinAggregate>;\n  sum?: Maybe<DriverWalletsSumAggregate>;\n};\n\nexport type DriverWalletsAvgAggregate = {\n  __typename?: 'DriverWalletsAvgAggregate';\n  balance?: Maybe<Scalars['Float']['output']>;\n  driverId?: Maybe<Scalars['Float']['output']>;\n  id?: Maybe<Scalars['Float']['output']>;\n};\n\nexport type DriverWalletsCountAggregate = {\n  __typename?: 'DriverWalletsCountAggregate';\n  balance?: Maybe<Scalars['Int']['output']>;\n  currency?: Maybe<Scalars['Int']['output']>;\n  driverId?: Maybe<Scalars['Int']['output']>;\n  id?: Maybe<Scalars['Int']['output']>;\n};\n\nexport type DriverWalletsMaxAggregate = {\n  __typename?: 'DriverWalletsMaxAggregate';\n  balance?: Maybe<Scalars['Float']['output']>;\n  currency?: Maybe<Scalars['String']['output']>;\n  driverId?: Maybe<Scalars['ID']['output']>;\n  id?: Maybe<Scalars['ID']['output']>;\n};\n\nexport type DriverWalletsMinAggregate = {\n  __typename?: 'DriverWalletsMinAggregate';\n  balance?: Maybe<Scalars['Float']['output']>;\n  currency?: Maybe<Scalars['String']['output']>;\n  driverId?: Maybe<Scalars['ID']['output']>;\n  id?: Maybe<Scalars['ID']['output']>;\n};\n\nexport type DriverWalletsSumAggregate = {\n  __typename?: 'DriverWalletsSumAggregate';\n  balance?: Maybe<Scalars['Float']['output']>;\n  driverId?: Maybe<Scalars['Float']['output']>;\n  id?: Maybe<Scalars['Float']['output']>;\n};\n\nexport type ExportArgs = {\n  filters?: InputMaybe<Array<ExportFilterArg>>;\n  relations?: InputMaybe<Array<Scalars['String']['input']>>;\n  sort?: InputMaybe<ExportSortArg>;\n  table: ExportTable;\n  type: ExportType;\n};\n\nexport type ExportFilterArg = {\n  field: Scalars['String']['input'];\n  value: Scalars['String']['input'];\n};\n\nexport type ExportResult = {\n  __typename?: 'ExportResult';\n  url: Scalars['String']['output'];\n};\n\nexport type ExportSessionToCsvInput = {\n  payoutMethodId?: InputMaybe<Scalars['ID']['input']>;\n  payoutSessionId: Scalars['ID']['input'];\n};\n\nexport type ExportSortArg = {\n  direction: SortDirection;\n  property: Scalars['String']['input'];\n};\n\nexport enum ExportTable {\n  DriverWallet = 'DriverWallet',\n  FleetWallet = 'FleetWallet',\n  ProviderWallet = 'ProviderWallet',\n  RiderWallet = 'RiderWallet'\n}\n\nexport enum ExportType {\n  Csv = 'CSV'\n}\n\nexport type Feedback = {\n  __typename?: 'Feedback';\n  description?: Maybe<Scalars['String']['output']>;\n  driverId: Scalars['ID']['output'];\n  id: Scalars['ID']['output'];\n  parameters: Array<FeedbackParameter>;\n  parametersAggregate: Array<FeedbackParametersAggregateResponse>;\n  requestId: Scalars['ID']['output'];\n  reviewTimestamp: Scalars['DateTime']['output'];\n  score: Scalars['Int']['output'];\n};\n\n\nexport type FeedbackParametersArgs = {\n  filter?: FeedbackParameterFilter;\n  sorting?: Array<FeedbackParameterSort>;\n};\n\n\nexport type FeedbackParametersAggregateArgs = {\n  filter?: InputMaybe<FeedbackParameterAggregateFilter>;\n};\n\nexport type FeedbackAggregateFilter = {\n  and?: InputMaybe<Array<FeedbackAggregateFilter>>;\n  driverId?: InputMaybe<IdFilterComparison>;\n  id?: InputMaybe<IdFilterComparison>;\n  or?: InputMaybe<Array<FeedbackAggregateFilter>>;\n  parameters?: InputMaybe<FeedbackAggregateFilterFeedbackParameterAggregateFilter>;\n  requestId?: InputMaybe<IdFilterComparison>;\n};\n\nexport type FeedbackAggregateFilterFeedbackParameterAggregateFilter = {\n  and?: InputMaybe<Array<FeedbackAggregateFilterFeedbackParameterAggregateFilter>>;\n  id?: InputMaybe<IdFilterComparison>;\n  isGood?: InputMaybe<BooleanFieldComparison>;\n  or?: InputMaybe<Array<FeedbackAggregateFilterFeedbackParameterAggregateFilter>>;\n  title?: InputMaybe<StringFieldComparison>;\n};\n\nexport type FeedbackConnection = {\n  __typename?: 'FeedbackConnection';\n  /** Array of nodes. */\n  nodes: Array<Feedback>;\n  /** Paging information */\n  pageInfo: OffsetPageInfo;\n  /** Fetch total count of records */\n  totalCount: Scalars['Int']['output'];\n};\n\nexport type FeedbackFilter = {\n  and?: InputMaybe<Array<FeedbackFilter>>;\n  driverId?: InputMaybe<IdFilterComparison>;\n  id?: InputMaybe<IdFilterComparison>;\n  or?: InputMaybe<Array<FeedbackFilter>>;\n  parameters?: InputMaybe<FeedbackFilterFeedbackParameterFilter>;\n  requestId?: InputMaybe<IdFilterComparison>;\n};\n\nexport type FeedbackFilterFeedbackParameterFilter = {\n  and?: InputMaybe<Array<FeedbackFilterFeedbackParameterFilter>>;\n  id?: InputMaybe<IdFilterComparison>;\n  isGood?: InputMaybe<BooleanFieldComparison>;\n  or?: InputMaybe<Array<FeedbackFilterFeedbackParameterFilter>>;\n  title?: InputMaybe<StringFieldComparison>;\n};\n\nexport type FeedbackParameter = {\n  __typename?: 'FeedbackParameter';\n  id: Scalars['ID']['output'];\n  isGood: Scalars['Boolean']['output'];\n  title: Scalars['String']['output'];\n};\n\nexport type FeedbackParameterAggregate = {\n  __typename?: 'FeedbackParameterAggregate';\n  count: Scalars['ID']['output'];\n  isGood: Scalars['Boolean']['output'];\n  title: Scalars['String']['output'];\n};\n\nexport type FeedbackParameterAggregateFilter = {\n  and?: InputMaybe<Array<FeedbackParameterAggregateFilter>>;\n  id?: InputMaybe<IdFilterComparison>;\n  isGood?: InputMaybe<BooleanFieldComparison>;\n  or?: InputMaybe<Array<FeedbackParameterAggregateFilter>>;\n  title?: InputMaybe<StringFieldComparison>;\n};\n\nexport type FeedbackParameterDeleteResponse = {\n  __typename?: 'FeedbackParameterDeleteResponse';\n  id?: Maybe<Scalars['ID']['output']>;\n  isGood?: Maybe<Scalars['Boolean']['output']>;\n  title?: Maybe<Scalars['String']['output']>;\n};\n\nexport type FeedbackParameterFilter = {\n  and?: InputMaybe<Array<FeedbackParameterFilter>>;\n  id?: InputMaybe<IdFilterComparison>;\n  isGood?: InputMaybe<BooleanFieldComparison>;\n  or?: InputMaybe<Array<FeedbackParameterFilter>>;\n  title?: InputMaybe<StringFieldComparison>;\n};\n\nexport type FeedbackParameterInput = {\n  isGood: Scalars['Boolean']['input'];\n  title: Scalars['String']['input'];\n};\n\nexport type FeedbackParameterSort = {\n  direction: SortDirection;\n  field: FeedbackParameterSortFields;\n  nulls?: InputMaybe<SortNulls>;\n};\n\nexport enum FeedbackParameterSortFields {\n  Id = 'id',\n  IsGood = 'isGood',\n  Title = 'title'\n}\n\nexport type FeedbackParametersAggregateGroupBy = {\n  __typename?: 'FeedbackParametersAggregateGroupBy';\n  id?: Maybe<Scalars['ID']['output']>;\n  isGood?: Maybe<Scalars['Boolean']['output']>;\n  title?: Maybe<Scalars['String']['output']>;\n};\n\nexport type FeedbackParametersAggregateResponse = {\n  __typename?: 'FeedbackParametersAggregateResponse';\n  avg?: Maybe<FeedbackParametersAvgAggregate>;\n  count?: Maybe<FeedbackParametersCountAggregate>;\n  groupBy?: Maybe<FeedbackParametersAggregateGroupBy>;\n  max?: Maybe<FeedbackParametersMaxAggregate>;\n  min?: Maybe<FeedbackParametersMinAggregate>;\n  sum?: Maybe<FeedbackParametersSumAggregate>;\n};\n\nexport type FeedbackParametersAvgAggregate = {\n  __typename?: 'FeedbackParametersAvgAggregate';\n  id?: Maybe<Scalars['Float']['output']>;\n};\n\nexport type FeedbackParametersCountAggregate = {\n  __typename?: 'FeedbackParametersCountAggregate';\n  id?: Maybe<Scalars['Int']['output']>;\n  isGood?: Maybe<Scalars['Int']['output']>;\n  title?: Maybe<Scalars['Int']['output']>;\n};\n\nexport type FeedbackParametersMaxAggregate = {\n  __typename?: 'FeedbackParametersMaxAggregate';\n  id?: Maybe<Scalars['ID']['output']>;\n  title?: Maybe<Scalars['String']['output']>;\n};\n\nexport type FeedbackParametersMinAggregate = {\n  __typename?: 'FeedbackParametersMinAggregate';\n  id?: Maybe<Scalars['ID']['output']>;\n  title?: Maybe<Scalars['String']['output']>;\n};\n\nexport type FeedbackParametersSumAggregate = {\n  __typename?: 'FeedbackParametersSumAggregate';\n  id?: Maybe<Scalars['Float']['output']>;\n};\n\nexport type FeedbackSort = {\n  direction: SortDirection;\n  field: FeedbackSortFields;\n  nulls?: InputMaybe<SortNulls>;\n};\n\nexport enum FeedbackSortFields {\n  DriverId = 'driverId',\n  Id = 'id',\n  RequestId = 'requestId'\n}\n\nexport type Fleet = {\n  __typename?: 'Fleet';\n  accountNumber: Scalars['String']['output'];\n  address?: Maybe<Scalars['String']['output']>;\n  commissionShareFlat: Scalars['Float']['output'];\n  commissionSharePercent: Scalars['Float']['output'];\n  exclusivityAreas?: Maybe<Array<Array<Point>>>;\n  feeMultiplier?: Maybe<Scalars['Float']['output']>;\n  id: Scalars['ID']['output'];\n  mobileNumber: Scalars['String']['output'];\n  name: Scalars['String']['output'];\n  password?: Maybe<Scalars['String']['output']>;\n  phoneNumber: Scalars['String']['output'];\n  transactions: FleetTransactionsConnection;\n  userName?: Maybe<Scalars['String']['output']>;\n  wallets: Array<FleetWallet>;\n  zonePrices: FleetZonePricesConnection;\n};\n\n\nexport type FleetTransactionsArgs = {\n  filter?: FleetTransactionFilter;\n  paging?: OffsetPaging;\n  sorting?: Array<FleetTransactionSort>;\n};\n\n\nexport type FleetWalletsArgs = {\n  filter?: FleetWalletFilter;\n  sorting?: Array<FleetWalletSort>;\n};\n\n\nexport type FleetZonePricesArgs = {\n  filter?: ZonePriceFilter;\n  paging?: OffsetPaging;\n  sorting?: Array<ZonePriceSort>;\n};\n\nexport type FleetConnection = {\n  __typename?: 'FleetConnection';\n  /** Array of nodes. */\n  nodes: Array<Fleet>;\n  /** Paging information */\n  pageInfo: OffsetPageInfo;\n  /** Fetch total count of records */\n  totalCount: Scalars['Int']['output'];\n};\n\nexport type FleetFilter = {\n  and?: InputMaybe<Array<FleetFilter>>;\n  id?: InputMaybe<IdFilterComparison>;\n  name?: InputMaybe<StringFieldComparison>;\n  or?: InputMaybe<Array<FleetFilter>>;\n};\n\nexport type FleetInput = {\n  accountNumber: Scalars['String']['input'];\n  address?: InputMaybe<Scalars['String']['input']>;\n  commissionShareFlat: Scalars['Float']['input'];\n  commissionSharePercent: Scalars['Float']['input'];\n  exclusivityAreas?: InputMaybe<Array<Array<PointInput>>>;\n  feeMultiplier?: InputMaybe<Scalars['Float']['input']>;\n  mobileNumber: Scalars['String']['input'];\n  name: Scalars['String']['input'];\n  password: Scalars['String']['input'];\n  phoneNumber: Scalars['String']['input'];\n  userName: Scalars['String']['input'];\n};\n\nexport type FleetSort = {\n  direction: SortDirection;\n  field: FleetSortFields;\n  nulls?: InputMaybe<SortNulls>;\n};\n\nexport enum FleetSortFields {\n  Id = 'id',\n  Name = 'name'\n}\n\nexport type FleetTransaction = {\n  __typename?: 'FleetTransaction';\n  action: TransactionAction;\n  amount: Scalars['Float']['output'];\n  currency: Scalars['String']['output'];\n  deductType?: Maybe<Scalars['String']['output']>;\n  description?: Maybe<Scalars['String']['output']>;\n  fleetId: Scalars['ID']['output'];\n  id: Scalars['ID']['output'];\n  operator?: Maybe<Operator>;\n  operatorId?: Maybe<Scalars['ID']['output']>;\n  rechargeType?: Maybe<Scalars['String']['output']>;\n  refrenceNumber?: Maybe<Scalars['String']['output']>;\n  requestId?: Maybe<Scalars['ID']['output']>;\n  transactionTimestamp: Scalars['DateTime']['output'];\n};\n\nexport type FleetTransactionAggregateFilter = {\n  and?: InputMaybe<Array<FleetTransactionAggregateFilter>>;\n  fleetId?: InputMaybe<IdFilterComparison>;\n  id?: InputMaybe<IdFilterComparison>;\n  operatorId?: InputMaybe<IdFilterComparison>;\n  or?: InputMaybe<Array<FleetTransactionAggregateFilter>>;\n  requestId?: InputMaybe<IdFilterComparison>;\n};\n\nexport type FleetTransactionConnection = {\n  __typename?: 'FleetTransactionConnection';\n  /** Array of nodes. */\n  nodes: Array<FleetTransaction>;\n  /** Paging information */\n  pageInfo: OffsetPageInfo;\n  /** Fetch total count of records */\n  totalCount: Scalars['Int']['output'];\n};\n\nexport type FleetTransactionFilter = {\n  and?: InputMaybe<Array<FleetTransactionFilter>>;\n  fleetId?: InputMaybe<IdFilterComparison>;\n  id?: InputMaybe<IdFilterComparison>;\n  operatorId?: InputMaybe<IdFilterComparison>;\n  or?: InputMaybe<Array<FleetTransactionFilter>>;\n  requestId?: InputMaybe<IdFilterComparison>;\n};\n\nexport type FleetTransactionInput = {\n  action: TransactionAction;\n  amount: Scalars['Float']['input'];\n  currency: Scalars['String']['input'];\n  deductType?: InputMaybe<Scalars['String']['input']>;\n  description?: InputMaybe<Scalars['String']['input']>;\n  fleetId: Scalars['ID']['input'];\n  rechargeType?: InputMaybe<Scalars['String']['input']>;\n  refrenceNumber?: InputMaybe<Scalars['String']['input']>;\n};\n\nexport type FleetTransactionSort = {\n  direction: SortDirection;\n  field: FleetTransactionSortFields;\n  nulls?: InputMaybe<SortNulls>;\n};\n\nexport enum FleetTransactionSortFields {\n  FleetId = 'fleetId',\n  Id = 'id',\n  OperatorId = 'operatorId',\n  RequestId = 'requestId'\n}\n\nexport type FleetTransactionsConnection = {\n  __typename?: 'FleetTransactionsConnection';\n  /** Array of nodes. */\n  nodes: Array<FleetTransaction>;\n  /** Paging information */\n  pageInfo: OffsetPageInfo;\n  /** Fetch total count of records */\n  totalCount: Scalars['Int']['output'];\n};\n\nexport type FleetWallet = {\n  __typename?: 'FleetWallet';\n  balance: Scalars['Float']['output'];\n  currency: Scalars['String']['output'];\n  fleet: Fleet;\n  fleetId: Scalars['ID']['output'];\n  id: Scalars['ID']['output'];\n};\n\nexport type FleetWalletConnection = {\n  __typename?: 'FleetWalletConnection';\n  /** Array of nodes. */\n  nodes: Array<FleetWallet>;\n  /** Paging information */\n  pageInfo: OffsetPageInfo;\n  /** Fetch total count of records */\n  totalCount: Scalars['Int']['output'];\n};\n\nexport type FleetWalletFilter = {\n  and?: InputMaybe<Array<FleetWalletFilter>>;\n  balance?: InputMaybe<FloatFieldComparison>;\n  currency?: InputMaybe<StringFieldComparison>;\n  fleetId?: InputMaybe<IdFilterComparison>;\n  id?: InputMaybe<IdFilterComparison>;\n  or?: InputMaybe<Array<FleetWalletFilter>>;\n};\n\nexport type FleetWalletSort = {\n  direction: SortDirection;\n  field: FleetWalletSortFields;\n  nulls?: InputMaybe<SortNulls>;\n};\n\nexport enum FleetWalletSortFields {\n  Balance = 'balance',\n  Currency = 'currency',\n  FleetId = 'fleetId',\n  Id = 'id'\n}\n\nexport type FleetZonePricesConnection = {\n  __typename?: 'FleetZonePricesConnection';\n  /** Array of nodes. */\n  nodes: Array<ZonePrice>;\n  /** Paging information */\n  pageInfo: OffsetPageInfo;\n  /** Fetch total count of records */\n  totalCount: Scalars['Int']['output'];\n};\n\nexport type FloatFieldComparison = {\n  between?: InputMaybe<FloatFieldComparisonBetween>;\n  eq?: InputMaybe<Scalars['Float']['input']>;\n  gt?: InputMaybe<Scalars['Float']['input']>;\n  gte?: InputMaybe<Scalars['Float']['input']>;\n  in?: InputMaybe<Array<Scalars['Float']['input']>>;\n  is?: InputMaybe<Scalars['Boolean']['input']>;\n  isNot?: InputMaybe<Scalars['Boolean']['input']>;\n  lt?: InputMaybe<Scalars['Float']['input']>;\n  lte?: InputMaybe<Scalars['Float']['input']>;\n  neq?: InputMaybe<Scalars['Float']['input']>;\n  notBetween?: InputMaybe<FloatFieldComparisonBetween>;\n  notIn?: InputMaybe<Array<Scalars['Float']['input']>>;\n};\n\nexport type FloatFieldComparisonBetween = {\n  lower: Scalars['Float']['input'];\n  upper: Scalars['Float']['input'];\n};\n\nexport enum Gender {\n  Female = 'Female',\n  Male = 'Male',\n  Unknown = 'Unknown'\n}\n\nexport type GiftBatch = {\n  __typename?: 'GiftBatch';\n  amount: Scalars['Float']['output'];\n  availableFrom?: Maybe<Scalars['DateTime']['output']>;\n  currency: Scalars['String']['output'];\n  expireAt?: Maybe<Scalars['DateTime']['output']>;\n  giftCodes: GiftBatchGiftCodesConnection;\n  giftCodesAggregate: Array<GiftBatchGiftCodesAggregateResponse>;\n  id: Scalars['ID']['output'];\n  name: Scalars['String']['output'];\n};\n\n\nexport type GiftBatchGiftCodesArgs = {\n  filter?: GiftCodeFilter;\n  paging?: OffsetPaging;\n  sorting?: Array<GiftCodeSort>;\n};\n\n\nexport type GiftBatchGiftCodesAggregateArgs = {\n  filter?: InputMaybe<GiftCodeAggregateFilter>;\n};\n\nexport type GiftBatchConnection = {\n  __typename?: 'GiftBatchConnection';\n  /** Array of nodes. */\n  nodes: Array<GiftBatch>;\n  /** Paging information */\n  pageInfo: OffsetPageInfo;\n  /** Fetch total count of records */\n  totalCount: Scalars['Int']['output'];\n};\n\nexport type GiftBatchFilter = {\n  and?: InputMaybe<Array<GiftBatchFilter>>;\n  id?: InputMaybe<IdFilterComparison>;\n  or?: InputMaybe<Array<GiftBatchFilter>>;\n};\n\nexport type GiftBatchGiftCodesAggregateGroupBy = {\n  __typename?: 'GiftBatchGiftCodesAggregateGroupBy';\n  id?: Maybe<Scalars['ID']['output']>;\n  usedAt?: Maybe<Scalars['DateTime']['output']>;\n};\n\nexport type GiftBatchGiftCodesAggregateResponse = {\n  __typename?: 'GiftBatchGiftCodesAggregateResponse';\n  avg?: Maybe<GiftBatchGiftCodesAvgAggregate>;\n  count?: Maybe<GiftBatchGiftCodesCountAggregate>;\n  groupBy?: Maybe<GiftBatchGiftCodesAggregateGroupBy>;\n  max?: Maybe<GiftBatchGiftCodesMaxAggregate>;\n  min?: Maybe<GiftBatchGiftCodesMinAggregate>;\n  sum?: Maybe<GiftBatchGiftCodesSumAggregate>;\n};\n\nexport type GiftBatchGiftCodesAvgAggregate = {\n  __typename?: 'GiftBatchGiftCodesAvgAggregate';\n  id?: Maybe<Scalars['Float']['output']>;\n};\n\nexport type GiftBatchGiftCodesConnection = {\n  __typename?: 'GiftBatchGiftCodesConnection';\n  /** Array of nodes. */\n  nodes: Array<GiftCode>;\n  /** Paging information */\n  pageInfo: OffsetPageInfo;\n  /** Fetch total count of records */\n  totalCount: Scalars['Int']['output'];\n};\n\nexport type GiftBatchGiftCodesCountAggregate = {\n  __typename?: 'GiftBatchGiftCodesCountAggregate';\n  id?: Maybe<Scalars['Int']['output']>;\n  usedAt?: Maybe<Scalars['Int']['output']>;\n};\n\nexport type GiftBatchGiftCodesMaxAggregate = {\n  __typename?: 'GiftBatchGiftCodesMaxAggregate';\n  id?: Maybe<Scalars['ID']['output']>;\n  usedAt?: Maybe<Scalars['DateTime']['output']>;\n};\n\nexport type GiftBatchGiftCodesMinAggregate = {\n  __typename?: 'GiftBatchGiftCodesMinAggregate';\n  id?: Maybe<Scalars['ID']['output']>;\n  usedAt?: Maybe<Scalars['DateTime']['output']>;\n};\n\nexport type GiftBatchGiftCodesSumAggregate = {\n  __typename?: 'GiftBatchGiftCodesSumAggregate';\n  id?: Maybe<Scalars['Float']['output']>;\n};\n\nexport type GiftBatchSort = {\n  direction: SortDirection;\n  field: GiftBatchSortFields;\n  nulls?: InputMaybe<SortNulls>;\n};\n\nexport enum GiftBatchSortFields {\n  Id = 'id'\n}\n\nexport type GiftCode = {\n  __typename?: 'GiftCode';\n  code: Scalars['String']['output'];\n  driverTransaction?: Maybe<DriverTransaction>;\n  giftId: Scalars['Float']['output'];\n  id: Scalars['ID']['output'];\n  riderTransaction?: Maybe<RiderTransaction>;\n  usedAt?: Maybe<Scalars['DateTime']['output']>;\n};\n\nexport type GiftCodeAggregateFilter = {\n  and?: InputMaybe<Array<GiftCodeAggregateFilter>>;\n  id?: InputMaybe<IdFilterComparison>;\n  or?: InputMaybe<Array<GiftCodeAggregateFilter>>;\n  usedAt?: InputMaybe<DateFieldComparison>;\n};\n\nexport type GiftCodeEdge = {\n  __typename?: 'GiftCodeEdge';\n  /** Cursor for this node. */\n  cursor: Scalars['ConnectionCursor']['output'];\n  /** The node containing the GiftCode */\n  node: GiftCode;\n};\n\nexport type GiftCodeFilter = {\n  and?: InputMaybe<Array<GiftCodeFilter>>;\n  id?: InputMaybe<IdFilterComparison>;\n  or?: InputMaybe<Array<GiftCodeFilter>>;\n  usedAt?: InputMaybe<DateFieldComparison>;\n};\n\nexport type GiftCodeSort = {\n  direction: SortDirection;\n  field: GiftCodeSortFields;\n  nulls?: InputMaybe<SortNulls>;\n};\n\nexport enum GiftCodeSortFields {\n  Id = 'id',\n  UsedAt = 'usedAt'\n}\n\n/** Group by */\nexport enum GroupBy {\n  Day = 'DAY',\n  Month = 'MONTH',\n  Week = 'WEEK',\n  Year = 'YEAR'\n}\n\nexport type IdFilterComparison = {\n  eq?: InputMaybe<Scalars['ID']['input']>;\n  gt?: InputMaybe<Scalars['ID']['input']>;\n  gte?: InputMaybe<Scalars['ID']['input']>;\n  iLike?: InputMaybe<Scalars['ID']['input']>;\n  in?: InputMaybe<Array<Scalars['ID']['input']>>;\n  is?: InputMaybe<Scalars['Boolean']['input']>;\n  isNot?: InputMaybe<Scalars['Boolean']['input']>;\n  like?: InputMaybe<Scalars['ID']['input']>;\n  lt?: InputMaybe<Scalars['ID']['input']>;\n  lte?: InputMaybe<Scalars['ID']['input']>;\n  neq?: InputMaybe<Scalars['ID']['input']>;\n  notILike?: InputMaybe<Scalars['ID']['input']>;\n  notIn?: InputMaybe<Array<Scalars['ID']['input']>>;\n  notLike?: InputMaybe<Scalars['ID']['input']>;\n};\n\nexport type IncomeResultItem = {\n  __typename?: 'IncomeResultItem';\n  currency: Scalars['String']['output'];\n  sum: Scalars['Float']['output'];\n  time: Scalars['String']['output'];\n};\n\nexport type ManualPayoutInput = {\n  description?: InputMaybe<Scalars['String']['input']>;\n  driverTransactionId: Scalars['ID']['input'];\n  transactionNumber: Scalars['String']['input'];\n};\n\nexport type Media = {\n  __typename?: 'Media';\n  address: Scalars['String']['output'];\n  base64?: Maybe<Scalars['String']['output']>;\n  id: Scalars['ID']['output'];\n};\n\nexport type MediaAggregateFilter = {\n  and?: InputMaybe<Array<MediaAggregateFilter>>;\n  id?: InputMaybe<IdFilterComparison>;\n  or?: InputMaybe<Array<MediaAggregateFilter>>;\n};\n\nexport type MediaEdge = {\n  __typename?: 'MediaEdge';\n  /** Cursor for this node. */\n  cursor: Scalars['ConnectionCursor']['output'];\n  /** The node containing the Media */\n  node: Media;\n};\n\nexport type MediaFilter = {\n  and?: InputMaybe<Array<MediaFilter>>;\n  id?: InputMaybe<IdFilterComparison>;\n  or?: InputMaybe<Array<MediaFilter>>;\n};\n\nexport type MediaSort = {\n  direction: SortDirection;\n  field: MediaSortFields;\n  nulls?: InputMaybe<SortNulls>;\n};\n\nexport enum MediaSortFields {\n  Id = 'id'\n}\n\nexport enum MessageStatus {\n  Delivered = 'Delivered',\n  Seen = 'Seen',\n  Sent = 'Sent'\n}\n\nexport type Mutation = {\n  __typename?: 'Mutation';\n  addEnabledServicesToDriver: Driver;\n  addFleetsToZonePrice: ZonePrice;\n  addOptionsToService: Service;\n  addRegionsToService: Service;\n  addServicesToZonePrice: ZonePrice;\n  assignDriverToOrder: Order;\n  cancelOrder: Order;\n  createDriverTransaction: DriverWallet;\n  createFleetTransaction: FleetWallet;\n  createGiftCardBatch: GiftBatch;\n  createManyComplaintActivities: Array<ComplaintActivity>;\n  createManySMSProviders: Array<SmsProvider>;\n  createOneAnnouncement: Announcement;\n  createOneCarColor: CarColor;\n  createOneCarModel: CarModel;\n  createOneComplaintActivity: ComplaintActivity;\n  createOneCoupon: Coupon;\n  createOneDriver: Driver;\n  createOneDriverTransaction: DriverTransaction;\n  createOneFeedbackParameter: FeedbackParameter;\n  createOneFleet: Fleet;\n  createOneOperator: Operator;\n  createOneOperatorRole: OperatorRole;\n  createOneOrderCancelReason: OrderCancelReason;\n  createOnePaymentGateway: PaymentGateway;\n  createOnePayoutMethod: PayoutMethod;\n  createOneProviderTransaction: ProviderTransaction;\n  createOneRegion: Region;\n  createOneReward: Reward;\n  createOneRider: Rider;\n  createOneRiderAddress: RiderAddress;\n  createOneRiderTransaction: RiderTransaction;\n  createOneSMSProvider: SmsProvider;\n  createOneSOSActivity: SosActivity;\n  createOneService: Service;\n  createOneServiceCategory: ServiceCategory;\n  createOneServiceOption: ServiceOption;\n  createOneZonePrice: ZonePrice;\n  createOrder: Order;\n  createPayoutSession: PayoutSession;\n  createRiderTransaction: RiderWallet;\n  deleteManySMSProviders: DeleteManyResponse;\n  deleteOneAnnouncement: AnnouncementDeleteResponse;\n  deleteOneCarColor: CarColorDeleteResponse;\n  deleteOneCarModel: CarModelDeleteResponse;\n  deleteOneCoupon: CouponDeleteResponse;\n  deleteOneDriver: Driver;\n  deleteOneFeedbackParameter: FeedbackParameterDeleteResponse;\n  deleteOneOrderCancelReason: OrderCancelReasonDeleteResponse;\n  deleteOnePayoutMethod: PayoutMethodDeleteResponse;\n  deleteOneRegion: RegionDeleteResponse;\n  deleteOneReward: RewardDeleteResponse;\n  deleteOneRider: Rider;\n  deleteOneSMSProvider: SmsProviderDeleteResponse;\n  deleteOneService: ServiceDeleteResponse;\n  deleteOneServiceCategory: ServiceCategoryDeleteResponse;\n  deleteOneServiceOption: ServiceOptionDeleteResponse;\n  deleteOneZonePrice: ZonePriceDeleteResponse;\n  disablePreviousServer: UpdateConfigResult;\n  exportGiftCardBatch: Scalars['String']['output'];\n  exportSessionToCsv: Scalars['String']['output'];\n  manualPayout: DriverTransaction;\n  markSMSProviderAsDefault: SmsProvider;\n  runAutoPayout: Scalars['Boolean']['output'];\n  saveConfiguration: CurrentConfiguration;\n  setEnabledServicesOnDriver: Driver;\n  setFleetsOnZonePrice: ZonePrice;\n  setOptionsOnService: Service;\n  setRegionsOnService: Service;\n  setServicesOnZonePrice: ZonePrice;\n  updateFirebase: UpdateConfigResult;\n  updateManyRiderAddresses: UpdateManyResponse;\n  updateManySMSProviders: UpdateManyResponse;\n  updateMapsAPIKey: UpdateConfigResult;\n  updateOneAnnouncement: Announcement;\n  updateOneCarColor: CarColor;\n  updateOneCarModel: CarModel;\n  updateOneComplaint: Complaint;\n  updateOneCoupon: Coupon;\n  updateOneDriver: Driver;\n  updateOneFeedback: Feedback;\n  updateOneFeedbackParameter: FeedbackParameter;\n  updateOneFleet: Fleet;\n  updateOneOperator: Operator;\n  updateOneOperatorRole: OperatorRole;\n  updateOneOrderCancelReason: OrderCancelReason;\n  updateOnePaymentGateway: PaymentGateway;\n  updateOnePayoutMethod: PayoutMethod;\n  updateOneRegion: Region;\n  updateOneReward: Reward;\n  updateOneRider: Rider;\n  updateOneRiderAddress: RiderAddress;\n  updateOneSMSProvider: SmsProvider;\n  updateOneService: Service;\n  updateOneServiceCategory: ServiceCategory;\n  updateOneServiceOption: ServiceOption;\n  updateOneZonePrice: ZonePrice;\n  updatePassword: Operator;\n  updatePayoutSession: PayoutSession;\n  updatePurchaseCode: UpdatePurchaseCodeResult;\n};\n\n\nexport type MutationAddEnabledServicesToDriverArgs = {\n  input: AddEnabledServicesToDriverInput;\n};\n\n\nexport type MutationAddFleetsToZonePriceArgs = {\n  input: AddFleetsToZonePriceInput;\n};\n\n\nexport type MutationAddOptionsToServiceArgs = {\n  input: AddOptionsToServiceInput;\n};\n\n\nexport type MutationAddRegionsToServiceArgs = {\n  input: AddRegionsToServiceInput;\n};\n\n\nexport type MutationAddServicesToZonePriceArgs = {\n  input: AddServicesToZonePriceInput;\n};\n\n\nexport type MutationAssignDriverToOrderArgs = {\n  driverId: Scalars['ID']['input'];\n  orderId: Scalars['ID']['input'];\n};\n\n\nexport type MutationCancelOrderArgs = {\n  orderId: Scalars['ID']['input'];\n};\n\n\nexport type MutationCreateDriverTransactionArgs = {\n  input: DriverTransactionInput;\n};\n\n\nexport type MutationCreateFleetTransactionArgs = {\n  input: FleetTransactionInput;\n};\n\n\nexport type MutationCreateGiftCardBatchArgs = {\n  input: CreateGiftBatchInput;\n};\n\n\nexport type MutationCreateManyComplaintActivitiesArgs = {\n  input: CreateManyComplaintActivitiesInput;\n};\n\n\nexport type MutationCreateManySmsProvidersArgs = {\n  input: CreateManySmsProvidersInput;\n};\n\n\nexport type MutationCreateOneAnnouncementArgs = {\n  input: CreateOneAnnouncementInput;\n};\n\n\nexport type MutationCreateOneCarColorArgs = {\n  input: CreateOneCarColorInput;\n};\n\n\nexport type MutationCreateOneCarModelArgs = {\n  input: CreateOneCarModelInput;\n};\n\n\nexport type MutationCreateOneComplaintActivityArgs = {\n  input: CreateOneComplaintActivityInput;\n};\n\n\nexport type MutationCreateOneCouponArgs = {\n  input: CreateOneCouponInput;\n};\n\n\nexport type MutationCreateOneDriverArgs = {\n  input: CreateOneDriverInput;\n};\n\n\nexport type MutationCreateOneDriverTransactionArgs = {\n  input: CreateOneDriverTransactionInput;\n};\n\n\nexport type MutationCreateOneFeedbackParameterArgs = {\n  input: CreateOneFeedbackParameterInput;\n};\n\n\nexport type MutationCreateOneFleetArgs = {\n  input: CreateOneFleetInput;\n};\n\n\nexport type MutationCreateOneOperatorArgs = {\n  input: CreateOneOperatorInput;\n};\n\n\nexport type MutationCreateOneOperatorRoleArgs = {\n  input: CreateOneOperatorRoleInput;\n};\n\n\nexport type MutationCreateOneOrderCancelReasonArgs = {\n  input: CreateOneOrderCancelReasonInput;\n};\n\n\nexport type MutationCreateOnePaymentGatewayArgs = {\n  input: CreateOnePaymentGatewayInput;\n};\n\n\nexport type MutationCreateOnePayoutMethodArgs = {\n  input: CreateOnePayoutMethodInput;\n};\n\n\nexport type MutationCreateOneProviderTransactionArgs = {\n  input: CreateOneProviderTransactionInput;\n};\n\n\nexport type MutationCreateOneRegionArgs = {\n  input: CreateOneRegionInput;\n};\n\n\nexport type MutationCreateOneRewardArgs = {\n  input: CreateOneRewardInput;\n};\n\n\nexport type MutationCreateOneRiderArgs = {\n  input: CreateOneRiderInput;\n};\n\n\nexport type MutationCreateOneRiderAddressArgs = {\n  input: CreateOneRiderAddressInput;\n};\n\n\nexport type MutationCreateOneRiderTransactionArgs = {\n  input: CreateOneRiderTransactionInput;\n};\n\n\nexport type MutationCreateOneSmsProviderArgs = {\n  input: CreateOneSmsProviderInput;\n};\n\n\nexport type MutationCreateOneSosActivityArgs = {\n  input: CreateOneSosActivityInput;\n};\n\n\nexport type MutationCreateOneServiceArgs = {\n  input: CreateOneServiceInput;\n};\n\n\nexport type MutationCreateOneServiceCategoryArgs = {\n  input: CreateOneServiceCategoryInput;\n};\n\n\nexport type MutationCreateOneServiceOptionArgs = {\n  input: CreateOneServiceOptionInput;\n};\n\n\nexport type MutationCreateOneZonePriceArgs = {\n  input: CreateOneZonePriceInput;\n};\n\n\nexport type MutationCreateOrderArgs = {\n  input: CreateOrderInput;\n};\n\n\nexport type MutationCreatePayoutSessionArgs = {\n  input: CreatePayoutSessionInput;\n};\n\n\nexport type MutationCreateRiderTransactionArgs = {\n  input: RiderTransactionInput;\n};\n\n\nexport type MutationDeleteManySmsProvidersArgs = {\n  input: DeleteManySmsProvidersInput;\n};\n\n\nexport type MutationDeleteOneAnnouncementArgs = {\n  input: DeleteOneAnnouncementInput;\n};\n\n\nexport type MutationDeleteOneCarColorArgs = {\n  input: DeleteOneCarColorInput;\n};\n\n\nexport type MutationDeleteOneCarModelArgs = {\n  input: DeleteOneCarModelInput;\n};\n\n\nexport type MutationDeleteOneCouponArgs = {\n  input: DeleteOneCouponInput;\n};\n\n\nexport type MutationDeleteOneDriverArgs = {\n  id: Scalars['ID']['input'];\n};\n\n\nexport type MutationDeleteOneFeedbackParameterArgs = {\n  input: DeleteOneFeedbackParameterInput;\n};\n\n\nexport type MutationDeleteOneOrderCancelReasonArgs = {\n  input: DeleteOneOrderCancelReasonInput;\n};\n\n\nexport type MutationDeleteOnePayoutMethodArgs = {\n  input: DeleteOnePayoutMethodInput;\n};\n\n\nexport type MutationDeleteOneRegionArgs = {\n  input: DeleteOneRegionInput;\n};\n\n\nexport type MutationDeleteOneRewardArgs = {\n  input: DeleteOneRewardInput;\n};\n\n\nexport type MutationDeleteOneRiderArgs = {\n  id: Scalars['ID']['input'];\n};\n\n\nexport type MutationDeleteOneSmsProviderArgs = {\n  input: DeleteOneSmsProviderInput;\n};\n\n\nexport type MutationDeleteOneServiceArgs = {\n  input: DeleteOneServiceInput;\n};\n\n\nexport type MutationDeleteOneServiceCategoryArgs = {\n  input: DeleteOneServiceCategoryInput;\n};\n\n\nexport type MutationDeleteOneServiceOptionArgs = {\n  input: DeleteOneServiceOptionInput;\n};\n\n\nexport type MutationDeleteOneZonePriceArgs = {\n  input: DeleteOneZonePriceInput;\n};\n\n\nexport type MutationDisablePreviousServerArgs = {\n  ip: Scalars['String']['input'];\n};\n\n\nexport type MutationExportGiftCardBatchArgs = {\n  batchId: Scalars['ID']['input'];\n};\n\n\nexport type MutationExportSessionToCsvArgs = {\n  input: ExportSessionToCsvInput;\n};\n\n\nexport type MutationManualPayoutArgs = {\n  input: ManualPayoutInput;\n};\n\n\nexport type MutationMarkSmsProviderAsDefaultArgs = {\n  id: Scalars['ID']['input'];\n};\n\n\nexport type MutationRunAutoPayoutArgs = {\n  input: RunAutoPayoutInput;\n};\n\n\nexport type MutationSaveConfigurationArgs = {\n  input: UpdateConfigInput;\n};\n\n\nexport type MutationSetEnabledServicesOnDriverArgs = {\n  input: SetEnabledServicesOnDriverInput;\n};\n\n\nexport type MutationSetFleetsOnZonePriceArgs = {\n  input: SetFleetsOnZonePriceInput;\n};\n\n\nexport type MutationSetOptionsOnServiceArgs = {\n  input: SetOptionsOnServiceInput;\n};\n\n\nexport type MutationSetRegionsOnServiceArgs = {\n  input: SetRegionsOnServiceInput;\n};\n\n\nexport type MutationSetServicesOnZonePriceArgs = {\n  input: SetServicesOnZonePriceInput;\n};\n\n\nexport type MutationUpdateFirebaseArgs = {\n  keyFileName: Scalars['String']['input'];\n};\n\n\nexport type MutationUpdateManyRiderAddressesArgs = {\n  input: UpdateManyRiderAddressesInput;\n};\n\n\nexport type MutationUpdateManySmsProvidersArgs = {\n  input: UpdateManySmsProvidersInput;\n};\n\n\nexport type MutationUpdateMapsApiKeyArgs = {\n  adminPanel: Scalars['String']['input'];\n  backend: Scalars['String']['input'];\n};\n\n\nexport type MutationUpdateOneAnnouncementArgs = {\n  input: UpdateOneAnnouncementInput;\n};\n\n\nexport type MutationUpdateOneCarColorArgs = {\n  input: UpdateOneCarColorInput;\n};\n\n\nexport type MutationUpdateOneCarModelArgs = {\n  input: UpdateOneCarModelInput;\n};\n\n\nexport type MutationUpdateOneComplaintArgs = {\n  input: UpdateOneComplaintInput;\n};\n\n\nexport type MutationUpdateOneCouponArgs = {\n  input: UpdateOneCouponInput;\n};\n\n\nexport type MutationUpdateOneDriverArgs = {\n  input: UpdateOneDriverInput;\n};\n\n\nexport type MutationUpdateOneFeedbackArgs = {\n  input: UpdateOneFeedbackInput;\n};\n\n\nexport type MutationUpdateOneFeedbackParameterArgs = {\n  input: UpdateOneFeedbackParameterInput;\n};\n\n\nexport type MutationUpdateOneFleetArgs = {\n  input: UpdateOneFleetInput;\n};\n\n\nexport type MutationUpdateOneOperatorArgs = {\n  input: UpdateOneOperatorInput;\n};\n\n\nexport type MutationUpdateOneOperatorRoleArgs = {\n  input: UpdateOneOperatorRoleInput;\n};\n\n\nexport type MutationUpdateOneOrderCancelReasonArgs = {\n  input: UpdateOneOrderCancelReasonInput;\n};\n\n\nexport type MutationUpdateOnePaymentGatewayArgs = {\n  input: UpdateOnePaymentGatewayInput;\n};\n\n\nexport type MutationUpdateOnePayoutMethodArgs = {\n  input: UpdateOnePayoutMethodInput;\n};\n\n\nexport type MutationUpdateOneRegionArgs = {\n  input: UpdateOneRegionInput;\n};\n\n\nexport type MutationUpdateOneRewardArgs = {\n  input: UpdateOneRewardInput;\n};\n\n\nexport type MutationUpdateOneRiderArgs = {\n  input: UpdateOneRiderInput;\n};\n\n\nexport type MutationUpdateOneRiderAddressArgs = {\n  input: UpdateOneRiderAddressInput;\n};\n\n\nexport type MutationUpdateOneSmsProviderArgs = {\n  input: UpdateOneSmsProviderInput;\n};\n\n\nexport type MutationUpdateOneServiceArgs = {\n  input: UpdateOneServiceInput;\n};\n\n\nexport type MutationUpdateOneServiceCategoryArgs = {\n  input: UpdateOneServiceCategoryInput;\n};\n\n\nexport type MutationUpdateOneServiceOptionArgs = {\n  input: UpdateOneServiceOptionInput;\n};\n\n\nexport type MutationUpdateOneZonePriceArgs = {\n  input: UpdateOneZonePriceInput;\n};\n\n\nexport type MutationUpdatePasswordArgs = {\n  input: UpdatePasswordInput;\n};\n\n\nexport type MutationUpdatePayoutSessionArgs = {\n  id: Scalars['ID']['input'];\n  input: UpdatePayoutSessionInput;\n};\n\n\nexport type MutationUpdatePurchaseCodeArgs = {\n  email?: InputMaybe<Scalars['String']['input']>;\n  purchaseCode: Scalars['String']['input'];\n};\n\nexport type NumberFieldComparison = {\n  between?: InputMaybe<NumberFieldComparisonBetween>;\n  eq?: InputMaybe<Scalars['Float']['input']>;\n  gt?: InputMaybe<Scalars['Float']['input']>;\n  gte?: InputMaybe<Scalars['Float']['input']>;\n  in?: InputMaybe<Array<Scalars['Float']['input']>>;\n  is?: InputMaybe<Scalars['Boolean']['input']>;\n  isNot?: InputMaybe<Scalars['Boolean']['input']>;\n  lt?: InputMaybe<Scalars['Float']['input']>;\n  lte?: InputMaybe<Scalars['Float']['input']>;\n  neq?: InputMaybe<Scalars['Float']['input']>;\n  notBetween?: InputMaybe<NumberFieldComparisonBetween>;\n  notIn?: InputMaybe<Array<Scalars['Float']['input']>>;\n};\n\nexport type NumberFieldComparisonBetween = {\n  lower: Scalars['Float']['input'];\n  upper: Scalars['Float']['input'];\n};\n\nexport type OffsetPageInfo = {\n  __typename?: 'OffsetPageInfo';\n  /** true if paging forward and there are more records. */\n  hasNextPage?: Maybe<Scalars['Boolean']['output']>;\n  /** true if paging backwards and there are more records. */\n  hasPreviousPage?: Maybe<Scalars['Boolean']['output']>;\n};\n\nexport type OffsetPaging = {\n  /** Limit the number of records returned */\n  limit?: InputMaybe<Scalars['Int']['input']>;\n  /** Offset to start returning records from */\n  offset?: InputMaybe<Scalars['Int']['input']>;\n};\n\nexport type OnlineDriver = {\n  __typename?: 'OnlineDriver';\n  driverId: Scalars['Float']['output'];\n  lastUpdatedAt: Scalars['Float']['output'];\n  location: Point;\n};\n\nexport type OnlineDriverWithData = {\n  __typename?: 'OnlineDriverWithData';\n  firstName?: Maybe<Scalars['String']['output']>;\n  gender?: Maybe<Gender>;\n  id: Scalars['Float']['output'];\n  lastName?: Maybe<Scalars['String']['output']>;\n  lastUpdatedAt: Scalars['Float']['output'];\n  location: Point;\n  mobileNumber: Scalars['String']['output'];\n  rating?: Maybe<Scalars['Float']['output']>;\n  reviewCount: Scalars['Float']['output'];\n  status: DriverStatus;\n};\n\nexport type Operator = {\n  __typename?: 'Operator';\n  email?: Maybe<Scalars['String']['output']>;\n  firstName?: Maybe<Scalars['String']['output']>;\n  id: Scalars['ID']['output'];\n  lastName?: Maybe<Scalars['String']['output']>;\n  mobileNumber?: Maybe<Scalars['String']['output']>;\n  role?: Maybe<OperatorRole>;\n  roleId?: Maybe<Scalars['ID']['output']>;\n  userName: Scalars['String']['output'];\n};\n\nexport type OperatorConnection = {\n  __typename?: 'OperatorConnection';\n  /** Array of nodes. */\n  nodes: Array<Operator>;\n  /** Paging information */\n  pageInfo: OffsetPageInfo;\n  /** Fetch total count of records */\n  totalCount: Scalars['Int']['output'];\n};\n\nexport type OperatorFilter = {\n  and?: InputMaybe<Array<OperatorFilter>>;\n  id?: InputMaybe<IdFilterComparison>;\n  or?: InputMaybe<Array<OperatorFilter>>;\n};\n\nexport enum OperatorPermission {\n  AnnouncementsEdit = 'Announcements_Edit',\n  AnnouncementsView = 'Announcements_View',\n  CarsEdit = 'Cars_Edit',\n  CarsView = 'Cars_View',\n  ComplaintsEdit = 'Complaints_Edit',\n  ComplaintsView = 'Complaints_View',\n  CouponsEdit = 'Coupons_Edit',\n  CouponsView = 'Coupons_View',\n  DriverWalletEdit = 'DriverWallet_Edit',\n  DriverWalletView = 'DriverWallet_View',\n  DriversEdit = 'Drivers_Edit',\n  DriversView = 'Drivers_View',\n  FleetWalletEdit = 'FleetWallet_Edit',\n  FleetWalletView = 'FleetWallet_View',\n  FleetsEdit = 'Fleets_Edit',\n  FleetsView = 'Fleets_View',\n  GatewaysEdit = 'Gateways_Edit',\n  GatewaysView = 'Gateways_View',\n  GiftBatchCreate = 'GiftBatch_Create',\n  GiftBatchView = 'GiftBatch_View',\n  GiftBatchViewCodes = 'GiftBatch_ViewCodes',\n  PayoutsEdit = 'Payouts_Edit',\n  PayoutsView = 'Payouts_View',\n  ProviderWalletEdit = 'ProviderWallet_Edit',\n  ProviderWalletView = 'ProviderWallet_View',\n  RegionsEdit = 'Regions_Edit',\n  RegionsView = 'Regions_View',\n  RequestsView = 'Requests_View',\n  ReviewParameterEdit = 'ReviewParameter_Edit',\n  RiderWalletEdit = 'RiderWallet_Edit',\n  RiderWalletView = 'RiderWallet_View',\n  RidersEdit = 'Riders_Edit',\n  RidersView = 'Riders_View',\n  SmsProvidersEdit = 'SMSProviders_Edit',\n  SmsProvidersView = 'SMSProviders_View',\n  ServicesEdit = 'Services_Edit',\n  ServicesView = 'Services_View',\n  UsersEdit = 'Users_Edit',\n  UsersView = 'Users_View'\n}\n\nexport type OperatorRole = {\n  __typename?: 'OperatorRole';\n  id: Scalars['ID']['output'];\n  permissions: Array<OperatorPermission>;\n  title: Scalars['String']['output'];\n};\n\nexport type OperatorRoleFilter = {\n  and?: InputMaybe<Array<OperatorRoleFilter>>;\n  id?: InputMaybe<IdFilterComparison>;\n  or?: InputMaybe<Array<OperatorRoleFilter>>;\n};\n\nexport type OperatorRoleInput = {\n  permissions: Array<OperatorPermission>;\n  title: Scalars['String']['input'];\n};\n\nexport type OperatorRoleSort = {\n  direction: SortDirection;\n  field: OperatorRoleSortFields;\n  nulls?: InputMaybe<SortNulls>;\n};\n\nexport enum OperatorRoleSortFields {\n  Id = 'id'\n}\n\nexport type OperatorSort = {\n  direction: SortDirection;\n  field: OperatorSortFields;\n  nulls?: InputMaybe<SortNulls>;\n};\n\nexport enum OperatorSortFields {\n  Id = 'id'\n}\n\nexport type Order = {\n  __typename?: 'Order';\n  activities: Array<RequestActivity>;\n  activitiesAggregate: Array<OrderActivitiesAggregateResponse>;\n  addresses: Array<Scalars['String']['output']>;\n  complaints: Array<Complaint>;\n  complaintsAggregate: Array<OrderComplaintsAggregateResponse>;\n  conversations: Array<OrderMessage>;\n  conversationsAggregate: Array<OrderConversationsAggregateResponse>;\n  costAfterCoupon: Scalars['Float']['output'];\n  costBest: Scalars['Float']['output'];\n  coupon?: Maybe<Coupon>;\n  createdOn: Scalars['DateTime']['output'];\n  currency: Scalars['String']['output'];\n  destinationArrivedTo: Scalars['Int']['output'];\n  distanceBest: Scalars['Int']['output'];\n  driver?: Maybe<Driver>;\n  driverId?: Maybe<Scalars['ID']['output']>;\n  driverTransactions: Array<DriverTransaction>;\n  driverTransactionsAggregate: Array<OrderDriverTransactionsAggregateResponse>;\n  durationBest: Scalars['Int']['output'];\n  expectedTimestamp?: Maybe<Scalars['DateTime']['output']>;\n  finishTimestamp?: Maybe<Scalars['DateTime']['output']>;\n  fleetTransactions: Array<FleetTransaction>;\n  fleetTransactionsAggregate: Array<OrderFleetTransactionsAggregateResponse>;\n  id: Scalars['ID']['output'];\n  points: Array<Point>;\n  providerTransactions: Array<ProviderTransaction>;\n  providerTransactionsAggregate: Array<OrderProviderTransactionsAggregateResponse>;\n  rider?: Maybe<Rider>;\n  riderId: Scalars['ID']['output'];\n  riderTransactions: Array<RiderTransaction>;\n  riderTransactionsAggregate: Array<OrderRiderTransactionsAggregateResponse>;\n  service?: Maybe<Service>;\n  startTimestamp?: Maybe<Scalars['DateTime']['output']>;\n  status: OrderStatus;\n  waitMinutes: Scalars['Float']['output'];\n};\n\n\nexport type OrderActivitiesArgs = {\n  filter?: RequestActivityFilter;\n  sorting?: Array<RequestActivitySort>;\n};\n\n\nexport type OrderActivitiesAggregateArgs = {\n  filter?: InputMaybe<RequestActivityAggregateFilter>;\n};\n\n\nexport type OrderComplaintsArgs = {\n  filter?: ComplaintFilter;\n  sorting?: Array<ComplaintSort>;\n};\n\n\nexport type OrderComplaintsAggregateArgs = {\n  filter?: InputMaybe<ComplaintAggregateFilter>;\n};\n\n\nexport type OrderConversationsArgs = {\n  filter?: OrderMessageFilter;\n  sorting?: Array<OrderMessageSort>;\n};\n\n\nexport type OrderConversationsAggregateArgs = {\n  filter?: InputMaybe<OrderMessageAggregateFilter>;\n};\n\n\nexport type OrderDriverTransactionsArgs = {\n  filter?: DriverTransactionFilter;\n  sorting?: Array<DriverTransactionSort>;\n};\n\n\nexport type OrderDriverTransactionsAggregateArgs = {\n  filter?: InputMaybe<DriverTransactionAggregateFilter>;\n};\n\n\nexport type OrderFleetTransactionsArgs = {\n  filter?: FleetTransactionFilter;\n  sorting?: Array<FleetTransactionSort>;\n};\n\n\nexport type OrderFleetTransactionsAggregateArgs = {\n  filter?: InputMaybe<FleetTransactionAggregateFilter>;\n};\n\n\nexport type OrderProviderTransactionsArgs = {\n  filter?: ProviderTransactionFilter;\n  sorting?: Array<ProviderTransactionSort>;\n};\n\n\nexport type OrderProviderTransactionsAggregateArgs = {\n  filter?: InputMaybe<ProviderTransactionAggregateFilter>;\n};\n\n\nexport type OrderRiderTransactionsArgs = {\n  filter?: RiderTransactionFilter;\n  sorting?: Array<RiderTransactionSort>;\n};\n\n\nexport type OrderRiderTransactionsAggregateArgs = {\n  filter?: InputMaybe<RiderTransactionAggregateFilter>;\n};\n\nexport type OrderActivitiesAggregateGroupBy = {\n  __typename?: 'OrderActivitiesAggregateGroupBy';\n  id?: Maybe<Scalars['ID']['output']>;\n};\n\nexport type OrderActivitiesAggregateResponse = {\n  __typename?: 'OrderActivitiesAggregateResponse';\n  avg?: Maybe<OrderActivitiesAvgAggregate>;\n  count?: Maybe<OrderActivitiesCountAggregate>;\n  groupBy?: Maybe<OrderActivitiesAggregateGroupBy>;\n  max?: Maybe<OrderActivitiesMaxAggregate>;\n  min?: Maybe<OrderActivitiesMinAggregate>;\n  sum?: Maybe<OrderActivitiesSumAggregate>;\n};\n\nexport type OrderActivitiesAvgAggregate = {\n  __typename?: 'OrderActivitiesAvgAggregate';\n  id?: Maybe<Scalars['Float']['output']>;\n};\n\nexport type OrderActivitiesCountAggregate = {\n  __typename?: 'OrderActivitiesCountAggregate';\n  id?: Maybe<Scalars['Int']['output']>;\n};\n\nexport type OrderActivitiesMaxAggregate = {\n  __typename?: 'OrderActivitiesMaxAggregate';\n  id?: Maybe<Scalars['ID']['output']>;\n};\n\nexport type OrderActivitiesMinAggregate = {\n  __typename?: 'OrderActivitiesMinAggregate';\n  id?: Maybe<Scalars['ID']['output']>;\n};\n\nexport type OrderActivitiesSumAggregate = {\n  __typename?: 'OrderActivitiesSumAggregate';\n  id?: Maybe<Scalars['Float']['output']>;\n};\n\nexport type OrderAggregateFilter = {\n  and?: InputMaybe<Array<OrderAggregateFilter>>;\n  createdOn?: InputMaybe<DateFieldComparison>;\n  driverId?: InputMaybe<IdFilterComparison>;\n  id?: InputMaybe<IdFilterComparison>;\n  or?: InputMaybe<Array<OrderAggregateFilter>>;\n  riderId?: InputMaybe<IdFilterComparison>;\n  status?: InputMaybe<OrderStatusFilterComparison>;\n};\n\nexport type OrderAggregateGroupBy = {\n  __typename?: 'OrderAggregateGroupBy';\n  createdOn?: Maybe<Scalars['DateTime']['output']>;\n  driverId?: Maybe<Scalars['ID']['output']>;\n  id?: Maybe<Scalars['ID']['output']>;\n  riderId?: Maybe<Scalars['ID']['output']>;\n  status?: Maybe<OrderStatus>;\n};\n\n\nexport type OrderAggregateGroupByCreatedOnArgs = {\n  by?: GroupBy;\n};\n\nexport type OrderAggregateResponse = {\n  __typename?: 'OrderAggregateResponse';\n  avg?: Maybe<OrderAvgAggregate>;\n  count?: Maybe<OrderCountAggregate>;\n  groupBy?: Maybe<OrderAggregateGroupBy>;\n  max?: Maybe<OrderMaxAggregate>;\n  min?: Maybe<OrderMinAggregate>;\n  sum?: Maybe<OrderSumAggregate>;\n};\n\nexport type OrderAvgAggregate = {\n  __typename?: 'OrderAvgAggregate';\n  driverId?: Maybe<Scalars['Float']['output']>;\n  id?: Maybe<Scalars['Float']['output']>;\n  riderId?: Maybe<Scalars['Float']['output']>;\n};\n\nexport type OrderCancelReason = {\n  __typename?: 'OrderCancelReason';\n  id: Scalars['ID']['output'];\n  isEnabled: Scalars['Boolean']['output'];\n  title: Scalars['String']['output'];\n  userType: AnnouncementUserType;\n};\n\nexport type OrderCancelReasonConnection = {\n  __typename?: 'OrderCancelReasonConnection';\n  /** Array of nodes. */\n  nodes: Array<OrderCancelReason>;\n  /** Paging information */\n  pageInfo: OffsetPageInfo;\n  /** Fetch total count of records */\n  totalCount: Scalars['Int']['output'];\n};\n\nexport type OrderCancelReasonDeleteResponse = {\n  __typename?: 'OrderCancelReasonDeleteResponse';\n  id?: Maybe<Scalars['ID']['output']>;\n  isEnabled?: Maybe<Scalars['Boolean']['output']>;\n  title?: Maybe<Scalars['String']['output']>;\n  userType?: Maybe<AnnouncementUserType>;\n};\n\nexport type OrderCancelReasonFilter = {\n  and?: InputMaybe<Array<OrderCancelReasonFilter>>;\n  id?: InputMaybe<IdFilterComparison>;\n  or?: InputMaybe<Array<OrderCancelReasonFilter>>;\n};\n\nexport type OrderCancelReasonInput = {\n  isEnabled?: InputMaybe<Scalars['Boolean']['input']>;\n  title?: InputMaybe<Scalars['String']['input']>;\n  userType?: InputMaybe<AnnouncementUserType>;\n};\n\nexport type OrderCancelReasonSort = {\n  direction: SortDirection;\n  field: OrderCancelReasonSortFields;\n  nulls?: InputMaybe<SortNulls>;\n};\n\nexport enum OrderCancelReasonSortFields {\n  Id = 'id'\n}\n\nexport type OrderComplaintsAggregateGroupBy = {\n  __typename?: 'OrderComplaintsAggregateGroupBy';\n  id?: Maybe<Scalars['ID']['output']>;\n  requestId?: Maybe<Scalars['ID']['output']>;\n  status?: Maybe<ComplaintStatus>;\n};\n\nexport type OrderComplaintsAggregateResponse = {\n  __typename?: 'OrderComplaintsAggregateResponse';\n  avg?: Maybe<OrderComplaintsAvgAggregate>;\n  count?: Maybe<OrderComplaintsCountAggregate>;\n  groupBy?: Maybe<OrderComplaintsAggregateGroupBy>;\n  max?: Maybe<OrderComplaintsMaxAggregate>;\n  min?: Maybe<OrderComplaintsMinAggregate>;\n  sum?: Maybe<OrderComplaintsSumAggregate>;\n};\n\nexport type OrderComplaintsAvgAggregate = {\n  __typename?: 'OrderComplaintsAvgAggregate';\n  id?: Maybe<Scalars['Float']['output']>;\n  requestId?: Maybe<Scalars['Float']['output']>;\n};\n\nexport type OrderComplaintsCountAggregate = {\n  __typename?: 'OrderComplaintsCountAggregate';\n  id?: Maybe<Scalars['Int']['output']>;\n  requestId?: Maybe<Scalars['Int']['output']>;\n  status?: Maybe<Scalars['Int']['output']>;\n};\n\nexport type OrderComplaintsMaxAggregate = {\n  __typename?: 'OrderComplaintsMaxAggregate';\n  id?: Maybe<Scalars['ID']['output']>;\n  requestId?: Maybe<Scalars['ID']['output']>;\n  status?: Maybe<ComplaintStatus>;\n};\n\nexport type OrderComplaintsMinAggregate = {\n  __typename?: 'OrderComplaintsMinAggregate';\n  id?: Maybe<Scalars['ID']['output']>;\n  requestId?: Maybe<Scalars['ID']['output']>;\n  status?: Maybe<ComplaintStatus>;\n};\n\nexport type OrderComplaintsSumAggregate = {\n  __typename?: 'OrderComplaintsSumAggregate';\n  id?: Maybe<Scalars['Float']['output']>;\n  requestId?: Maybe<Scalars['Float']['output']>;\n};\n\nexport type OrderConnection = {\n  __typename?: 'OrderConnection';\n  /** Array of nodes. */\n  nodes: Array<Order>;\n  /** Paging information */\n  pageInfo: OffsetPageInfo;\n  /** Fetch total count of records */\n  totalCount: Scalars['Int']['output'];\n};\n\nexport type OrderConversationsAggregateGroupBy = {\n  __typename?: 'OrderConversationsAggregateGroupBy';\n  id?: Maybe<Scalars['ID']['output']>;\n};\n\nexport type OrderConversationsAggregateResponse = {\n  __typename?: 'OrderConversationsAggregateResponse';\n  avg?: Maybe<OrderConversationsAvgAggregate>;\n  count?: Maybe<OrderConversationsCountAggregate>;\n  groupBy?: Maybe<OrderConversationsAggregateGroupBy>;\n  max?: Maybe<OrderConversationsMaxAggregate>;\n  min?: Maybe<OrderConversationsMinAggregate>;\n  sum?: Maybe<OrderConversationsSumAggregate>;\n};\n\nexport type OrderConversationsAvgAggregate = {\n  __typename?: 'OrderConversationsAvgAggregate';\n  id?: Maybe<Scalars['Float']['output']>;\n};\n\nexport type OrderConversationsCountAggregate = {\n  __typename?: 'OrderConversationsCountAggregate';\n  id?: Maybe<Scalars['Int']['output']>;\n};\n\nexport type OrderConversationsMaxAggregate = {\n  __typename?: 'OrderConversationsMaxAggregate';\n  id?: Maybe<Scalars['ID']['output']>;\n};\n\nexport type OrderConversationsMinAggregate = {\n  __typename?: 'OrderConversationsMinAggregate';\n  id?: Maybe<Scalars['ID']['output']>;\n};\n\nexport type OrderConversationsSumAggregate = {\n  __typename?: 'OrderConversationsSumAggregate';\n  id?: Maybe<Scalars['Float']['output']>;\n};\n\nexport type OrderCountAggregate = {\n  __typename?: 'OrderCountAggregate';\n  createdOn?: Maybe<Scalars['Int']['output']>;\n  driverId?: Maybe<Scalars['Int']['output']>;\n  id?: Maybe<Scalars['Int']['output']>;\n  riderId?: Maybe<Scalars['Int']['output']>;\n  status?: Maybe<Scalars['Int']['output']>;\n};\n\nexport type OrderDriverTransactionsAggregateGroupBy = {\n  __typename?: 'OrderDriverTransactionsAggregateGroupBy';\n  amount?: Maybe<Scalars['Float']['output']>;\n  createdAt?: Maybe<Scalars['DateTime']['output']>;\n  driverId?: Maybe<Scalars['ID']['output']>;\n  id?: Maybe<Scalars['ID']['output']>;\n  paymentGatewayId?: Maybe<Scalars['ID']['output']>;\n  payoutAccountId?: Maybe<Scalars['ID']['output']>;\n  payoutMethodId?: Maybe<Scalars['ID']['output']>;\n  payoutSessionId?: Maybe<Scalars['ID']['output']>;\n  status?: Maybe<TransactionStatus>;\n};\n\nexport type OrderDriverTransactionsAggregateResponse = {\n  __typename?: 'OrderDriverTransactionsAggregateResponse';\n  avg?: Maybe<OrderDriverTransactionsAvgAggregate>;\n  count?: Maybe<OrderDriverTransactionsCountAggregate>;\n  groupBy?: Maybe<OrderDriverTransactionsAggregateGroupBy>;\n  max?: Maybe<OrderDriverTransactionsMaxAggregate>;\n  min?: Maybe<OrderDriverTransactionsMinAggregate>;\n  sum?: Maybe<OrderDriverTransactionsSumAggregate>;\n};\n\nexport type OrderDriverTransactionsAvgAggregate = {\n  __typename?: 'OrderDriverTransactionsAvgAggregate';\n  amount?: Maybe<Scalars['Float']['output']>;\n  driverId?: Maybe<Scalars['Float']['output']>;\n  id?: Maybe<Scalars['Float']['output']>;\n  paymentGatewayId?: Maybe<Scalars['Float']['output']>;\n  payoutAccountId?: Maybe<Scalars['Float']['output']>;\n  payoutMethodId?: Maybe<Scalars['Float']['output']>;\n  payoutSessionId?: Maybe<Scalars['Float']['output']>;\n};\n\nexport type OrderDriverTransactionsCountAggregate = {\n  __typename?: 'OrderDriverTransactionsCountAggregate';\n  amount?: Maybe<Scalars['Int']['output']>;\n  createdAt?: Maybe<Scalars['Int']['output']>;\n  driverId?: Maybe<Scalars['Int']['output']>;\n  id?: Maybe<Scalars['Int']['output']>;\n  paymentGatewayId?: Maybe<Scalars['Int']['output']>;\n  payoutAccountId?: Maybe<Scalars['Int']['output']>;\n  payoutMethodId?: Maybe<Scalars['Int']['output']>;\n  payoutSessionId?: Maybe<Scalars['Int']['output']>;\n  status?: Maybe<Scalars['Int']['output']>;\n};\n\nexport type OrderDriverTransactionsMaxAggregate = {\n  __typename?: 'OrderDriverTransactionsMaxAggregate';\n  amount?: Maybe<Scalars['Float']['output']>;\n  createdAt?: Maybe<Scalars['DateTime']['output']>;\n  driverId?: Maybe<Scalars['ID']['output']>;\n  id?: Maybe<Scalars['ID']['output']>;\n  paymentGatewayId?: Maybe<Scalars['ID']['output']>;\n  payoutAccountId?: Maybe<Scalars['ID']['output']>;\n  payoutMethodId?: Maybe<Scalars['ID']['output']>;\n  payoutSessionId?: Maybe<Scalars['ID']['output']>;\n  status?: Maybe<TransactionStatus>;\n};\n\nexport type OrderDriverTransactionsMinAggregate = {\n  __typename?: 'OrderDriverTransactionsMinAggregate';\n  amount?: Maybe<Scalars['Float']['output']>;\n  createdAt?: Maybe<Scalars['DateTime']['output']>;\n  driverId?: Maybe<Scalars['ID']['output']>;\n  id?: Maybe<Scalars['ID']['output']>;\n  paymentGatewayId?: Maybe<Scalars['ID']['output']>;\n  payoutAccountId?: Maybe<Scalars['ID']['output']>;\n  payoutMethodId?: Maybe<Scalars['ID']['output']>;\n  payoutSessionId?: Maybe<Scalars['ID']['output']>;\n  status?: Maybe<TransactionStatus>;\n};\n\nexport type OrderDriverTransactionsSumAggregate = {\n  __typename?: 'OrderDriverTransactionsSumAggregate';\n  amount?: Maybe<Scalars['Float']['output']>;\n  driverId?: Maybe<Scalars['Float']['output']>;\n  id?: Maybe<Scalars['Float']['output']>;\n  paymentGatewayId?: Maybe<Scalars['Float']['output']>;\n  payoutAccountId?: Maybe<Scalars['Float']['output']>;\n  payoutMethodId?: Maybe<Scalars['Float']['output']>;\n  payoutSessionId?: Maybe<Scalars['Float']['output']>;\n};\n\nexport type OrderFilter = {\n  and?: InputMaybe<Array<OrderFilter>>;\n  createdOn?: InputMaybe<DateFieldComparison>;\n  driverId?: InputMaybe<IdFilterComparison>;\n  id?: InputMaybe<IdFilterComparison>;\n  or?: InputMaybe<Array<OrderFilter>>;\n  riderId?: InputMaybe<IdFilterComparison>;\n  status?: InputMaybe<OrderStatusFilterComparison>;\n};\n\nexport type OrderFleetTransactionsAggregateGroupBy = {\n  __typename?: 'OrderFleetTransactionsAggregateGroupBy';\n  fleetId?: Maybe<Scalars['ID']['output']>;\n  id?: Maybe<Scalars['ID']['output']>;\n  operatorId?: Maybe<Scalars['ID']['output']>;\n  requestId?: Maybe<Scalars['ID']['output']>;\n};\n\nexport type OrderFleetTransactionsAggregateResponse = {\n  __typename?: 'OrderFleetTransactionsAggregateResponse';\n  avg?: Maybe<OrderFleetTransactionsAvgAggregate>;\n  count?: Maybe<OrderFleetTransactionsCountAggregate>;\n  groupBy?: Maybe<OrderFleetTransactionsAggregateGroupBy>;\n  max?: Maybe<OrderFleetTransactionsMaxAggregate>;\n  min?: Maybe<OrderFleetTransactionsMinAggregate>;\n  sum?: Maybe<OrderFleetTransactionsSumAggregate>;\n};\n\nexport type OrderFleetTransactionsAvgAggregate = {\n  __typename?: 'OrderFleetTransactionsAvgAggregate';\n  fleetId?: Maybe<Scalars['Float']['output']>;\n  id?: Maybe<Scalars['Float']['output']>;\n  operatorId?: Maybe<Scalars['Float']['output']>;\n  requestId?: Maybe<Scalars['Float']['output']>;\n};\n\nexport type OrderFleetTransactionsCountAggregate = {\n  __typename?: 'OrderFleetTransactionsCountAggregate';\n  fleetId?: Maybe<Scalars['Int']['output']>;\n  id?: Maybe<Scalars['Int']['output']>;\n  operatorId?: Maybe<Scalars['Int']['output']>;\n  requestId?: Maybe<Scalars['Int']['output']>;\n};\n\nexport type OrderFleetTransactionsMaxAggregate = {\n  __typename?: 'OrderFleetTransactionsMaxAggregate';\n  fleetId?: Maybe<Scalars['ID']['output']>;\n  id?: Maybe<Scalars['ID']['output']>;\n  operatorId?: Maybe<Scalars['ID']['output']>;\n  requestId?: Maybe<Scalars['ID']['output']>;\n};\n\nexport type OrderFleetTransactionsMinAggregate = {\n  __typename?: 'OrderFleetTransactionsMinAggregate';\n  fleetId?: Maybe<Scalars['ID']['output']>;\n  id?: Maybe<Scalars['ID']['output']>;\n  operatorId?: Maybe<Scalars['ID']['output']>;\n  requestId?: Maybe<Scalars['ID']['output']>;\n};\n\nexport type OrderFleetTransactionsSumAggregate = {\n  __typename?: 'OrderFleetTransactionsSumAggregate';\n  fleetId?: Maybe<Scalars['Float']['output']>;\n  id?: Maybe<Scalars['Float']['output']>;\n  operatorId?: Maybe<Scalars['Float']['output']>;\n  requestId?: Maybe<Scalars['Float']['output']>;\n};\n\nexport type OrderMaxAggregate = {\n  __typename?: 'OrderMaxAggregate';\n  createdOn?: Maybe<Scalars['DateTime']['output']>;\n  driverId?: Maybe<Scalars['ID']['output']>;\n  id?: Maybe<Scalars['ID']['output']>;\n  riderId?: Maybe<Scalars['ID']['output']>;\n  status?: Maybe<OrderStatus>;\n};\n\nexport type OrderMessage = {\n  __typename?: 'OrderMessage';\n  content: Scalars['String']['output'];\n  id: Scalars['ID']['output'];\n  sentAt: Scalars['DateTime']['output'];\n  sentByDriver: Scalars['Boolean']['output'];\n  status: MessageStatus;\n};\n\nexport type OrderMessageAggregateFilter = {\n  and?: InputMaybe<Array<OrderMessageAggregateFilter>>;\n  id?: InputMaybe<IdFilterComparison>;\n  or?: InputMaybe<Array<OrderMessageAggregateFilter>>;\n};\n\nexport type OrderMessageFilter = {\n  and?: InputMaybe<Array<OrderMessageFilter>>;\n  id?: InputMaybe<IdFilterComparison>;\n  or?: InputMaybe<Array<OrderMessageFilter>>;\n};\n\nexport type OrderMessageSort = {\n  direction: SortDirection;\n  field: OrderMessageSortFields;\n  nulls?: InputMaybe<SortNulls>;\n};\n\nexport enum OrderMessageSortFields {\n  Id = 'id'\n}\n\nexport type OrderMinAggregate = {\n  __typename?: 'OrderMinAggregate';\n  createdOn?: Maybe<Scalars['DateTime']['output']>;\n  driverId?: Maybe<Scalars['ID']['output']>;\n  id?: Maybe<Scalars['ID']['output']>;\n  riderId?: Maybe<Scalars['ID']['output']>;\n  status?: Maybe<OrderStatus>;\n};\n\nexport type OrderProviderTransactionsAggregateGroupBy = {\n  __typename?: 'OrderProviderTransactionsAggregateGroupBy';\n  id?: Maybe<Scalars['ID']['output']>;\n  operatorId?: Maybe<Scalars['ID']['output']>;\n  requestId?: Maybe<Scalars['ID']['output']>;\n};\n\nexport type OrderProviderTransactionsAggregateResponse = {\n  __typename?: 'OrderProviderTransactionsAggregateResponse';\n  avg?: Maybe<OrderProviderTransactionsAvgAggregate>;\n  count?: Maybe<OrderProviderTransactionsCountAggregate>;\n  groupBy?: Maybe<OrderProviderTransactionsAggregateGroupBy>;\n  max?: Maybe<OrderProviderTransactionsMaxAggregate>;\n  min?: Maybe<OrderProviderTransactionsMinAggregate>;\n  sum?: Maybe<OrderProviderTransactionsSumAggregate>;\n};\n\nexport type OrderProviderTransactionsAvgAggregate = {\n  __typename?: 'OrderProviderTransactionsAvgAggregate';\n  id?: Maybe<Scalars['Float']['output']>;\n  operatorId?: Maybe<Scalars['Float']['output']>;\n  requestId?: Maybe<Scalars['Float']['output']>;\n};\n\nexport type OrderProviderTransactionsCountAggregate = {\n  __typename?: 'OrderProviderTransactionsCountAggregate';\n  id?: Maybe<Scalars['Int']['output']>;\n  operatorId?: Maybe<Scalars['Int']['output']>;\n  requestId?: Maybe<Scalars['Int']['output']>;\n};\n\nexport type OrderProviderTransactionsMaxAggregate = {\n  __typename?: 'OrderProviderTransactionsMaxAggregate';\n  id?: Maybe<Scalars['ID']['output']>;\n  operatorId?: Maybe<Scalars['ID']['output']>;\n  requestId?: Maybe<Scalars['ID']['output']>;\n};\n\nexport type OrderProviderTransactionsMinAggregate = {\n  __typename?: 'OrderProviderTransactionsMinAggregate';\n  id?: Maybe<Scalars['ID']['output']>;\n  operatorId?: Maybe<Scalars['ID']['output']>;\n  requestId?: Maybe<Scalars['ID']['output']>;\n};\n\nexport type OrderProviderTransactionsSumAggregate = {\n  __typename?: 'OrderProviderTransactionsSumAggregate';\n  id?: Maybe<Scalars['Float']['output']>;\n  operatorId?: Maybe<Scalars['Float']['output']>;\n  requestId?: Maybe<Scalars['Float']['output']>;\n};\n\nexport type OrderRiderTransactionsAggregateGroupBy = {\n  __typename?: 'OrderRiderTransactionsAggregateGroupBy';\n  amount?: Maybe<Scalars['Float']['output']>;\n  createdAt?: Maybe<Scalars['DateTime']['output']>;\n  currency?: Maybe<Scalars['String']['output']>;\n  id?: Maybe<Scalars['ID']['output']>;\n  riderId?: Maybe<Scalars['ID']['output']>;\n};\n\nexport type OrderRiderTransactionsAggregateResponse = {\n  __typename?: 'OrderRiderTransactionsAggregateResponse';\n  avg?: Maybe<OrderRiderTransactionsAvgAggregate>;\n  count?: Maybe<OrderRiderTransactionsCountAggregate>;\n  groupBy?: Maybe<OrderRiderTransactionsAggregateGroupBy>;\n  max?: Maybe<OrderRiderTransactionsMaxAggregate>;\n  min?: Maybe<OrderRiderTransactionsMinAggregate>;\n  sum?: Maybe<OrderRiderTransactionsSumAggregate>;\n};\n\nexport type OrderRiderTransactionsAvgAggregate = {\n  __typename?: 'OrderRiderTransactionsAvgAggregate';\n  amount?: Maybe<Scalars['Float']['output']>;\n  id?: Maybe<Scalars['Float']['output']>;\n  riderId?: Maybe<Scalars['Float']['output']>;\n};\n\nexport type OrderRiderTransactionsCountAggregate = {\n  __typename?: 'OrderRiderTransactionsCountAggregate';\n  amount?: Maybe<Scalars['Int']['output']>;\n  createdAt?: Maybe<Scalars['Int']['output']>;\n  currency?: Maybe<Scalars['Int']['output']>;\n  id?: Maybe<Scalars['Int']['output']>;\n  riderId?: Maybe<Scalars['Int']['output']>;\n};\n\nexport type OrderRiderTransactionsMaxAggregate = {\n  __typename?: 'OrderRiderTransactionsMaxAggregate';\n  amount?: Maybe<Scalars['Float']['output']>;\n  createdAt?: Maybe<Scalars['DateTime']['output']>;\n  currency?: Maybe<Scalars['String']['output']>;\n  id?: Maybe<Scalars['ID']['output']>;\n  riderId?: Maybe<Scalars['ID']['output']>;\n};\n\nexport type OrderRiderTransactionsMinAggregate = {\n  __typename?: 'OrderRiderTransactionsMinAggregate';\n  amount?: Maybe<Scalars['Float']['output']>;\n  createdAt?: Maybe<Scalars['DateTime']['output']>;\n  currency?: Maybe<Scalars['String']['output']>;\n  id?: Maybe<Scalars['ID']['output']>;\n  riderId?: Maybe<Scalars['ID']['output']>;\n};\n\nexport type OrderRiderTransactionsSumAggregate = {\n  __typename?: 'OrderRiderTransactionsSumAggregate';\n  amount?: Maybe<Scalars['Float']['output']>;\n  id?: Maybe<Scalars['Float']['output']>;\n  riderId?: Maybe<Scalars['Float']['output']>;\n};\n\nexport type OrderSort = {\n  direction: SortDirection;\n  field: OrderSortFields;\n  nulls?: InputMaybe<SortNulls>;\n};\n\nexport enum OrderSortFields {\n  CreatedOn = 'createdOn',\n  DriverId = 'driverId',\n  Id = 'id',\n  RiderId = 'riderId',\n  Status = 'status'\n}\n\nexport enum OrderStatus {\n  Arrived = 'Arrived',\n  Booked = 'Booked',\n  DriverAccepted = 'DriverAccepted',\n  DriverCanceled = 'DriverCanceled',\n  Expired = 'Expired',\n  Finished = 'Finished',\n  Found = 'Found',\n  NoCloseFound = 'NoCloseFound',\n  NotFound = 'NotFound',\n  Requested = 'Requested',\n  RiderCanceled = 'RiderCanceled',\n  Started = 'Started',\n  WaitingForPostPay = 'WaitingForPostPay',\n  WaitingForPrePay = 'WaitingForPrePay',\n  WaitingForReview = 'WaitingForReview'\n}\n\nexport type OrderStatusFilterComparison = {\n  eq?: InputMaybe<OrderStatus>;\n  gt?: InputMaybe<OrderStatus>;\n  gte?: InputMaybe<OrderStatus>;\n  iLike?: InputMaybe<OrderStatus>;\n  in?: InputMaybe<Array<OrderStatus>>;\n  is?: InputMaybe<Scalars['Boolean']['input']>;\n  isNot?: InputMaybe<Scalars['Boolean']['input']>;\n  like?: InputMaybe<OrderStatus>;\n  lt?: InputMaybe<OrderStatus>;\n  lte?: InputMaybe<OrderStatus>;\n  neq?: InputMaybe<OrderStatus>;\n  notILike?: InputMaybe<OrderStatus>;\n  notIn?: InputMaybe<Array<OrderStatus>>;\n  notLike?: InputMaybe<OrderStatus>;\n};\n\nexport type OrderSumAggregate = {\n  __typename?: 'OrderSumAggregate';\n  driverId?: Maybe<Scalars['Float']['output']>;\n  id?: Maybe<Scalars['Float']['output']>;\n  riderId?: Maybe<Scalars['Float']['output']>;\n};\n\nexport type PageInfo = {\n  __typename?: 'PageInfo';\n  /** The cursor of the last returned record. */\n  endCursor?: Maybe<Scalars['ConnectionCursor']['output']>;\n  /** true if paging forward and there are more records. */\n  hasNextPage?: Maybe<Scalars['Boolean']['output']>;\n  /** true if paging backwards and there are more records. */\n  hasPreviousPage?: Maybe<Scalars['Boolean']['output']>;\n  /** The cursor of the first returned record. */\n  startCursor?: Maybe<Scalars['ConnectionCursor']['output']>;\n};\n\nexport type PaymentGateway = {\n  __typename?: 'PaymentGateway';\n  enabled: Scalars['Boolean']['output'];\n  id: Scalars['ID']['output'];\n  media?: Maybe<Media>;\n  mediaId?: Maybe<Scalars['Float']['output']>;\n  merchantId?: Maybe<Scalars['String']['output']>;\n  privateKey: Scalars['String']['output'];\n  publicKey?: Maybe<Scalars['String']['output']>;\n  saltKey?: Maybe<Scalars['String']['output']>;\n  title: Scalars['String']['output'];\n  type: PaymentGatewayType;\n};\n\nexport type PaymentGatewayConnection = {\n  __typename?: 'PaymentGatewayConnection';\n  /** Array of nodes. */\n  nodes: Array<PaymentGateway>;\n  /** Paging information */\n  pageInfo: OffsetPageInfo;\n  /** Fetch total count of records */\n  totalCount: Scalars['Int']['output'];\n};\n\nexport type PaymentGatewayFilter = {\n  and?: InputMaybe<Array<PaymentGatewayFilter>>;\n  id?: InputMaybe<IdFilterComparison>;\n  or?: InputMaybe<Array<PaymentGatewayFilter>>;\n};\n\nexport type PaymentGatewayInput = {\n  enabled: Scalars['Boolean']['input'];\n  mediaId?: InputMaybe<Scalars['Float']['input']>;\n  merchantId?: InputMaybe<Scalars['String']['input']>;\n  privateKey: Scalars['String']['input'];\n  publicKey?: InputMaybe<Scalars['String']['input']>;\n  saltKey?: InputMaybe<Scalars['String']['input']>;\n  title: Scalars['String']['input'];\n  type: PaymentGatewayType;\n};\n\nexport type PaymentGatewaySort = {\n  direction: SortDirection;\n  field: PaymentGatewaySortFields;\n  nulls?: InputMaybe<SortNulls>;\n};\n\nexport enum PaymentGatewaySortFields {\n  Id = 'id'\n}\n\nexport enum PaymentGatewayType {\n  AmazonPaymentServices = 'AmazonPaymentServices',\n  BinancePay = 'BinancePay',\n  BrainTree = 'BrainTree',\n  CustomLink = 'CustomLink',\n  Flutterwave = 'Flutterwave',\n  Instamojo = 'Instamojo',\n  Mips = 'MIPS',\n  MercadoPago = 'MercadoPago',\n  MyFatoorah = 'MyFatoorah',\n  MyTMoney = 'MyTMoney',\n  OpenPix = 'OpenPix',\n  PayGate = 'PayGate',\n  PayPal = 'PayPal',\n  PayTr = 'PayTR',\n  PayU = 'PayU',\n  Paystack = 'Paystack',\n  Paytm = 'Paytm',\n  Razorpay = 'Razorpay',\n  SberBank = 'SberBank',\n  Stripe = 'Stripe',\n  WayForPay = 'WayForPay'\n}\n\nexport type PayoutAccount = {\n  __typename?: 'PayoutAccount';\n  accountHolderAddress?: Maybe<Scalars['String']['output']>;\n  accountHolderCity?: Maybe<Scalars['String']['output']>;\n  accountHolderCountry?: Maybe<Scalars['String']['output']>;\n  accountHolderDateOfBirth?: Maybe<Scalars['DateTime']['output']>;\n  accountHolderName?: Maybe<Scalars['String']['output']>;\n  accountHolderPhone?: Maybe<Scalars['String']['output']>;\n  accountHolderState?: Maybe<Scalars['String']['output']>;\n  accountHolderZip?: Maybe<Scalars['String']['output']>;\n  accountNumber?: Maybe<Scalars['String']['output']>;\n  bankName?: Maybe<Scalars['String']['output']>;\n  branchName?: Maybe<Scalars['String']['output']>;\n  currency: Scalars['String']['output'];\n  id: Scalars['ID']['output'];\n  isDefault: Scalars['Boolean']['output'];\n  isVerified: Scalars['Boolean']['output'];\n  last4: Scalars['String']['output'];\n  name: Scalars['String']['output'];\n  payoutMethod: PayoutMethod;\n  payoutMethodId: Scalars['Float']['output'];\n  routingNumber?: Maybe<Scalars['String']['output']>;\n  type: SavedPaymentMethodType;\n};\n\nexport type PayoutAccountAggregateFilter = {\n  and?: InputMaybe<Array<PayoutAccountAggregateFilter>>;\n  id?: InputMaybe<IdFilterComparison>;\n  isDefault?: InputMaybe<BooleanFieldComparison>;\n  or?: InputMaybe<Array<PayoutAccountAggregateFilter>>;\n};\n\nexport type PayoutAccountEdge = {\n  __typename?: 'PayoutAccountEdge';\n  /** Cursor for this node. */\n  cursor: Scalars['ConnectionCursor']['output'];\n  /** The node containing the PayoutAccount */\n  node: PayoutAccount;\n};\n\nexport type PayoutAccountFilter = {\n  and?: InputMaybe<Array<PayoutAccountFilter>>;\n  id?: InputMaybe<IdFilterComparison>;\n  isDefault?: InputMaybe<BooleanFieldComparison>;\n  or?: InputMaybe<Array<PayoutAccountFilter>>;\n};\n\nexport type PayoutAccountSort = {\n  direction: SortDirection;\n  field: PayoutAccountSortFields;\n  nulls?: InputMaybe<SortNulls>;\n};\n\nexport enum PayoutAccountSortFields {\n  Id = 'id',\n  IsDefault = 'isDefault'\n}\n\nexport type PayoutMethod = {\n  __typename?: 'PayoutMethod';\n  balance?: Maybe<Scalars['Float']['output']>;\n  currency: Scalars['String']['output'];\n  description?: Maybe<Scalars['String']['output']>;\n  driverTransactions: DriverTransaction;\n  enabled: Scalars['Boolean']['output'];\n  id: Scalars['ID']['output'];\n  media?: Maybe<Media>;\n  mediaId?: Maybe<Scalars['ID']['output']>;\n  merchantId?: Maybe<Scalars['String']['output']>;\n  name: Scalars['String']['output'];\n  privateKey?: Maybe<Scalars['String']['output']>;\n  publicKey?: Maybe<Scalars['String']['output']>;\n  saltKey?: Maybe<Scalars['String']['output']>;\n  type: PayoutMethodType;\n};\n\nexport type PayoutMethodDeleteResponse = {\n  __typename?: 'PayoutMethodDeleteResponse';\n  balance?: Maybe<Scalars['Float']['output']>;\n  currency?: Maybe<Scalars['String']['output']>;\n  description?: Maybe<Scalars['String']['output']>;\n  enabled?: Maybe<Scalars['Boolean']['output']>;\n  id?: Maybe<Scalars['ID']['output']>;\n  mediaId?: Maybe<Scalars['ID']['output']>;\n  merchantId?: Maybe<Scalars['String']['output']>;\n  name?: Maybe<Scalars['String']['output']>;\n  privateKey?: Maybe<Scalars['String']['output']>;\n  publicKey?: Maybe<Scalars['String']['output']>;\n  saltKey?: Maybe<Scalars['String']['output']>;\n  type?: Maybe<PayoutMethodType>;\n};\n\nexport type PayoutMethodFilter = {\n  and?: InputMaybe<Array<PayoutMethodFilter>>;\n  driverTransactions?: InputMaybe<PayoutMethodFilterDriverTransactionFilter>;\n  id?: InputMaybe<IdFilterComparison>;\n  or?: InputMaybe<Array<PayoutMethodFilter>>;\n};\n\nexport type PayoutMethodFilterDriverTransactionFilter = {\n  amount?: InputMaybe<NumberFieldComparison>;\n  and?: InputMaybe<Array<PayoutMethodFilterDriverTransactionFilter>>;\n  createdAt?: InputMaybe<DateFieldComparison>;\n  driverId?: InputMaybe<IdFilterComparison>;\n  id?: InputMaybe<IdFilterComparison>;\n  or?: InputMaybe<Array<PayoutMethodFilterDriverTransactionFilter>>;\n  paymentGatewayId?: InputMaybe<IdFilterComparison>;\n  payoutAccountId?: InputMaybe<IdFilterComparison>;\n  payoutMethodId?: InputMaybe<IdFilterComparison>;\n  payoutSessionId?: InputMaybe<IdFilterComparison>;\n  status?: InputMaybe<TransactionStatusFilterComparison>;\n};\n\nexport type PayoutMethodSort = {\n  direction: SortDirection;\n  field: PayoutMethodSortFields;\n  nulls?: InputMaybe<SortNulls>;\n};\n\nexport enum PayoutMethodSortFields {\n  Id = 'id'\n}\n\nexport type PayoutMethodStats = {\n  __typename?: 'PayoutMethodStats';\n  payoutMethod?: Maybe<PayoutMethod>;\n  totalCount: Scalars['Float']['output'];\n};\n\n/** The type of payout method */\nexport enum PayoutMethodType {\n  BankTransfer = 'BankTransfer',\n  Stripe = 'Stripe'\n}\n\nexport type PayoutSession = {\n  __typename?: 'PayoutSession';\n  createdAt: Scalars['DateTime']['output'];\n  currency: Scalars['String']['output'];\n  description?: Maybe<Scalars['String']['output']>;\n  driverTransactions: PayoutSessionDriverTransactionsConnection;\n  driverTransactionsAggregate: Array<PayoutSessionDriverTransactionsAggregateResponse>;\n  id: Scalars['ID']['output'];\n  payoutMethods: Array<PayoutMethod>;\n  processedAt?: Maybe<Scalars['DateTime']['output']>;\n  status: PayoutSessionStatus;\n  totalAmount: Scalars['Float']['output'];\n};\n\n\nexport type PayoutSessionDriverTransactionsArgs = {\n  filter?: DriverTransactionFilter;\n  paging?: OffsetPaging;\n  sorting?: Array<DriverTransactionSort>;\n};\n\n\nexport type PayoutSessionDriverTransactionsAggregateArgs = {\n  filter?: InputMaybe<DriverTransactionAggregateFilter>;\n};\n\n\nexport type PayoutSessionPayoutMethodsArgs = {\n  filter?: PayoutMethodFilter;\n  sorting?: Array<PayoutMethodSort>;\n};\n\nexport type PayoutSessionConnection = {\n  __typename?: 'PayoutSessionConnection';\n  /** Array of nodes. */\n  nodes: Array<PayoutSession>;\n  /** Paging information */\n  pageInfo: OffsetPageInfo;\n  /** Fetch total count of records */\n  totalCount: Scalars['Int']['output'];\n};\n\nexport type PayoutSessionDriverTransactionsAggregateGroupBy = {\n  __typename?: 'PayoutSessionDriverTransactionsAggregateGroupBy';\n  amount?: Maybe<Scalars['Float']['output']>;\n  createdAt?: Maybe<Scalars['DateTime']['output']>;\n  driverId?: Maybe<Scalars['ID']['output']>;\n  id?: Maybe<Scalars['ID']['output']>;\n  paymentGatewayId?: Maybe<Scalars['ID']['output']>;\n  payoutAccountId?: Maybe<Scalars['ID']['output']>;\n  payoutMethodId?: Maybe<Scalars['ID']['output']>;\n  payoutSessionId?: Maybe<Scalars['ID']['output']>;\n  status?: Maybe<TransactionStatus>;\n};\n\nexport type PayoutSessionDriverTransactionsAggregateResponse = {\n  __typename?: 'PayoutSessionDriverTransactionsAggregateResponse';\n  avg?: Maybe<PayoutSessionDriverTransactionsAvgAggregate>;\n  count?: Maybe<PayoutSessionDriverTransactionsCountAggregate>;\n  groupBy?: Maybe<PayoutSessionDriverTransactionsAggregateGroupBy>;\n  max?: Maybe<PayoutSessionDriverTransactionsMaxAggregate>;\n  min?: Maybe<PayoutSessionDriverTransactionsMinAggregate>;\n  sum?: Maybe<PayoutSessionDriverTransactionsSumAggregate>;\n};\n\nexport type PayoutSessionDriverTransactionsAvgAggregate = {\n  __typename?: 'PayoutSessionDriverTransactionsAvgAggregate';\n  amount?: Maybe<Scalars['Float']['output']>;\n  driverId?: Maybe<Scalars['Float']['output']>;\n  id?: Maybe<Scalars['Float']['output']>;\n  paymentGatewayId?: Maybe<Scalars['Float']['output']>;\n  payoutAccountId?: Maybe<Scalars['Float']['output']>;\n  payoutMethodId?: Maybe<Scalars['Float']['output']>;\n  payoutSessionId?: Maybe<Scalars['Float']['output']>;\n};\n\nexport type PayoutSessionDriverTransactionsConnection = {\n  __typename?: 'PayoutSessionDriverTransactionsConnection';\n  /** Array of nodes. */\n  nodes: Array<DriverTransaction>;\n  /** Paging information */\n  pageInfo: OffsetPageInfo;\n  /** Fetch total count of records */\n  totalCount: Scalars['Int']['output'];\n};\n\nexport type PayoutSessionDriverTransactionsCountAggregate = {\n  __typename?: 'PayoutSessionDriverTransactionsCountAggregate';\n  amount?: Maybe<Scalars['Int']['output']>;\n  createdAt?: Maybe<Scalars['Int']['output']>;\n  driverId?: Maybe<Scalars['Int']['output']>;\n  id?: Maybe<Scalars['Int']['output']>;\n  paymentGatewayId?: Maybe<Scalars['Int']['output']>;\n  payoutAccountId?: Maybe<Scalars['Int']['output']>;\n  payoutMethodId?: Maybe<Scalars['Int']['output']>;\n  payoutSessionId?: Maybe<Scalars['Int']['output']>;\n  status?: Maybe<Scalars['Int']['output']>;\n};\n\nexport type PayoutSessionDriverTransactionsMaxAggregate = {\n  __typename?: 'PayoutSessionDriverTransactionsMaxAggregate';\n  amount?: Maybe<Scalars['Float']['output']>;\n  createdAt?: Maybe<Scalars['DateTime']['output']>;\n  driverId?: Maybe<Scalars['ID']['output']>;\n  id?: Maybe<Scalars['ID']['output']>;\n  paymentGatewayId?: Maybe<Scalars['ID']['output']>;\n  payoutAccountId?: Maybe<Scalars['ID']['output']>;\n  payoutMethodId?: Maybe<Scalars['ID']['output']>;\n  payoutSessionId?: Maybe<Scalars['ID']['output']>;\n  status?: Maybe<TransactionStatus>;\n};\n\nexport type PayoutSessionDriverTransactionsMinAggregate = {\n  __typename?: 'PayoutSessionDriverTransactionsMinAggregate';\n  amount?: Maybe<Scalars['Float']['output']>;\n  createdAt?: Maybe<Scalars['DateTime']['output']>;\n  driverId?: Maybe<Scalars['ID']['output']>;\n  id?: Maybe<Scalars['ID']['output']>;\n  paymentGatewayId?: Maybe<Scalars['ID']['output']>;\n  payoutAccountId?: Maybe<Scalars['ID']['output']>;\n  payoutMethodId?: Maybe<Scalars['ID']['output']>;\n  payoutSessionId?: Maybe<Scalars['ID']['output']>;\n  status?: Maybe<TransactionStatus>;\n};\n\nexport type PayoutSessionDriverTransactionsSumAggregate = {\n  __typename?: 'PayoutSessionDriverTransactionsSumAggregate';\n  amount?: Maybe<Scalars['Float']['output']>;\n  driverId?: Maybe<Scalars['Float']['output']>;\n  id?: Maybe<Scalars['Float']['output']>;\n  paymentGatewayId?: Maybe<Scalars['Float']['output']>;\n  payoutAccountId?: Maybe<Scalars['Float']['output']>;\n  payoutMethodId?: Maybe<Scalars['Float']['output']>;\n  payoutSessionId?: Maybe<Scalars['Float']['output']>;\n};\n\nexport type PayoutSessionFilter = {\n  and?: InputMaybe<Array<PayoutSessionFilter>>;\n  id?: InputMaybe<IdFilterComparison>;\n  or?: InputMaybe<Array<PayoutSessionFilter>>;\n};\n\nexport type PayoutSessionSort = {\n  direction: SortDirection;\n  field: PayoutSessionSortFields;\n  nulls?: InputMaybe<SortNulls>;\n};\n\nexport enum PayoutSessionSortFields {\n  Id = 'id'\n}\n\nexport enum PayoutSessionStatus {\n  Cancelled = 'CANCELLED',\n  Failed = 'FAILED',\n  Paid = 'PAID',\n  Pending = 'PENDING'\n}\n\nexport type PayoutStatistics = {\n  __typename?: 'PayoutStatistics';\n  currency: Scalars['String']['output'];\n  lastPayoutAmount: Scalars['Float']['output'];\n  pendingAmount: Scalars['Float']['output'];\n  usersDefaultPayoutMethodStats: Array<PayoutMethodStats>;\n};\n\nexport type Point = {\n  __typename?: 'Point';\n  heading?: Maybe<Scalars['Int']['output']>;\n  lat: Scalars['Float']['output'];\n  lng: Scalars['Float']['output'];\n};\n\nexport type PointInput = {\n  heading?: InputMaybe<Scalars['Int']['input']>;\n  lat: Scalars['Float']['input'];\n  lng: Scalars['Float']['input'];\n};\n\nexport enum ProviderDeductTransactionType {\n  Withdraw = 'Withdraw'\n}\n\nexport enum ProviderRechargeTransactionType {\n  Commission = 'Commission'\n}\n\nexport type ProviderTransaction = {\n  __typename?: 'ProviderTransaction';\n  action: TransactionAction;\n  amount: Scalars['Float']['output'];\n  createdAt: Scalars['DateTime']['output'];\n  currency: Scalars['String']['output'];\n  deductType?: Maybe<ProviderDeductTransactionType>;\n  description?: Maybe<Scalars['String']['output']>;\n  id: Scalars['ID']['output'];\n  operatorId?: Maybe<Scalars['ID']['output']>;\n  rechargeType?: Maybe<ProviderRechargeTransactionType>;\n  refrenceNumber?: Maybe<Scalars['String']['output']>;\n  requestId?: Maybe<Scalars['ID']['output']>;\n};\n\nexport type ProviderTransactionAggregateFilter = {\n  and?: InputMaybe<Array<ProviderTransactionAggregateFilter>>;\n  id?: InputMaybe<IdFilterComparison>;\n  operatorId?: InputMaybe<IdFilterComparison>;\n  or?: InputMaybe<Array<ProviderTransactionAggregateFilter>>;\n  requestId?: InputMaybe<IdFilterComparison>;\n};\n\nexport type ProviderTransactionConnection = {\n  __typename?: 'ProviderTransactionConnection';\n  /** Array of nodes. */\n  nodes: Array<ProviderTransaction>;\n  /** Paging information */\n  pageInfo: OffsetPageInfo;\n  /** Fetch total count of records */\n  totalCount: Scalars['Int']['output'];\n};\n\nexport type ProviderTransactionFilter = {\n  and?: InputMaybe<Array<ProviderTransactionFilter>>;\n  id?: InputMaybe<IdFilterComparison>;\n  operatorId?: InputMaybe<IdFilterComparison>;\n  or?: InputMaybe<Array<ProviderTransactionFilter>>;\n  requestId?: InputMaybe<IdFilterComparison>;\n};\n\nexport type ProviderTransactionInput = {\n  action: TransactionAction;\n  amount: Scalars['Float']['input'];\n  createdAt: Scalars['DateTime']['input'];\n  currency: Scalars['String']['input'];\n  deductType?: InputMaybe<ProviderDeductTransactionType>;\n  description?: InputMaybe<Scalars['String']['input']>;\n  operatorId?: InputMaybe<Scalars['ID']['input']>;\n  rechargeType?: InputMaybe<ProviderRechargeTransactionType>;\n  refrenceNumber?: InputMaybe<Scalars['String']['input']>;\n  requestId?: InputMaybe<Scalars['ID']['input']>;\n};\n\nexport type ProviderTransactionSort = {\n  direction: SortDirection;\n  field: ProviderTransactionSortFields;\n  nulls?: InputMaybe<SortNulls>;\n};\n\nexport enum ProviderTransactionSortFields {\n  Id = 'id',\n  OperatorId = 'operatorId',\n  RequestId = 'requestId'\n}\n\nexport type ProviderWallet = {\n  __typename?: 'ProviderWallet';\n  balance: Scalars['Float']['output'];\n  currency: Scalars['String']['output'];\n  id: Scalars['ID']['output'];\n};\n\nexport type ProviderWalletFilter = {\n  and?: InputMaybe<Array<ProviderWalletFilter>>;\n  balance?: InputMaybe<FloatFieldComparison>;\n  currency?: InputMaybe<StringFieldComparison>;\n  id?: InputMaybe<IdFilterComparison>;\n  or?: InputMaybe<Array<ProviderWalletFilter>>;\n};\n\nexport type ProviderWalletSort = {\n  direction: SortDirection;\n  field: ProviderWalletSortFields;\n  nulls?: InputMaybe<SortNulls>;\n};\n\nexport enum ProviderWalletSortFields {\n  Balance = 'balance',\n  Currency = 'currency',\n  Id = 'id'\n}\n\nexport type Query = {\n  __typename?: 'Query';\n  address: Address;\n  addresses: AddressConnection;\n  announcement: Announcement;\n  announcements: AnnouncementConnection;\n  calculateFare: CalculateFareDto;\n  carColor: CarColor;\n  carColors: Array<CarColor>;\n  carModel: CarModel;\n  carModels: CarModelConnection;\n  complaint: Complaint;\n  complaintActivities: Array<ComplaintActivity>;\n  complaintActivity: ComplaintActivity;\n  complaintAggregate: Array<ComplaintAggregateResponse>;\n  complaints: ComplaintConnection;\n  coupon: Coupon;\n  coupons: CouponConnection;\n  currentConfiguration: CurrentConfiguration;\n  distressSignal: DistressSignal;\n  distressSignalAggregate: Array<DistressSignalAggregateResponse>;\n  distressSignals: DistressSignalConnection;\n  driver: Driver;\n  driverAggregate: Array<DriverAggregateResponse>;\n  driverFeedbackParametersSummary: Array<FeedbackParameterAggregate>;\n  driverRegistrations: Array<RegistrationResultItem>;\n  driverTransaction: DriverTransaction;\n  driverTransactionAggregate: Array<DriverTransactionAggregateResponse>;\n  driverTransactions: DriverTransactionConnection;\n  driverWallet: DriverWallet;\n  driverWallets: DriverWalletConnection;\n  drivers: DriverConnection;\n  export: ExportResult;\n  feedback: Feedback;\n  feedbackParameter: FeedbackParameter;\n  feedbackParameters: Array<FeedbackParameter>;\n  feedbacks: FeedbackConnection;\n  fleet: Fleet;\n  fleetTransaction: FleetTransaction;\n  fleetTransactions: FleetTransactionConnection;\n  fleetWallet: FleetWallet;\n  fleetWallets: FleetWalletConnection;\n  fleets: FleetConnection;\n  getDriversLocation: Array<OnlineDriver>;\n  getDriversLocationWithData: Array<OnlineDriverWithData>;\n  giftBatch: GiftBatch;\n  giftBatches: GiftBatchConnection;\n  incomeChart: Array<IncomeResultItem>;\n  login: TokenObject;\n  me: Operator;\n  operator: Operator;\n  operatorRole: OperatorRole;\n  operatorRoles: Array<OperatorRole>;\n  operators: OperatorConnection;\n  order: Order;\n  orderAggregate: Array<OrderAggregateResponse>;\n  orderCancelReason: OrderCancelReason;\n  orderCancelReasons: OrderCancelReasonConnection;\n  orders: OrderConnection;\n  paymentGateway: PaymentGateway;\n  paymentGateways: PaymentGatewayConnection;\n  payoutAccount: PayoutAccount;\n  payoutMethod: PayoutMethod;\n  payoutMethods: Array<PayoutMethod>;\n  payoutSession: PayoutSession;\n  payoutSessions: PayoutSessionConnection;\n  payoutStatistics: PayoutStatistics;\n  providerTransaction: ProviderTransaction;\n  providerTransactions: ProviderTransactionConnection;\n  providerWallet: ProviderWallet;\n  providerWallets: Array<ProviderWallet>;\n  region: Region;\n  regionAggregate: Array<RegionAggregateResponse>;\n  regions: RegionConnection;\n  requestChart: Array<RequestResultItem>;\n  reward: Reward;\n  rewards: RewardConnection;\n  rider: Rider;\n  riderAddress: RiderAddress;\n  riderAddresses: RiderAddressConnection;\n  riderRegistrations: Array<RegistrationResultItem>;\n  riderTransaction: RiderTransaction;\n  riderTransactions: RiderTransactionConnection;\n  riderWallet: RiderWallet;\n  riderWallets: RiderWalletConnection;\n  riders: RiderConnection;\n  service: Service;\n  serviceCategories: Array<ServiceCategory>;\n  serviceCategory: ServiceCategory;\n  serviceOption: ServiceOption;\n  serviceOptions: Array<ServiceOption>;\n  services: Array<Service>;\n  smsProvider: SmsProvider;\n  smsProviders: SmsProviderConnection;\n  supportedCurrencies: Array<Scalars['String']['output']>;\n  zonePrice: ZonePrice;\n  zonePrices: ZonePriceConnection;\n};\n\n\nexport type QueryAddressArgs = {\n  id: Scalars['ID']['input'];\n};\n\n\nexport type QueryAddressesArgs = {\n  filter?: AddressFilter;\n  paging?: CursorPaging;\n  sorting?: Array<AddressSort>;\n};\n\n\nexport type QueryAnnouncementArgs = {\n  id: Scalars['ID']['input'];\n};\n\n\nexport type QueryAnnouncementsArgs = {\n  filter?: AnnouncementFilter;\n  paging?: OffsetPaging;\n  sorting?: Array<AnnouncementSort>;\n};\n\n\nexport type QueryCalculateFareArgs = {\n  input: CalculateFareInput;\n};\n\n\nexport type QueryCarColorArgs = {\n  id: Scalars['ID']['input'];\n};\n\n\nexport type QueryCarColorsArgs = {\n  filter?: CarColorFilter;\n  sorting?: Array<CarColorSort>;\n};\n\n\nexport type QueryCarModelArgs = {\n  id: Scalars['ID']['input'];\n};\n\n\nexport type QueryCarModelsArgs = {\n  filter?: CarModelFilter;\n  paging?: OffsetPaging;\n  sorting?: Array<CarModelSort>;\n};\n\n\nexport type QueryComplaintArgs = {\n  id: Scalars['ID']['input'];\n};\n\n\nexport type QueryComplaintActivitiesArgs = {\n  filter?: ComplaintActivityFilter;\n  sorting?: Array<ComplaintActivitySort>;\n};\n\n\nexport type QueryComplaintActivityArgs = {\n  id: Scalars['ID']['input'];\n};\n\n\nexport type QueryComplaintAggregateArgs = {\n  filter?: InputMaybe<ComplaintAggregateFilter>;\n};\n\n\nexport type QueryComplaintsArgs = {\n  filter?: ComplaintFilter;\n  paging?: OffsetPaging;\n  sorting?: Array<ComplaintSort>;\n};\n\n\nexport type QueryCouponArgs = {\n  id: Scalars['ID']['input'];\n};\n\n\nexport type QueryCouponsArgs = {\n  filter?: CouponFilter;\n  paging?: OffsetPaging;\n  sorting?: Array<CouponSort>;\n};\n\n\nexport type QueryDistressSignalArgs = {\n  id: Scalars['ID']['input'];\n};\n\n\nexport type QueryDistressSignalAggregateArgs = {\n  filter?: InputMaybe<DistressSignalAggregateFilter>;\n};\n\n\nexport type QueryDistressSignalsArgs = {\n  filter?: DistressSignalFilter;\n  paging?: OffsetPaging;\n  sorting?: Array<DistressSignalSort>;\n};\n\n\nexport type QueryDriverArgs = {\n  id: Scalars['ID']['input'];\n};\n\n\nexport type QueryDriverAggregateArgs = {\n  filter?: InputMaybe<DriverAggregateFilter>;\n};\n\n\nexport type QueryDriverFeedbackParametersSummaryArgs = {\n  driverId: Scalars['ID']['input'];\n};\n\n\nexport type QueryDriverRegistrationsArgs = {\n  timeframe: ChartTimeframe;\n};\n\n\nexport type QueryDriverTransactionArgs = {\n  id: Scalars['ID']['input'];\n};\n\n\nexport type QueryDriverTransactionAggregateArgs = {\n  filter?: InputMaybe<DriverTransactionAggregateFilter>;\n};\n\n\nexport type QueryDriverTransactionsArgs = {\n  filter?: DriverTransactionFilter;\n  paging?: OffsetPaging;\n  sorting?: Array<DriverTransactionSort>;\n};\n\n\nexport type QueryDriverWalletArgs = {\n  id: Scalars['ID']['input'];\n};\n\n\nexport type QueryDriverWalletsArgs = {\n  filter?: DriverWalletFilter;\n  paging?: OffsetPaging;\n  sorting?: Array<DriverWalletSort>;\n};\n\n\nexport type QueryDriversArgs = {\n  filter?: DriverFilter;\n  paging?: OffsetPaging;\n  sorting?: Array<DriverSort>;\n};\n\n\nexport type QueryExportArgs = {\n  input: ExportArgs;\n};\n\n\nexport type QueryFeedbackArgs = {\n  id: Scalars['ID']['input'];\n};\n\n\nexport type QueryFeedbackParameterArgs = {\n  id: Scalars['ID']['input'];\n};\n\n\nexport type QueryFeedbackParametersArgs = {\n  filter?: FeedbackParameterFilter;\n  sorting?: Array<FeedbackParameterSort>;\n};\n\n\nexport type QueryFeedbacksArgs = {\n  filter?: FeedbackFilter;\n  paging?: OffsetPaging;\n  sorting?: Array<FeedbackSort>;\n};\n\n\nexport type QueryFleetArgs = {\n  id: Scalars['ID']['input'];\n};\n\n\nexport type QueryFleetTransactionArgs = {\n  id: Scalars['ID']['input'];\n};\n\n\nexport type QueryFleetTransactionsArgs = {\n  filter?: FleetTransactionFilter;\n  paging?: OffsetPaging;\n  sorting?: Array<FleetTransactionSort>;\n};\n\n\nexport type QueryFleetWalletArgs = {\n  id: Scalars['ID']['input'];\n};\n\n\nexport type QueryFleetWalletsArgs = {\n  filter?: FleetWalletFilter;\n  paging?: OffsetPaging;\n  sorting?: Array<FleetWalletSort>;\n};\n\n\nexport type QueryFleetsArgs = {\n  filter?: FleetFilter;\n  paging?: OffsetPaging;\n  sorting?: Array<FleetSort>;\n};\n\n\nexport type QueryGetDriversLocationArgs = {\n  center: PointInput;\n  count: Scalars['Int']['input'];\n};\n\n\nexport type QueryGetDriversLocationWithDataArgs = {\n  center: PointInput;\n  count: Scalars['Int']['input'];\n};\n\n\nexport type QueryGiftBatchArgs = {\n  id: Scalars['ID']['input'];\n};\n\n\nexport type QueryGiftBatchesArgs = {\n  filter?: GiftBatchFilter;\n  paging?: OffsetPaging;\n  sorting?: Array<GiftBatchSort>;\n};\n\n\nexport type QueryIncomeChartArgs = {\n  timeframe: ChartTimeframe;\n};\n\n\nexport type QueryLoginArgs = {\n  password: Scalars['String']['input'];\n  userName: Scalars['String']['input'];\n};\n\n\nexport type QueryOperatorArgs = {\n  id: Scalars['ID']['input'];\n};\n\n\nexport type QueryOperatorRoleArgs = {\n  id: Scalars['ID']['input'];\n};\n\n\nexport type QueryOperatorRolesArgs = {\n  filter?: OperatorRoleFilter;\n  sorting?: Array<OperatorRoleSort>;\n};\n\n\nexport type QueryOperatorsArgs = {\n  filter?: OperatorFilter;\n  paging?: OffsetPaging;\n  sorting?: Array<OperatorSort>;\n};\n\n\nexport type QueryOrderArgs = {\n  id: Scalars['ID']['input'];\n};\n\n\nexport type QueryOrderAggregateArgs = {\n  filter?: InputMaybe<OrderAggregateFilter>;\n};\n\n\nexport type QueryOrderCancelReasonArgs = {\n  id: Scalars['ID']['input'];\n};\n\n\nexport type QueryOrderCancelReasonsArgs = {\n  filter?: OrderCancelReasonFilter;\n  paging?: OffsetPaging;\n  sorting?: Array<OrderCancelReasonSort>;\n};\n\n\nexport type QueryOrdersArgs = {\n  filter?: OrderFilter;\n  paging?: OffsetPaging;\n  sorting?: Array<OrderSort>;\n};\n\n\nexport type QueryPaymentGatewayArgs = {\n  id: Scalars['ID']['input'];\n};\n\n\nexport type QueryPaymentGatewaysArgs = {\n  filter?: PaymentGatewayFilter;\n  paging?: OffsetPaging;\n  sorting?: Array<PaymentGatewaySort>;\n};\n\n\nexport type QueryPayoutAccountArgs = {\n  id: Scalars['ID']['input'];\n};\n\n\nexport type QueryPayoutMethodArgs = {\n  id: Scalars['ID']['input'];\n};\n\n\nexport type QueryPayoutMethodsArgs = {\n  filter?: PayoutMethodFilter;\n  sorting?: Array<PayoutMethodSort>;\n};\n\n\nexport type QueryPayoutSessionArgs = {\n  id: Scalars['ID']['input'];\n};\n\n\nexport type QueryPayoutSessionsArgs = {\n  filter?: PayoutSessionFilter;\n  paging?: OffsetPaging;\n  sorting?: Array<PayoutSessionSort>;\n};\n\n\nexport type QueryPayoutStatisticsArgs = {\n  currency?: InputMaybe<Scalars['String']['input']>;\n};\n\n\nexport type QueryProviderTransactionArgs = {\n  id: Scalars['ID']['input'];\n};\n\n\nexport type QueryProviderTransactionsArgs = {\n  filter?: ProviderTransactionFilter;\n  paging?: OffsetPaging;\n  sorting?: Array<ProviderTransactionSort>;\n};\n\n\nexport type QueryProviderWalletArgs = {\n  id: Scalars['ID']['input'];\n};\n\n\nexport type QueryProviderWalletsArgs = {\n  filter?: ProviderWalletFilter;\n  sorting?: Array<ProviderWalletSort>;\n};\n\n\nexport type QueryRegionArgs = {\n  id: Scalars['ID']['input'];\n};\n\n\nexport type QueryRegionAggregateArgs = {\n  filter?: InputMaybe<RegionAggregateFilter>;\n};\n\n\nexport type QueryRegionsArgs = {\n  filter?: RegionFilter;\n  paging?: OffsetPaging;\n  sorting?: Array<RegionSort>;\n};\n\n\nexport type QueryRequestChartArgs = {\n  timeframe: ChartTimeframe;\n};\n\n\nexport type QueryRewardArgs = {\n  id: Scalars['ID']['input'];\n};\n\n\nexport type QueryRewardsArgs = {\n  filter?: RewardFilter;\n  paging?: OffsetPaging;\n  sorting?: Array<RewardSort>;\n};\n\n\nexport type QueryRiderArgs = {\n  id: Scalars['ID']['input'];\n};\n\n\nexport type QueryRiderAddressArgs = {\n  id: Scalars['ID']['input'];\n};\n\n\nexport type QueryRiderAddressesArgs = {\n  filter?: RiderAddressFilter;\n  paging?: OffsetPaging;\n  sorting?: Array<RiderAddressSort>;\n};\n\n\nexport type QueryRiderRegistrationsArgs = {\n  timeframe: ChartTimeframe;\n};\n\n\nexport type QueryRiderTransactionArgs = {\n  id: Scalars['ID']['input'];\n};\n\n\nexport type QueryRiderTransactionsArgs = {\n  filter?: RiderTransactionFilter;\n  paging?: OffsetPaging;\n  sorting?: Array<RiderTransactionSort>;\n};\n\n\nexport type QueryRiderWalletArgs = {\n  id: Scalars['ID']['input'];\n};\n\n\nexport type QueryRiderWalletsArgs = {\n  filter?: RiderWalletFilter;\n  paging?: OffsetPaging;\n  sorting?: Array<RiderWalletSort>;\n};\n\n\nexport type QueryRidersArgs = {\n  filter?: RiderFilter;\n  paging?: OffsetPaging;\n  sorting?: Array<RiderSort>;\n};\n\n\nexport type QueryServiceArgs = {\n  id: Scalars['ID']['input'];\n};\n\n\nexport type QueryServiceCategoriesArgs = {\n  filter?: ServiceCategoryFilter;\n  sorting?: Array<ServiceCategorySort>;\n};\n\n\nexport type QueryServiceCategoryArgs = {\n  id: Scalars['ID']['input'];\n};\n\n\nexport type QueryServiceOptionArgs = {\n  id: Scalars['ID']['input'];\n};\n\n\nexport type QueryServiceOptionsArgs = {\n  filter?: ServiceOptionFilter;\n  sorting?: Array<ServiceOptionSort>;\n};\n\n\nexport type QueryServicesArgs = {\n  filter?: ServiceFilter;\n  sorting?: Array<ServiceSort>;\n};\n\n\nexport type QuerySmsProviderArgs = {\n  id: Scalars['ID']['input'];\n};\n\n\nexport type QuerySmsProvidersArgs = {\n  filter?: SmsProviderFilter;\n  paging?: OffsetPaging;\n  sorting?: Array<SmsProviderSort>;\n};\n\n\nexport type QueryZonePriceArgs = {\n  id: Scalars['ID']['input'];\n};\n\n\nexport type QueryZonePricesArgs = {\n  filter?: ZonePriceFilter;\n  paging?: OffsetPaging;\n  sorting?: Array<ZonePriceSort>;\n};\n\nexport type Region = {\n  __typename?: 'Region';\n  currency: Scalars['String']['output'];\n  enabled: Scalars['Boolean']['output'];\n  id: Scalars['ID']['output'];\n  location: Array<Array<Point>>;\n  name: Scalars['String']['output'];\n};\n\nexport type RegionAggregateFilter = {\n  and?: InputMaybe<Array<RegionAggregateFilter>>;\n  currency?: InputMaybe<StringFieldComparison>;\n  id?: InputMaybe<IdFilterComparison>;\n  or?: InputMaybe<Array<RegionAggregateFilter>>;\n};\n\nexport type RegionAggregateGroupBy = {\n  __typename?: 'RegionAggregateGroupBy';\n  currency?: Maybe<Scalars['String']['output']>;\n  id?: Maybe<Scalars['ID']['output']>;\n};\n\nexport type RegionAggregateResponse = {\n  __typename?: 'RegionAggregateResponse';\n  avg?: Maybe<RegionAvgAggregate>;\n  count?: Maybe<RegionCountAggregate>;\n  groupBy?: Maybe<RegionAggregateGroupBy>;\n  max?: Maybe<RegionMaxAggregate>;\n  min?: Maybe<RegionMinAggregate>;\n  sum?: Maybe<RegionSumAggregate>;\n};\n\nexport type RegionAvgAggregate = {\n  __typename?: 'RegionAvgAggregate';\n  id?: Maybe<Scalars['Float']['output']>;\n};\n\nexport type RegionConnection = {\n  __typename?: 'RegionConnection';\n  /** Array of nodes. */\n  nodes: Array<Region>;\n  /** Paging information */\n  pageInfo: OffsetPageInfo;\n  /** Fetch total count of records */\n  totalCount: Scalars['Int']['output'];\n};\n\nexport type RegionCountAggregate = {\n  __typename?: 'RegionCountAggregate';\n  currency?: Maybe<Scalars['Int']['output']>;\n  id?: Maybe<Scalars['Int']['output']>;\n};\n\nexport type RegionDeleteResponse = {\n  __typename?: 'RegionDeleteResponse';\n  currency?: Maybe<Scalars['String']['output']>;\n  enabled?: Maybe<Scalars['Boolean']['output']>;\n  id?: Maybe<Scalars['ID']['output']>;\n  location?: Maybe<Array<Array<Point>>>;\n  name?: Maybe<Scalars['String']['output']>;\n};\n\nexport type RegionFilter = {\n  and?: InputMaybe<Array<RegionFilter>>;\n  currency?: InputMaybe<StringFieldComparison>;\n  id?: InputMaybe<IdFilterComparison>;\n  or?: InputMaybe<Array<RegionFilter>>;\n};\n\nexport type RegionInput = {\n  currency: Scalars['String']['input'];\n  enabled: Scalars['Boolean']['input'];\n  location: Array<Array<PointInput>>;\n  name: Scalars['String']['input'];\n};\n\nexport type RegionMaxAggregate = {\n  __typename?: 'RegionMaxAggregate';\n  currency?: Maybe<Scalars['String']['output']>;\n  id?: Maybe<Scalars['ID']['output']>;\n};\n\nexport type RegionMinAggregate = {\n  __typename?: 'RegionMinAggregate';\n  currency?: Maybe<Scalars['String']['output']>;\n  id?: Maybe<Scalars['ID']['output']>;\n};\n\nexport type RegionSort = {\n  direction: SortDirection;\n  field: RegionSortFields;\n  nulls?: InputMaybe<SortNulls>;\n};\n\nexport enum RegionSortFields {\n  Currency = 'currency',\n  Id = 'id'\n}\n\nexport type RegionSumAggregate = {\n  __typename?: 'RegionSumAggregate';\n  id?: Maybe<Scalars['Float']['output']>;\n};\n\nexport type RegistrationResultItem = {\n  __typename?: 'RegistrationResultItem';\n  count: Scalars['Int']['output'];\n  time: Scalars['String']['output'];\n};\n\nexport type RequestActivity = {\n  __typename?: 'RequestActivity';\n  createdAt: Scalars['DateTime']['output'];\n  id: Scalars['ID']['output'];\n  type: RequestActivityType;\n};\n\nexport type RequestActivityAggregateFilter = {\n  and?: InputMaybe<Array<RequestActivityAggregateFilter>>;\n  id?: InputMaybe<IdFilterComparison>;\n  or?: InputMaybe<Array<RequestActivityAggregateFilter>>;\n};\n\nexport type RequestActivityFilter = {\n  and?: InputMaybe<Array<RequestActivityFilter>>;\n  id?: InputMaybe<IdFilterComparison>;\n  or?: InputMaybe<Array<RequestActivityFilter>>;\n};\n\nexport type RequestActivitySort = {\n  direction: SortDirection;\n  field: RequestActivitySortFields;\n  nulls?: InputMaybe<SortNulls>;\n};\n\nexport enum RequestActivitySortFields {\n  Id = 'id'\n}\n\nexport enum RequestActivityType {\n  ArrivedToDestination = 'ArrivedToDestination',\n  ArrivedToPickupPoint = 'ArrivedToPickupPoint',\n  BookedByOperator = 'BookedByOperator',\n  BookedByRider = 'BookedByRider',\n  CanceledByDriver = 'CanceledByDriver',\n  CanceledByOperator = 'CanceledByOperator',\n  CanceledByRider = 'CanceledByRider',\n  DriverAccepted = 'DriverAccepted',\n  Expired = 'Expired',\n  Paid = 'Paid',\n  RequestedByOperator = 'RequestedByOperator',\n  RequestedByRider = 'RequestedByRider',\n  Reviewed = 'Reviewed',\n  Started = 'Started'\n}\n\nexport type RequestResultItem = {\n  __typename?: 'RequestResultItem';\n  count: Scalars['Float']['output'];\n  status: OrderStatus;\n  time: Scalars['String']['output'];\n};\n\nexport type Reward = {\n  __typename?: 'Reward';\n  appType: RewardAppType;\n  beneficiary: RewardBeneficiary;\n  conditionTripCountsLessThan?: Maybe<Scalars['Float']['output']>;\n  conditionUserNumberFirstDigits?: Maybe<Array<Scalars['String']['output']>>;\n  creditCurrency?: Maybe<Scalars['String']['output']>;\n  creditGift: Scalars['Float']['output'];\n  endDate?: Maybe<Scalars['DateTime']['output']>;\n  event: RewardEvent;\n  id: Scalars['ID']['output'];\n  startDate?: Maybe<Scalars['DateTime']['output']>;\n  title: Scalars['String']['output'];\n  tripFeePercentGift?: Maybe<Scalars['Float']['output']>;\n};\n\nexport enum RewardAppType {\n  Driver = 'Driver',\n  Rider = 'Rider'\n}\n\nexport enum RewardBeneficiary {\n  Referrer = 'Referrer',\n  Self = 'Self'\n}\n\nexport type RewardConnection = {\n  __typename?: 'RewardConnection';\n  /** Array of nodes. */\n  nodes: Array<Reward>;\n  /** Paging information */\n  pageInfo: OffsetPageInfo;\n  /** Fetch total count of records */\n  totalCount: Scalars['Int']['output'];\n};\n\nexport type RewardDeleteResponse = {\n  __typename?: 'RewardDeleteResponse';\n  appType?: Maybe<RewardAppType>;\n  beneficiary?: Maybe<RewardBeneficiary>;\n  conditionTripCountsLessThan?: Maybe<Scalars['Float']['output']>;\n  conditionUserNumberFirstDigits?: Maybe<Array<Scalars['String']['output']>>;\n  creditCurrency?: Maybe<Scalars['String']['output']>;\n  creditGift?: Maybe<Scalars['Float']['output']>;\n  endDate?: Maybe<Scalars['DateTime']['output']>;\n  event?: Maybe<RewardEvent>;\n  id?: Maybe<Scalars['ID']['output']>;\n  startDate?: Maybe<Scalars['DateTime']['output']>;\n  title?: Maybe<Scalars['String']['output']>;\n  tripFeePercentGift?: Maybe<Scalars['Float']['output']>;\n};\n\nexport enum RewardEvent {\n  Register = 'Register',\n  ServiceCompleted = 'ServiceCompleted'\n}\n\nexport type RewardFilter = {\n  and?: InputMaybe<Array<RewardFilter>>;\n  id?: InputMaybe<IdFilterComparison>;\n  or?: InputMaybe<Array<RewardFilter>>;\n};\n\nexport type RewardSort = {\n  direction: SortDirection;\n  field: RewardSortFields;\n  nulls?: InputMaybe<SortNulls>;\n};\n\nexport enum RewardSortFields {\n  Id = 'id'\n}\n\nexport type Rider = {\n  __typename?: 'Rider';\n  addresses: RiderAddressesConnection;\n  email?: Maybe<Scalars['String']['output']>;\n  firstName?: Maybe<Scalars['String']['output']>;\n  gender?: Maybe<Gender>;\n  id: Scalars['ID']['output'];\n  idNumber?: Maybe<Scalars['String']['output']>;\n  isResident?: Maybe<Scalars['Boolean']['output']>;\n  lastName?: Maybe<Scalars['String']['output']>;\n  media?: Maybe<Media>;\n  mobileNumber: Scalars['String']['output'];\n  orders: RiderOrdersConnection;\n  registrationTimestamp: Scalars['DateTime']['output'];\n  status: RiderStatus;\n  transactions: RiderTransactionsConnection;\n  wallets: RiderWalletsConnection;\n};\n\n\nexport type RiderAddressesArgs = {\n  filter?: RiderAddressFilter;\n  paging?: OffsetPaging;\n  sorting?: Array<RiderAddressSort>;\n};\n\n\nexport type RiderOrdersArgs = {\n  filter?: OrderFilter;\n  paging?: OffsetPaging;\n  sorting?: Array<OrderSort>;\n};\n\n\nexport type RiderTransactionsArgs = {\n  filter?: RiderTransactionFilter;\n  paging?: OffsetPaging;\n  sorting?: Array<RiderTransactionSort>;\n};\n\n\nexport type RiderWalletsArgs = {\n  filter?: RiderWalletFilter;\n  paging?: OffsetPaging;\n  sorting?: Array<RiderWalletSort>;\n};\n\nexport type RiderAddress = {\n  __typename?: 'RiderAddress';\n  details?: Maybe<Scalars['String']['output']>;\n  id: Scalars['ID']['output'];\n  location: Point;\n  riderId: Scalars['ID']['output'];\n  title: Scalars['String']['output'];\n  type: RiderAddressType;\n};\n\nexport type RiderAddressConnection = {\n  __typename?: 'RiderAddressConnection';\n  /** Array of nodes. */\n  nodes: Array<RiderAddress>;\n  /** Paging information */\n  pageInfo: OffsetPageInfo;\n  /** Fetch total count of records */\n  totalCount: Scalars['Int']['output'];\n};\n\nexport type RiderAddressFilter = {\n  and?: InputMaybe<Array<RiderAddressFilter>>;\n  id?: InputMaybe<IdFilterComparison>;\n  or?: InputMaybe<Array<RiderAddressFilter>>;\n  riderId?: InputMaybe<IdFilterComparison>;\n};\n\nexport type RiderAddressSort = {\n  direction: SortDirection;\n  field: RiderAddressSortFields;\n  nulls?: InputMaybe<SortNulls>;\n};\n\nexport enum RiderAddressSortFields {\n  Id = 'id',\n  RiderId = 'riderId'\n}\n\nexport enum RiderAddressType {\n  Cafe = 'Cafe',\n  Gym = 'Gym',\n  Home = 'Home',\n  Other = 'Other',\n  Parent = 'Parent',\n  Park = 'Park',\n  Partner = 'Partner',\n  Work = 'Work'\n}\n\nexport type RiderAddressUpdateFilter = {\n  and?: InputMaybe<Array<RiderAddressUpdateFilter>>;\n  id?: InputMaybe<IdFilterComparison>;\n  or?: InputMaybe<Array<RiderAddressUpdateFilter>>;\n  riderId?: InputMaybe<IdFilterComparison>;\n};\n\nexport type RiderAddressesConnection = {\n  __typename?: 'RiderAddressesConnection';\n  /** Array of nodes. */\n  nodes: Array<RiderAddress>;\n  /** Paging information */\n  pageInfo: OffsetPageInfo;\n  /** Fetch total count of records */\n  totalCount: Scalars['Int']['output'];\n};\n\nexport type RiderConnection = {\n  __typename?: 'RiderConnection';\n  /** Array of nodes. */\n  nodes: Array<Rider>;\n  /** Paging information */\n  pageInfo: OffsetPageInfo;\n  /** Fetch total count of records */\n  totalCount: Scalars['Int']['output'];\n};\n\nexport enum RiderDeductTransactionType {\n  CancellationFee = 'CancellationFee',\n  Correction = 'Correction',\n  OrderFee = 'OrderFee',\n  ParkingFee = 'ParkingFee',\n  Withdraw = 'Withdraw'\n}\n\nexport type RiderFilter = {\n  and?: InputMaybe<Array<RiderFilter>>;\n  firstName?: InputMaybe<StringFieldComparison>;\n  id?: InputMaybe<IdFilterComparison>;\n  lastName?: InputMaybe<StringFieldComparison>;\n  mobileNumber?: InputMaybe<StringFieldComparison>;\n  or?: InputMaybe<Array<RiderFilter>>;\n};\n\nexport type RiderInput = {\n  email?: InputMaybe<Scalars['String']['input']>;\n  firstName?: InputMaybe<Scalars['String']['input']>;\n  gender?: InputMaybe<Gender>;\n  idNumber?: InputMaybe<Scalars['String']['input']>;\n  isResident?: InputMaybe<Scalars['Boolean']['input']>;\n  lastName?: InputMaybe<Scalars['String']['input']>;\n  mobileNumber?: InputMaybe<Scalars['String']['input']>;\n  registrationTimestamp?: InputMaybe<Scalars['DateTime']['input']>;\n  status?: InputMaybe<RiderStatus>;\n};\n\nexport type RiderOrdersConnection = {\n  __typename?: 'RiderOrdersConnection';\n  /** Array of nodes. */\n  nodes: Array<Order>;\n  /** Paging information */\n  pageInfo: OffsetPageInfo;\n  /** Fetch total count of records */\n  totalCount: Scalars['Int']['output'];\n};\n\nexport enum RiderRechargeTransactionType {\n  BankTransfer = 'BankTransfer',\n  Correction = 'Correction',\n  Gift = 'Gift',\n  InAppPayment = 'InAppPayment'\n}\n\nexport type RiderSort = {\n  direction: SortDirection;\n  field: RiderSortFields;\n  nulls?: InputMaybe<SortNulls>;\n};\n\nexport enum RiderSortFields {\n  FirstName = 'firstName',\n  Id = 'id',\n  LastName = 'lastName',\n  MobileNumber = 'mobileNumber'\n}\n\nexport enum RiderStatus {\n  Disabled = 'Disabled',\n  Enabled = 'Enabled'\n}\n\nexport type RiderTransaction = {\n  __typename?: 'RiderTransaction';\n  action: TransactionAction;\n  amount: Scalars['Float']['output'];\n  createdAt: Scalars['DateTime']['output'];\n  currency: Scalars['String']['output'];\n  deductType?: Maybe<RiderDeductTransactionType>;\n  description?: Maybe<Scalars['String']['output']>;\n  id: Scalars['ID']['output'];\n  operator?: Maybe<Operator>;\n  operatorId?: Maybe<Scalars['ID']['output']>;\n  paymentGateway?: Maybe<PaymentGateway>;\n  paymentGatewayId?: Maybe<Scalars['ID']['output']>;\n  rechargeType?: Maybe<RiderRechargeTransactionType>;\n  refrenceNumber?: Maybe<Scalars['String']['output']>;\n  requestId?: Maybe<Scalars['ID']['output']>;\n  rider: Rider;\n  riderId: Scalars['ID']['output'];\n  status: TransactionStatus;\n};\n\nexport type RiderTransactionAggregateFilter = {\n  amount?: InputMaybe<FloatFieldComparison>;\n  and?: InputMaybe<Array<RiderTransactionAggregateFilter>>;\n  createdAt?: InputMaybe<DateFieldComparison>;\n  currency?: InputMaybe<StringFieldComparison>;\n  id?: InputMaybe<IdFilterComparison>;\n  or?: InputMaybe<Array<RiderTransactionAggregateFilter>>;\n  riderId?: InputMaybe<IdFilterComparison>;\n};\n\nexport type RiderTransactionConnection = {\n  __typename?: 'RiderTransactionConnection';\n  /** Array of nodes. */\n  nodes: Array<RiderTransaction>;\n  /** Paging information */\n  pageInfo: OffsetPageInfo;\n  /** Fetch total count of records */\n  totalCount: Scalars['Int']['output'];\n};\n\nexport type RiderTransactionFilter = {\n  amount?: InputMaybe<FloatFieldComparison>;\n  and?: InputMaybe<Array<RiderTransactionFilter>>;\n  createdAt?: InputMaybe<DateFieldComparison>;\n  currency?: InputMaybe<StringFieldComparison>;\n  id?: InputMaybe<IdFilterComparison>;\n  or?: InputMaybe<Array<RiderTransactionFilter>>;\n  riderId?: InputMaybe<IdFilterComparison>;\n};\n\nexport type RiderTransactionInput = {\n  action: TransactionAction;\n  amount: Scalars['Float']['input'];\n  currency: Scalars['String']['input'];\n  deductType?: InputMaybe<RiderDeductTransactionType>;\n  description?: InputMaybe<Scalars['String']['input']>;\n  rechargeType?: InputMaybe<RiderRechargeTransactionType>;\n  refrenceNumber?: InputMaybe<Scalars['String']['input']>;\n  riderId: Scalars['ID']['input'];\n};\n\nexport type RiderTransactionSort = {\n  direction: SortDirection;\n  field: RiderTransactionSortFields;\n  nulls?: InputMaybe<SortNulls>;\n};\n\nexport enum RiderTransactionSortFields {\n  Amount = 'amount',\n  CreatedAt = 'createdAt',\n  Currency = 'currency',\n  Id = 'id',\n  RiderId = 'riderId'\n}\n\nexport type RiderTransactionsConnection = {\n  __typename?: 'RiderTransactionsConnection';\n  /** Array of nodes. */\n  nodes: Array<RiderTransaction>;\n  /** Paging information */\n  pageInfo: OffsetPageInfo;\n  /** Fetch total count of records */\n  totalCount: Scalars['Int']['output'];\n};\n\nexport type RiderWallet = {\n  __typename?: 'RiderWallet';\n  balance: Scalars['Float']['output'];\n  currency: Scalars['String']['output'];\n  id: Scalars['ID']['output'];\n  rider?: Maybe<Rider>;\n  riderId?: Maybe<Scalars['ID']['output']>;\n};\n\nexport type RiderWalletConnection = {\n  __typename?: 'RiderWalletConnection';\n  /** Array of nodes. */\n  nodes: Array<RiderWallet>;\n  /** Paging information */\n  pageInfo: OffsetPageInfo;\n  /** Fetch total count of records */\n  totalCount: Scalars['Int']['output'];\n};\n\nexport type RiderWalletFilter = {\n  and?: InputMaybe<Array<RiderWalletFilter>>;\n  balance?: InputMaybe<FloatFieldComparison>;\n  id?: InputMaybe<IdFilterComparison>;\n  or?: InputMaybe<Array<RiderWalletFilter>>;\n  riderId?: InputMaybe<IdFilterComparison>;\n};\n\nexport type RiderWalletSort = {\n  direction: SortDirection;\n  field: RiderWalletSortFields;\n  nulls?: InputMaybe<SortNulls>;\n};\n\nexport enum RiderWalletSortFields {\n  Balance = 'balance',\n  Id = 'id',\n  RiderId = 'riderId'\n}\n\nexport type RiderWalletsConnection = {\n  __typename?: 'RiderWalletsConnection';\n  /** Array of nodes. */\n  nodes: Array<RiderWallet>;\n  /** Paging information */\n  pageInfo: OffsetPageInfo;\n  /** Fetch total count of records */\n  totalCount: Scalars['Int']['output'];\n};\n\nexport type RunAutoPayoutInput = {\n  payoutMethodId: Scalars['ID']['input'];\n  payoutSessionId: Scalars['ID']['input'];\n};\n\n/** SMS Provider */\nexport type SmsProvider = {\n  __typename?: 'SMSProvider';\n  accountId?: Maybe<Scalars['String']['output']>;\n  authToken?: Maybe<Scalars['String']['output']>;\n  fromNumber?: Maybe<Scalars['String']['output']>;\n  id: Scalars['ID']['output'];\n  isDefault: Scalars['Boolean']['output'];\n  name: Scalars['String']['output'];\n  smsType?: Maybe<Scalars['String']['output']>;\n  type: SmsProviderType;\n  verificationTemplate?: Maybe<Scalars['String']['output']>;\n};\n\nexport type SmsProviderConnection = {\n  __typename?: 'SMSProviderConnection';\n  /** Array of nodes. */\n  nodes: Array<SmsProvider>;\n  /** Paging information */\n  pageInfo: OffsetPageInfo;\n  /** Fetch total count of records */\n  totalCount: Scalars['Int']['output'];\n};\n\nexport type SmsProviderDeleteFilter = {\n  and?: InputMaybe<Array<SmsProviderDeleteFilter>>;\n  id?: InputMaybe<IdFilterComparison>;\n  or?: InputMaybe<Array<SmsProviderDeleteFilter>>;\n};\n\nexport type SmsProviderDeleteResponse = {\n  __typename?: 'SMSProviderDeleteResponse';\n  accountId?: Maybe<Scalars['String']['output']>;\n  authToken?: Maybe<Scalars['String']['output']>;\n  fromNumber?: Maybe<Scalars['String']['output']>;\n  id?: Maybe<Scalars['ID']['output']>;\n  isDefault?: Maybe<Scalars['Boolean']['output']>;\n  name?: Maybe<Scalars['String']['output']>;\n  smsType?: Maybe<Scalars['String']['output']>;\n  type?: Maybe<SmsProviderType>;\n  verificationTemplate?: Maybe<Scalars['String']['output']>;\n};\n\nexport type SmsProviderFilter = {\n  and?: InputMaybe<Array<SmsProviderFilter>>;\n  id?: InputMaybe<IdFilterComparison>;\n  or?: InputMaybe<Array<SmsProviderFilter>>;\n};\n\nexport type SmsProviderInput = {\n  accountId?: InputMaybe<Scalars['String']['input']>;\n  authToken?: InputMaybe<Scalars['String']['input']>;\n  fromNumber?: InputMaybe<Scalars['String']['input']>;\n  isDefault?: InputMaybe<Scalars['Boolean']['input']>;\n  name?: InputMaybe<Scalars['String']['input']>;\n  smsType?: InputMaybe<Scalars['String']['input']>;\n  type?: InputMaybe<SmsProviderType>;\n  verificationTemplate?: InputMaybe<Scalars['String']['input']>;\n};\n\nexport type SmsProviderSort = {\n  direction: SortDirection;\n  field: SmsProviderSortFields;\n  nulls?: InputMaybe<SortNulls>;\n};\n\nexport enum SmsProviderSortFields {\n  Id = 'id'\n}\n\n/** The type of the SMS provider */\nexport enum SmsProviderType {\n  BroadNet = 'BroadNet',\n  ClickSend = 'ClickSend',\n  Firebase = 'Firebase',\n  Infobip = 'Infobip',\n  MessageBird = 'MessageBird',\n  Pahappa = 'Pahappa',\n  Plivo = 'Plivo',\n  Twilio = 'Twilio',\n  Vonage = 'Vonage'\n}\n\nexport type SmsProviderUpdateFilter = {\n  and?: InputMaybe<Array<SmsProviderUpdateFilter>>;\n  id?: InputMaybe<IdFilterComparison>;\n  or?: InputMaybe<Array<SmsProviderUpdateFilter>>;\n};\n\nexport type SosActivity = {\n  __typename?: 'SOSActivity';\n  action: SosActivityAction;\n  createdAt: Scalars['DateTime']['output'];\n  id: Scalars['ID']['output'];\n  note?: Maybe<Scalars['String']['output']>;\n  operator: Operator;\n  operatorId?: Maybe<Scalars['Float']['output']>;\n};\n\nexport enum SosActivityAction {\n  ContactAuthorities = 'ContactAuthorities',\n  ContactDriver = 'ContactDriver',\n  MarkedAsFalseAlarm = 'MarkedAsFalseAlarm',\n  MarkedAsResolved = 'MarkedAsResolved',\n  Seen = 'Seen',\n  Submitted = 'Submitted'\n}\n\nexport type SosActivityAggregateFilter = {\n  and?: InputMaybe<Array<SosActivityAggregateFilter>>;\n  id?: InputMaybe<IdFilterComparison>;\n  or?: InputMaybe<Array<SosActivityAggregateFilter>>;\n};\n\nexport type SosActivityFilter = {\n  and?: InputMaybe<Array<SosActivityFilter>>;\n  id?: InputMaybe<IdFilterComparison>;\n  or?: InputMaybe<Array<SosActivityFilter>>;\n};\n\nexport type SosActivitySort = {\n  direction: SortDirection;\n  field: SosActivitySortFields;\n  nulls?: InputMaybe<SortNulls>;\n};\n\nexport enum SosActivitySortFields {\n  Id = 'id'\n}\n\nexport enum SosStatus {\n  FalseAlarm = 'FalseAlarm',\n  Resolved = 'Resolved',\n  Submitted = 'Submitted',\n  UnderReview = 'UnderReview'\n}\n\nexport type SosStatusFilterComparison = {\n  eq?: InputMaybe<SosStatus>;\n  gt?: InputMaybe<SosStatus>;\n  gte?: InputMaybe<SosStatus>;\n  iLike?: InputMaybe<SosStatus>;\n  in?: InputMaybe<Array<SosStatus>>;\n  is?: InputMaybe<Scalars['Boolean']['input']>;\n  isNot?: InputMaybe<Scalars['Boolean']['input']>;\n  like?: InputMaybe<SosStatus>;\n  lt?: InputMaybe<SosStatus>;\n  lte?: InputMaybe<SosStatus>;\n  neq?: InputMaybe<SosStatus>;\n  notILike?: InputMaybe<SosStatus>;\n  notIn?: InputMaybe<Array<SosStatus>>;\n  notLike?: InputMaybe<SosStatus>;\n};\n\n/** Saved payment method type */\nexport enum SavedPaymentMethodType {\n  BankAccount = 'BANK_ACCOUNT',\n  Card = 'CARD'\n}\n\nexport type Service = {\n  __typename?: 'Service';\n  baseFare: Scalars['Float']['output'];\n  cancellationDriverShare: Scalars['Float']['output'];\n  cancellationTotalFee: Scalars['Float']['output'];\n  categoryId: Scalars['ID']['output'];\n  dateRangeMultipliers: Array<DateRangeMultiplier>;\n  description?: Maybe<Scalars['String']['output']>;\n  distanceMultipliers: Array<DistanceMultiplier>;\n  id: Scalars['ID']['output'];\n  maximumDestinationDistance: Scalars['Int']['output'];\n  media: Media;\n  mediaId: Scalars['ID']['output'];\n  minimumFee: Scalars['Float']['output'];\n  name: Scalars['String']['output'];\n  options: Array<ServiceOption>;\n  paymentMethod: ServicePaymentMethod;\n  perHundredMeters: Scalars['Float']['output'];\n  perMinuteDrive: Scalars['Float']['output'];\n  perMinuteWait: Scalars['Float']['output'];\n  personCapacity?: Maybe<Scalars['Int']['output']>;\n  prepayPercent: Scalars['Float']['output'];\n  providerShareFlat: Scalars['Float']['output'];\n  providerSharePercent: Scalars['Int']['output'];\n  regions: Array<Region>;\n  roundingFactor?: Maybe<Scalars['Float']['output']>;\n  searchRadius: Scalars['Int']['output'];\n  timeMultipliers: Array<TimeMultiplier>;\n  twoWayAvailable: Scalars['Boolean']['output'];\n  weekdayMultipliers: Array<WeekdayMultiplier>;\n};\n\n\nexport type ServiceOptionsArgs = {\n  filter?: ServiceOptionFilter;\n  sorting?: Array<ServiceOptionSort>;\n};\n\n\nexport type ServiceRegionsArgs = {\n  filter?: RegionFilter;\n  sorting?: Array<RegionSort>;\n};\n\nexport type ServiceAggregateFilter = {\n  and?: InputMaybe<Array<ServiceAggregateFilter>>;\n  categoryId?: InputMaybe<IdFilterComparison>;\n  id?: InputMaybe<IdFilterComparison>;\n  or?: InputMaybe<Array<ServiceAggregateFilter>>;\n};\n\nexport type ServiceCategory = {\n  __typename?: 'ServiceCategory';\n  id: Scalars['ID']['output'];\n  name: Scalars['String']['output'];\n  services: Array<Service>;\n};\n\n\nexport type ServiceCategoryServicesArgs = {\n  filter?: ServiceFilter;\n  sorting?: Array<ServiceSort>;\n};\n\nexport type ServiceCategoryDeleteResponse = {\n  __typename?: 'ServiceCategoryDeleteResponse';\n  id?: Maybe<Scalars['ID']['output']>;\n  name?: Maybe<Scalars['String']['output']>;\n};\n\nexport type ServiceCategoryFilter = {\n  and?: InputMaybe<Array<ServiceCategoryFilter>>;\n  id?: InputMaybe<IdFilterComparison>;\n  or?: InputMaybe<Array<ServiceCategoryFilter>>;\n};\n\nexport type ServiceCategoryInput = {\n  enabled?: InputMaybe<Scalars['Boolean']['input']>;\n  name: Scalars['String']['input'];\n};\n\nexport type ServiceCategorySort = {\n  direction: SortDirection;\n  field: ServiceCategorySortFields;\n  nulls?: InputMaybe<SortNulls>;\n};\n\nexport enum ServiceCategorySortFields {\n  Id = 'id'\n}\n\nexport type ServiceCategoryWithCost = {\n  __typename?: 'ServiceCategoryWithCost';\n  id: Scalars['ID']['output'];\n  name: Scalars['String']['output'];\n  services: Array<ServiceWithCost>;\n};\n\nexport type ServiceDeleteResponse = {\n  __typename?: 'ServiceDeleteResponse';\n  baseFare?: Maybe<Scalars['Float']['output']>;\n  cancellationDriverShare?: Maybe<Scalars['Float']['output']>;\n  cancellationTotalFee?: Maybe<Scalars['Float']['output']>;\n  categoryId?: Maybe<Scalars['ID']['output']>;\n  dateRangeMultipliers?: Maybe<Array<DateRangeMultiplier>>;\n  description?: Maybe<Scalars['String']['output']>;\n  distanceMultipliers?: Maybe<Array<DistanceMultiplier>>;\n  id?: Maybe<Scalars['ID']['output']>;\n  maximumDestinationDistance?: Maybe<Scalars['Int']['output']>;\n  mediaId?: Maybe<Scalars['ID']['output']>;\n  minimumFee?: Maybe<Scalars['Float']['output']>;\n  name?: Maybe<Scalars['String']['output']>;\n  paymentMethod?: Maybe<ServicePaymentMethod>;\n  perHundredMeters?: Maybe<Scalars['Float']['output']>;\n  perMinuteDrive?: Maybe<Scalars['Float']['output']>;\n  perMinuteWait?: Maybe<Scalars['Float']['output']>;\n  personCapacity?: Maybe<Scalars['Int']['output']>;\n  prepayPercent?: Maybe<Scalars['Float']['output']>;\n  providerShareFlat?: Maybe<Scalars['Float']['output']>;\n  providerSharePercent?: Maybe<Scalars['Int']['output']>;\n  roundingFactor?: Maybe<Scalars['Float']['output']>;\n  searchRadius?: Maybe<Scalars['Int']['output']>;\n  timeMultipliers?: Maybe<Array<TimeMultiplier>>;\n  twoWayAvailable?: Maybe<Scalars['Boolean']['output']>;\n  weekdayMultipliers?: Maybe<Array<WeekdayMultiplier>>;\n};\n\nexport type ServiceFilter = {\n  and?: InputMaybe<Array<ServiceFilter>>;\n  categoryId?: InputMaybe<IdFilterComparison>;\n  id?: InputMaybe<IdFilterComparison>;\n  or?: InputMaybe<Array<ServiceFilter>>;\n};\n\nexport type ServiceInput = {\n  baseFare: Scalars['Float']['input'];\n  cancellationDriverShare: Scalars['Float']['input'];\n  cancellationTotalFee: Scalars['Float']['input'];\n  categoryId: Scalars['ID']['input'];\n  dateRangeMultipliers: Array<DateRangeMultiplierInput>;\n  description?: InputMaybe<Scalars['String']['input']>;\n  distanceMultipliers: Array<DistanceMultiplierInput>;\n  maximumDestinationDistance: Scalars['Int']['input'];\n  mediaId: Scalars['ID']['input'];\n  minimumFee: Scalars['Float']['input'];\n  name: Scalars['String']['input'];\n  paymentMethod: ServicePaymentMethod;\n  perHundredMeters: Scalars['Float']['input'];\n  perMinuteDrive: Scalars['Float']['input'];\n  perMinuteWait: Scalars['Float']['input'];\n  personCapacity?: InputMaybe<Scalars['Int']['input']>;\n  prepayPercent: Scalars['Float']['input'];\n  providerShareFlat: Scalars['Float']['input'];\n  providerSharePercent: Scalars['Int']['input'];\n  roundingFactor?: InputMaybe<Scalars['Float']['input']>;\n  searchRadius: Scalars['Int']['input'];\n  timeMultipliers: Array<TimeMultiplierInput>;\n  twoWayAvailable: Scalars['Boolean']['input'];\n  weekdayMultipliers: Array<WeekdayMultiplierInput>;\n};\n\nexport type ServiceOption = {\n  __typename?: 'ServiceOption';\n  additionalFee?: Maybe<Scalars['Float']['output']>;\n  icon: ServiceOptionIcon;\n  id: Scalars['ID']['output'];\n  name: Scalars['String']['output'];\n  type: ServiceOptionType;\n};\n\nexport type ServiceOptionDeleteResponse = {\n  __typename?: 'ServiceOptionDeleteResponse';\n  additionalFee?: Maybe<Scalars['Float']['output']>;\n  icon?: Maybe<ServiceOptionIcon>;\n  id?: Maybe<Scalars['ID']['output']>;\n  name?: Maybe<Scalars['String']['output']>;\n  type?: Maybe<ServiceOptionType>;\n};\n\nexport type ServiceOptionFilter = {\n  and?: InputMaybe<Array<ServiceOptionFilter>>;\n  id?: InputMaybe<IdFilterComparison>;\n  or?: InputMaybe<Array<ServiceOptionFilter>>;\n};\n\nexport enum ServiceOptionIcon {\n  Custom1 = 'Custom1',\n  Custom2 = 'Custom2',\n  Custom3 = 'Custom3',\n  Custom4 = 'Custom4',\n  Custom5 = 'Custom5',\n  Luggage = 'Luggage',\n  PackageDelivery = 'PackageDelivery',\n  Pet = 'Pet',\n  Shopping = 'Shopping',\n  TwoWay = 'TwoWay'\n}\n\nexport type ServiceOptionInput = {\n  additionalFee?: InputMaybe<Scalars['Float']['input']>;\n  icon: ServiceOptionIcon;\n  name: Scalars['String']['input'];\n  type: ServiceOptionType;\n};\n\nexport type ServiceOptionSort = {\n  direction: SortDirection;\n  field: ServiceOptionSortFields;\n  nulls?: InputMaybe<SortNulls>;\n};\n\nexport enum ServiceOptionSortFields {\n  Id = 'id'\n}\n\nexport enum ServiceOptionType {\n  Free = 'Free',\n  Paid = 'Paid',\n  TwoWay = 'TwoWay'\n}\n\nexport enum ServicePaymentMethod {\n  CashCredit = 'CashCredit',\n  OnlyCash = 'OnlyCash',\n  OnlyCredit = 'OnlyCredit'\n}\n\nexport type ServiceSort = {\n  direction: SortDirection;\n  field: ServiceSortFields;\n  nulls?: InputMaybe<SortNulls>;\n};\n\nexport enum ServiceSortFields {\n  CategoryId = 'categoryId',\n  Id = 'id'\n}\n\nexport type ServiceWithCost = {\n  __typename?: 'ServiceWithCost';\n  cost: Scalars['Float']['output'];\n  id: Scalars['ID']['output'];\n  media: Media;\n  name: Scalars['String']['output'];\n};\n\nexport type SetEnabledServicesOnDriverInput = {\n  /** The id of the record. */\n  id: Scalars['ID']['input'];\n  /** The ids of the relations. */\n  relationIds: Array<Scalars['ID']['input']>;\n};\n\nexport type SetFleetsOnZonePriceInput = {\n  /** The id of the record. */\n  id: Scalars['ID']['input'];\n  /** The ids of the relations. */\n  relationIds: Array<Scalars['ID']['input']>;\n};\n\nexport type SetOptionsOnServiceInput = {\n  /** The id of the record. */\n  id: Scalars['ID']['input'];\n  /** The ids of the relations. */\n  relationIds: Array<Scalars['ID']['input']>;\n};\n\nexport type SetRegionsOnServiceInput = {\n  /** The id of the record. */\n  id: Scalars['ID']['input'];\n  /** The ids of the relations. */\n  relationIds: Array<Scalars['ID']['input']>;\n};\n\nexport type SetServicesOnZonePriceInput = {\n  /** The id of the record. */\n  id: Scalars['ID']['input'];\n  /** The ids of the relations. */\n  relationIds: Array<Scalars['ID']['input']>;\n};\n\n/** Sort Directions */\nexport enum SortDirection {\n  Asc = 'ASC',\n  Desc = 'DESC'\n}\n\n/** Sort Nulls Options */\nexport enum SortNulls {\n  NullsFirst = 'NULLS_FIRST',\n  NullsLast = 'NULLS_LAST'\n}\n\nexport type StringFieldComparison = {\n  eq?: InputMaybe<Scalars['String']['input']>;\n  gt?: InputMaybe<Scalars['String']['input']>;\n  gte?: InputMaybe<Scalars['String']['input']>;\n  iLike?: InputMaybe<Scalars['String']['input']>;\n  in?: InputMaybe<Array<Scalars['String']['input']>>;\n  is?: InputMaybe<Scalars['Boolean']['input']>;\n  isNot?: InputMaybe<Scalars['Boolean']['input']>;\n  like?: InputMaybe<Scalars['String']['input']>;\n  lt?: InputMaybe<Scalars['String']['input']>;\n  lte?: InputMaybe<Scalars['String']['input']>;\n  neq?: InputMaybe<Scalars['String']['input']>;\n  notILike?: InputMaybe<Scalars['String']['input']>;\n  notIn?: InputMaybe<Array<Scalars['String']['input']>>;\n  notLike?: InputMaybe<Scalars['String']['input']>;\n};\n\nexport type Subscription = {\n  __typename?: 'Subscription';\n  complaintCreated: Complaint;\n  orderUpdated: Order;\n  sosCreated: DistressSignal;\n};\n\n\nexport type SubscriptionOrderUpdatedArgs = {\n  orderId: Scalars['ID']['input'];\n};\n\nexport type TimeMultiplier = {\n  __typename?: 'TimeMultiplier';\n  endTime: Scalars['String']['output'];\n  multiply: Scalars['Float']['output'];\n  startTime: Scalars['String']['output'];\n};\n\nexport type TimeMultiplierInput = {\n  endTime: Scalars['String']['input'];\n  multiply: Scalars['Float']['input'];\n  startTime: Scalars['String']['input'];\n};\n\nexport type TokenObject = {\n  __typename?: 'TokenObject';\n  token: Scalars['String']['output'];\n};\n\nexport enum TransactionAction {\n  Deduct = 'Deduct',\n  Recharge = 'Recharge'\n}\n\nexport enum TransactionStatus {\n  Canceled = 'Canceled',\n  Done = 'Done',\n  Processing = 'Processing',\n  Rejected = 'Rejected'\n}\n\nexport type TransactionStatusFilterComparison = {\n  eq?: InputMaybe<TransactionStatus>;\n  gt?: InputMaybe<TransactionStatus>;\n  gte?: InputMaybe<TransactionStatus>;\n  iLike?: InputMaybe<TransactionStatus>;\n  in?: InputMaybe<Array<TransactionStatus>>;\n  is?: InputMaybe<Scalars['Boolean']['input']>;\n  isNot?: InputMaybe<Scalars['Boolean']['input']>;\n  like?: InputMaybe<TransactionStatus>;\n  lt?: InputMaybe<TransactionStatus>;\n  lte?: InputMaybe<TransactionStatus>;\n  neq?: InputMaybe<TransactionStatus>;\n  notILike?: InputMaybe<TransactionStatus>;\n  notIn?: InputMaybe<Array<TransactionStatus>>;\n  notLike?: InputMaybe<TransactionStatus>;\n};\n\nexport type UpdateComplaint = {\n  content?: InputMaybe<Scalars['String']['input']>;\n  id?: InputMaybe<Scalars['ID']['input']>;\n  inscriptionTimestamp?: InputMaybe<Scalars['DateTime']['input']>;\n  requestId?: InputMaybe<Scalars['ID']['input']>;\n  requestedByDriver?: InputMaybe<Scalars['Boolean']['input']>;\n  status?: InputMaybe<ComplaintStatus>;\n  subject?: InputMaybe<Scalars['String']['input']>;\n};\n\nexport type UpdateConfigInput = {\n  adminPanelAPIKey?: InputMaybe<Scalars['String']['input']>;\n  backendMapsAPIKey?: InputMaybe<Scalars['String']['input']>;\n  twilioAccountSid?: InputMaybe<Scalars['String']['input']>;\n  twilioAuthToken?: InputMaybe<Scalars['String']['input']>;\n  twilioFromNumber?: InputMaybe<Scalars['String']['input']>;\n  twilioVerificationCodeSMSTemplate?: InputMaybe<Scalars['String']['input']>;\n};\n\nexport type UpdateConfigResult = {\n  __typename?: 'UpdateConfigResult';\n  message?: Maybe<Scalars['String']['output']>;\n  status: UpdateConfigStatus;\n};\n\nexport enum UpdateConfigStatus {\n  Invalid = 'INVALID',\n  Ok = 'OK'\n}\n\nexport type UpdateDriverInput = {\n  accountNumber?: InputMaybe<Scalars['String']['input']>;\n  address?: InputMaybe<Scalars['String']['input']>;\n  bankName?: InputMaybe<Scalars['String']['input']>;\n  bankRoutingNumber?: InputMaybe<Scalars['String']['input']>;\n  bankSwift?: InputMaybe<Scalars['String']['input']>;\n  carColorId?: InputMaybe<Scalars['ID']['input']>;\n  carId?: InputMaybe<Scalars['ID']['input']>;\n  carPlate?: InputMaybe<Scalars['String']['input']>;\n  carProductionYear?: InputMaybe<Scalars['Int']['input']>;\n  certificateNumber?: InputMaybe<Scalars['String']['input']>;\n  email?: InputMaybe<Scalars['String']['input']>;\n  firstName?: InputMaybe<Scalars['String']['input']>;\n  fleetId?: InputMaybe<Scalars['ID']['input']>;\n  gender?: InputMaybe<Gender>;\n  lastName?: InputMaybe<Scalars['String']['input']>;\n  mediaId?: InputMaybe<Scalars['ID']['input']>;\n  mobileNumber?: InputMaybe<Scalars['String']['input']>;\n  softRejectionNote?: InputMaybe<Scalars['String']['input']>;\n  status?: InputMaybe<DriverStatus>;\n};\n\nexport type UpdateFeedback = {\n  description?: InputMaybe<Scalars['String']['input']>;\n  driverId?: InputMaybe<Scalars['ID']['input']>;\n  id?: InputMaybe<Scalars['ID']['input']>;\n  requestId?: InputMaybe<Scalars['ID']['input']>;\n  reviewTimestamp?: InputMaybe<Scalars['DateTime']['input']>;\n  score?: InputMaybe<Scalars['Int']['input']>;\n};\n\nexport type UpdateManyResponse = {\n  __typename?: 'UpdateManyResponse';\n  /** The number of records updated. */\n  updatedCount: Scalars['Int']['output'];\n};\n\nexport type UpdateManyRiderAddressesInput = {\n  /** Filter used to find fields to update */\n  filter: RiderAddressUpdateFilter;\n  /** The update to apply to all records found using the filter */\n  update: UpdateRiderAddress;\n};\n\nexport type UpdateManySmsProvidersInput = {\n  /** Filter used to find fields to update */\n  filter: SmsProviderUpdateFilter;\n  /** The update to apply to all records found using the filter */\n  update: SmsProviderInput;\n};\n\nexport type UpdateOneAnnouncementInput = {\n  /** The id of the record to update */\n  id: Scalars['ID']['input'];\n  /** The update to apply. */\n  update: AnnouncementInput;\n};\n\nexport type UpdateOneCarColorInput = {\n  /** The id of the record to update */\n  id: Scalars['ID']['input'];\n  /** The update to apply. */\n  update: CarColorInput;\n};\n\nexport type UpdateOneCarModelInput = {\n  /** The id of the record to update */\n  id: Scalars['ID']['input'];\n  /** The update to apply. */\n  update: CarModelInput;\n};\n\nexport type UpdateOneComplaintInput = {\n  /** The id of the record to update */\n  id: Scalars['ID']['input'];\n  /** The update to apply. */\n  update: UpdateComplaint;\n};\n\nexport type UpdateOneCouponInput = {\n  /** The id of the record to update */\n  id: Scalars['ID']['input'];\n  /** The update to apply. */\n  update: CouponInput;\n};\n\nexport type UpdateOneDriverInput = {\n  /** The id of the record to update */\n  id: Scalars['ID']['input'];\n  /** The update to apply. */\n  update: UpdateDriverInput;\n};\n\nexport type UpdateOneFeedbackInput = {\n  /** The id of the record to update */\n  id: Scalars['ID']['input'];\n  /** The update to apply. */\n  update: UpdateFeedback;\n};\n\nexport type UpdateOneFeedbackParameterInput = {\n  /** The id of the record to update */\n  id: Scalars['ID']['input'];\n  /** The update to apply. */\n  update: FeedbackParameterInput;\n};\n\nexport type UpdateOneFleetInput = {\n  /** The id of the record to update */\n  id: Scalars['ID']['input'];\n  /** The update to apply. */\n  update: FleetInput;\n};\n\nexport type UpdateOneOperatorInput = {\n  /** The id of the record to update */\n  id: Scalars['ID']['input'];\n  /** The update to apply. */\n  update: UpdateOperator;\n};\n\nexport type UpdateOneOperatorRoleInput = {\n  /** The id of the record to update */\n  id: Scalars['ID']['input'];\n  /** The update to apply. */\n  update: OperatorRoleInput;\n};\n\nexport type UpdateOneOrderCancelReasonInput = {\n  /** The id of the record to update */\n  id: Scalars['ID']['input'];\n  /** The update to apply. */\n  update: OrderCancelReasonInput;\n};\n\nexport type UpdateOnePaymentGatewayInput = {\n  /** The id of the record to update */\n  id: Scalars['ID']['input'];\n  /** The update to apply. */\n  update: PaymentGatewayInput;\n};\n\nexport type UpdateOnePayoutMethodInput = {\n  /** The id of the record to update */\n  id: Scalars['ID']['input'];\n  /** The update to apply. */\n  update: CreatePayoutMethodInput;\n};\n\nexport type UpdateOneRegionInput = {\n  /** The id of the record to update */\n  id: Scalars['ID']['input'];\n  /** The update to apply. */\n  update: RegionInput;\n};\n\nexport type UpdateOneRewardInput = {\n  /** The id of the record to update */\n  id: Scalars['ID']['input'];\n  /** The update to apply. */\n  update: UpdateReward;\n};\n\nexport type UpdateOneRiderAddressInput = {\n  /** The id of the record to update */\n  id: Scalars['ID']['input'];\n  /** The update to apply. */\n  update: UpdateRiderAddress;\n};\n\nexport type UpdateOneRiderInput = {\n  /** The id of the record to update */\n  id: Scalars['ID']['input'];\n  /** The update to apply. */\n  update: RiderInput;\n};\n\nexport type UpdateOneSmsProviderInput = {\n  /** The id of the record to update */\n  id: Scalars['ID']['input'];\n  /** The update to apply. */\n  update: SmsProviderInput;\n};\n\nexport type UpdateOneServiceCategoryInput = {\n  /** The id of the record to update */\n  id: Scalars['ID']['input'];\n  /** The update to apply. */\n  update: ServiceCategoryInput;\n};\n\nexport type UpdateOneServiceInput = {\n  /** The id of the record to update */\n  id: Scalars['ID']['input'];\n  /** The update to apply. */\n  update: ServiceInput;\n};\n\nexport type UpdateOneServiceOptionInput = {\n  /** The id of the record to update */\n  id: Scalars['ID']['input'];\n  /** The update to apply. */\n  update: ServiceOptionInput;\n};\n\nexport type UpdateOneZonePriceInput = {\n  /** The id of the record to update */\n  id: Scalars['ID']['input'];\n  /** The update to apply. */\n  update: ZonePriceInput;\n};\n\nexport type UpdateOperator = {\n  email?: InputMaybe<Scalars['String']['input']>;\n  firstName?: InputMaybe<Scalars['String']['input']>;\n  id?: InputMaybe<Scalars['ID']['input']>;\n  lastName?: InputMaybe<Scalars['String']['input']>;\n  mobileNumber?: InputMaybe<Scalars['String']['input']>;\n  roleId?: InputMaybe<Scalars['ID']['input']>;\n  userName?: InputMaybe<Scalars['String']['input']>;\n};\n\nexport type UpdatePasswordInput = {\n  newPasswod: Scalars['String']['input'];\n  oldPassword: Scalars['String']['input'];\n};\n\nexport type UpdatePayoutSessionInput = {\n  status: PayoutSessionStatus;\n};\n\nexport type UpdatePurchaseCodeClient = {\n  __typename?: 'UpdatePurchaseCodeClient';\n  enabled: Scalars['Float']['output'];\n  first_verified_at: Scalars['String']['output'];\n  id: Scalars['Float']['output'];\n  ip: Scalars['String']['output'];\n  last_verified_at: Scalars['String']['output'];\n  port: Scalars['Float']['output'];\n  purchase_id: Scalars['Float']['output'];\n  token: Scalars['String']['output'];\n};\n\nexport type UpdatePurchaseCodeResult = {\n  __typename?: 'UpdatePurchaseCodeResult';\n  clients?: Maybe<Array<UpdatePurchaseCodeClient>>;\n  message?: Maybe<Scalars['String']['output']>;\n  status: UpdatePurchaseCodeStatus;\n};\n\nexport enum UpdatePurchaseCodeStatus {\n  ClientFound = 'CLIENT_FOUND',\n  Invalid = 'INVALID',\n  Ok = 'OK',\n  Overused = 'OVERUSED'\n}\n\nexport type UpdateReward = {\n  appType?: InputMaybe<RewardAppType>;\n  beneficiary?: InputMaybe<RewardBeneficiary>;\n  conditionTripCountsLessThan?: InputMaybe<Scalars['Float']['input']>;\n  conditionUserNumberFirstDigits?: InputMaybe<Array<Scalars['String']['input']>>;\n  creditCurrency?: InputMaybe<Scalars['String']['input']>;\n  creditGift?: InputMaybe<Scalars['Float']['input']>;\n  endDate?: InputMaybe<Scalars['DateTime']['input']>;\n  event?: InputMaybe<RewardEvent>;\n  id?: InputMaybe<Scalars['ID']['input']>;\n  startDate?: InputMaybe<Scalars['DateTime']['input']>;\n  title?: InputMaybe<Scalars['String']['input']>;\n  tripFeePercentGift?: InputMaybe<Scalars['Float']['input']>;\n};\n\nexport type UpdateRiderAddress = {\n  details?: InputMaybe<Scalars['String']['input']>;\n  id?: InputMaybe<Scalars['ID']['input']>;\n  location?: InputMaybe<PointInput>;\n  riderId?: InputMaybe<Scalars['ID']['input']>;\n  title?: InputMaybe<Scalars['String']['input']>;\n  type?: InputMaybe<RiderAddressType>;\n};\n\nexport enum Weekday {\n  Friday = 'Friday',\n  Monday = 'Monday',\n  Saturday = 'Saturday',\n  Sunday = 'Sunday',\n  Thursday = 'Thursday',\n  Tuesday = 'Tuesday',\n  Wednesday = 'Wednesday'\n}\n\nexport type WeekdayMultiplier = {\n  __typename?: 'WeekdayMultiplier';\n  multiply: Scalars['Float']['output'];\n  weekday: Weekday;\n};\n\nexport type WeekdayMultiplierInput = {\n  multiply: Scalars['Float']['input'];\n  weekday: Weekday;\n};\n\nexport type ZonePrice = {\n  __typename?: 'ZonePrice';\n  cost: Scalars['Float']['output'];\n  fleets: Array<Fleet>;\n  from: Array<Array<Point>>;\n  id: Scalars['ID']['output'];\n  name: Scalars['String']['output'];\n  services: Array<Service>;\n  timeMultipliers: Array<TimeMultiplier>;\n  to: Array<Array<Point>>;\n};\n\n\nexport type ZonePriceFleetsArgs = {\n  filter?: FleetFilter;\n  sorting?: Array<FleetSort>;\n};\n\n\nexport type ZonePriceServicesArgs = {\n  filter?: ServiceFilter;\n  sorting?: Array<ServiceSort>;\n};\n\nexport type ZonePriceConnection = {\n  __typename?: 'ZonePriceConnection';\n  /** Array of nodes. */\n  nodes: Array<ZonePrice>;\n  /** Paging information */\n  pageInfo: OffsetPageInfo;\n  /** Fetch total count of records */\n  totalCount: Scalars['Int']['output'];\n};\n\nexport type ZonePriceDeleteResponse = {\n  __typename?: 'ZonePriceDeleteResponse';\n  cost?: Maybe<Scalars['Float']['output']>;\n  from?: Maybe<Array<Array<Point>>>;\n  id?: Maybe<Scalars['ID']['output']>;\n  name?: Maybe<Scalars['String']['output']>;\n  timeMultipliers?: Maybe<Array<TimeMultiplier>>;\n  to?: Maybe<Array<Array<Point>>>;\n};\n\nexport type ZonePriceFilter = {\n  and?: InputMaybe<Array<ZonePriceFilter>>;\n  id?: InputMaybe<IdFilterComparison>;\n  or?: InputMaybe<Array<ZonePriceFilter>>;\n};\n\nexport type ZonePriceInput = {\n  cost: Scalars['Float']['input'];\n  from: Array<Array<PointInput>>;\n  name: Scalars['String']['input'];\n  timeMultipliers: Array<TimeMultiplierInput>;\n  to: Array<Array<PointInput>>;\n};\n\nexport type ZonePriceSort = {\n  direction: SortDirection;\n  field: ZonePriceSortFields;\n  nulls?: InputMaybe<SortNulls>;\n};\n\nexport enum ZonePriceSortFields {\n  Id = 'id'\n}\n\nexport type NotificationsQueryVariables = Exact<{ [key: string]: never; }>;\n\n\nexport type NotificationsQuery = { __typename?: 'Query', complaintAggregate: Array<{ __typename?: 'ComplaintAggregateResponse', count?: { __typename?: 'ComplaintCountAggregate', id?: number | null } | null }>, distressSignalAggregate: Array<{ __typename?: 'DistressSignalAggregateResponse', count?: { __typename?: 'DistressSignalCountAggregate', id?: number | null } | null }>, driverAggregate: Array<{ __typename?: 'DriverAggregateResponse', count?: { __typename?: 'DriverCountAggregate', id?: number | null } | null }> };\n\nexport type SosSubscriptionSubscriptionVariables = Exact<{ [key: string]: never; }>;\n\n\nexport type SosSubscriptionSubscription = { __typename?: 'Subscription', sosCreated: { __typename?: 'DistressSignal', id: string, status: SosStatus } };\n\nexport type ComplaintSubscriptionSubscriptionVariables = Exact<{ [key: string]: never; }>;\n\n\nexport type ComplaintSubscriptionSubscription = { __typename?: 'Subscription', complaintCreated: { __typename?: 'Complaint', id: string, status: ComplaintStatus } };\n\nexport type ViewComplaintQueryVariables = Exact<{\n  id: Scalars['ID']['input'];\n}>;\n\n\nexport type ViewComplaintQuery = { __typename?: 'Query', complaint: { __typename?: 'Complaint', id: string, inscriptionTimestamp: any, status: ComplaintStatus, subject: string, content?: string | null, requestedByDriver: boolean, activities: Array<{ __typename?: 'ComplaintActivity', type: ComplaintActivityType, comment?: string | null, actor: { __typename?: 'Operator', firstName?: string | null, lastName?: string | null }, assignedTo?: { __typename?: 'Operator', firstName?: string | null, lastName?: string | null } | null }>, order: { __typename?: 'Order', id: string, status: OrderStatus, createdOn: any, startTimestamp?: any | null, finishTimestamp?: any | null, expectedTimestamp?: any | null, costBest: number, costAfterCoupon: number, addresses: Array<string>, currency: string, rider?: { __typename?: 'Rider', id: string, mobileNumber: string, status: RiderStatus, firstName?: string | null, lastName?: string | null, registrationTimestamp: any } | null, driver?: { __typename?: 'Driver', id: string, mobileNumber: string, status: DriverStatus, firstName?: string | null, lastName?: string | null, registrationTimestamp: any } | null } } };\n\nexport type UpdateComplaintStatusMutationVariables = Exact<{\n  id: Scalars['ID']['input'];\n  status: ComplaintStatus;\n}>;\n\n\nexport type UpdateComplaintStatusMutation = { __typename?: 'Mutation', updateOneComplaint: { __typename?: 'Complaint', id: string } };\n\nexport type ComplaintsListQueryVariables = Exact<{\n  paging?: InputMaybe<OffsetPaging>;\n}>;\n\n\nexport type ComplaintsListQuery = { __typename?: 'Query', complaints: { __typename?: 'ComplaintConnection', totalCount: number, nodes: Array<{ __typename?: 'Complaint', id: string, inscriptionTimestamp: any, subject: string, status: ComplaintStatus, content?: string | null }> } };\n\nexport type CreateDriverMutationVariables = Exact<{\n  input: UpdateDriverInput;\n}>;\n\n\nexport type CreateDriverMutation = { __typename?: 'Mutation', createOneDriver: { __typename?: 'Driver', id: string } };\n\nexport type ViewDriverQueryVariables = Exact<{\n  id: Scalars['ID']['input'];\n}>;\n\n\nexport type ViewDriverQuery = { __typename?: 'Query', driver: { __typename?: 'Driver', id: string, firstName?: string | null, lastName?: string | null, mobileNumber: string, registrationTimestamp: any, lastSeenTimestamp?: any | null, status: DriverStatus, gender?: Gender | null, carId?: string | null, carColorId?: string | null, fleetId?: string | null, carProductionYear?: number | null, carPlate?: string | null, accountNumber?: string | null, bankName?: string | null, bankRoutingNumber?: string | null, bankSwift?: string | null, address?: string | null, email?: string | null, mediaId?: string | null, rating?: number | null, reviewCount: number, feedbacks: { __typename?: 'DriverFeedbacksConnection', nodes: Array<{ __typename?: 'Feedback', parametersAggregate: Array<{ __typename?: 'FeedbackParametersAggregateResponse', groupBy?: { __typename?: 'FeedbackParametersAggregateGroupBy', title?: string | null, isGood?: boolean | null } | null, count?: { __typename?: 'FeedbackParametersCountAggregate', id?: number | null } | null }> }> }, enabledServices: Array<{ __typename?: 'Service', id: string }>, documents: Array<{ __typename?: 'Media', id: string, address: string }>, media?: { __typename?: 'Media', address: string } | null }, services: Array<{ __typename?: 'Service', id: string, name: string }>, fleets: { __typename?: 'FleetConnection', nodes: Array<{ __typename?: 'Fleet', id: string, name: string }> }, driverFeedbackParametersSummary: Array<{ __typename?: 'FeedbackParameterAggregate', title: string, isGood: boolean, count: string }>, carModels: { __typename?: 'CarModelConnection', nodes: Array<{ __typename?: 'CarModel', id: string, name: string }> }, carColors: Array<{ __typename?: 'CarColor', id: string, name: string }> };\n\nexport type UpdateDriverProfileMutationVariables = Exact<{\n  id: Scalars['ID']['input'];\n  update: UpdateDriverInput;\n  serviceIds: Array<Scalars['ID']['input']> | Scalars['ID']['input'];\n}>;\n\n\nexport type UpdateDriverProfileMutation = { __typename?: 'Mutation', updateOneDriver: { __typename?: 'Driver', id: string }, setEnabledServicesOnDriver: { __typename?: 'Driver', id: string } };\n\nexport type UpdateDriverStatusMutationVariables = Exact<{\n  id: Scalars['ID']['input'];\n  status?: InputMaybe<DriverStatus>;\n}>;\n\n\nexport type UpdateDriverStatusMutation = { __typename?: 'Mutation', updateOneDriver: { __typename?: 'Driver', id: string } };\n\nexport type DriverFinancialsQueryVariables = Exact<{\n  id: Scalars['ID']['input'];\n  paging?: InputMaybe<OffsetPaging>;\n  filter?: InputMaybe<DriverTransactionFilter>;\n  sorting?: InputMaybe<Array<DriverTransactionSort> | DriverTransactionSort>;\n}>;\n\n\nexport type DriverFinancialsQuery = { __typename?: 'Query', driver: { __typename?: 'Driver', transactions: { __typename?: 'DriverTransactionsConnection', totalCount: number, nodes: Array<{ __typename?: 'DriverTransaction', status: TransactionStatus, createdAt: any, amount: number, description?: string | null, currency: string, action: TransactionAction, deductType?: DriverDeductTransactionType | null, rechargeType?: DriverRechargeTransactionType | null, refrenceNumber?: string | null, requestId?: number | null, paymentGatewayId?: string | null, operatorId?: string | null }> }, wallets: Array<{ __typename?: 'DriverWallet', balance: number, currency: string }> }, regions: { __typename?: 'RegionConnection', nodes: Array<{ __typename?: 'Region', currency: string }> } };\n\nexport type DriverFeedbacksQueryVariables = Exact<{\n  id: Scalars['ID']['input'];\n  paging?: InputMaybe<OffsetPaging>;\n}>;\n\n\nexport type DriverFeedbacksQuery = { __typename?: 'Query', feedbacks: { __typename?: 'FeedbackConnection', nodes: Array<{ __typename?: 'Feedback', id: string, requestId: string, reviewTimestamp: any, score: number, description?: string | null, parameters: Array<{ __typename?: 'FeedbackParameter', isGood: boolean, title: string }> }> } };\n\nexport type DriverOrdersQueryVariables = Exact<{\n  driverId: Scalars['ID']['input'];\n  filter?: InputMaybe<OrderFilter>;\n  paging?: InputMaybe<OffsetPaging>;\n  sorting?: InputMaybe<Array<OrderSort> | OrderSort>;\n}>;\n\n\nexport type DriverOrdersQuery = { __typename?: 'Query', driver: { __typename?: 'Driver', orders: { __typename?: 'DriverOrdersConnection', totalCount: number, nodes: Array<{ __typename?: 'Order', id: string, createdOn: any, status: OrderStatus, distanceBest: number, durationBest: number, costBest: number, costAfterCoupon: number, currency: string, addresses: Array<string>, expectedTimestamp?: any | null, points: Array<{ __typename?: 'Point', lat: number, lng: number }> }> } } };\n\nexport type CreateDriverTransactionMutationVariables = Exact<{\n  input: DriverTransactionInput;\n}>;\n\n\nexport type CreateDriverTransactionMutation = { __typename?: 'Mutation', createDriverTransaction: { __typename?: 'DriverWallet', id: string } };\n\nexport type DeleteDriverMutationVariables = Exact<{\n  id: Scalars['ID']['input'];\n}>;\n\n\nexport type DeleteDriverMutation = { __typename?: 'Mutation', deleteOneDriver: { __typename?: 'Driver', id: string } };\n\nexport type DriversListQueryVariables = Exact<{\n  paging?: InputMaybe<OffsetPaging>;\n  filter?: InputMaybe<DriverFilter>;\n  sorting?: InputMaybe<Array<DriverSort> | DriverSort>;\n}>;\n\n\nexport type DriversListQuery = { __typename?: 'Query', drivers: { __typename?: 'DriverConnection', totalCount: number, nodes: Array<{ __typename?: 'Driver', id: string, firstName?: string | null, lastName?: string | null, gender?: Gender | null, mobileNumber: string, status: DriverStatus, registrationTimestamp: any }> } };\n\nexport type ProviderWalletsListQueryVariables = Exact<{\n  paging?: InputMaybe<OffsetPaging>;\n}>;\n\n\nexport type ProviderWalletsListQuery = { __typename?: 'Query', providerTransactions: { __typename?: 'ProviderTransactionConnection', totalCount: number, nodes: Array<{ __typename?: 'ProviderTransaction', createdAt: any, action: TransactionAction, deductType?: ProviderDeductTransactionType | null, rechargeType?: ProviderRechargeTransactionType | null, amount: number, currency: string, description?: string | null, requestId?: string | null, operatorId?: string | null }> }, providerWallets: Array<{ __typename?: 'ProviderWallet', balance: number, currency: string }>, regions: { __typename?: 'RegionConnection', nodes: Array<{ __typename?: 'Region', currency: string }> } };\n\nexport type ExportQueryVariables = Exact<{\n  input: ExportArgs;\n}>;\n\n\nexport type ExportQuery = { __typename?: 'Query', export: { __typename?: 'ExportResult', url: string } };\n\nexport type DriverWalletsListQueryVariables = Exact<{\n  paging?: InputMaybe<OffsetPaging>;\n}>;\n\n\nexport type DriverWalletsListQuery = { __typename?: 'Query', driverWallets: { __typename?: 'DriverWalletConnection', totalCount: number, nodes: Array<{ __typename?: 'DriverWallet', id: string, driverId?: string | null, balance: number, currency: string, driver?: { __typename?: 'Driver', firstName?: string | null, lastName?: string | null } | null }> }, regions: { __typename?: 'RegionConnection', nodes: Array<{ __typename?: 'Region', currency: string }> } };\n\nexport type FleetWalletsListQueryVariables = Exact<{\n  paging?: InputMaybe<OffsetPaging>;\n  filter?: InputMaybe<FleetWalletFilter>;\n}>;\n\n\nexport type FleetWalletsListQuery = { __typename?: 'Query', fleetWallets: { __typename?: 'FleetWalletConnection', totalCount: number, nodes: Array<{ __typename?: 'FleetWallet', id: string, balance: number, currency: string, fleetId: string, fleet: { __typename?: 'Fleet', name: string } }> }, regions: { __typename?: 'RegionConnection', nodes: Array<{ __typename?: 'Region', currency: string }> } };\n\nexport type RiderWalletsListQueryVariables = Exact<{\n  paging?: InputMaybe<OffsetPaging>;\n}>;\n\n\nexport type RiderWalletsListQuery = { __typename?: 'Query', riderWallets: { __typename?: 'RiderWalletConnection', totalCount: number, nodes: Array<{ __typename?: 'RiderWallet', balance: number, currency: string, riderId?: string | null, rider?: { __typename?: 'Rider', firstName?: string | null, lastName?: string | null } | null }> }, regions: { __typename?: 'RegionConnection', nodes: Array<{ __typename?: 'Region', currency: string }> } };\n\nexport type DispatcherCalculateFareQueryVariables = Exact<{\n  points: Array<PointInput> | PointInput;\n  riderId: Scalars['ID']['input'];\n}>;\n\n\nexport type DispatcherCalculateFareQuery = { __typename?: 'Query', calculateFare: { __typename?: 'CalculateFareDTO', currency: string, distance: number, duration: number, services: Array<{ __typename?: 'ServiceCategoryWithCost', name: string, services: Array<{ __typename?: 'ServiceWithCost', id: string, name: string, cost: number }> }> } };\n\nexport type CreateOrderMutationVariables = Exact<{\n  riderId: Scalars['ID']['input'];\n  points: Array<PointInput> | PointInput;\n  addresses: Array<Scalars['String']['input']> | Scalars['String']['input'];\n  serviceId: Scalars['ID']['input'];\n  intervalMinutes: Scalars['Int']['input'];\n}>;\n\n\nexport type CreateOrderMutation = { __typename?: 'Mutation', createOrder: { __typename?: 'Order', id: string } };\n\nexport type OrderUpdatedSubscriptionVariables = Exact<{\n  id: Scalars['ID']['input'];\n}>;\n\n\nexport type OrderUpdatedSubscription = { __typename?: 'Subscription', orderUpdated: { __typename?: 'Order', id: string, status: OrderStatus, driver?: { __typename?: 'Driver', firstName?: string | null, lastName?: string | null, mobileNumber: string } | null } };\n\nexport type CancelOrderMutationVariables = Exact<{\n  orderId: Scalars['ID']['input'];\n}>;\n\n\nexport type CancelOrderMutation = { __typename?: 'Mutation', cancelOrder: { __typename?: 'Order', id: string, status: OrderStatus } };\n\nexport type DriverOverviewInfoFragment = { __typename?: 'Driver', id: string, firstName?: string | null, lastName?: string | null, mobileNumber: string, status: DriverStatus };\n\nexport type DriverLocationFragment = { __typename?: 'OnlineDriver', driverId: number, lastUpdatedAt: number, location: { __typename?: 'Point', lat: number, lng: number } };\n\nexport type OverviewQueryVariables = Exact<{ [key: string]: never; }>;\n\n\nexport type OverviewQuery = { __typename?: 'Query', complaintAggregate: Array<{ __typename?: 'ComplaintAggregateResponse', count?: { __typename?: 'ComplaintCountAggregate', id?: number | null } | null }>, driverAggregate: Array<{ __typename?: 'DriverAggregateResponse', count?: { __typename?: 'DriverCountAggregate', id?: number | null } | null }>, activeOrders: Array<{ __typename?: 'OrderAggregateResponse', count?: { __typename?: 'OrderCountAggregate', id?: number | null } | null }>, bookedOrders: Array<{ __typename?: 'OrderAggregateResponse', count?: { __typename?: 'OrderCountAggregate', id?: number | null } | null }>, getDriversLocation: Array<{ __typename?: 'OnlineDriver', driverId: number, lastUpdatedAt: number, location: { __typename?: 'Point', lat: number, lng: number } }> };\n\nexport type OverviewDriverPagingQueryVariables = Exact<{\n  ids: Array<Scalars['ID']['input']> | Scalars['ID']['input'];\n}>;\n\n\nexport type OverviewDriverPagingQuery = { __typename?: 'Query', drivers: { __typename?: 'DriverConnection', totalCount: number, nodes: Array<{ __typename?: 'Driver', id: string, firstName?: string | null, lastName?: string | null, mobileNumber: string, status: DriverStatus }> } };\n\nexport type RequestsChartQueryVariables = Exact<{\n  timeframe: ChartTimeframe;\n}>;\n\n\nexport type RequestsChartQuery = { __typename?: 'Query', requestChart: Array<{ __typename?: 'RequestResultItem', time: string, count: number, status: OrderStatus }> };\n\nexport type IncomeChartQueryVariables = Exact<{\n  timeframe: ChartTimeframe;\n}>;\n\n\nexport type IncomeChartQuery = { __typename?: 'Query', incomeChart: Array<{ __typename?: 'IncomeResultItem', time: string, sum: number, currency: string }> };\n\nexport type DriverRegistrationsQueryVariables = Exact<{\n  timeframe: ChartTimeframe;\n}>;\n\n\nexport type DriverRegistrationsQuery = { __typename?: 'Query', driverRegistrations: Array<{ __typename?: 'RegistrationResultItem', time: string, count: number }> };\n\nexport type RiderRegistrationsQueryVariables = Exact<{\n  timeframe: ChartTimeframe;\n}>;\n\n\nexport type RiderRegistrationsQuery = { __typename?: 'Query', riderRegistrations: Array<{ __typename?: 'RegistrationResultItem', time: string, count: number }> };\n\nexport type CarsListQueryVariables = Exact<{ [key: string]: never; }>;\n\n\nexport type CarsListQuery = { __typename?: 'Query', carModels: { __typename?: 'CarModelConnection', nodes: Array<{ __typename?: 'CarModel', id: string, name: string }> }, carColors: Array<{ __typename?: 'CarColor', id: string, name: string }> };\n\nexport type DeleteCarModelMutationVariables = Exact<{\n  id: Scalars['ID']['input'];\n}>;\n\n\nexport type DeleteCarModelMutation = { __typename?: 'Mutation', deleteOneCarModel: { __typename?: 'CarModelDeleteResponse', id?: string | null } };\n\nexport type DeleteCarColorMutationVariables = Exact<{\n  id: Scalars['ID']['input'];\n}>;\n\n\nexport type DeleteCarColorMutation = { __typename?: 'Mutation', deleteOneCarColor: { __typename?: 'CarColorDeleteResponse', id?: string | null } };\n\nexport type CreateCarModelMutationVariables = Exact<{\n  input: CarModelInput;\n}>;\n\n\nexport type CreateCarModelMutation = { __typename?: 'Mutation', createOneCarModel: { __typename?: 'CarModel', id: string } };\n\nexport type CreateCarColorMutationVariables = Exact<{\n  input: CarColorInput;\n}>;\n\n\nexport type CreateCarColorMutation = { __typename?: 'Mutation', createOneCarColor: { __typename?: 'CarColor', id: string } };\n\nexport type UpdateCarModelMutationVariables = Exact<{\n  id: Scalars['ID']['input'];\n  input: CarModelInput;\n}>;\n\n\nexport type UpdateCarModelMutation = { __typename?: 'Mutation', updateOneCarModel: { __typename?: 'CarModel', id: string } };\n\nexport type UpdateCarColorMutationVariables = Exact<{\n  id: Scalars['ID']['input'];\n  input: CarColorInput;\n}>;\n\n\nexport type UpdateCarColorMutation = { __typename?: 'Mutation', updateOneCarColor: { __typename?: 'CarColor', id: string } };\n\nexport type CreateFleetMutationVariables = Exact<{\n  input: FleetInput;\n}>;\n\n\nexport type CreateFleetMutation = { __typename?: 'Mutation', createOneFleet: { __typename?: 'Fleet', id: string } };\n\nexport type ViewFleetQueryVariables = Exact<{\n  id: Scalars['ID']['input'];\n}>;\n\n\nexport type ViewFleetQuery = { __typename?: 'Query', fleet: { __typename?: 'Fleet', id: string, name: string, phoneNumber: string, address?: string | null, mobileNumber: string, accountNumber: string, userName?: string | null, password?: string | null, commissionSharePercent: number, commissionShareFlat: number, feeMultiplier?: number | null, exclusivityAreas?: Array<Array<{ __typename?: 'Point', lat: number, lng: number }>> | null } };\n\nexport type FleetFinancialsQueryVariables = Exact<{\n  id: Scalars['ID']['input'];\n  paging?: InputMaybe<OffsetPaging>;\n  filter?: InputMaybe<FleetTransactionFilter>;\n  sorting?: InputMaybe<Array<FleetTransactionSort> | FleetTransactionSort>;\n}>;\n\n\nexport type FleetFinancialsQuery = { __typename?: 'Query', fleet: { __typename?: 'Fleet', transactions: { __typename?: 'FleetTransactionsConnection', totalCount: number, nodes: Array<{ __typename?: 'FleetTransaction', transactionTimestamp: any, amount: number, currency: string, action: TransactionAction, deductType?: string | null, rechargeType?: string | null, refrenceNumber?: string | null, operatorId?: string | null, requestId?: string | null, description?: string | null }> }, wallets: Array<{ __typename?: 'FleetWallet', currency: string, balance: number }> }, regions: { __typename?: 'RegionConnection', nodes: Array<{ __typename?: 'Region', currency: string }> } };\n\nexport type FleetZonePricesQueryVariables = Exact<{\n  id: Scalars['ID']['input'];\n  paging?: InputMaybe<OffsetPaging>;\n  filter?: InputMaybe<ZonePriceFilter>;\n  sorting?: InputMaybe<Array<ZonePriceSort> | ZonePriceSort>;\n}>;\n\n\nexport type FleetZonePricesQuery = { __typename?: 'Query', fleet: { __typename?: 'Fleet', zonePrices: { __typename?: 'FleetZonePricesConnection', totalCount: number, nodes: Array<{ __typename?: 'ZonePrice', id: string, name: string }> } } };\n\nexport type FleetDriversQueryVariables = Exact<{\n  id: Scalars['ID']['input'];\n  paging?: InputMaybe<OffsetPaging>;\n}>;\n\n\nexport type FleetDriversQuery = { __typename?: 'Query', drivers: { __typename?: 'DriverConnection', nodes: Array<{ __typename?: 'Driver', id: string, firstName?: string | null, lastName?: string | null, mobileNumber: string }> } };\n\nexport type UpdateFleetMutationVariables = Exact<{\n  id: Scalars['ID']['input'];\n  update: FleetInput;\n}>;\n\n\nexport type UpdateFleetMutation = { __typename?: 'Mutation', updateOneFleet: { __typename?: 'Fleet', id: string } };\n\nexport type CreateFleetTransactionMutationVariables = Exact<{\n  input: FleetTransactionInput;\n}>;\n\n\nexport type CreateFleetTransactionMutation = { __typename?: 'Mutation', createFleetTransaction: { __typename?: 'FleetWallet', id: string } };\n\nexport type FleetsListQueryVariables = Exact<{\n  paging?: InputMaybe<OffsetPaging>;\n  filter?: InputMaybe<FleetFilter>;\n}>;\n\n\nexport type FleetsListQuery = { __typename?: 'Query', fleets: { __typename?: 'FleetConnection', totalCount: number, nodes: Array<{ __typename?: 'Fleet', id: string, name: string, phoneNumber: string, address?: string | null }> } };\n\nexport type OrderCancelReasonListQueryVariables = Exact<{\n  paging?: InputMaybe<OffsetPaging>;\n}>;\n\n\nexport type OrderCancelReasonListQuery = { __typename?: 'Query', orderCancelReasons: { __typename?: 'OrderCancelReasonConnection', totalCount: number, nodes: Array<{ __typename?: 'OrderCancelReason', id: string, title: string, isEnabled: boolean, userType: AnnouncementUserType }> } };\n\nexport type OrderCancelReasonViewQueryVariables = Exact<{\n  id: Scalars['ID']['input'];\n}>;\n\n\nexport type OrderCancelReasonViewQuery = { __typename?: 'Query', orderCancelReason: { __typename?: 'OrderCancelReason', id: string, title: string, userType: AnnouncementUserType, isEnabled: boolean } };\n\nexport type UpdateOrderCancelReasonMutationVariables = Exact<{\n  id: Scalars['ID']['input'];\n  update: OrderCancelReasonInput;\n}>;\n\n\nexport type UpdateOrderCancelReasonMutation = { __typename?: 'Mutation', updateOneOrderCancelReason: { __typename?: 'OrderCancelReason', id: string } };\n\nexport type CreateOrderCancelReasonMutationVariables = Exact<{\n  input: OrderCancelReasonInput;\n}>;\n\n\nexport type CreateOrderCancelReasonMutation = { __typename?: 'Mutation', createOneOrderCancelReason: { __typename?: 'OrderCancelReason', id: string } };\n\nexport type ViewPaymentGatewayQueryVariables = Exact<{\n  id: Scalars['ID']['input'];\n}>;\n\n\nexport type ViewPaymentGatewayQuery = { __typename?: 'Query', paymentGateway: { __typename?: 'PaymentGateway', id: string, title: string, type: PaymentGatewayType, enabled: boolean, privateKey: string, publicKey?: string | null, merchantId?: string | null, saltKey?: string | null, mediaId?: number | null, media?: { __typename?: 'Media', address: string } | null } };\n\nexport type CreatePaymentGatewayMutationVariables = Exact<{\n  input: PaymentGatewayInput;\n}>;\n\n\nexport type CreatePaymentGatewayMutation = { __typename?: 'Mutation', createOnePaymentGateway: { __typename?: 'PaymentGateway', id: string } };\n\nexport type UpdatePaymentGatewayMutationVariables = Exact<{\n  id: Scalars['ID']['input'];\n  input: PaymentGatewayInput;\n}>;\n\n\nexport type UpdatePaymentGatewayMutation = { __typename?: 'Mutation', updateOnePaymentGateway: { __typename?: 'PaymentGateway', id: string } };\n\nexport type PaymentGatewaysQueryVariables = Exact<{\n  paging?: InputMaybe<OffsetPaging>;\n}>;\n\n\nexport type PaymentGatewaysQuery = { __typename?: 'Query', paymentGateways: { __typename?: 'PaymentGatewayConnection', totalCount: number, nodes: Array<{ __typename?: 'PaymentGateway', id: string, enabled: boolean, title: string, type: PaymentGatewayType, media?: { __typename?: 'Media', address: string } | null }> } };\n\nexport type RegionListQueryVariables = Exact<{\n  paging?: InputMaybe<OffsetPaging>;\n}>;\n\n\nexport type RegionListQuery = { __typename?: 'Query', regions: { __typename?: 'RegionConnection', totalCount: number, nodes: Array<{ __typename?: 'Region', id: string, name: string, currency: string, enabled: boolean, location: Array<Array<{ __typename?: 'Point', lat: number, lng: number }>> }> } };\n\nexport type RegionViewQueryVariables = Exact<{\n  id: Scalars['ID']['input'];\n}>;\n\n\nexport type RegionViewQuery = { __typename?: 'Query', region: { __typename?: 'Region', id: string, name: string, currency: string, enabled: boolean, location: Array<Array<{ __typename?: 'Point', lat: number, lng: number }>> } };\n\nexport type UpdateRegionMutationVariables = Exact<{\n  id: Scalars['ID']['input'];\n  update: RegionInput;\n}>;\n\n\nexport type UpdateRegionMutation = { __typename?: 'Mutation', updateOneRegion: { __typename?: 'Region', id: string } };\n\nexport type CreateRegionMutationVariables = Exact<{\n  input: RegionInput;\n}>;\n\n\nexport type CreateRegionMutation = { __typename?: 'Mutation', createOneRegion: { __typename?: 'Region', id: string } };\n\nexport type ReviewParameterViewQueryVariables = Exact<{\n  id: Scalars['ID']['input'];\n}>;\n\n\nexport type ReviewParameterViewQuery = { __typename?: 'Query', feedbackParameter: { __typename?: 'FeedbackParameter', id: string, title: string, isGood: boolean } };\n\nexport type UpdateReviewParameterMutationVariables = Exact<{\n  id: Scalars['ID']['input'];\n  update: FeedbackParameterInput;\n}>;\n\n\nexport type UpdateReviewParameterMutation = { __typename?: 'Mutation', updateOneFeedbackParameter: { __typename?: 'FeedbackParameter', id: string } };\n\nexport type CreateReviewParameterMutationVariables = Exact<{\n  input: FeedbackParameterInput;\n}>;\n\n\nexport type CreateReviewParameterMutation = { __typename?: 'Mutation', createOneFeedbackParameter: { __typename?: 'FeedbackParameter', id: string } };\n\nexport type ReviewParametersListQueryVariables = Exact<{ [key: string]: never; }>;\n\n\nexport type ReviewParametersListQuery = { __typename?: 'Query', feedbackParameters: Array<{ __typename?: 'FeedbackParameter', id: string, title: string, isGood: boolean }> };\n\nexport type RolesQueryVariables = Exact<{ [key: string]: never; }>;\n\n\nexport type RolesQuery = { __typename?: 'Query', operatorRoles: Array<{ __typename?: 'OperatorRole', id: string, title: string }> };\n\nexport type RoleQueryVariables = Exact<{\n  id: Scalars['ID']['input'];\n}>;\n\n\nexport type RoleQuery = { __typename?: 'Query', operatorRole: { __typename?: 'OperatorRole', id: string, title: string, permissions: Array<OperatorPermission> } };\n\nexport type CreateRoleMutationVariables = Exact<{\n  input: OperatorRoleInput;\n}>;\n\n\nexport type CreateRoleMutation = { __typename?: 'Mutation', createOneOperatorRole: { __typename?: 'OperatorRole', id: string, title: string, permissions: Array<OperatorPermission> } };\n\nexport type UpdateRoleMutationVariables = Exact<{\n  id: Scalars['ID']['input'];\n  input: OperatorRoleInput;\n}>;\n\n\nexport type UpdateRoleMutation = { __typename?: 'Mutation', updateOneOperatorRole: { __typename?: 'OperatorRole', id: string } };\n\nexport type ServiceOptionViewQueryVariables = Exact<{\n  id: Scalars['ID']['input'];\n}>;\n\n\nexport type ServiceOptionViewQuery = { __typename?: 'Query', serviceOption: { __typename?: 'ServiceOption', id: string, name: string, type: ServiceOptionType, icon: ServiceOptionIcon, additionalFee?: number | null } };\n\nexport type UpdateServiceOptionMutationVariables = Exact<{\n  id: Scalars['ID']['input'];\n  update: ServiceOptionInput;\n}>;\n\n\nexport type UpdateServiceOptionMutation = { __typename?: 'Mutation', updateOneServiceOption: { __typename?: 'ServiceOption', id: string } };\n\nexport type CreateServiceOptionMutationVariables = Exact<{\n  input: ServiceOptionInput;\n}>;\n\n\nexport type CreateServiceOptionMutation = { __typename?: 'Mutation', createOneServiceOption: { __typename?: 'ServiceOption', id: string } };\n\nexport type ServiceOptionsListQueryVariables = Exact<{ [key: string]: never; }>;\n\n\nexport type ServiceOptionsListQuery = { __typename?: 'Query', serviceOptions: Array<{ __typename?: 'ServiceOption', id: string, name: string, icon: ServiceOptionIcon, type: ServiceOptionType, additionalFee?: number | null }> };\n\nexport type ViewServiceCategoryQueryVariables = Exact<{\n  id: Scalars['ID']['input'];\n}>;\n\n\nexport type ViewServiceCategoryQuery = { __typename?: 'Query', serviceCategory: { __typename?: 'ServiceCategory', id: string, name: string } };\n\nexport type CreateServiceCategoryMutationVariables = Exact<{\n  input: ServiceCategoryInput;\n}>;\n\n\nexport type CreateServiceCategoryMutation = { __typename?: 'Mutation', createOneServiceCategory: { __typename?: 'ServiceCategory', id: string } };\n\nexport type UpdateServiceCategoryMutationVariables = Exact<{\n  id: Scalars['ID']['input'];\n  input: ServiceCategoryInput;\n}>;\n\n\nexport type UpdateServiceCategoryMutation = { __typename?: 'Mutation', updateOneServiceCategory: { __typename?: 'ServiceCategory', id: string } };\n\nexport type DeleteServiceCategoryMutationVariables = Exact<{\n  id: Scalars['ID']['input'];\n}>;\n\n\nexport type DeleteServiceCategoryMutation = { __typename?: 'Mutation', deleteOneServiceCategory: { __typename?: 'ServiceCategoryDeleteResponse', id?: string | null } };\n\nexport type ServicesListQueryVariables = Exact<{ [key: string]: never; }>;\n\n\nexport type ServicesListQuery = { __typename?: 'Query', serviceCategories: Array<{ __typename?: 'ServiceCategory', id: string, name: string, services: Array<{ __typename?: 'Service', id: string, name: string, description?: string | null, media: { __typename?: 'Media', address: string } }> }> };\n\nexport type ViewServiceQueryVariables = Exact<{\n  id: Scalars['ID']['input'];\n}>;\n\n\nexport type ViewServiceQuery = { __typename?: 'Query', service: { __typename?: 'Service', id: string, name: string, categoryId: string, baseFare: number, perHundredMeters: number, perMinuteDrive: number, perMinuteWait: number, minimumFee: number, searchRadius: number, maximumDestinationDistance: number, paymentMethod: ServicePaymentMethod, cancellationTotalFee: number, cancellationDriverShare: number, providerShareFlat: number, providerSharePercent: number, prepayPercent: number, mediaId: string, description?: string | null, personCapacity?: number | null, roundingFactor?: number | null, media: { __typename?: 'Media', address: string }, timeMultipliers: Array<{ __typename?: 'TimeMultiplier', startTime: string, endTime: string, multiply: number }>, distanceMultipliers: Array<{ __typename?: 'DistanceMultiplier', distanceFrom: number, distanceTo: number, multiply: number }>, weekdayMultipliers: Array<{ __typename?: 'WeekdayMultiplier', weekday: Weekday, multiply: number }>, dateRangeMultipliers: Array<{ __typename?: 'DateRangeMultiplier', startDate: number, endDate: number, multiply: number }>, options: Array<{ __typename?: 'ServiceOption', id: string, name: string, type: ServiceOptionType, additionalFee?: number | null, icon: ServiceOptionIcon }>, regions: Array<{ __typename?: 'Region', id: string, name: string, currency: string }> }, regions: { __typename?: 'RegionConnection', nodes: Array<{ __typename?: 'Region', id: string, name: string, currency: string }> }, serviceCategories: Array<{ __typename?: 'ServiceCategory', id: string, name: string }>, serviceOptions: Array<{ __typename?: 'ServiceOption', id: string, name: string, icon: ServiceOptionIcon, type: ServiceOptionType, additionalFee?: number | null }> };\n\nexport type NewServiceQueryVariables = Exact<{ [key: string]: never; }>;\n\n\nexport type NewServiceQuery = { __typename?: 'Query', regions: { __typename?: 'RegionConnection', nodes: Array<{ __typename?: 'Region', id: string, name: string, currency: string }> }, serviceCategories: Array<{ __typename?: 'ServiceCategory', id: string, name: string }>, serviceOptions: Array<{ __typename?: 'ServiceOption', id: string, name: string, icon: ServiceOptionIcon, type: ServiceOptionType, additionalFee?: number | null }> };\n\nexport type CreateServiceMutationVariables = Exact<{\n  input: ServiceInput;\n}>;\n\n\nexport type CreateServiceMutation = { __typename?: 'Mutation', createOneService: { __typename?: 'Service', id: string } };\n\nexport type DeleteServiceMutationVariables = Exact<{\n  id: Scalars['ID']['input'];\n}>;\n\n\nexport type DeleteServiceMutation = { __typename?: 'Mutation', deleteOneService: { __typename?: 'ServiceDeleteResponse', id?: string | null } };\n\nexport type UpdateServiceMutationVariables = Exact<{\n  id: Scalars['ID']['input'];\n  input: ServiceInput;\n}>;\n\n\nexport type UpdateServiceMutation = { __typename?: 'Mutation', updateOneService: { __typename?: 'Service', id: string } };\n\nexport type SetRegionsOnServiceMutationVariables = Exact<{\n  id: Scalars['ID']['input'];\n  relationIds: Array<Scalars['ID']['input']> | Scalars['ID']['input'];\n}>;\n\n\nexport type SetRegionsOnServiceMutation = { __typename?: 'Mutation', setRegionsOnService: { __typename?: 'Service', id: string } };\n\nexport type SetOptionsOnServiceMutationVariables = Exact<{\n  id: Scalars['ID']['input'];\n  relationIds: Array<Scalars['ID']['input']> | Scalars['ID']['input'];\n}>;\n\n\nexport type SetOptionsOnServiceMutation = { __typename?: 'Mutation', setOptionsOnService: { __typename?: 'Service', id: string } };\n\nexport type UpdatePasswordMutationVariables = Exact<{\n  input: UpdatePasswordInput;\n}>;\n\n\nexport type UpdatePasswordMutation = { __typename?: 'Mutation', updatePassword: { __typename?: 'Operator', id: string } };\n\nexport type GetConfigurationQueryVariables = Exact<{ [key: string]: never; }>;\n\n\nexport type GetConfigurationQuery = { __typename?: 'Query', currentConfiguration: { __typename?: 'CurrentConfiguration', backendMapsAPIKey?: string | null, twilioAccountSid?: string | null, twilioAuthToken?: string | null, twilioFromNumber?: string | null, twilioVerificationCodeSMSTemplate?: string | null } };\n\nexport type UpdateConfigMutationVariables = Exact<{\n  input: UpdateConfigInput;\n}>;\n\n\nexport type UpdateConfigMutation = { __typename?: 'Mutation', saveConfiguration: { __typename?: 'CurrentConfiguration', backendMapsAPIKey?: string | null, twilioAccountSid?: string | null, twilioAuthToken?: string | null, twilioFromNumber?: string | null, twilioVerificationCodeSMSTemplate?: string | null } };\n\nexport type SmsProvidersQueryVariables = Exact<{\n  paging?: InputMaybe<OffsetPaging>;\n}>;\n\n\nexport type SmsProvidersQuery = { __typename?: 'Query', smsProviders: { __typename?: 'SMSProviderConnection', totalCount: number, nodes: Array<{ __typename?: 'SMSProvider', id: string, isDefault: boolean, name: string, type: SmsProviderType }> } };\n\nexport type ViewSmsProviderQueryVariables = Exact<{\n  id: Scalars['ID']['input'];\n}>;\n\n\nexport type ViewSmsProviderQuery = { __typename?: 'Query', smsProvider: { __typename?: 'SMSProvider', id: string, name: string, type: SmsProviderType, isDefault: boolean, authToken?: string | null, accountId?: string | null, fromNumber?: string | null, verificationTemplate?: string | null, smsType?: string | null } };\n\nexport type CreateSmsProviderMutationVariables = Exact<{\n  input: SmsProviderInput;\n}>;\n\n\nexport type CreateSmsProviderMutation = { __typename?: 'Mutation', createOneSMSProvider: { __typename?: 'SMSProvider', id: string } };\n\nexport type UpdateSmsProviderMutationVariables = Exact<{\n  id: Scalars['ID']['input'];\n  input: SmsProviderInput;\n}>;\n\n\nexport type UpdateSmsProviderMutation = { __typename?: 'Mutation', updateOneSMSProvider: { __typename?: 'SMSProvider', id: string } };\n\nexport type MarkSmsProviderAsDefaultMutationVariables = Exact<{\n  id: Scalars['ID']['input'];\n}>;\n\n\nexport type MarkSmsProviderAsDefaultMutation = { __typename?: 'Mutation', markSMSProviderAsDefault: { __typename?: 'SMSProvider', id: string } };\n\nexport type CreateOperatorMutationVariables = Exact<{\n  input: CreateOperatorInput;\n}>;\n\n\nexport type CreateOperatorMutation = { __typename?: 'Mutation', createOneOperator: { __typename?: 'Operator', id: string } };\n\nexport type ViewOperatorQueryVariables = Exact<{\n  id: Scalars['ID']['input'];\n}>;\n\n\nexport type ViewOperatorQuery = { __typename?: 'Query', operator: { __typename?: 'Operator', id: string, firstName?: string | null, lastName?: string | null, mobileNumber?: string | null, userName: string, email?: string | null, roleId?: string | null }, operatorRoles: Array<{ __typename?: 'OperatorRole', id: string, title: string }> };\n\nexport type NewOperatorQueryVariables = Exact<{ [key: string]: never; }>;\n\n\nexport type NewOperatorQuery = { __typename?: 'Query', operatorRoles: Array<{ __typename?: 'OperatorRole', id: string, title: string }> };\n\nexport type UpdateOperatorMutationVariables = Exact<{\n  id: Scalars['ID']['input'];\n  update: UpdateOperator;\n}>;\n\n\nexport type UpdateOperatorMutation = { __typename?: 'Mutation', updateOneOperator: { __typename?: 'Operator', id: string } };\n\nexport type UsersListQueryVariables = Exact<{\n  paging?: InputMaybe<OffsetPaging>;\n}>;\n\n\nexport type UsersListQuery = { __typename?: 'Query', operators: { __typename?: 'OperatorConnection', totalCount: number, nodes: Array<{ __typename?: 'Operator', id: string, userName: string, firstName?: string | null, lastName?: string | null, role?: { __typename?: 'OperatorRole', title: string } | null }> } };\n\nexport type ZonePriceViewQueryVariables = Exact<{\n  id: Scalars['ID']['input'];\n}>;\n\n\nexport type ZonePriceViewQuery = { __typename?: 'Query', zonePrice: { __typename?: 'ZonePrice', id: string, name: string, cost: number, from: Array<Array<{ __typename?: 'Point', lat: number, lng: number }>>, to: Array<Array<{ __typename?: 'Point', lat: number, lng: number }>>, services: Array<{ __typename?: 'Service', id: string }>, fleets: Array<{ __typename?: 'Fleet', id: string }>, timeMultipliers: Array<{ __typename?: 'TimeMultiplier', startTime: string, endTime: string, multiply: number }> }, fleets: { __typename?: 'FleetConnection', nodes: Array<{ __typename?: 'Fleet', id: string, name: string }> }, services: Array<{ __typename?: 'Service', id: string, name: string }> };\n\nexport type ZonePriceNewQueryVariables = Exact<{ [key: string]: never; }>;\n\n\nexport type ZonePriceNewQuery = { __typename?: 'Query', fleets: { __typename?: 'FleetConnection', nodes: Array<{ __typename?: 'Fleet', id: string, name: string }> }, services: Array<{ __typename?: 'Service', id: string, name: string }> };\n\nexport type UpdateZonePriceMutationVariables = Exact<{\n  id: Scalars['ID']['input'];\n  update: ZonePriceInput;\n}>;\n\n\nexport type UpdateZonePriceMutation = { __typename?: 'Mutation', updateOneZonePrice: { __typename?: 'ZonePrice', id: string } };\n\nexport type CreateZonePriceMutationVariables = Exact<{\n  input: ZonePriceInput;\n}>;\n\n\nexport type CreateZonePriceMutation = { __typename?: 'Mutation', createOneZonePrice: { __typename?: 'ZonePrice', id: string } };\n\nexport type DeleteZonePriceMutationVariables = Exact<{\n  id: Scalars['ID']['input'];\n}>;\n\n\nexport type DeleteZonePriceMutation = { __typename?: 'Mutation', deleteOneZonePrice: { __typename?: 'ZonePriceDeleteResponse', id?: string | null } };\n\nexport type SetZonePriceRelationsMutationVariables = Exact<{\n  id: Scalars['ID']['input'];\n  services: Array<Scalars['ID']['input']> | Scalars['ID']['input'];\n  fleets: Array<Scalars['ID']['input']> | Scalars['ID']['input'];\n}>;\n\n\nexport type SetZonePriceRelationsMutation = { __typename?: 'Mutation', setServicesOnZonePrice: { __typename?: 'ZonePrice', id: string }, setFleetsOnZonePrice: { __typename?: 'ZonePrice', id: string } };\n\nexport type ZonePricesListQueryVariables = Exact<{\n  paging?: InputMaybe<OffsetPaging>;\n}>;\n\n\nexport type ZonePricesListQuery = { __typename?: 'Query', zonePrices: { __typename?: 'ZonePriceConnection', totalCount: number, nodes: Array<{ __typename?: 'ZonePrice', id: string, name: string }> } };\n\nexport type ViewAnnouncementQueryVariables = Exact<{\n  id: Scalars['ID']['input'];\n}>;\n\n\nexport type ViewAnnouncementQuery = { __typename?: 'Query', announcement: { __typename?: 'Announcement', id: string, title: string, userType: Array<AnnouncementUserType>, description: string, url?: string | null, startAt: any, expireAt: any } };\n\nexport type CreateAnnouncementMutationVariables = Exact<{\n  input: AnnouncementInput;\n}>;\n\n\nexport type CreateAnnouncementMutation = { __typename?: 'Mutation', createOneAnnouncement: { __typename?: 'Announcement', id: string } };\n\nexport type UpdateAnnouncementMutationVariables = Exact<{\n  id: Scalars['ID']['input'];\n  input: AnnouncementInput;\n}>;\n\n\nexport type UpdateAnnouncementMutation = { __typename?: 'Mutation', updateOneAnnouncement: { __typename?: 'Announcement', id: string } };\n\nexport type DeleteAnnouncementMutationVariables = Exact<{\n  id: Scalars['ID']['input'];\n}>;\n\n\nexport type DeleteAnnouncementMutation = { __typename?: 'Mutation', deleteOneAnnouncement: { __typename?: 'AnnouncementDeleteResponse', id?: string | null } };\n\nexport type AnnouncementsListQueryVariables = Exact<{\n  paging?: InputMaybe<OffsetPaging>;\n}>;\n\n\nexport type AnnouncementsListQuery = { __typename?: 'Query', announcements: { __typename?: 'AnnouncementConnection', totalCount: number, nodes: Array<{ __typename?: 'Announcement', id: string, title: string, description: string, startAt: any, expireAt: any }> } };\n\nexport type ViewCouponQueryVariables = Exact<{\n  id: Scalars['ID']['input'];\n}>;\n\n\nexport type ViewCouponQuery = { __typename?: 'Query', coupon: { __typename?: 'Coupon', id: string, isEnabled: boolean, code: string, title: string, description: string, manyUsersCanUse: number, manyTimesUserCanUse: number, minimumCost: number, maximumCost: number, startAt: any, expireAt: any, discountPercent: number, discountFlat: number, creditGift: number, isFirstTravelOnly: boolean, allowedServices: Array<{ __typename?: 'Service', id: string, name: string }> } };\n\nexport type CreateCouponMutationVariables = Exact<{\n  input: CouponInput;\n}>;\n\n\nexport type CreateCouponMutation = { __typename?: 'Mutation', createOneCoupon: { __typename?: 'Coupon', id: string } };\n\nexport type UpdateCouponMutationVariables = Exact<{\n  id: Scalars['ID']['input'];\n  input: CouponInput;\n}>;\n\n\nexport type UpdateCouponMutation = { __typename?: 'Mutation', updateOneCoupon: { __typename?: 'Coupon', id: string } };\n\nexport type DeleteCouponMutationVariables = Exact<{\n  id: Scalars['ID']['input'];\n}>;\n\n\nexport type DeleteCouponMutation = { __typename?: 'Mutation', deleteOneCoupon: { __typename?: 'CouponDeleteResponse', id?: string | null } };\n\nexport type CouponListQueryVariables = Exact<{\n  paging?: InputMaybe<OffsetPaging>;\n}>;\n\n\nexport type CouponListQuery = { __typename?: 'Query', coupons: { __typename?: 'CouponConnection', totalCount: number, nodes: Array<{ __typename?: 'Coupon', id: string, code: string, title: string, isEnabled: boolean, description: string, startAt: any, expireAt: any }> } };\n\nexport type GiftBatchListQueryVariables = Exact<{\n  paging?: InputMaybe<OffsetPaging>;\n}>;\n\n\nexport type GiftBatchListQuery = { __typename?: 'Query', giftBatches: { __typename?: 'GiftBatchConnection', totalCount: number, nodes: Array<{ __typename?: 'GiftBatch', id: string, name: string, currency: string, amount: number, availableFrom?: any | null, expireAt?: any | null, totalUsed: Array<{ __typename?: 'GiftBatchGiftCodesAggregateResponse', count?: { __typename?: 'GiftBatchGiftCodesCountAggregate', id?: number | null } | null }>, totalUnused: Array<{ __typename?: 'GiftBatchGiftCodesAggregateResponse', count?: { __typename?: 'GiftBatchGiftCodesCountAggregate', id?: number | null } | null }> }> } };\n\nexport type CreateGiftBachMutationVariables = Exact<{\n  input: CreateGiftBatchInput;\n}>;\n\n\nexport type CreateGiftBachMutation = { __typename?: 'Mutation', createGiftCardBatch: { __typename?: 'GiftBatch', id: string, name: string } };\n\nexport type ViewGiftBatchQueryVariables = Exact<{\n  id: Scalars['ID']['input'];\n}>;\n\n\nexport type ViewGiftBatchQuery = { __typename?: 'Query', giftBatch: { __typename?: 'GiftBatch', id: string, name: string, amount: number, currency: string, availableFrom?: any | null, expireAt?: any | null, totalUsed: Array<{ __typename?: 'GiftBatchGiftCodesAggregateResponse', count?: { __typename?: 'GiftBatchGiftCodesCountAggregate', id?: number | null } | null }>, totalUnused: Array<{ __typename?: 'GiftBatchGiftCodesAggregateResponse', count?: { __typename?: 'GiftBatchGiftCodesCountAggregate', id?: number | null } | null }> } };\n\nexport type GiftCodeListQueryVariables = Exact<{\n  giftBatchId: Scalars['ID']['input'];\n  paging: OffsetPaging;\n}>;\n\n\nexport type GiftCodeListQuery = { __typename?: 'Query', giftBatch: { __typename?: 'GiftBatch', giftCodes: { __typename?: 'GiftBatchGiftCodesConnection', totalCount: number, nodes: Array<{ __typename?: 'GiftCode', id: string, code: string, usedAt?: any | null, riderTransaction?: { __typename?: 'RiderTransaction', riderId: string, rider: { __typename?: 'Rider', firstName?: string | null, lastName?: string | null } } | null, driverTransaction?: { __typename?: 'DriverTransaction', driverId: string, driver?: { __typename?: 'Driver', firstName?: string | null, lastName?: string | null } | null } | null }> } } };\n\nexport type ExportGiftBatchToCsvMutationVariables = Exact<{\n  giftBatchId: Scalars['ID']['input'];\n}>;\n\n\nexport type ExportGiftBatchToCsvMutation = { __typename?: 'Mutation', exportGiftCardBatch: string };\n\nexport type RewardListQueryVariables = Exact<{\n  paging?: InputMaybe<OffsetPaging>;\n}>;\n\n\nexport type RewardListQuery = { __typename?: 'Query', rewards: { __typename?: 'RewardConnection', totalCount: number, nodes: Array<{ __typename?: 'Reward', id: string, title: string, startDate?: any | null, endDate?: any | null, beneficiary: RewardBeneficiary, event: RewardEvent }> } };\n\nexport type ViewRewardQueryVariables = Exact<{\n  id: Scalars['ID']['input'];\n}>;\n\n\nexport type ViewRewardQuery = { __typename?: 'Query', reward: { __typename?: 'Reward', id: string, title: string, startDate?: any | null, endDate?: any | null, appType: RewardAppType, beneficiary: RewardBeneficiary, event: RewardEvent, creditGift: number, tripFeePercentGift?: number | null, creditCurrency?: string | null, conditionTripCountsLessThan?: number | null, conditionUserNumberFirstDigits?: Array<string> | null } };\n\nexport type CreateRewardMutationVariables = Exact<{\n  input: CreateReward;\n}>;\n\n\nexport type CreateRewardMutation = { __typename?: 'Mutation', createOneReward: { __typename?: 'Reward', id: string } };\n\nexport type UpdateRewardMutationVariables = Exact<{\n  id: Scalars['ID']['input'];\n  input: UpdateReward;\n}>;\n\n\nexport type UpdateRewardMutation = { __typename?: 'Mutation', updateOneReward: { __typename?: 'Reward', id: string } };\n\nexport type CreatePayoutSessionFieldsQueryVariables = Exact<{ [key: string]: never; }>;\n\n\nexport type CreatePayoutSessionFieldsQuery = { __typename?: 'Query', supportedCurrencies: Array<string>, payoutMethods: Array<{ __typename?: 'PayoutMethod', id: string, name: string }> };\n\nexport type CreatePayoutSessionMutationVariables = Exact<{\n  input: CreatePayoutSessionInput;\n}>;\n\n\nexport type CreatePayoutSessionMutation = { __typename?: 'Mutation', createPayoutSession: { __typename?: 'PayoutSession', id: string } };\n\nexport type PayoutMethodsQueryVariables = Exact<{ [key: string]: never; }>;\n\n\nexport type PayoutMethodsQuery = { __typename?: 'Query', payoutMethods: Array<{ __typename?: 'PayoutMethod', id: string, name: string, description?: string | null, type: PayoutMethodType, media?: { __typename?: 'Media', id: string, address: string } | null }> };\n\nexport type ViewPayoutMethodQueryVariables = Exact<{\n  id: Scalars['ID']['input'];\n}>;\n\n\nexport type ViewPayoutMethodQuery = { __typename?: 'Query', payoutMethod: { __typename?: 'PayoutMethod', id: string, name: string, currency: string, description?: string | null, type: PayoutMethodType, privateKey?: string | null, publicKey?: string | null, saltKey?: string | null, merchantId?: string | null, media?: { __typename?: 'Media', address: string } | null } };\n\nexport type CreatePayoutMethodMutationVariables = Exact<{\n  input: CreatePayoutMethodInput;\n}>;\n\n\nexport type CreatePayoutMethodMutation = { __typename?: 'Mutation', createOnePayoutMethod: { __typename?: 'PayoutMethod', id: string } };\n\nexport type UpdatePayoutMethodMutationVariables = Exact<{\n  id: Scalars['ID']['input'];\n  update: CreatePayoutMethodInput;\n}>;\n\n\nexport type UpdatePayoutMethodMutation = { __typename?: 'Mutation', updateOnePayoutMethod: { __typename?: 'PayoutMethod', id: string } };\n\nexport type PayoutsQueryVariables = Exact<{\n  sessionsPaging: OffsetPaging;\n  currency?: InputMaybe<Scalars['String']['input']>;\n}>;\n\n\nexport type PayoutsQuery = { __typename?: 'Query', supportedCurrencies: Array<string>, payoutStatistics: { __typename?: 'PayoutStatistics', pendingAmount: number, lastPayoutAmount: number, currency: string, usersDefaultPayoutMethodStats: Array<{ __typename?: 'PayoutMethodStats', totalCount: number, payoutMethod?: { __typename?: 'PayoutMethod', id: string, name: string } | null }> }, payoutSessions: { __typename?: 'PayoutSessionConnection', totalCount: number, nodes: Array<{ __typename?: 'PayoutSession', id: string, createdAt: any, processedAt?: any | null, status: PayoutSessionStatus, totalAmount: number, currency: string }> } };\n\nexport type ViewPayoutSessionQueryVariables = Exact<{\n  id: Scalars['ID']['input'];\n}>;\n\n\nexport type ViewPayoutSessionQuery = { __typename?: 'Query', payoutSession: { __typename?: 'PayoutSession', id: string, currency: string, createdAt: any, processedAt?: any | null, totalAmount: number, status: PayoutSessionStatus, payoutMethods: Array<{ __typename?: 'PayoutMethod', id: string, type: PayoutMethodType, name: string, description?: string | null, currency: string, balance?: number | null, media?: { __typename?: 'Media', address: string } | null }>, driverTransactions: { __typename?: 'PayoutSessionDriverTransactionsConnection', nodes: Array<{ __typename?: 'DriverTransaction', amount: number, currency: string, status: TransactionStatus, createdAt: any, driver?: { __typename?: 'Driver', firstName?: string | null, lastName?: string | null, media?: { __typename?: 'Media', address: string } | null } | null }> }, amountToBePaidByPayoutMethod: Array<{ __typename?: 'PayoutSessionDriverTransactionsAggregateResponse', groupBy?: { __typename?: 'PayoutSessionDriverTransactionsAggregateGroupBy', payoutMethodId?: string | null } | null, sum?: { __typename?: 'PayoutSessionDriverTransactionsSumAggregate', amount?: number | null } | null }>, unpaidAmount: Array<{ __typename?: 'PayoutSessionDriverTransactionsAggregateResponse', sum?: { __typename?: 'PayoutSessionDriverTransactionsSumAggregate', amount?: number | null } | null }>, paidAmount: Array<{ __typename?: 'PayoutSessionDriverTransactionsAggregateResponse', sum?: { __typename?: 'PayoutSessionDriverTransactionsSumAggregate', amount?: number | null } | null }> } };\n\nexport type PayooutSessionTransactionsQueryVariables = Exact<{\n  id: Scalars['ID']['input'];\n  paging: OffsetPaging;\n}>;\n\n\nexport type PayooutSessionTransactionsQuery = { __typename?: 'Query', payoutSession: { __typename?: 'PayoutSession', driverTransactions: { __typename?: 'PayoutSessionDriverTransactionsConnection', nodes: Array<{ __typename?: 'DriverTransaction', id: string, amount: number, currency: string, status: TransactionStatus, createdAt: any, driver?: { __typename?: 'Driver', firstName?: string | null, lastName?: string | null, media?: { __typename?: 'Media', address: string } | null, payoutAccounts: { __typename?: 'DriverPayoutAccountsConnection', nodes: Array<{ __typename?: 'PayoutAccount', id: string, name: string, type: SavedPaymentMethodType, accountNumber?: string | null, routingNumber?: string | null, bankName?: string | null, branchName?: string | null, accountHolderName?: string | null, accountHolderCountry?: string | null, accountHolderCity?: string | null, accountHolderState?: string | null, accountHolderZip?: string | null, accountHolderAddress?: string | null, accountHolderDateOfBirth?: any | null, payoutMethod: { __typename?: 'PayoutMethod', name: string, media?: { __typename?: 'Media', address: string } | null } }> } } | null }> } } };\n\nexport type ExportToCsvMutationVariables = Exact<{\n  input: ExportSessionToCsvInput;\n}>;\n\n\nexport type ExportToCsvMutation = { __typename?: 'Mutation', exportSessionToCsv: string };\n\nexport type RunAutoPayoutMutationVariables = Exact<{\n  input: RunAutoPayoutInput;\n}>;\n\n\nexport type RunAutoPayoutMutation = { __typename?: 'Mutation', runAutoPayout: boolean };\n\nexport type SaveManualPayoutItemMutationVariables = Exact<{\n  input: ManualPayoutInput;\n}>;\n\n\nexport type SaveManualPayoutItemMutation = { __typename?: 'Mutation', manualPayout: { __typename?: 'DriverTransaction', amount: number } };\n\nexport type UpdatePayoutSessionMutationVariables = Exact<{\n  id: Scalars['ID']['input'];\n  update: UpdatePayoutSessionInput;\n}>;\n\n\nexport type UpdatePayoutSessionMutation = { __typename?: 'Mutation', updatePayoutSession: { __typename?: 'PayoutSession', id: string, status: PayoutSessionStatus } };\n\nexport type AvailableDriversForOrderQueryVariables = Exact<{\n  center: PointInput;\n  count: Scalars['Int']['input'];\n}>;\n\n\nexport type AvailableDriversForOrderQuery = { __typename?: 'Query', getDriversLocationWithData: Array<{ __typename?: 'OnlineDriverWithData', id: number, mobileNumber: string, firstName?: string | null, lastName?: string | null, lastUpdatedAt: number, rating?: number | null, reviewCount: number, status: DriverStatus, location: { __typename?: 'Point', lat: number, lng: number } }> };\n\nexport type DriverSearchQueryVariables = Exact<{\n  filter: Scalars['String']['input'];\n}>;\n\n\nexport type DriverSearchQuery = { __typename?: 'Query', drivers: { __typename?: 'DriverConnection', nodes: Array<{ __typename?: 'Driver', id: string, mobileNumber: string, firstName?: string | null, lastName?: string | null, rating?: number | null, reviewCount: number, status: DriverStatus }> } };\n\nexport type AssignDriverToOrderMutationVariables = Exact<{\n  orderId: Scalars['ID']['input'];\n  driverId: Scalars['ID']['input'];\n}>;\n\n\nexport type AssignDriverToOrderMutation = { __typename?: 'Mutation', assignDriverToOrder: { __typename?: 'Order', id: string } };\n\nexport type ViewOrderQueryVariables = Exact<{\n  id: Scalars['ID']['input'];\n}>;\n\n\nexport type ViewOrderQuery = { __typename?: 'Query', order: { __typename?: 'Order', id: string, createdOn: any, expectedTimestamp?: any | null, costBest: number, costAfterCoupon: number, status: OrderStatus, currency: string, distanceBest: number, durationBest: number, startTimestamp?: any | null, finishTimestamp?: any | null, addresses: Array<string>, points: Array<{ __typename?: 'Point', lat: number, lng: number }>, service?: { __typename?: 'Service', name: string } | null, driver?: { __typename?: 'Driver', id: string, firstName?: string | null, lastName?: string | null, mobileNumber: string, registrationTimestamp: any, status: DriverStatus, media?: { __typename?: 'Media', address: string } | null } | null, rider?: { __typename?: 'Rider', id: string, firstName?: string | null, lastName?: string | null, mobileNumber: string, registrationTimestamp: any, status: RiderStatus, media?: { __typename?: 'Media', address: string } | null } | null, complaints: Array<{ __typename?: 'Complaint', id: string, subject: string, inscriptionTimestamp: any, content?: string | null, requestedByDriver: boolean }>, conversations: Array<{ __typename?: 'OrderMessage', sentAt: any, sentByDriver: boolean, status: MessageStatus, content: string }>, activities: Array<{ __typename?: 'RequestActivity', createdAt: any, type: RequestActivityType }>, coupon?: { __typename?: 'Coupon', title: string, code: string, expireAt: any } | null, riderTransactions: Array<{ __typename?: 'RiderTransaction', action: TransactionAction, rechargeType?: RiderRechargeTransactionType | null, deductType?: RiderDeductTransactionType | null, amount: number, status: TransactionStatus, currency: string, refrenceNumber?: string | null, paymentGateway?: { __typename?: 'PaymentGateway', title: string } | null }>, driverTransactions: Array<{ __typename?: 'DriverTransaction', action: TransactionAction, rechargeType?: DriverRechargeTransactionType | null, deductType?: DriverDeductTransactionType | null, amount: number, status: TransactionStatus, currency: string, refrenceNumber?: string | null }>, providerTransactions: Array<{ __typename?: 'ProviderTransaction', action: TransactionAction, rechargeType?: ProviderRechargeTransactionType | null, deductType?: ProviderDeductTransactionType | null, amount: number, currency: string, refrenceNumber?: string | null }>, fleetTransactions: Array<{ __typename?: 'FleetTransaction', action: TransactionAction, rechargeType?: string | null, deductType?: string | null, amount: number, currency: string, refrenceNumber?: string | null }> } };\n\nexport type OrdersListQueryVariables = Exact<{\n  paging?: InputMaybe<OffsetPaging>;\n  filter?: InputMaybe<OrderFilter>;\n  sorting?: InputMaybe<Array<OrderSort> | OrderSort>;\n}>;\n\n\nexport type OrdersListQuery = { __typename?: 'Query', orders: { __typename?: 'OrderConnection', totalCount: number, nodes: Array<{ __typename?: 'Order', id: string, status: OrderStatus, createdOn: any, expectedTimestamp?: any | null, costAfterCoupon: number, currency: string }> } };\n\nexport type CreateRiderMutationVariables = Exact<{\n  input: RiderInput;\n}>;\n\n\nexport type CreateRiderMutation = { __typename?: 'Mutation', createOneRider: { __typename?: 'Rider', id: string, firstName?: string | null, lastName?: string | null, mobileNumber: string, gender?: Gender | null } };\n\nexport type ViewRiderQueryVariables = Exact<{\n  id: Scalars['ID']['input'];\n}>;\n\n\nexport type ViewRiderQuery = { __typename?: 'Query', rider: { __typename?: 'Rider', id: string, status: RiderStatus, firstName?: string | null, lastName?: string | null, mobileNumber: string, isResident?: boolean | null, idNumber?: string | null, registrationTimestamp: any, email?: string | null, gender?: Gender | null, media?: { __typename?: 'Media', address: string } | null, wallets: { __typename?: 'RiderWalletsConnection', nodes: Array<{ __typename?: 'RiderWallet', balance: number, currency: string }> } } };\n\nexport type RiderAddressesQueryVariables = Exact<{\n  riderId: Scalars['ID']['input'];\n  paging?: InputMaybe<OffsetPaging>;\n}>;\n\n\nexport type RiderAddressesQuery = { __typename?: 'Query', riderAddresses: { __typename?: 'RiderAddressConnection', nodes: Array<{ __typename?: 'RiderAddress', title: string, details?: string | null, location: { __typename?: 'Point', lat: number, lng: number } }> } };\n\nexport type RiderWalletQueryVariables = Exact<{\n  riderId: Scalars['ID']['input'];\n  paging?: InputMaybe<OffsetPaging>;\n  filter?: InputMaybe<RiderTransactionFilter>;\n  sorting?: InputMaybe<Array<RiderTransactionSort> | RiderTransactionSort>;\n}>;\n\n\nexport type RiderWalletQuery = { __typename?: 'Query', rider: { __typename?: 'Rider', wallets: { __typename?: 'RiderWalletsConnection', nodes: Array<{ __typename?: 'RiderWallet', balance: number, currency: string }> }, transactions: { __typename?: 'RiderTransactionsConnection', totalCount: number, nodes: Array<{ __typename?: 'RiderTransaction', action: TransactionAction, deductType?: RiderDeductTransactionType | null, status: TransactionStatus, createdAt: any, rechargeType?: RiderRechargeTransactionType | null, amount: number, currency: string, refrenceNumber?: string | null, description?: string | null, paymentGatewayId?: string | null, operatorId?: string | null, requestId?: string | null }> } }, regions: { __typename?: 'RegionConnection', nodes: Array<{ __typename?: 'Region', currency: string }> } };\n\nexport type RiderOrdersQueryVariables = Exact<{\n  riderId: Scalars['ID']['input'];\n  filter?: InputMaybe<OrderFilter>;\n  paging?: InputMaybe<OffsetPaging>;\n  sorting?: InputMaybe<Array<OrderSort> | OrderSort>;\n}>;\n\n\nexport type RiderOrdersQuery = { __typename?: 'Query', rider: { __typename?: 'Rider', orders: { __typename?: 'RiderOrdersConnection', totalCount: number, nodes: Array<{ __typename?: 'Order', id: string, createdOn: any, status: OrderStatus, distanceBest: number, durationBest: number, costBest: number, costAfterCoupon: number, currency: string, addresses: Array<string>, expectedTimestamp?: any | null, points: Array<{ __typename?: 'Point', lat: number, lng: number }> }> } } };\n\nexport type UpdateRiderMutationVariables = Exact<{\n  id: Scalars['ID']['input'];\n  update: RiderInput;\n}>;\n\n\nexport type UpdateRiderMutation = { __typename?: 'Mutation', updateOneRider: { __typename?: 'Rider', id: string } };\n\nexport type CreateRiderTransactionMutationVariables = Exact<{\n  input: RiderTransactionInput;\n}>;\n\n\nexport type CreateRiderTransactionMutation = { __typename?: 'Mutation', createRiderTransaction: { __typename?: 'RiderWallet', id: string } };\n\nexport type DeleteRiderMutationVariables = Exact<{\n  id: Scalars['ID']['input'];\n}>;\n\n\nexport type DeleteRiderMutation = { __typename?: 'Mutation', deleteOneRider: { __typename?: 'Rider', id: string } };\n\nexport type RidersListQueryVariables = Exact<{\n  filter?: InputMaybe<RiderFilter>;\n  paging?: InputMaybe<OffsetPaging>;\n  sorting?: InputMaybe<Array<RiderSort> | RiderSort>;\n}>;\n\n\nexport type RidersListQuery = { __typename?: 'Query', riders: { __typename?: 'RiderConnection', totalCount: number, nodes: Array<{ __typename?: 'Rider', id: string, firstName?: string | null, lastName?: string | null, status: RiderStatus, gender?: Gender | null, mobileNumber: string, registrationTimestamp: any }> } };\n\nexport type SosListQueryVariables = Exact<{\n  paging?: InputMaybe<OffsetPaging>;\n}>;\n\n\nexport type SosListQuery = { __typename?: 'Query', distressSignals: { __typename?: 'DistressSignalConnection', totalCount: number, nodes: Array<{ __typename?: 'DistressSignal', id: string, createdAt: any, status: SosStatus, location?: { __typename?: 'Point', lat: number, lng: number } | null }> } };\n\nexport type ViewSosQueryVariables = Exact<{\n  id: Scalars['ID']['input'];\n}>;\n\n\nexport type ViewSosQuery = { __typename?: 'Query', distressSignal: { __typename?: 'DistressSignal', id: string, createdAt: any, status: SosStatus, submittedByRider: boolean, location?: { __typename?: 'Point', lat: number, lng: number } | null, activities: Array<{ __typename?: 'SOSActivity', action: SosActivityAction, createdAt: any, note?: string | null, operator: { __typename?: 'Operator', id: string, firstName?: string | null, lastName?: string | null } }>, order: { __typename?: 'Order', id: string, status: OrderStatus, createdOn: any, startTimestamp?: any | null, finishTimestamp?: any | null, expectedTimestamp?: any | null, costBest: number, costAfterCoupon: number, addresses: Array<string>, currency: string, rider?: { __typename?: 'Rider', id: string, mobileNumber: string, status: RiderStatus, firstName?: string | null, lastName?: string | null, registrationTimestamp: any } | null, driver?: { __typename?: 'Driver', id: string, mobileNumber: string, status: DriverStatus, firstName?: string | null, lastName?: string | null, registrationTimestamp: any } | null } } };\n\nexport type CreateSosActivityMutationVariables = Exact<{\n  activity: CreateSosAcitivtyInput;\n}>;\n\n\nexport type CreateSosActivityMutation = { __typename?: 'Mutation', createOneSOSActivity: { __typename?: 'SOSActivity', id: string } };\n\nexport type CurrentConfigurationQueryVariables = Exact<{ [key: string]: never; }>;\n\n\nexport type CurrentConfigurationQuery = { __typename?: 'Query', currentConfiguration: { __typename?: 'CurrentConfiguration', purchaseCode?: string | null, backendMapsAPIKey?: string | null, adminPanelAPIKey?: string | null, firebaseProjectPrivateKey?: string | null } };\n\nexport type UpdatePurchaseCodeMutationVariables = Exact<{\n  code: Scalars['String']['input'];\n  email?: InputMaybe<Scalars['String']['input']>;\n}>;\n\n\nexport type UpdatePurchaseCodeMutation = { __typename?: 'Mutation', updatePurchaseCode: { __typename?: 'UpdatePurchaseCodeResult', status: UpdatePurchaseCodeStatus, message?: string | null, clients?: Array<{ __typename?: 'UpdatePurchaseCodeClient', ip: string }> | null } };\n\nexport type UpdateMapsApiKeyMutationVariables = Exact<{\n  backend: Scalars['String']['input'];\n  adminPanel: Scalars['String']['input'];\n}>;\n\n\nexport type UpdateMapsApiKeyMutation = { __typename?: 'Mutation', updateMapsAPIKey: { __typename?: 'UpdateConfigResult', status: UpdateConfigStatus, message?: string | null } };\n\nexport type UpdateFirebaseMutationVariables = Exact<{\n  keyFileName: Scalars['String']['input'];\n}>;\n\n\nexport type UpdateFirebaseMutation = { __typename?: 'Mutation', updateFirebase: { __typename?: 'UpdateConfigResult', status: UpdateConfigStatus, message?: string | null } };\n\nexport type DisableServerMutationVariables = Exact<{\n  ip: Scalars['String']['input'];\n}>;\n\n\nexport type DisableServerMutation = { __typename?: 'Mutation', disablePreviousServer: { __typename?: 'UpdateConfigResult', status: UpdateConfigStatus, message?: string | null } };\n\nexport type LoginQueryVariables = Exact<{\n  username: Scalars['String']['input'];\n  password: Scalars['String']['input'];\n}>;\n\n\nexport type LoginQuery = { __typename?: 'Query', login: { __typename?: 'TokenObject', token: string } };\n\nexport const DriverOverviewInfoFragmentDoc = gql`\n    fragment DriverOverviewInfo on Driver {\n  id\n  firstName\n  lastName\n  mobileNumber\n  status\n}\n    `;\nexport const DriverLocationFragmentDoc = gql`\n    fragment DriverLocation on OnlineDriver {\n  location {\n    lat\n    lng\n  }\n  driverId\n  lastUpdatedAt\n}\n    `;\nexport const NotificationsDocument = gql`\n    query Notifications {\n  complaintAggregate(filter: {status: {in: [UnderInvestigation, Submitted]}}) {\n    count {\n      id\n    }\n  }\n  distressSignalAggregate(filter: {status: {in: [UnderReview, Submitted]}}) {\n    count {\n      id\n    }\n  }\n  driverAggregate(filter: {status: {in: [PendingApproval]}}) {\n    count {\n      id\n    }\n  }\n}\n    `;\n\n  @Injectable({\n    providedIn: 'root'\n  })\n  export class NotificationsGQL extends Apollo.Query<NotificationsQuery, NotificationsQueryVariables> {\n    document = NotificationsDocument;\n    \n    constructor(apollo: Apollo.Apollo) {\n      super(apollo);\n    }\n  }\nexport const SosSubscriptionDocument = gql`\n    subscription SOSSubscription {\n  sosCreated {\n    id\n    status\n  }\n}\n    `;\n\n  @Injectable({\n    providedIn: 'root'\n  })\n  export class SosSubscriptionGQL extends Apollo.Subscription<SosSubscriptionSubscription, SosSubscriptionSubscriptionVariables> {\n    document = SosSubscriptionDocument;\n    \n    constructor(apollo: Apollo.Apollo) {\n      super(apollo);\n    }\n  }\nexport const ComplaintSubscriptionDocument = gql`\n    subscription ComplaintSubscription {\n  complaintCreated {\n    id\n    status\n  }\n}\n    `;\n\n  @Injectable({\n    providedIn: 'root'\n  })\n  export class ComplaintSubscriptionGQL extends Apollo.Subscription<ComplaintSubscriptionSubscription, ComplaintSubscriptionSubscriptionVariables> {\n    document = ComplaintSubscriptionDocument;\n    \n    constructor(apollo: Apollo.Apollo) {\n      super(apollo);\n    }\n  }\nexport const ViewComplaintDocument = gql`\n    query ViewComplaint($id: ID!) {\n  complaint(id: $id) {\n    id\n    inscriptionTimestamp\n    status\n    subject\n    content\n    requestedByDriver\n    activities {\n      type\n      comment\n      actor {\n        firstName\n        lastName\n      }\n      assignedTo {\n        firstName\n        lastName\n      }\n    }\n    order {\n      id\n      status\n      createdOn\n      startTimestamp\n      finishTimestamp\n      expectedTimestamp\n      costBest\n      costAfterCoupon\n      addresses\n      currency\n      rider {\n        id\n        mobileNumber\n        status\n        firstName\n        lastName\n        registrationTimestamp\n      }\n      driver {\n        id\n        mobileNumber\n        status\n        firstName\n        lastName\n        registrationTimestamp\n      }\n    }\n  }\n}\n    `;\n\n  @Injectable({\n    providedIn: 'root'\n  })\n  export class ViewComplaintGQL extends Apollo.Query<ViewComplaintQuery, ViewComplaintQueryVariables> {\n    document = ViewComplaintDocument;\n    \n    constructor(apollo: Apollo.Apollo) {\n      super(apollo);\n    }\n  }\nexport const UpdateComplaintStatusDocument = gql`\n    mutation UpdateComplaintStatus($id: ID!, $status: ComplaintStatus!) {\n  updateOneComplaint(input: {id: $id, update: {status: $status}}) {\n    id\n  }\n}\n    `;\n\n  @Injectable({\n    providedIn: 'root'\n  })\n  export class UpdateComplaintStatusGQL extends Apollo.Mutation<UpdateComplaintStatusMutation, UpdateComplaintStatusMutationVariables> {\n    document = UpdateComplaintStatusDocument;\n    \n    constructor(apollo: Apollo.Apollo) {\n      super(apollo);\n    }\n  }\nexport const ComplaintsListDocument = gql`\n    query ComplaintsList($paging: OffsetPaging) {\n  complaints(paging: $paging) {\n    nodes {\n      id\n      inscriptionTimestamp\n      subject\n      status\n      content\n    }\n    totalCount\n  }\n}\n    `;\n\n  @Injectable({\n    providedIn: 'root'\n  })\n  export class ComplaintsListGQL extends Apollo.Query<ComplaintsListQuery, ComplaintsListQueryVariables> {\n    document = ComplaintsListDocument;\n    \n    constructor(apollo: Apollo.Apollo) {\n      super(apollo);\n    }\n  }\nexport const CreateDriverDocument = gql`\n    mutation CreateDriver($input: UpdateDriverInput!) {\n  createOneDriver(input: {driver: $input}) {\n    id\n  }\n}\n    `;\n\n  @Injectable({\n    providedIn: 'root'\n  })\n  export class CreateDriverGQL extends Apollo.Mutation<CreateDriverMutation, CreateDriverMutationVariables> {\n    document = CreateDriverDocument;\n    \n    constructor(apollo: Apollo.Apollo) {\n      super(apollo);\n    }\n  }\nexport const ViewDriverDocument = gql`\n    query ViewDriver($id: ID!) {\n  driver(id: $id) {\n    id\n    firstName\n    lastName\n    mobileNumber\n    registrationTimestamp\n    lastSeenTimestamp\n    status\n    gender\n    carId\n    carColorId\n    fleetId\n    carProductionYear\n    carPlate\n    accountNumber\n    bankName\n    bankRoutingNumber\n    bankSwift\n    address\n    email\n    feedbacks {\n      nodes {\n        parametersAggregate {\n          groupBy {\n            title\n            isGood\n          }\n          count {\n            id\n          }\n        }\n      }\n    }\n    enabledServices {\n      id\n    }\n    documents {\n      id\n      address\n    }\n    mediaId\n    media {\n      address\n    }\n    rating\n    reviewCount\n  }\n  services {\n    id\n    name\n  }\n  fleets {\n    nodes {\n      id\n      name\n    }\n  }\n  driverFeedbackParametersSummary(driverId: $id) {\n    title\n    isGood\n    count\n  }\n  carModels(paging: {limit: 100}) {\n    nodes {\n      id\n      name\n    }\n  }\n  carColors {\n    id\n    name\n  }\n}\n    `;\n\n  @Injectable({\n    providedIn: 'root'\n  })\n  export class ViewDriverGQL extends Apollo.Query<ViewDriverQuery, ViewDriverQueryVariables> {\n    document = ViewDriverDocument;\n    \n    constructor(apollo: Apollo.Apollo) {\n      super(apollo);\n    }\n  }\nexport const UpdateDriverProfileDocument = gql`\n    mutation UpdateDriverProfile($id: ID!, $update: UpdateDriverInput!, $serviceIds: [ID!]!) {\n  updateOneDriver(input: {id: $id, update: $update}) {\n    id\n  }\n  setEnabledServicesOnDriver(input: {id: $id, relationIds: $serviceIds}) {\n    id\n  }\n}\n    `;\n\n  @Injectable({\n    providedIn: 'root'\n  })\n  export class UpdateDriverProfileGQL extends Apollo.Mutation<UpdateDriverProfileMutation, UpdateDriverProfileMutationVariables> {\n    document = UpdateDriverProfileDocument;\n    \n    constructor(apollo: Apollo.Apollo) {\n      super(apollo);\n    }\n  }\nexport const UpdateDriverStatusDocument = gql`\n    mutation UpdateDriverStatus($id: ID!, $status: DriverStatus) {\n  updateOneDriver(input: {id: $id, update: {status: $status}}) {\n    id\n  }\n}\n    `;\n\n  @Injectable({\n    providedIn: 'root'\n  })\n  export class UpdateDriverStatusGQL extends Apollo.Mutation<UpdateDriverStatusMutation, UpdateDriverStatusMutationVariables> {\n    document = UpdateDriverStatusDocument;\n    \n    constructor(apollo: Apollo.Apollo) {\n      super(apollo);\n    }\n  }\nexport const DriverFinancialsDocument = gql`\n    query DriverFinancials($id: ID!, $paging: OffsetPaging, $filter: DriverTransactionFilter, $sorting: [DriverTransactionSort!]) {\n  driver(id: $id) {\n    transactions(filter: $filter, paging: $paging, sorting: $sorting) {\n      nodes {\n        status\n        createdAt\n        amount\n        description\n        currency\n        action\n        deductType\n        rechargeType\n        refrenceNumber\n        requestId\n        paymentGatewayId\n        operatorId\n      }\n      totalCount\n    }\n    wallets {\n      balance\n      currency\n    }\n  }\n  regions {\n    nodes {\n      currency\n    }\n  }\n}\n    `;\n\n  @Injectable({\n    providedIn: 'root'\n  })\n  export class DriverFinancialsGQL extends Apollo.Query<DriverFinancialsQuery, DriverFinancialsQueryVariables> {\n    document = DriverFinancialsDocument;\n    \n    constructor(apollo: Apollo.Apollo) {\n      super(apollo);\n    }\n  }\nexport const DriverFeedbacksDocument = gql`\n    query DriverFeedbacks($id: ID!, $paging: OffsetPaging) {\n  feedbacks(filter: {driverId: {eq: $id}}, paging: $paging) {\n    nodes {\n      id\n      requestId\n      reviewTimestamp\n      score\n      description\n      parameters {\n        isGood\n        title\n      }\n    }\n  }\n}\n    `;\n\n  @Injectable({\n    providedIn: 'root'\n  })\n  export class DriverFeedbacksGQL extends Apollo.Query<DriverFeedbacksQuery, DriverFeedbacksQueryVariables> {\n    document = DriverFeedbacksDocument;\n    \n    constructor(apollo: Apollo.Apollo) {\n      super(apollo);\n    }\n  }\nexport const DriverOrdersDocument = gql`\n    query DriverOrders($driverId: ID!, $filter: OrderFilter, $paging: OffsetPaging, $sorting: [OrderSort!]) {\n  driver(id: $driverId) {\n    orders(filter: $filter, paging: $paging, sorting: $sorting) {\n      nodes {\n        id\n        createdOn\n        status\n        distanceBest\n        durationBest\n        costBest\n        costAfterCoupon\n        currency\n        addresses\n        points {\n          lat\n          lng\n        }\n        expectedTimestamp\n      }\n      totalCount\n    }\n  }\n}\n    `;\n\n  @Injectable({\n    providedIn: 'root'\n  })\n  export class DriverOrdersGQL extends Apollo.Query<DriverOrdersQuery, DriverOrdersQueryVariables> {\n    document = DriverOrdersDocument;\n    \n    constructor(apollo: Apollo.Apollo) {\n      super(apollo);\n    }\n  }\nexport const CreateDriverTransactionDocument = gql`\n    mutation CreateDriverTransaction($input: DriverTransactionInput!) {\n  createDriverTransaction(input: $input) {\n    id\n  }\n}\n    `;\n\n  @Injectable({\n    providedIn: 'root'\n  })\n  export class CreateDriverTransactionGQL extends Apollo.Mutation<CreateDriverTransactionMutation, CreateDriverTransactionMutationVariables> {\n    document = CreateDriverTransactionDocument;\n    \n    constructor(apollo: Apollo.Apollo) {\n      super(apollo);\n    }\n  }\nexport const DeleteDriverDocument = gql`\n    mutation DeleteDriver($id: ID!) {\n  deleteOneDriver(id: $id) {\n    id\n  }\n}\n    `;\n\n  @Injectable({\n    providedIn: 'root'\n  })\n  export class DeleteDriverGQL extends Apollo.Mutation<DeleteDriverMutation, DeleteDriverMutationVariables> {\n    document = DeleteDriverDocument;\n    \n    constructor(apollo: Apollo.Apollo) {\n      super(apollo);\n    }\n  }\nexport const DriversListDocument = gql`\n    query DriversList($paging: OffsetPaging, $filter: DriverFilter, $sorting: [DriverSort!]) {\n  drivers(paging: $paging, filter: $filter, sorting: $sorting) {\n    nodes {\n      id\n      firstName\n      lastName\n      gender\n      mobileNumber\n      status\n      registrationTimestamp\n    }\n    totalCount\n  }\n}\n    `;\n\n  @Injectable({\n    providedIn: 'root'\n  })\n  export class DriversListGQL extends Apollo.Query<DriversListQuery, DriversListQueryVariables> {\n    document = DriversListDocument;\n    \n    constructor(apollo: Apollo.Apollo) {\n      super(apollo);\n    }\n  }\nexport const ProviderWalletsListDocument = gql`\n    query ProviderWalletsList($paging: OffsetPaging) {\n  providerTransactions(paging: $paging) {\n    nodes {\n      createdAt\n      action\n      deductType\n      rechargeType\n      amount\n      currency\n      description\n      requestId\n      operatorId\n    }\n    totalCount\n  }\n  providerWallets {\n    balance\n    currency\n  }\n  regions {\n    nodes {\n      currency\n    }\n  }\n}\n    `;\n\n  @Injectable({\n    providedIn: 'root'\n  })\n  export class ProviderWalletsListGQL extends Apollo.Query<ProviderWalletsListQuery, ProviderWalletsListQueryVariables> {\n    document = ProviderWalletsListDocument;\n    \n    constructor(apollo: Apollo.Apollo) {\n      super(apollo);\n    }\n  }\nexport const ExportDocument = gql`\n    query Export($input: ExportArgs!) {\n  export(input: $input) {\n    url\n  }\n}\n    `;\n\n  @Injectable({\n    providedIn: 'root'\n  })\n  export class ExportGQL extends Apollo.Query<ExportQuery, ExportQueryVariables> {\n    document = ExportDocument;\n    \n    constructor(apollo: Apollo.Apollo) {\n      super(apollo);\n    }\n  }\nexport const DriverWalletsListDocument = gql`\n    query DriverWalletsList($paging: OffsetPaging) {\n  driverWallets(paging: $paging) {\n    nodes {\n      id\n      driverId\n      balance\n      currency\n      driver {\n        firstName\n        lastName\n      }\n    }\n    totalCount\n  }\n  regions {\n    nodes {\n      currency\n    }\n  }\n}\n    `;\n\n  @Injectable({\n    providedIn: 'root'\n  })\n  export class DriverWalletsListGQL extends Apollo.Query<DriverWalletsListQuery, DriverWalletsListQueryVariables> {\n    document = DriverWalletsListDocument;\n    \n    constructor(apollo: Apollo.Apollo) {\n      super(apollo);\n    }\n  }\nexport const FleetWalletsListDocument = gql`\n    query FleetWalletsList($paging: OffsetPaging, $filter: FleetWalletFilter) {\n  fleetWallets(paging: $paging, filter: $filter) {\n    nodes {\n      id\n      balance\n      currency\n      fleetId\n      fleet {\n        name\n      }\n    }\n    totalCount\n  }\n  regions {\n    nodes {\n      currency\n    }\n  }\n}\n    `;\n\n  @Injectable({\n    providedIn: 'root'\n  })\n  export class FleetWalletsListGQL extends Apollo.Query<FleetWalletsListQuery, FleetWalletsListQueryVariables> {\n    document = FleetWalletsListDocument;\n    \n    constructor(apollo: Apollo.Apollo) {\n      super(apollo);\n    }\n  }\nexport const RiderWalletsListDocument = gql`\n    query RiderWalletsList($paging: OffsetPaging) {\n  riderWallets(paging: $paging) {\n    nodes {\n      balance\n      currency\n      riderId\n      rider {\n        firstName\n        lastName\n      }\n    }\n    totalCount\n  }\n  regions {\n    nodes {\n      currency\n    }\n  }\n}\n    `;\n\n  @Injectable({\n    providedIn: 'root'\n  })\n  export class RiderWalletsListGQL extends Apollo.Query<RiderWalletsListQuery, RiderWalletsListQueryVariables> {\n    document = RiderWalletsListDocument;\n    \n    constructor(apollo: Apollo.Apollo) {\n      super(apollo);\n    }\n  }\nexport const DispatcherCalculateFareDocument = gql`\n    query DispatcherCalculateFare($points: [PointInput!]!, $riderId: ID!) {\n  calculateFare(input: {points: $points, riderId: $riderId}) {\n    currency\n    distance\n    duration\n    services {\n      name\n      services {\n        id\n        name\n        cost\n      }\n    }\n  }\n}\n    `;\n\n  @Injectable({\n    providedIn: 'root'\n  })\n  export class DispatcherCalculateFareGQL extends Apollo.Query<DispatcherCalculateFareQuery, DispatcherCalculateFareQueryVariables> {\n    document = DispatcherCalculateFareDocument;\n    \n    constructor(apollo: Apollo.Apollo) {\n      super(apollo);\n    }\n  }\nexport const CreateOrderDocument = gql`\n    mutation CreateOrder($riderId: ID!, $points: [PointInput!]!, $addresses: [String!]!, $serviceId: ID!, $intervalMinutes: Int!) {\n  createOrder(\n    input: {points: $points, serviceId: $serviceId, addresses: $addresses, intervalMinutes: $intervalMinutes, riderId: $riderId}\n  ) {\n    id\n  }\n}\n    `;\n\n  @Injectable({\n    providedIn: 'root'\n  })\n  export class CreateOrderGQL extends Apollo.Mutation<CreateOrderMutation, CreateOrderMutationVariables> {\n    document = CreateOrderDocument;\n    \n    constructor(apollo: Apollo.Apollo) {\n      super(apollo);\n    }\n  }\nexport const OrderUpdatedDocument = gql`\n    subscription OrderUpdated($id: ID!) {\n  orderUpdated(orderId: $id) {\n    id\n    status\n    driver {\n      firstName\n      lastName\n      mobileNumber\n    }\n  }\n}\n    `;\n\n  @Injectable({\n    providedIn: 'root'\n  })\n  export class OrderUpdatedGQL extends Apollo.Subscription<OrderUpdatedSubscription, OrderUpdatedSubscriptionVariables> {\n    document = OrderUpdatedDocument;\n    \n    constructor(apollo: Apollo.Apollo) {\n      super(apollo);\n    }\n  }\nexport const CancelOrderDocument = gql`\n    mutation CancelOrder($orderId: ID!) {\n  cancelOrder(orderId: $orderId) {\n    id\n    status\n  }\n}\n    `;\n\n  @Injectable({\n    providedIn: 'root'\n  })\n  export class CancelOrderGQL extends Apollo.Mutation<CancelOrderMutation, CancelOrderMutationVariables> {\n    document = CancelOrderDocument;\n    \n    constructor(apollo: Apollo.Apollo) {\n      super(apollo);\n    }\n  }\nexport const OverviewDocument = gql`\n    query Overview {\n  complaintAggregate(filter: {status: {in: [Submitted, UnderInvestigation]}}) {\n    count {\n      id\n    }\n  }\n  driverAggregate(filter: {status: {eq: PendingApproval}}) {\n    count {\n      id\n    }\n  }\n  activeOrders: orderAggregate(\n    filter: {status: {in: [DriverAccepted, Arrived, Started, WaitingForPostPay]}}\n  ) {\n    count {\n      id\n    }\n  }\n  bookedOrders: orderAggregate(filter: {status: {eq: Booked}}) {\n    count {\n      id\n    }\n  }\n  getDriversLocation(center: {lat: 45, lng: 45}, count: 150) {\n    ...DriverLocation\n  }\n}\n    ${DriverLocationFragmentDoc}`;\n\n  @Injectable({\n    providedIn: 'root'\n  })\n  export class OverviewGQL extends Apollo.Query<OverviewQuery, OverviewQueryVariables> {\n    document = OverviewDocument;\n    \n    constructor(apollo: Apollo.Apollo) {\n      super(apollo);\n    }\n  }\nexport const OverviewDriverPagingDocument = gql`\n    query OverviewDriverPaging($ids: [ID!]!) {\n  drivers(filter: {id: {in: $ids}}) {\n    nodes {\n      ...DriverOverviewInfo\n    }\n    totalCount\n  }\n}\n    ${DriverOverviewInfoFragmentDoc}`;\n\n  @Injectable({\n    providedIn: 'root'\n  })\n  export class OverviewDriverPagingGQL extends Apollo.Query<OverviewDriverPagingQuery, OverviewDriverPagingQueryVariables> {\n    document = OverviewDriverPagingDocument;\n    \n    constructor(apollo: Apollo.Apollo) {\n      super(apollo);\n    }\n  }\nexport const RequestsChartDocument = gql`\n    query RequestsChart($timeframe: ChartTimeframe!) {\n  requestChart(timeframe: $timeframe) {\n    time\n    count\n    status\n  }\n}\n    `;\n\n  @Injectable({\n    providedIn: 'root'\n  })\n  export class RequestsChartGQL extends Apollo.Query<RequestsChartQuery, RequestsChartQueryVariables> {\n    document = RequestsChartDocument;\n    \n    constructor(apollo: Apollo.Apollo) {\n      super(apollo);\n    }\n  }\nexport const IncomeChartDocument = gql`\n    query IncomeChart($timeframe: ChartTimeframe!) {\n  incomeChart(timeframe: $timeframe) {\n    time\n    sum\n    currency\n  }\n}\n    `;\n\n  @Injectable({\n    providedIn: 'root'\n  })\n  export class IncomeChartGQL extends Apollo.Query<IncomeChartQuery, IncomeChartQueryVariables> {\n    document = IncomeChartDocument;\n    \n    constructor(apollo: Apollo.Apollo) {\n      super(apollo);\n    }\n  }\nexport const DriverRegistrationsDocument = gql`\n    query DriverRegistrations($timeframe: ChartTimeframe!) {\n  driverRegistrations(timeframe: $timeframe) {\n    time\n    count\n  }\n}\n    `;\n\n  @Injectable({\n    providedIn: 'root'\n  })\n  export class DriverRegistrationsGQL extends Apollo.Query<DriverRegistrationsQuery, DriverRegistrationsQueryVariables> {\n    document = DriverRegistrationsDocument;\n    \n    constructor(apollo: Apollo.Apollo) {\n      super(apollo);\n    }\n  }\nexport const RiderRegistrationsDocument = gql`\n    query RiderRegistrations($timeframe: ChartTimeframe!) {\n  riderRegistrations(timeframe: $timeframe) {\n    time\n    count\n  }\n}\n    `;\n\n  @Injectable({\n    providedIn: 'root'\n  })\n  export class RiderRegistrationsGQL extends Apollo.Query<RiderRegistrationsQuery, RiderRegistrationsQueryVariables> {\n    document = RiderRegistrationsDocument;\n    \n    constructor(apollo: Apollo.Apollo) {\n      super(apollo);\n    }\n  }\nexport const CarsListDocument = gql`\n    query CarsList {\n  carModels(paging: {limit: 100}) {\n    nodes {\n      id\n      name\n    }\n  }\n  carColors {\n    id\n    name\n  }\n}\n    `;\n\n  @Injectable({\n    providedIn: 'root'\n  })\n  export class CarsListGQL extends Apollo.Query<CarsListQuery, CarsListQueryVariables> {\n    document = CarsListDocument;\n    \n    constructor(apollo: Apollo.Apollo) {\n      super(apollo);\n    }\n  }\nexport const DeleteCarModelDocument = gql`\n    mutation DeleteCarModel($id: ID!) {\n  deleteOneCarModel(input: {id: $id}) {\n    id\n  }\n}\n    `;\n\n  @Injectable({\n    providedIn: 'root'\n  })\n  export class DeleteCarModelGQL extends Apollo.Mutation<DeleteCarModelMutation, DeleteCarModelMutationVariables> {\n    document = DeleteCarModelDocument;\n    \n    constructor(apollo: Apollo.Apollo) {\n      super(apollo);\n    }\n  }\nexport const DeleteCarColorDocument = gql`\n    mutation DeleteCarColor($id: ID!) {\n  deleteOneCarColor(input: {id: $id}) {\n    id\n  }\n}\n    `;\n\n  @Injectable({\n    providedIn: 'root'\n  })\n  export class DeleteCarColorGQL extends Apollo.Mutation<DeleteCarColorMutation, DeleteCarColorMutationVariables> {\n    document = DeleteCarColorDocument;\n    \n    constructor(apollo: Apollo.Apollo) {\n      super(apollo);\n    }\n  }\nexport const CreateCarModelDocument = gql`\n    mutation CreateCarModel($input: CarModelInput!) {\n  createOneCarModel(input: {carModel: $input}) {\n    id\n  }\n}\n    `;\n\n  @Injectable({\n    providedIn: 'root'\n  })\n  export class CreateCarModelGQL extends Apollo.Mutation<CreateCarModelMutation, CreateCarModelMutationVariables> {\n    document = CreateCarModelDocument;\n    \n    constructor(apollo: Apollo.Apollo) {\n      super(apollo);\n    }\n  }\nexport const CreateCarColorDocument = gql`\n    mutation CreateCarColor($input: CarColorInput!) {\n  createOneCarColor(input: {carColor: $input}) {\n    id\n  }\n}\n    `;\n\n  @Injectable({\n    providedIn: 'root'\n  })\n  export class CreateCarColorGQL extends Apollo.Mutation<CreateCarColorMutation, CreateCarColorMutationVariables> {\n    document = CreateCarColorDocument;\n    \n    constructor(apollo: Apollo.Apollo) {\n      super(apollo);\n    }\n  }\nexport const UpdateCarModelDocument = gql`\n    mutation UpdateCarModel($id: ID!, $input: CarModelInput!) {\n  updateOneCarModel(input: {id: $id, update: $input}) {\n    id\n  }\n}\n    `;\n\n  @Injectable({\n    providedIn: 'root'\n  })\n  export class UpdateCarModelGQL extends Apollo.Mutation<UpdateCarModelMutation, UpdateCarModelMutationVariables> {\n    document = UpdateCarModelDocument;\n    \n    constructor(apollo: Apollo.Apollo) {\n      super(apollo);\n    }\n  }\nexport const UpdateCarColorDocument = gql`\n    mutation UpdateCarColor($id: ID!, $input: CarColorInput!) {\n  updateOneCarColor(input: {id: $id, update: $input}) {\n    id\n  }\n}\n    `;\n\n  @Injectable({\n    providedIn: 'root'\n  })\n  export class UpdateCarColorGQL extends Apollo.Mutation<UpdateCarColorMutation, UpdateCarColorMutationVariables> {\n    document = UpdateCarColorDocument;\n    \n    constructor(apollo: Apollo.Apollo) {\n      super(apollo);\n    }\n  }\nexport const CreateFleetDocument = gql`\n    mutation CreateFleet($input: FleetInput!) {\n  createOneFleet(input: {fleet: $input}) {\n    id\n  }\n}\n    `;\n\n  @Injectable({\n    providedIn: 'root'\n  })\n  export class CreateFleetGQL extends Apollo.Mutation<CreateFleetMutation, CreateFleetMutationVariables> {\n    document = CreateFleetDocument;\n    \n    constructor(apollo: Apollo.Apollo) {\n      super(apollo);\n    }\n  }\nexport const ViewFleetDocument = gql`\n    query ViewFleet($id: ID!) {\n  fleet(id: $id) {\n    id\n    name\n    phoneNumber\n    address\n    mobileNumber\n    accountNumber\n    userName\n    password\n    commissionSharePercent\n    commissionShareFlat\n    feeMultiplier\n    exclusivityAreas {\n      lat\n      lng\n    }\n  }\n}\n    `;\n\n  @Injectable({\n    providedIn: 'root'\n  })\n  export class ViewFleetGQL extends Apollo.Query<ViewFleetQuery, ViewFleetQueryVariables> {\n    document = ViewFleetDocument;\n    \n    constructor(apollo: Apollo.Apollo) {\n      super(apollo);\n    }\n  }\nexport const FleetFinancialsDocument = gql`\n    query FleetFinancials($id: ID!, $paging: OffsetPaging, $filter: FleetTransactionFilter, $sorting: [FleetTransactionSort!]) {\n  fleet(id: $id) {\n    transactions(paging: $paging, filter: $filter, sorting: $sorting) {\n      nodes {\n        transactionTimestamp\n        amount\n        currency\n        action\n        deductType\n        rechargeType\n        refrenceNumber\n        operatorId\n        requestId\n        description\n      }\n      totalCount\n    }\n    wallets {\n      currency\n      balance\n    }\n  }\n  regions {\n    nodes {\n      currency\n    }\n  }\n}\n    `;\n\n  @Injectable({\n    providedIn: 'root'\n  })\n  export class FleetFinancialsGQL extends Apollo.Query<FleetFinancialsQuery, FleetFinancialsQueryVariables> {\n    document = FleetFinancialsDocument;\n    \n    constructor(apollo: Apollo.Apollo) {\n      super(apollo);\n    }\n  }\nexport const FleetZonePricesDocument = gql`\n    query FleetZonePrices($id: ID!, $paging: OffsetPaging, $filter: ZonePriceFilter, $sorting: [ZonePriceSort!]) {\n  fleet(id: $id) {\n    zonePrices(paging: $paging, filter: $filter, sorting: $sorting) {\n      nodes {\n        id\n        name\n      }\n      totalCount\n    }\n  }\n}\n    `;\n\n  @Injectable({\n    providedIn: 'root'\n  })\n  export class FleetZonePricesGQL extends Apollo.Query<FleetZonePricesQuery, FleetZonePricesQueryVariables> {\n    document = FleetZonePricesDocument;\n    \n    constructor(apollo: Apollo.Apollo) {\n      super(apollo);\n    }\n  }\nexport const FleetDriversDocument = gql`\n    query FleetDrivers($id: ID!, $paging: OffsetPaging) {\n  drivers(filter: {fleetId: {eq: $id}}, paging: $paging) {\n    nodes {\n      id\n      firstName\n      lastName\n      mobileNumber\n    }\n  }\n}\n    `;\n\n  @Injectable({\n    providedIn: 'root'\n  })\n  export class FleetDriversGQL extends Apollo.Query<FleetDriversQuery, FleetDriversQueryVariables> {\n    document = FleetDriversDocument;\n    \n    constructor(apollo: Apollo.Apollo) {\n      super(apollo);\n    }\n  }\nexport const UpdateFleetDocument = gql`\n    mutation UpdateFleet($id: ID!, $update: FleetInput!) {\n  updateOneFleet(input: {id: $id, update: $update}) {\n    id\n  }\n}\n    `;\n\n  @Injectable({\n    providedIn: 'root'\n  })\n  export class UpdateFleetGQL extends Apollo.Mutation<UpdateFleetMutation, UpdateFleetMutationVariables> {\n    document = UpdateFleetDocument;\n    \n    constructor(apollo: Apollo.Apollo) {\n      super(apollo);\n    }\n  }\nexport const CreateFleetTransactionDocument = gql`\n    mutation CreateFleetTransaction($input: FleetTransactionInput!) {\n  createFleetTransaction(input: $input) {\n    id\n  }\n}\n    `;\n\n  @Injectable({\n    providedIn: 'root'\n  })\n  export class CreateFleetTransactionGQL extends Apollo.Mutation<CreateFleetTransactionMutation, CreateFleetTransactionMutationVariables> {\n    document = CreateFleetTransactionDocument;\n    \n    constructor(apollo: Apollo.Apollo) {\n      super(apollo);\n    }\n  }\nexport const FleetsListDocument = gql`\n    query FleetsList($paging: OffsetPaging, $filter: FleetFilter) {\n  fleets(paging: $paging, filter: $filter) {\n    nodes {\n      id\n      name\n      phoneNumber\n      address\n    }\n    totalCount\n  }\n}\n    `;\n\n  @Injectable({\n    providedIn: 'root'\n  })\n  export class FleetsListGQL extends Apollo.Query<FleetsListQuery, FleetsListQueryVariables> {\n    document = FleetsListDocument;\n    \n    constructor(apollo: Apollo.Apollo) {\n      super(apollo);\n    }\n  }\nexport const OrderCancelReasonListDocument = gql`\n    query OrderCancelReasonList($paging: OffsetPaging) {\n  orderCancelReasons(paging: $paging) {\n    nodes {\n      id\n      title\n      isEnabled\n      userType\n    }\n    totalCount\n  }\n}\n    `;\n\n  @Injectable({\n    providedIn: 'root'\n  })\n  export class OrderCancelReasonListGQL extends Apollo.Query<OrderCancelReasonListQuery, OrderCancelReasonListQueryVariables> {\n    document = OrderCancelReasonListDocument;\n    \n    constructor(apollo: Apollo.Apollo) {\n      super(apollo);\n    }\n  }\nexport const OrderCancelReasonViewDocument = gql`\n    query OrderCancelReasonView($id: ID!) {\n  orderCancelReason(id: $id) {\n    id\n    title\n    userType\n    isEnabled\n  }\n}\n    `;\n\n  @Injectable({\n    providedIn: 'root'\n  })\n  export class OrderCancelReasonViewGQL extends Apollo.Query<OrderCancelReasonViewQuery, OrderCancelReasonViewQueryVariables> {\n    document = OrderCancelReasonViewDocument;\n    \n    constructor(apollo: Apollo.Apollo) {\n      super(apollo);\n    }\n  }\nexport const UpdateOrderCancelReasonDocument = gql`\n    mutation UpdateOrderCancelReason($id: ID!, $update: OrderCancelReasonInput!) {\n  updateOneOrderCancelReason(input: {id: $id, update: $update}) {\n    id\n  }\n}\n    `;\n\n  @Injectable({\n    providedIn: 'root'\n  })\n  export class UpdateOrderCancelReasonGQL extends Apollo.Mutation<UpdateOrderCancelReasonMutation, UpdateOrderCancelReasonMutationVariables> {\n    document = UpdateOrderCancelReasonDocument;\n    \n    constructor(apollo: Apollo.Apollo) {\n      super(apollo);\n    }\n  }\nexport const CreateOrderCancelReasonDocument = gql`\n    mutation CreateOrderCancelReason($input: OrderCancelReasonInput!) {\n  createOneOrderCancelReason(input: {orderCancelReason: $input}) {\n    id\n  }\n}\n    `;\n\n  @Injectable({\n    providedIn: 'root'\n  })\n  export class CreateOrderCancelReasonGQL extends Apollo.Mutation<CreateOrderCancelReasonMutation, CreateOrderCancelReasonMutationVariables> {\n    document = CreateOrderCancelReasonDocument;\n    \n    constructor(apollo: Apollo.Apollo) {\n      super(apollo);\n    }\n  }\nexport const ViewPaymentGatewayDocument = gql`\n    query ViewPaymentGateway($id: ID!) {\n  paymentGateway(id: $id) {\n    id\n    title\n    type\n    enabled\n    privateKey\n    publicKey\n    merchantId\n    saltKey\n    mediaId\n    media {\n      address\n    }\n  }\n}\n    `;\n\n  @Injectable({\n    providedIn: 'root'\n  })\n  export class ViewPaymentGatewayGQL extends Apollo.Query<ViewPaymentGatewayQuery, ViewPaymentGatewayQueryVariables> {\n    document = ViewPaymentGatewayDocument;\n    \n    constructor(apollo: Apollo.Apollo) {\n      super(apollo);\n    }\n  }\nexport const CreatePaymentGatewayDocument = gql`\n    mutation CreatePaymentGateway($input: PaymentGatewayInput!) {\n  createOnePaymentGateway(input: {paymentGateway: $input}) {\n    id\n  }\n}\n    `;\n\n  @Injectable({\n    providedIn: 'root'\n  })\n  export class CreatePaymentGatewayGQL extends Apollo.Mutation<CreatePaymentGatewayMutation, CreatePaymentGatewayMutationVariables> {\n    document = CreatePaymentGatewayDocument;\n    \n    constructor(apollo: Apollo.Apollo) {\n      super(apollo);\n    }\n  }\nexport const UpdatePaymentGatewayDocument = gql`\n    mutation UpdatePaymentGateway($id: ID!, $input: PaymentGatewayInput!) {\n  updateOnePaymentGateway(input: {id: $id, update: $input}) {\n    id\n  }\n}\n    `;\n\n  @Injectable({\n    providedIn: 'root'\n  })\n  export class UpdatePaymentGatewayGQL extends Apollo.Mutation<UpdatePaymentGatewayMutation, UpdatePaymentGatewayMutationVariables> {\n    document = UpdatePaymentGatewayDocument;\n    \n    constructor(apollo: Apollo.Apollo) {\n      super(apollo);\n    }\n  }\nexport const PaymentGatewaysDocument = gql`\n    query PaymentGateways($paging: OffsetPaging) {\n  paymentGateways(paging: $paging) {\n    nodes {\n      id\n      enabled\n      title\n      type\n      media {\n        address\n      }\n    }\n    totalCount\n  }\n}\n    `;\n\n  @Injectable({\n    providedIn: 'root'\n  })\n  export class PaymentGatewaysGQL extends Apollo.Query<PaymentGatewaysQuery, PaymentGatewaysQueryVariables> {\n    document = PaymentGatewaysDocument;\n    \n    constructor(apollo: Apollo.Apollo) {\n      super(apollo);\n    }\n  }\nexport const RegionListDocument = gql`\n    query RegionList($paging: OffsetPaging) {\n  regions(paging: $paging) {\n    nodes {\n      id\n      name\n      currency\n      enabled\n      location {\n        lat\n        lng\n      }\n    }\n    totalCount\n  }\n}\n    `;\n\n  @Injectable({\n    providedIn: 'root'\n  })\n  export class RegionListGQL extends Apollo.Query<RegionListQuery, RegionListQueryVariables> {\n    document = RegionListDocument;\n    \n    constructor(apollo: Apollo.Apollo) {\n      super(apollo);\n    }\n  }\nexport const RegionViewDocument = gql`\n    query RegionView($id: ID!) {\n  region(id: $id) {\n    id\n    name\n    currency\n    enabled\n    location {\n      lat\n      lng\n    }\n  }\n}\n    `;\n\n  @Injectable({\n    providedIn: 'root'\n  })\n  export class RegionViewGQL extends Apollo.Query<RegionViewQuery, RegionViewQueryVariables> {\n    document = RegionViewDocument;\n    \n    constructor(apollo: Apollo.Apollo) {\n      super(apollo);\n    }\n  }\nexport const UpdateRegionDocument = gql`\n    mutation UpdateRegion($id: ID!, $update: RegionInput!) {\n  updateOneRegion(input: {id: $id, update: $update}) {\n    id\n  }\n}\n    `;\n\n  @Injectable({\n    providedIn: 'root'\n  })\n  export class UpdateRegionGQL extends Apollo.Mutation<UpdateRegionMutation, UpdateRegionMutationVariables> {\n    document = UpdateRegionDocument;\n    \n    constructor(apollo: Apollo.Apollo) {\n      super(apollo);\n    }\n  }\nexport const CreateRegionDocument = gql`\n    mutation CreateRegion($input: RegionInput!) {\n  createOneRegion(input: {region: $input}) {\n    id\n  }\n}\n    `;\n\n  @Injectable({\n    providedIn: 'root'\n  })\n  export class CreateRegionGQL extends Apollo.Mutation<CreateRegionMutation, CreateRegionMutationVariables> {\n    document = CreateRegionDocument;\n    \n    constructor(apollo: Apollo.Apollo) {\n      super(apollo);\n    }\n  }\nexport const ReviewParameterViewDocument = gql`\n    query ReviewParameterView($id: ID!) {\n  feedbackParameter(id: $id) {\n    id\n    title\n    isGood\n  }\n}\n    `;\n\n  @Injectable({\n    providedIn: 'root'\n  })\n  export class ReviewParameterViewGQL extends Apollo.Query<ReviewParameterViewQuery, ReviewParameterViewQueryVariables> {\n    document = ReviewParameterViewDocument;\n    \n    constructor(apollo: Apollo.Apollo) {\n      super(apollo);\n    }\n  }\nexport const UpdateReviewParameterDocument = gql`\n    mutation UpdateReviewParameter($id: ID!, $update: FeedbackParameterInput!) {\n  updateOneFeedbackParameter(input: {id: $id, update: $update}) {\n    id\n  }\n}\n    `;\n\n  @Injectable({\n    providedIn: 'root'\n  })\n  export class UpdateReviewParameterGQL extends Apollo.Mutation<UpdateReviewParameterMutation, UpdateReviewParameterMutationVariables> {\n    document = UpdateReviewParameterDocument;\n    \n    constructor(apollo: Apollo.Apollo) {\n      super(apollo);\n    }\n  }\nexport const CreateReviewParameterDocument = gql`\n    mutation CreateReviewParameter($input: FeedbackParameterInput!) {\n  createOneFeedbackParameter(input: {feedbackParameter: $input}) {\n    id\n  }\n}\n    `;\n\n  @Injectable({\n    providedIn: 'root'\n  })\n  export class CreateReviewParameterGQL extends Apollo.Mutation<CreateReviewParameterMutation, CreateReviewParameterMutationVariables> {\n    document = CreateReviewParameterDocument;\n    \n    constructor(apollo: Apollo.Apollo) {\n      super(apollo);\n    }\n  }\nexport const ReviewParametersListDocument = gql`\n    query ReviewParametersList {\n  feedbackParameters {\n    id\n    title\n    isGood\n  }\n}\n    `;\n\n  @Injectable({\n    providedIn: 'root'\n  })\n  export class ReviewParametersListGQL extends Apollo.Query<ReviewParametersListQuery, ReviewParametersListQueryVariables> {\n    document = ReviewParametersListDocument;\n    \n    constructor(apollo: Apollo.Apollo) {\n      super(apollo);\n    }\n  }\nexport const RolesDocument = gql`\n    query Roles {\n  operatorRoles {\n    id\n    title\n  }\n}\n    `;\n\n  @Injectable({\n    providedIn: 'root'\n  })\n  export class RolesGQL extends Apollo.Query<RolesQuery, RolesQueryVariables> {\n    document = RolesDocument;\n    \n    constructor(apollo: Apollo.Apollo) {\n      super(apollo);\n    }\n  }\nexport const RoleDocument = gql`\n    query Role($id: ID!) {\n  operatorRole(id: $id) {\n    id\n    title\n    permissions\n  }\n}\n    `;\n\n  @Injectable({\n    providedIn: 'root'\n  })\n  export class RoleGQL extends Apollo.Query<RoleQuery, RoleQueryVariables> {\n    document = RoleDocument;\n    \n    constructor(apollo: Apollo.Apollo) {\n      super(apollo);\n    }\n  }\nexport const CreateRoleDocument = gql`\n    mutation CreateRole($input: OperatorRoleInput!) {\n  createOneOperatorRole(input: {operatorRole: $input}) {\n    id\n    title\n    permissions\n  }\n}\n    `;\n\n  @Injectable({\n    providedIn: 'root'\n  })\n  export class CreateRoleGQL extends Apollo.Mutation<CreateRoleMutation, CreateRoleMutationVariables> {\n    document = CreateRoleDocument;\n    \n    constructor(apollo: Apollo.Apollo) {\n      super(apollo);\n    }\n  }\nexport const UpdateRoleDocument = gql`\n    mutation UpdateRole($id: ID!, $input: OperatorRoleInput!) {\n  updateOneOperatorRole(input: {id: $id, update: $input}) {\n    id\n  }\n}\n    `;\n\n  @Injectable({\n    providedIn: 'root'\n  })\n  export class UpdateRoleGQL extends Apollo.Mutation<UpdateRoleMutation, UpdateRoleMutationVariables> {\n    document = UpdateRoleDocument;\n    \n    constructor(apollo: Apollo.Apollo) {\n      super(apollo);\n    }\n  }\nexport const ServiceOptionViewDocument = gql`\n    query ServiceOptionView($id: ID!) {\n  serviceOption(id: $id) {\n    id\n    name\n    type\n    icon\n    additionalFee\n  }\n}\n    `;\n\n  @Injectable({\n    providedIn: 'root'\n  })\n  export class ServiceOptionViewGQL extends Apollo.Query<ServiceOptionViewQuery, ServiceOptionViewQueryVariables> {\n    document = ServiceOptionViewDocument;\n    \n    constructor(apollo: Apollo.Apollo) {\n      super(apollo);\n    }\n  }\nexport const UpdateServiceOptionDocument = gql`\n    mutation UpdateServiceOption($id: ID!, $update: ServiceOptionInput!) {\n  updateOneServiceOption(input: {id: $id, update: $update}) {\n    id\n  }\n}\n    `;\n\n  @Injectable({\n    providedIn: 'root'\n  })\n  export class UpdateServiceOptionGQL extends Apollo.Mutation<UpdateServiceOptionMutation, UpdateServiceOptionMutationVariables> {\n    document = UpdateServiceOptionDocument;\n    \n    constructor(apollo: Apollo.Apollo) {\n      super(apollo);\n    }\n  }\nexport const CreateServiceOptionDocument = gql`\n    mutation CreateServiceOption($input: ServiceOptionInput!) {\n  createOneServiceOption(input: {serviceOption: $input}) {\n    id\n  }\n}\n    `;\n\n  @Injectable({\n    providedIn: 'root'\n  })\n  export class CreateServiceOptionGQL extends Apollo.Mutation<CreateServiceOptionMutation, CreateServiceOptionMutationVariables> {\n    document = CreateServiceOptionDocument;\n    \n    constructor(apollo: Apollo.Apollo) {\n      super(apollo);\n    }\n  }\nexport const ServiceOptionsListDocument = gql`\n    query ServiceOptionsList {\n  serviceOptions {\n    id\n    name\n    icon\n    type\n    additionalFee\n  }\n}\n    `;\n\n  @Injectable({\n    providedIn: 'root'\n  })\n  export class ServiceOptionsListGQL extends Apollo.Query<ServiceOptionsListQuery, ServiceOptionsListQueryVariables> {\n    document = ServiceOptionsListDocument;\n    \n    constructor(apollo: Apollo.Apollo) {\n      super(apollo);\n    }\n  }\nexport const ViewServiceCategoryDocument = gql`\n    query ViewServiceCategory($id: ID!) {\n  serviceCategory(id: $id) {\n    id\n    name\n  }\n}\n    `;\n\n  @Injectable({\n    providedIn: 'root'\n  })\n  export class ViewServiceCategoryGQL extends Apollo.Query<ViewServiceCategoryQuery, ViewServiceCategoryQueryVariables> {\n    document = ViewServiceCategoryDocument;\n    \n    constructor(apollo: Apollo.Apollo) {\n      super(apollo);\n    }\n  }\nexport const CreateServiceCategoryDocument = gql`\n    mutation CreateServiceCategory($input: ServiceCategoryInput!) {\n  createOneServiceCategory(input: {serviceCategory: $input}) {\n    id\n  }\n}\n    `;\n\n  @Injectable({\n    providedIn: 'root'\n  })\n  export class CreateServiceCategoryGQL extends Apollo.Mutation<CreateServiceCategoryMutation, CreateServiceCategoryMutationVariables> {\n    document = CreateServiceCategoryDocument;\n    \n    constructor(apollo: Apollo.Apollo) {\n      super(apollo);\n    }\n  }\nexport const UpdateServiceCategoryDocument = gql`\n    mutation UpdateServiceCategory($id: ID!, $input: ServiceCategoryInput!) {\n  updateOneServiceCategory(input: {id: $id, update: $input}) {\n    id\n  }\n}\n    `;\n\n  @Injectable({\n    providedIn: 'root'\n  })\n  export class UpdateServiceCategoryGQL extends Apollo.Mutation<UpdateServiceCategoryMutation, UpdateServiceCategoryMutationVariables> {\n    document = UpdateServiceCategoryDocument;\n    \n    constructor(apollo: Apollo.Apollo) {\n      super(apollo);\n    }\n  }\nexport const DeleteServiceCategoryDocument = gql`\n    mutation DeleteServiceCategory($id: ID!) {\n  deleteOneServiceCategory(input: {id: $id}) {\n    id\n  }\n}\n    `;\n\n  @Injectable({\n    providedIn: 'root'\n  })\n  export class DeleteServiceCategoryGQL extends Apollo.Mutation<DeleteServiceCategoryMutation, DeleteServiceCategoryMutationVariables> {\n    document = DeleteServiceCategoryDocument;\n    \n    constructor(apollo: Apollo.Apollo) {\n      super(apollo);\n    }\n  }\nexport const ServicesListDocument = gql`\n    query ServicesList {\n  serviceCategories {\n    id\n    name\n    services {\n      id\n      name\n      description\n      media {\n        address\n      }\n    }\n  }\n}\n    `;\n\n  @Injectable({\n    providedIn: 'root'\n  })\n  export class ServicesListGQL extends Apollo.Query<ServicesListQuery, ServicesListQueryVariables> {\n    document = ServicesListDocument;\n    \n    constructor(apollo: Apollo.Apollo) {\n      super(apollo);\n    }\n  }\nexport const ViewServiceDocument = gql`\n    query ViewService($id: ID!) {\n  service(id: $id) {\n    id\n    name\n    categoryId\n    baseFare\n    perHundredMeters\n    perMinuteDrive\n    perMinuteWait\n    minimumFee\n    searchRadius\n    maximumDestinationDistance\n    paymentMethod\n    cancellationTotalFee\n    cancellationDriverShare\n    providerShareFlat\n    providerSharePercent\n    prepayPercent\n    searchRadius\n    mediaId\n    description\n    personCapacity\n    roundingFactor\n    media {\n      address\n    }\n    timeMultipliers {\n      startTime\n      endTime\n      multiply\n    }\n    distanceMultipliers {\n      distanceFrom\n      distanceTo\n      multiply\n    }\n    weekdayMultipliers {\n      weekday\n      multiply\n    }\n    dateRangeMultipliers {\n      startDate\n      endDate\n      multiply\n    }\n    options {\n      id\n      name\n      type\n      additionalFee\n      icon\n    }\n    regions {\n      id\n      name\n      currency\n    }\n  }\n  regions {\n    nodes {\n      id\n      name\n      currency\n    }\n  }\n  serviceCategories {\n    id\n    name\n  }\n  serviceOptions {\n    id\n    name\n    icon\n    type\n    additionalFee\n  }\n}\n    `;\n\n  @Injectable({\n    providedIn: 'root'\n  })\n  export class ViewServiceGQL extends Apollo.Query<ViewServiceQuery, ViewServiceQueryVariables> {\n    document = ViewServiceDocument;\n    \n    constructor(apollo: Apollo.Apollo) {\n      super(apollo);\n    }\n  }\nexport const NewServiceDocument = gql`\n    query NewService {\n  regions {\n    nodes {\n      id\n      name\n      currency\n    }\n  }\n  serviceCategories {\n    id\n    name\n  }\n  serviceOptions {\n    id\n    name\n    icon\n    type\n    additionalFee\n  }\n}\n    `;\n\n  @Injectable({\n    providedIn: 'root'\n  })\n  export class NewServiceGQL extends Apollo.Query<NewServiceQuery, NewServiceQueryVariables> {\n    document = NewServiceDocument;\n    \n    constructor(apollo: Apollo.Apollo) {\n      super(apollo);\n    }\n  }\nexport const CreateServiceDocument = gql`\n    mutation CreateService($input: ServiceInput!) {\n  createOneService(input: {service: $input}) {\n    id\n  }\n}\n    `;\n\n  @Injectable({\n    providedIn: 'root'\n  })\n  export class CreateServiceGQL extends Apollo.Mutation<CreateServiceMutation, CreateServiceMutationVariables> {\n    document = CreateServiceDocument;\n    \n    constructor(apollo: Apollo.Apollo) {\n      super(apollo);\n    }\n  }\nexport const DeleteServiceDocument = gql`\n    mutation DeleteService($id: ID!) {\n  deleteOneService(input: {id: $id}) {\n    id\n  }\n}\n    `;\n\n  @Injectable({\n    providedIn: 'root'\n  })\n  export class DeleteServiceGQL extends Apollo.Mutation<DeleteServiceMutation, DeleteServiceMutationVariables> {\n    document = DeleteServiceDocument;\n    \n    constructor(apollo: Apollo.Apollo) {\n      super(apollo);\n    }\n  }\nexport const UpdateServiceDocument = gql`\n    mutation UpdateService($id: ID!, $input: ServiceInput!) {\n  updateOneService(input: {id: $id, update: $input}) {\n    id\n  }\n}\n    `;\n\n  @Injectable({\n    providedIn: 'root'\n  })\n  export class UpdateServiceGQL extends Apollo.Mutation<UpdateServiceMutation, UpdateServiceMutationVariables> {\n    document = UpdateServiceDocument;\n    \n    constructor(apollo: Apollo.Apollo) {\n      super(apollo);\n    }\n  }\nexport const SetRegionsOnServiceDocument = gql`\n    mutation SetRegionsOnService($id: ID!, $relationIds: [ID!]!) {\n  setRegionsOnService(input: {id: $id, relationIds: $relationIds}) {\n    id\n  }\n}\n    `;\n\n  @Injectable({\n    providedIn: 'root'\n  })\n  export class SetRegionsOnServiceGQL extends Apollo.Mutation<SetRegionsOnServiceMutation, SetRegionsOnServiceMutationVariables> {\n    document = SetRegionsOnServiceDocument;\n    \n    constructor(apollo: Apollo.Apollo) {\n      super(apollo);\n    }\n  }\nexport const SetOptionsOnServiceDocument = gql`\n    mutation SetOptionsOnService($id: ID!, $relationIds: [ID!]!) {\n  setOptionsOnService(input: {id: $id, relationIds: $relationIds}) {\n    id\n  }\n}\n    `;\n\n  @Injectable({\n    providedIn: 'root'\n  })\n  export class SetOptionsOnServiceGQL extends Apollo.Mutation<SetOptionsOnServiceMutation, SetOptionsOnServiceMutationVariables> {\n    document = SetOptionsOnServiceDocument;\n    \n    constructor(apollo: Apollo.Apollo) {\n      super(apollo);\n    }\n  }\nexport const UpdatePasswordDocument = gql`\n    mutation UpdatePassword($input: UpdatePasswordInput!) {\n  updatePassword(input: $input) {\n    id\n  }\n}\n    `;\n\n  @Injectable({\n    providedIn: 'root'\n  })\n  export class UpdatePasswordGQL extends Apollo.Mutation<UpdatePasswordMutation, UpdatePasswordMutationVariables> {\n    document = UpdatePasswordDocument;\n    \n    constructor(apollo: Apollo.Apollo) {\n      super(apollo);\n    }\n  }\nexport const GetConfigurationDocument = gql`\n    query GetConfiguration {\n  currentConfiguration {\n    backendMapsAPIKey\n    twilioAccountSid\n    twilioAuthToken\n    twilioFromNumber\n    twilioVerificationCodeSMSTemplate\n  }\n}\n    `;\n\n  @Injectable({\n    providedIn: 'root'\n  })\n  export class GetConfigurationGQL extends Apollo.Query<GetConfigurationQuery, GetConfigurationQueryVariables> {\n    document = GetConfigurationDocument;\n    \n    constructor(apollo: Apollo.Apollo) {\n      super(apollo);\n    }\n  }\nexport const UpdateConfigDocument = gql`\n    mutation UpdateConfig($input: UpdateConfigInput!) {\n  saveConfiguration(input: $input) {\n    backendMapsAPIKey\n    twilioAccountSid\n    twilioAuthToken\n    twilioFromNumber\n    twilioVerificationCodeSMSTemplate\n  }\n}\n    `;\n\n  @Injectable({\n    providedIn: 'root'\n  })\n  export class UpdateConfigGQL extends Apollo.Mutation<UpdateConfigMutation, UpdateConfigMutationVariables> {\n    document = UpdateConfigDocument;\n    \n    constructor(apollo: Apollo.Apollo) {\n      super(apollo);\n    }\n  }\nexport const SmsProvidersDocument = gql`\n    query SMSProviders($paging: OffsetPaging) {\n  smsProviders(paging: $paging) {\n    nodes {\n      id\n      isDefault\n      name\n      type\n    }\n    totalCount\n  }\n}\n    `;\n\n  @Injectable({\n    providedIn: 'root'\n  })\n  export class SmsProvidersGQL extends Apollo.Query<SmsProvidersQuery, SmsProvidersQueryVariables> {\n    document = SmsProvidersDocument;\n    \n    constructor(apollo: Apollo.Apollo) {\n      super(apollo);\n    }\n  }\nexport const ViewSmsProviderDocument = gql`\n    query ViewSMSProvider($id: ID!) {\n  smsProvider(id: $id) {\n    id\n    name\n    type\n    isDefault\n    authToken\n    accountId\n    fromNumber\n    verificationTemplate\n    smsType\n  }\n}\n    `;\n\n  @Injectable({\n    providedIn: 'root'\n  })\n  export class ViewSmsProviderGQL extends Apollo.Query<ViewSmsProviderQuery, ViewSmsProviderQueryVariables> {\n    document = ViewSmsProviderDocument;\n    \n    constructor(apollo: Apollo.Apollo) {\n      super(apollo);\n    }\n  }\nexport const CreateSmsProviderDocument = gql`\n    mutation CreateSMSProvider($input: SMSProviderInput!) {\n  createOneSMSProvider(input: {sMSProvider: $input}) {\n    id\n  }\n}\n    `;\n\n  @Injectable({\n    providedIn: 'root'\n  })\n  export class CreateSmsProviderGQL extends Apollo.Mutation<CreateSmsProviderMutation, CreateSmsProviderMutationVariables> {\n    document = CreateSmsProviderDocument;\n    \n    constructor(apollo: Apollo.Apollo) {\n      super(apollo);\n    }\n  }\nexport const UpdateSmsProviderDocument = gql`\n    mutation UpdateSMSProvider($id: ID!, $input: SMSProviderInput!) {\n  updateOneSMSProvider(input: {id: $id, update: $input}) {\n    id\n  }\n}\n    `;\n\n  @Injectable({\n    providedIn: 'root'\n  })\n  export class UpdateSmsProviderGQL extends Apollo.Mutation<UpdateSmsProviderMutation, UpdateSmsProviderMutationVariables> {\n    document = UpdateSmsProviderDocument;\n    \n    constructor(apollo: Apollo.Apollo) {\n      super(apollo);\n    }\n  }\nexport const MarkSmsProviderAsDefaultDocument = gql`\n    mutation MarkSMSProviderAsDefault($id: ID!) {\n  markSMSProviderAsDefault(id: $id) {\n    id\n  }\n}\n    `;\n\n  @Injectable({\n    providedIn: 'root'\n  })\n  export class MarkSmsProviderAsDefaultGQL extends Apollo.Mutation<MarkSmsProviderAsDefaultMutation, MarkSmsProviderAsDefaultMutationVariables> {\n    document = MarkSmsProviderAsDefaultDocument;\n    \n    constructor(apollo: Apollo.Apollo) {\n      super(apollo);\n    }\n  }\nexport const CreateOperatorDocument = gql`\n    mutation CreateOperator($input: CreateOperatorInput!) {\n  createOneOperator(input: {operator: $input}) {\n    id\n  }\n}\n    `;\n\n  @Injectable({\n    providedIn: 'root'\n  })\n  export class CreateOperatorGQL extends Apollo.Mutation<CreateOperatorMutation, CreateOperatorMutationVariables> {\n    document = CreateOperatorDocument;\n    \n    constructor(apollo: Apollo.Apollo) {\n      super(apollo);\n    }\n  }\nexport const ViewOperatorDocument = gql`\n    query ViewOperator($id: ID!) {\n  operator(id: $id) {\n    id\n    firstName\n    lastName\n    mobileNumber\n    userName\n    email\n    roleId\n  }\n  operatorRoles {\n    id\n    title\n  }\n}\n    `;\n\n  @Injectable({\n    providedIn: 'root'\n  })\n  export class ViewOperatorGQL extends Apollo.Query<ViewOperatorQuery, ViewOperatorQueryVariables> {\n    document = ViewOperatorDocument;\n    \n    constructor(apollo: Apollo.Apollo) {\n      super(apollo);\n    }\n  }\nexport const NewOperatorDocument = gql`\n    query NewOperator {\n  operatorRoles {\n    id\n    title\n  }\n}\n    `;\n\n  @Injectable({\n    providedIn: 'root'\n  })\n  export class NewOperatorGQL extends Apollo.Query<NewOperatorQuery, NewOperatorQueryVariables> {\n    document = NewOperatorDocument;\n    \n    constructor(apollo: Apollo.Apollo) {\n      super(apollo);\n    }\n  }\nexport const UpdateOperatorDocument = gql`\n    mutation UpdateOperator($id: ID!, $update: UpdateOperator!) {\n  updateOneOperator(input: {id: $id, update: $update}) {\n    id\n  }\n}\n    `;\n\n  @Injectable({\n    providedIn: 'root'\n  })\n  export class UpdateOperatorGQL extends Apollo.Mutation<UpdateOperatorMutation, UpdateOperatorMutationVariables> {\n    document = UpdateOperatorDocument;\n    \n    constructor(apollo: Apollo.Apollo) {\n      super(apollo);\n    }\n  }\nexport const UsersListDocument = gql`\n    query UsersList($paging: OffsetPaging) {\n  operators(paging: $paging) {\n    nodes {\n      id\n      userName\n      firstName\n      lastName\n      role {\n        title\n      }\n    }\n    totalCount\n  }\n}\n    `;\n\n  @Injectable({\n    providedIn: 'root'\n  })\n  export class UsersListGQL extends Apollo.Query<UsersListQuery, UsersListQueryVariables> {\n    document = UsersListDocument;\n    \n    constructor(apollo: Apollo.Apollo) {\n      super(apollo);\n    }\n  }\nexport const ZonePriceViewDocument = gql`\n    query ZonePriceView($id: ID!) {\n  zonePrice(id: $id) {\n    id\n    name\n    from {\n      lat\n      lng\n    }\n    to {\n      lat\n      lng\n    }\n    cost\n    services {\n      id\n    }\n    fleets {\n      id\n    }\n    timeMultipliers {\n      startTime\n      endTime\n      multiply\n    }\n  }\n  fleets(paging: {limit: 50}) {\n    nodes {\n      id\n      name\n    }\n  }\n  services {\n    id\n    name\n  }\n}\n    `;\n\n  @Injectable({\n    providedIn: 'root'\n  })\n  export class ZonePriceViewGQL extends Apollo.Query<ZonePriceViewQuery, ZonePriceViewQueryVariables> {\n    document = ZonePriceViewDocument;\n    \n    constructor(apollo: Apollo.Apollo) {\n      super(apollo);\n    }\n  }\nexport const ZonePriceNewDocument = gql`\n    query ZonePriceNew {\n  fleets(paging: {limit: 50}) {\n    nodes {\n      id\n      name\n    }\n  }\n  services {\n    id\n    name\n  }\n}\n    `;\n\n  @Injectable({\n    providedIn: 'root'\n  })\n  export class ZonePriceNewGQL extends Apollo.Query<ZonePriceNewQuery, ZonePriceNewQueryVariables> {\n    document = ZonePriceNewDocument;\n    \n    constructor(apollo: Apollo.Apollo) {\n      super(apollo);\n    }\n  }\nexport const UpdateZonePriceDocument = gql`\n    mutation UpdateZonePrice($id: ID!, $update: ZonePriceInput!) {\n  updateOneZonePrice(input: {id: $id, update: $update}) {\n    id\n  }\n}\n    `;\n\n  @Injectable({\n    providedIn: 'root'\n  })\n  export class UpdateZonePriceGQL extends Apollo.Mutation<UpdateZonePriceMutation, UpdateZonePriceMutationVariables> {\n    document = UpdateZonePriceDocument;\n    \n    constructor(apollo: Apollo.Apollo) {\n      super(apollo);\n    }\n  }\nexport const CreateZonePriceDocument = gql`\n    mutation CreateZonePrice($input: ZonePriceInput!) {\n  createOneZonePrice(input: {zonePrice: $input}) {\n    id\n  }\n}\n    `;\n\n  @Injectable({\n    providedIn: 'root'\n  })\n  export class CreateZonePriceGQL extends Apollo.Mutation<CreateZonePriceMutation, CreateZonePriceMutationVariables> {\n    document = CreateZonePriceDocument;\n    \n    constructor(apollo: Apollo.Apollo) {\n      super(apollo);\n    }\n  }\nexport const DeleteZonePriceDocument = gql`\n    mutation DeleteZonePrice($id: ID!) {\n  deleteOneZonePrice(input: {id: $id}) {\n    id\n  }\n}\n    `;\n\n  @Injectable({\n    providedIn: 'root'\n  })\n  export class DeleteZonePriceGQL extends Apollo.Mutation<DeleteZonePriceMutation, DeleteZonePriceMutationVariables> {\n    document = DeleteZonePriceDocument;\n    \n    constructor(apollo: Apollo.Apollo) {\n      super(apollo);\n    }\n  }\nexport const SetZonePriceRelationsDocument = gql`\n    mutation SetZonePriceRelations($id: ID!, $services: [ID!]!, $fleets: [ID!]!) {\n  setServicesOnZonePrice(input: {id: $id, relationIds: $services}) {\n    id\n  }\n  setFleetsOnZonePrice(input: {id: $id, relationIds: $fleets}) {\n    id\n  }\n}\n    `;\n\n  @Injectable({\n    providedIn: 'root'\n  })\n  export class SetZonePriceRelationsGQL extends Apollo.Mutation<SetZonePriceRelationsMutation, SetZonePriceRelationsMutationVariables> {\n    document = SetZonePriceRelationsDocument;\n    \n    constructor(apollo: Apollo.Apollo) {\n      super(apollo);\n    }\n  }\nexport const ZonePricesListDocument = gql`\n    query ZonePricesList($paging: OffsetPaging) {\n  zonePrices(paging: $paging) {\n    nodes {\n      id\n      name\n    }\n    totalCount\n  }\n}\n    `;\n\n  @Injectable({\n    providedIn: 'root'\n  })\n  export class ZonePricesListGQL extends Apollo.Query<ZonePricesListQuery, ZonePricesListQueryVariables> {\n    document = ZonePricesListDocument;\n    \n    constructor(apollo: Apollo.Apollo) {\n      super(apollo);\n    }\n  }\nexport const ViewAnnouncementDocument = gql`\n    query ViewAnnouncement($id: ID!) {\n  announcement(id: $id) {\n    id\n    title\n    userType\n    description\n    url\n    startAt\n    expireAt\n  }\n}\n    `;\n\n  @Injectable({\n    providedIn: 'root'\n  })\n  export class ViewAnnouncementGQL extends Apollo.Query<ViewAnnouncementQuery, ViewAnnouncementQueryVariables> {\n    document = ViewAnnouncementDocument;\n    \n    constructor(apollo: Apollo.Apollo) {\n      super(apollo);\n    }\n  }\nexport const CreateAnnouncementDocument = gql`\n    mutation CreateAnnouncement($input: AnnouncementInput!) {\n  createOneAnnouncement(input: {announcement: $input}) {\n    id\n  }\n}\n    `;\n\n  @Injectable({\n    providedIn: 'root'\n  })\n  export class CreateAnnouncementGQL extends Apollo.Mutation<CreateAnnouncementMutation, CreateAnnouncementMutationVariables> {\n    document = CreateAnnouncementDocument;\n    \n    constructor(apollo: Apollo.Apollo) {\n      super(apollo);\n    }\n  }\nexport const UpdateAnnouncementDocument = gql`\n    mutation UpdateAnnouncement($id: ID!, $input: AnnouncementInput!) {\n  updateOneAnnouncement(input: {id: $id, update: $input}) {\n    id\n  }\n}\n    `;\n\n  @Injectable({\n    providedIn: 'root'\n  })\n  export class UpdateAnnouncementGQL extends Apollo.Mutation<UpdateAnnouncementMutation, UpdateAnnouncementMutationVariables> {\n    document = UpdateAnnouncementDocument;\n    \n    constructor(apollo: Apollo.Apollo) {\n      super(apollo);\n    }\n  }\nexport const DeleteAnnouncementDocument = gql`\n    mutation DeleteAnnouncement($id: ID!) {\n  deleteOneAnnouncement(input: {id: $id}) {\n    id\n  }\n}\n    `;\n\n  @Injectable({\n    providedIn: 'root'\n  })\n  export class DeleteAnnouncementGQL extends Apollo.Mutation<DeleteAnnouncementMutation, DeleteAnnouncementMutationVariables> {\n    document = DeleteAnnouncementDocument;\n    \n    constructor(apollo: Apollo.Apollo) {\n      super(apollo);\n    }\n  }\nexport const AnnouncementsListDocument = gql`\n    query AnnouncementsList($paging: OffsetPaging) {\n  announcements(paging: $paging) {\n    nodes {\n      id\n      title\n      description\n      startAt\n      expireAt\n    }\n    totalCount\n  }\n}\n    `;\n\n  @Injectable({\n    providedIn: 'root'\n  })\n  export class AnnouncementsListGQL extends Apollo.Query<AnnouncementsListQuery, AnnouncementsListQueryVariables> {\n    document = AnnouncementsListDocument;\n    \n    constructor(apollo: Apollo.Apollo) {\n      super(apollo);\n    }\n  }\nexport const ViewCouponDocument = gql`\n    query ViewCoupon($id: ID!) {\n  coupon(id: $id) {\n    id\n    isEnabled\n    code\n    title\n    description\n    manyUsersCanUse\n    manyTimesUserCanUse\n    minimumCost\n    maximumCost\n    startAt\n    expireAt\n    discountPercent\n    discountFlat\n    creditGift\n    isEnabled\n    isFirstTravelOnly\n    allowedServices {\n      id\n      name\n    }\n  }\n}\n    `;\n\n  @Injectable({\n    providedIn: 'root'\n  })\n  export class ViewCouponGQL extends Apollo.Query<ViewCouponQuery, ViewCouponQueryVariables> {\n    document = ViewCouponDocument;\n    \n    constructor(apollo: Apollo.Apollo) {\n      super(apollo);\n    }\n  }\nexport const CreateCouponDocument = gql`\n    mutation CreateCoupon($input: CouponInput!) {\n  createOneCoupon(input: {coupon: $input}) {\n    id\n  }\n}\n    `;\n\n  @Injectable({\n    providedIn: 'root'\n  })\n  export class CreateCouponGQL extends Apollo.Mutation<CreateCouponMutation, CreateCouponMutationVariables> {\n    document = CreateCouponDocument;\n    \n    constructor(apollo: Apollo.Apollo) {\n      super(apollo);\n    }\n  }\nexport const UpdateCouponDocument = gql`\n    mutation UpdateCoupon($id: ID!, $input: CouponInput!) {\n  updateOneCoupon(input: {id: $id, update: $input}) {\n    id\n  }\n}\n    `;\n\n  @Injectable({\n    providedIn: 'root'\n  })\n  export class UpdateCouponGQL extends Apollo.Mutation<UpdateCouponMutation, UpdateCouponMutationVariables> {\n    document = UpdateCouponDocument;\n    \n    constructor(apollo: Apollo.Apollo) {\n      super(apollo);\n    }\n  }\nexport const DeleteCouponDocument = gql`\n    mutation DeleteCoupon($id: ID!) {\n  deleteOneCoupon(input: {id: $id}) {\n    id\n  }\n}\n    `;\n\n  @Injectable({\n    providedIn: 'root'\n  })\n  export class DeleteCouponGQL extends Apollo.Mutation<DeleteCouponMutation, DeleteCouponMutationVariables> {\n    document = DeleteCouponDocument;\n    \n    constructor(apollo: Apollo.Apollo) {\n      super(apollo);\n    }\n  }\nexport const CouponListDocument = gql`\n    query CouponList($paging: OffsetPaging) {\n  coupons(paging: $paging) {\n    nodes {\n      id\n      code\n      title\n      isEnabled\n      description\n      startAt\n      expireAt\n    }\n    totalCount\n  }\n}\n    `;\n\n  @Injectable({\n    providedIn: 'root'\n  })\n  export class CouponListGQL extends Apollo.Query<CouponListQuery, CouponListQueryVariables> {\n    document = CouponListDocument;\n    \n    constructor(apollo: Apollo.Apollo) {\n      super(apollo);\n    }\n  }\nexport const GiftBatchListDocument = gql`\n    query GiftBatchList($paging: OffsetPaging) {\n  giftBatches(paging: $paging) {\n    nodes {\n      id\n      name\n      currency\n      amount\n      availableFrom\n      expireAt\n      totalUsed: giftCodesAggregate(filter: {usedAt: {isNot: null}}) {\n        count {\n          id\n        }\n      }\n      totalUnused: giftCodesAggregate(filter: {usedAt: {is: null}}) {\n        count {\n          id\n        }\n      }\n    }\n    totalCount\n  }\n}\n    `;\n\n  @Injectable({\n    providedIn: 'root'\n  })\n  export class GiftBatchListGQL extends Apollo.Query<GiftBatchListQuery, GiftBatchListQueryVariables> {\n    document = GiftBatchListDocument;\n    \n    constructor(apollo: Apollo.Apollo) {\n      super(apollo);\n    }\n  }\nexport const CreateGiftBachDocument = gql`\n    mutation CreateGiftBach($input: CreateGiftBatchInput!) {\n  createGiftCardBatch(input: $input) {\n    id\n    name\n  }\n}\n    `;\n\n  @Injectable({\n    providedIn: 'root'\n  })\n  export class CreateGiftBachGQL extends Apollo.Mutation<CreateGiftBachMutation, CreateGiftBachMutationVariables> {\n    document = CreateGiftBachDocument;\n    \n    constructor(apollo: Apollo.Apollo) {\n      super(apollo);\n    }\n  }\nexport const ViewGiftBatchDocument = gql`\n    query ViewGiftBatch($id: ID!) {\n  giftBatch(id: $id) {\n    id\n    name\n    amount\n    currency\n    availableFrom\n    expireAt\n    totalUsed: giftCodesAggregate(filter: {usedAt: {isNot: null}}) {\n      count {\n        id\n      }\n    }\n    totalUnused: giftCodesAggregate(filter: {usedAt: {is: null}}) {\n      count {\n        id\n      }\n    }\n  }\n}\n    `;\n\n  @Injectable({\n    providedIn: 'root'\n  })\n  export class ViewGiftBatchGQL extends Apollo.Query<ViewGiftBatchQuery, ViewGiftBatchQueryVariables> {\n    document = ViewGiftBatchDocument;\n    \n    constructor(apollo: Apollo.Apollo) {\n      super(apollo);\n    }\n  }\nexport const GiftCodeListDocument = gql`\n    query GiftCodeList($giftBatchId: ID!, $paging: OffsetPaging!) {\n  giftBatch(id: $giftBatchId) {\n    giftCodes(paging: $paging) {\n      nodes {\n        id\n        code\n        usedAt\n        riderTransaction {\n          riderId\n          rider {\n            firstName\n            lastName\n          }\n        }\n        driverTransaction {\n          driverId\n          driver {\n            firstName\n            lastName\n          }\n        }\n      }\n      totalCount\n    }\n  }\n}\n    `;\n\n  @Injectable({\n    providedIn: 'root'\n  })\n  export class GiftCodeListGQL extends Apollo.Query<GiftCodeListQuery, GiftCodeListQueryVariables> {\n    document = GiftCodeListDocument;\n    \n    constructor(apollo: Apollo.Apollo) {\n      super(apollo);\n    }\n  }\nexport const ExportGiftBatchToCsvDocument = gql`\n    mutation ExportGiftBatchToCSV($giftBatchId: ID!) {\n  exportGiftCardBatch(batchId: $giftBatchId)\n}\n    `;\n\n  @Injectable({\n    providedIn: 'root'\n  })\n  export class ExportGiftBatchToCsvGQL extends Apollo.Mutation<ExportGiftBatchToCsvMutation, ExportGiftBatchToCsvMutationVariables> {\n    document = ExportGiftBatchToCsvDocument;\n    \n    constructor(apollo: Apollo.Apollo) {\n      super(apollo);\n    }\n  }\nexport const RewardListDocument = gql`\n    query RewardList($paging: OffsetPaging) {\n  rewards(paging: $paging) {\n    nodes {\n      id\n      title\n      startDate\n      endDate\n      beneficiary\n      event\n    }\n    totalCount\n  }\n}\n    `;\n\n  @Injectable({\n    providedIn: 'root'\n  })\n  export class RewardListGQL extends Apollo.Query<RewardListQuery, RewardListQueryVariables> {\n    document = RewardListDocument;\n    \n    constructor(apollo: Apollo.Apollo) {\n      super(apollo);\n    }\n  }\nexport const ViewRewardDocument = gql`\n    query ViewReward($id: ID!) {\n  reward(id: $id) {\n    id\n    title\n    startDate\n    endDate\n    appType\n    beneficiary\n    event\n    creditGift\n    tripFeePercentGift\n    creditCurrency\n    conditionTripCountsLessThan\n    conditionUserNumberFirstDigits\n  }\n}\n    `;\n\n  @Injectable({\n    providedIn: 'root'\n  })\n  export class ViewRewardGQL extends Apollo.Query<ViewRewardQuery, ViewRewardQueryVariables> {\n    document = ViewRewardDocument;\n    \n    constructor(apollo: Apollo.Apollo) {\n      super(apollo);\n    }\n  }\nexport const CreateRewardDocument = gql`\n    mutation CreateReward($input: CreateReward!) {\n  createOneReward(input: {reward: $input}) {\n    id\n  }\n}\n    `;\n\n  @Injectable({\n    providedIn: 'root'\n  })\n  export class CreateRewardGQL extends Apollo.Mutation<CreateRewardMutation, CreateRewardMutationVariables> {\n    document = CreateRewardDocument;\n    \n    constructor(apollo: Apollo.Apollo) {\n      super(apollo);\n    }\n  }\nexport const UpdateRewardDocument = gql`\n    mutation UpdateReward($id: ID!, $input: UpdateReward!) {\n  updateOneReward(input: {id: $id, update: $input}) {\n    id\n  }\n}\n    `;\n\n  @Injectable({\n    providedIn: 'root'\n  })\n  export class UpdateRewardGQL extends Apollo.Mutation<UpdateRewardMutation, UpdateRewardMutationVariables> {\n    document = UpdateRewardDocument;\n    \n    constructor(apollo: Apollo.Apollo) {\n      super(apollo);\n    }\n  }\nexport const CreatePayoutSessionFieldsDocument = gql`\n    query CreatePayoutSessionFields {\n  supportedCurrencies\n  payoutMethods {\n    id\n    name\n  }\n}\n    `;\n\n  @Injectable({\n    providedIn: 'root'\n  })\n  export class CreatePayoutSessionFieldsGQL extends Apollo.Query<CreatePayoutSessionFieldsQuery, CreatePayoutSessionFieldsQueryVariables> {\n    document = CreatePayoutSessionFieldsDocument;\n    \n    constructor(apollo: Apollo.Apollo) {\n      super(apollo);\n    }\n  }\nexport const CreatePayoutSessionDocument = gql`\n    mutation CreatePayoutSession($input: CreatePayoutSessionInput!) {\n  createPayoutSession(input: $input) {\n    id\n  }\n}\n    `;\n\n  @Injectable({\n    providedIn: 'root'\n  })\n  export class CreatePayoutSessionGQL extends Apollo.Mutation<CreatePayoutSessionMutation, CreatePayoutSessionMutationVariables> {\n    document = CreatePayoutSessionDocument;\n    \n    constructor(apollo: Apollo.Apollo) {\n      super(apollo);\n    }\n  }\nexport const PayoutMethodsDocument = gql`\n    query PayoutMethods {\n  payoutMethods {\n    id\n    name\n    description\n    type\n    media {\n      id\n      address\n    }\n  }\n}\n    `;\n\n  @Injectable({\n    providedIn: 'root'\n  })\n  export class PayoutMethodsGQL extends Apollo.Query<PayoutMethodsQuery, PayoutMethodsQueryVariables> {\n    document = PayoutMethodsDocument;\n    \n    constructor(apollo: Apollo.Apollo) {\n      super(apollo);\n    }\n  }\nexport const ViewPayoutMethodDocument = gql`\n    query ViewPayoutMethod($id: ID!) {\n  payoutMethod(id: $id) {\n    id\n    name\n    currency\n    description\n    type\n    privateKey\n    publicKey\n    saltKey\n    merchantId\n    media {\n      address\n    }\n  }\n}\n    `;\n\n  @Injectable({\n    providedIn: 'root'\n  })\n  export class ViewPayoutMethodGQL extends Apollo.Query<ViewPayoutMethodQuery, ViewPayoutMethodQueryVariables> {\n    document = ViewPayoutMethodDocument;\n    \n    constructor(apollo: Apollo.Apollo) {\n      super(apollo);\n    }\n  }\nexport const CreatePayoutMethodDocument = gql`\n    mutation CreatePayoutMethod($input: CreatePayoutMethodInput!) {\n  createOnePayoutMethod(input: {payoutMethod: $input}) {\n    id\n  }\n}\n    `;\n\n  @Injectable({\n    providedIn: 'root'\n  })\n  export class CreatePayoutMethodGQL extends Apollo.Mutation<CreatePayoutMethodMutation, CreatePayoutMethodMutationVariables> {\n    document = CreatePayoutMethodDocument;\n    \n    constructor(apollo: Apollo.Apollo) {\n      super(apollo);\n    }\n  }\nexport const UpdatePayoutMethodDocument = gql`\n    mutation UpdatePayoutMethod($id: ID!, $update: CreatePayoutMethodInput!) {\n  updateOnePayoutMethod(input: {id: $id, update: $update}) {\n    id\n  }\n}\n    `;\n\n  @Injectable({\n    providedIn: 'root'\n  })\n  export class UpdatePayoutMethodGQL extends Apollo.Mutation<UpdatePayoutMethodMutation, UpdatePayoutMethodMutationVariables> {\n    document = UpdatePayoutMethodDocument;\n    \n    constructor(apollo: Apollo.Apollo) {\n      super(apollo);\n    }\n  }\nexport const PayoutsDocument = gql`\n    query Payouts($sessionsPaging: OffsetPaging!, $currency: String) {\n  supportedCurrencies\n  payoutStatistics(currency: $currency) {\n    pendingAmount\n    lastPayoutAmount\n    currency\n    usersDefaultPayoutMethodStats {\n      payoutMethod {\n        id\n        name\n      }\n      totalCount\n    }\n  }\n  payoutSessions(paging: $sessionsPaging) {\n    nodes {\n      id\n      createdAt\n      processedAt\n      status\n      totalAmount\n      currency\n    }\n    totalCount\n  }\n}\n    `;\n\n  @Injectable({\n    providedIn: 'root'\n  })\n  export class PayoutsGQL extends Apollo.Query<PayoutsQuery, PayoutsQueryVariables> {\n    document = PayoutsDocument;\n    \n    constructor(apollo: Apollo.Apollo) {\n      super(apollo);\n    }\n  }\nexport const ViewPayoutSessionDocument = gql`\n    query ViewPayoutSession($id: ID!) {\n  payoutSession(id: $id) {\n    id\n    currency\n    createdAt\n    processedAt\n    totalAmount\n    status\n    payoutMethods {\n      id\n      type\n      name\n      description\n      currency\n      balance\n      media {\n        address\n      }\n    }\n    driverTransactions {\n      nodes {\n        amount\n        currency\n        status\n        createdAt\n        driver {\n          firstName\n          lastName\n          media {\n            address\n          }\n        }\n      }\n    }\n    amountToBePaidByPayoutMethod: driverTransactionsAggregate(\n      filter: {status: {eq: Processing}, payoutSessionId: {eq: $id}}\n    ) {\n      groupBy {\n        payoutMethodId\n      }\n      sum {\n        amount\n      }\n    }\n    unpaidAmount: driverTransactionsAggregate(filter: {status: {eq: Processing}}) {\n      sum {\n        amount\n      }\n    }\n    paidAmount: driverTransactionsAggregate(filter: {status: {eq: Done}}) {\n      sum {\n        amount\n      }\n    }\n  }\n}\n    `;\n\n  @Injectable({\n    providedIn: 'root'\n  })\n  export class ViewPayoutSessionGQL extends Apollo.Query<ViewPayoutSessionQuery, ViewPayoutSessionQueryVariables> {\n    document = ViewPayoutSessionDocument;\n    \n    constructor(apollo: Apollo.Apollo) {\n      super(apollo);\n    }\n  }\nexport const PayooutSessionTransactionsDocument = gql`\n    query PayooutSessionTransactions($id: ID!, $paging: OffsetPaging!) {\n  payoutSession(id: $id) {\n    driverTransactions(paging: $paging) {\n      nodes {\n        id\n        amount\n        currency\n        status\n        createdAt\n        driver {\n          firstName\n          lastName\n          media {\n            address\n          }\n          payoutAccounts(filter: {isDefault: {is: true}}) {\n            nodes {\n              id\n              name\n              type\n              accountNumber\n              routingNumber\n              bankName\n              branchName\n              accountHolderName\n              accountHolderCountry\n              accountHolderCity\n              accountHolderState\n              accountHolderZip\n              accountHolderAddress\n              accountHolderDateOfBirth\n              payoutMethod {\n                name\n                media {\n                  address\n                }\n              }\n            }\n          }\n        }\n      }\n    }\n  }\n}\n    `;\n\n  @Injectable({\n    providedIn: 'root'\n  })\n  export class PayooutSessionTransactionsGQL extends Apollo.Query<PayooutSessionTransactionsQuery, PayooutSessionTransactionsQueryVariables> {\n    document = PayooutSessionTransactionsDocument;\n    \n    constructor(apollo: Apollo.Apollo) {\n      super(apollo);\n    }\n  }\nexport const ExportToCsvDocument = gql`\n    mutation ExportToCSV($input: ExportSessionToCsvInput!) {\n  exportSessionToCsv(input: $input)\n}\n    `;\n\n  @Injectable({\n    providedIn: 'root'\n  })\n  export class ExportToCsvGQL extends Apollo.Mutation<ExportToCsvMutation, ExportToCsvMutationVariables> {\n    document = ExportToCsvDocument;\n    \n    constructor(apollo: Apollo.Apollo) {\n      super(apollo);\n    }\n  }\nexport const RunAutoPayoutDocument = gql`\n    mutation RunAutoPayout($input: RunAutoPayoutInput!) {\n  runAutoPayout(input: $input)\n}\n    `;\n\n  @Injectable({\n    providedIn: 'root'\n  })\n  export class RunAutoPayoutGQL extends Apollo.Mutation<RunAutoPayoutMutation, RunAutoPayoutMutationVariables> {\n    document = RunAutoPayoutDocument;\n    \n    constructor(apollo: Apollo.Apollo) {\n      super(apollo);\n    }\n  }\nexport const SaveManualPayoutItemDocument = gql`\n    mutation SaveManualPayoutItem($input: ManualPayoutInput!) {\n  manualPayout(input: $input) {\n    amount\n  }\n}\n    `;\n\n  @Injectable({\n    providedIn: 'root'\n  })\n  export class SaveManualPayoutItemGQL extends Apollo.Mutation<SaveManualPayoutItemMutation, SaveManualPayoutItemMutationVariables> {\n    document = SaveManualPayoutItemDocument;\n    \n    constructor(apollo: Apollo.Apollo) {\n      super(apollo);\n    }\n  }\nexport const UpdatePayoutSessionDocument = gql`\n    mutation UpdatePayoutSession($id: ID!, $update: UpdatePayoutSessionInput!) {\n  updatePayoutSession(id: $id, input: $update) {\n    id\n    status\n  }\n}\n    `;\n\n  @Injectable({\n    providedIn: 'root'\n  })\n  export class UpdatePayoutSessionGQL extends Apollo.Mutation<UpdatePayoutSessionMutation, UpdatePayoutSessionMutationVariables> {\n    document = UpdatePayoutSessionDocument;\n    \n    constructor(apollo: Apollo.Apollo) {\n      super(apollo);\n    }\n  }\nexport const AvailableDriversForOrderDocument = gql`\n    query AvailableDriversForOrder($center: PointInput!, $count: Int!) {\n  getDriversLocationWithData(center: $center, count: $count) {\n    id\n    location {\n      lat\n      lng\n    }\n    mobileNumber\n    firstName\n    lastName\n    lastUpdatedAt\n    rating\n    reviewCount\n    status\n  }\n}\n    `;\n\n  @Injectable({\n    providedIn: 'root'\n  })\n  export class AvailableDriversForOrderGQL extends Apollo.Query<AvailableDriversForOrderQuery, AvailableDriversForOrderQueryVariables> {\n    document = AvailableDriversForOrderDocument;\n    \n    constructor(apollo: Apollo.Apollo) {\n      super(apollo);\n    }\n  }\nexport const DriverSearchDocument = gql`\n    query DriverSearch($filter: String!) {\n  drivers(\n    filter: {or: [{mobileNumber: {like: $filter}}, {lastName: {like: $filter}}]}\n  ) {\n    nodes {\n      id\n      mobileNumber\n      firstName\n      lastName\n      rating\n      reviewCount\n      status\n    }\n  }\n}\n    `;\n\n  @Injectable({\n    providedIn: 'root'\n  })\n  export class DriverSearchGQL extends Apollo.Query<DriverSearchQuery, DriverSearchQueryVariables> {\n    document = DriverSearchDocument;\n    \n    constructor(apollo: Apollo.Apollo) {\n      super(apollo);\n    }\n  }\nexport const AssignDriverToOrderDocument = gql`\n    mutation AssignDriverToOrder($orderId: ID!, $driverId: ID!) {\n  assignDriverToOrder(orderId: $orderId, driverId: $driverId) {\n    id\n  }\n}\n    `;\n\n  @Injectable({\n    providedIn: 'root'\n  })\n  export class AssignDriverToOrderGQL extends Apollo.Mutation<AssignDriverToOrderMutation, AssignDriverToOrderMutationVariables> {\n    document = AssignDriverToOrderDocument;\n    \n    constructor(apollo: Apollo.Apollo) {\n      super(apollo);\n    }\n  }\nexport const ViewOrderDocument = gql`\n    query ViewOrder($id: ID!) {\n  order(id: $id) {\n    id\n    createdOn\n    expectedTimestamp\n    costBest\n    costAfterCoupon\n    status\n    currency\n    distanceBest\n    durationBest\n    startTimestamp\n    finishTimestamp\n    addresses\n    points {\n      lat\n      lng\n    }\n    service {\n      name\n    }\n    driver {\n      id\n      firstName\n      lastName\n      mobileNumber\n      registrationTimestamp\n      status\n      media {\n        address\n      }\n    }\n    rider {\n      id\n      firstName\n      lastName\n      mobileNumber\n      registrationTimestamp\n      status\n      media {\n        address\n      }\n    }\n    complaints {\n      id\n      subject\n      inscriptionTimestamp\n      content\n      requestedByDriver\n    }\n    conversations {\n      sentAt\n      sentByDriver\n      status\n      content\n    }\n    activities {\n      createdAt\n      type\n    }\n    coupon {\n      title\n      code\n      expireAt\n    }\n    riderTransactions {\n      action\n      rechargeType\n      deductType\n      amount\n      status\n      currency\n      refrenceNumber\n      paymentGateway {\n        title\n      }\n    }\n    driverTransactions {\n      action\n      rechargeType\n      deductType\n      amount\n      status\n      currency\n      refrenceNumber\n    }\n    providerTransactions {\n      action\n      rechargeType\n      deductType\n      amount\n      currency\n      refrenceNumber\n    }\n    fleetTransactions {\n      action\n      rechargeType\n      deductType\n      amount\n      currency\n      refrenceNumber\n    }\n  }\n}\n    `;\n\n  @Injectable({\n    providedIn: 'root'\n  })\n  export class ViewOrderGQL extends Apollo.Query<ViewOrderQuery, ViewOrderQueryVariables> {\n    document = ViewOrderDocument;\n    \n    constructor(apollo: Apollo.Apollo) {\n      super(apollo);\n    }\n  }\nexport const OrdersListDocument = gql`\n    query OrdersList($paging: OffsetPaging, $filter: OrderFilter, $sorting: [OrderSort!]) {\n  orders(paging: $paging, filter: $filter, sorting: $sorting) {\n    nodes {\n      id\n      status\n      createdOn\n      expectedTimestamp\n      costAfterCoupon\n      currency\n    }\n    totalCount\n  }\n}\n    `;\n\n  @Injectable({\n    providedIn: 'root'\n  })\n  export class OrdersListGQL extends Apollo.Query<OrdersListQuery, OrdersListQueryVariables> {\n    document = OrdersListDocument;\n    \n    constructor(apollo: Apollo.Apollo) {\n      super(apollo);\n    }\n  }\nexport const CreateRiderDocument = gql`\n    mutation CreateRider($input: RiderInput!) {\n  createOneRider(input: {rider: $input}) {\n    id\n    firstName\n    lastName\n    mobileNumber\n    gender\n  }\n}\n    `;\n\n  @Injectable({\n    providedIn: 'root'\n  })\n  export class CreateRiderGQL extends Apollo.Mutation<CreateRiderMutation, CreateRiderMutationVariables> {\n    document = CreateRiderDocument;\n    \n    constructor(apollo: Apollo.Apollo) {\n      super(apollo);\n    }\n  }\nexport const ViewRiderDocument = gql`\n    query ViewRider($id: ID!) {\n  rider(id: $id) {\n    id\n    status\n    firstName\n    lastName\n    mobileNumber\n    isResident\n    idNumber\n    media {\n      address\n    }\n    mobileNumber\n    registrationTimestamp\n    email\n    gender\n    wallets(sorting: [{field: balance, direction: DESC}], paging: {limit: 1}) {\n      nodes {\n        balance\n        currency\n      }\n    }\n  }\n}\n    `;\n\n  @Injectable({\n    providedIn: 'root'\n  })\n  export class ViewRiderGQL extends Apollo.Query<ViewRiderQuery, ViewRiderQueryVariables> {\n    document = ViewRiderDocument;\n    \n    constructor(apollo: Apollo.Apollo) {\n      super(apollo);\n    }\n  }\nexport const RiderAddressesDocument = gql`\n    query RiderAddresses($riderId: ID!, $paging: OffsetPaging) {\n  riderAddresses(filter: {riderId: {eq: $riderId}}, paging: $paging) {\n    nodes {\n      title\n      details\n      location {\n        lat\n        lng\n      }\n    }\n  }\n}\n    `;\n\n  @Injectable({\n    providedIn: 'root'\n  })\n  export class RiderAddressesGQL extends Apollo.Query<RiderAddressesQuery, RiderAddressesQueryVariables> {\n    document = RiderAddressesDocument;\n    \n    constructor(apollo: Apollo.Apollo) {\n      super(apollo);\n    }\n  }\nexport const RiderWalletDocument = gql`\n    query RiderWallet($riderId: ID!, $paging: OffsetPaging, $filter: RiderTransactionFilter, $sorting: [RiderTransactionSort!]) {\n  rider(id: $riderId) {\n    wallets {\n      nodes {\n        balance\n        currency\n      }\n    }\n    transactions(paging: $paging, sorting: $sorting, filter: $filter) {\n      nodes {\n        action\n        deductType\n        status\n        createdAt\n        rechargeType\n        amount\n        currency\n        refrenceNumber\n        description\n        paymentGatewayId\n        operatorId\n        requestId\n      }\n      totalCount\n    }\n  }\n  regions {\n    nodes {\n      currency\n    }\n  }\n}\n    `;\n\n  @Injectable({\n    providedIn: 'root'\n  })\n  export class RiderWalletGQL extends Apollo.Query<RiderWalletQuery, RiderWalletQueryVariables> {\n    document = RiderWalletDocument;\n    \n    constructor(apollo: Apollo.Apollo) {\n      super(apollo);\n    }\n  }\nexport const RiderOrdersDocument = gql`\n    query RiderOrders($riderId: ID!, $filter: OrderFilter, $paging: OffsetPaging, $sorting: [OrderSort!]) {\n  rider(id: $riderId) {\n    orders(paging: $paging, filter: $filter, sorting: $sorting) {\n      nodes {\n        id\n        createdOn\n        status\n        distanceBest\n        durationBest\n        costBest\n        costAfterCoupon\n        currency\n        addresses\n        points {\n          lat\n          lng\n        }\n        expectedTimestamp\n      }\n      totalCount\n    }\n  }\n}\n    `;\n\n  @Injectable({\n    providedIn: 'root'\n  })\n  export class RiderOrdersGQL extends Apollo.Query<RiderOrdersQuery, RiderOrdersQueryVariables> {\n    document = RiderOrdersDocument;\n    \n    constructor(apollo: Apollo.Apollo) {\n      super(apollo);\n    }\n  }\nexport const UpdateRiderDocument = gql`\n    mutation UpdateRider($id: ID!, $update: RiderInput!) {\n  updateOneRider(input: {id: $id, update: $update}) {\n    id\n  }\n}\n    `;\n\n  @Injectable({\n    providedIn: 'root'\n  })\n  export class UpdateRiderGQL extends Apollo.Mutation<UpdateRiderMutation, UpdateRiderMutationVariables> {\n    document = UpdateRiderDocument;\n    \n    constructor(apollo: Apollo.Apollo) {\n      super(apollo);\n    }\n  }\nexport const CreateRiderTransactionDocument = gql`\n    mutation CreateRiderTransaction($input: RiderTransactionInput!) {\n  createRiderTransaction(input: $input) {\n    id\n  }\n}\n    `;\n\n  @Injectable({\n    providedIn: 'root'\n  })\n  export class CreateRiderTransactionGQL extends Apollo.Mutation<CreateRiderTransactionMutation, CreateRiderTransactionMutationVariables> {\n    document = CreateRiderTransactionDocument;\n    \n    constructor(apollo: Apollo.Apollo) {\n      super(apollo);\n    }\n  }\nexport const DeleteRiderDocument = gql`\n    mutation DeleteRider($id: ID!) {\n  deleteOneRider(id: $id) {\n    id\n  }\n}\n    `;\n\n  @Injectable({\n    providedIn: 'root'\n  })\n  export class DeleteRiderGQL extends Apollo.Mutation<DeleteRiderMutation, DeleteRiderMutationVariables> {\n    document = DeleteRiderDocument;\n    \n    constructor(apollo: Apollo.Apollo) {\n      super(apollo);\n    }\n  }\nexport const RidersListDocument = gql`\n    query RidersList($filter: RiderFilter, $paging: OffsetPaging, $sorting: [RiderSort!]) {\n  riders(filter: $filter, paging: $paging, sorting: $sorting) {\n    nodes {\n      id\n      firstName\n      lastName\n      status\n      gender\n      mobileNumber\n      registrationTimestamp\n    }\n    totalCount\n  }\n}\n    `;\n\n  @Injectable({\n    providedIn: 'root'\n  })\n  export class RidersListGQL extends Apollo.Query<RidersListQuery, RidersListQueryVariables> {\n    document = RidersListDocument;\n    \n    constructor(apollo: Apollo.Apollo) {\n      super(apollo);\n    }\n  }\nexport const SosListDocument = gql`\n    query SOSList($paging: OffsetPaging) {\n  distressSignals(paging: $paging) {\n    nodes {\n      id\n      createdAt\n      status\n      location {\n        lat\n        lng\n      }\n    }\n    totalCount\n  }\n}\n    `;\n\n  @Injectable({\n    providedIn: 'root'\n  })\n  export class SosListGQL extends Apollo.Query<SosListQuery, SosListQueryVariables> {\n    document = SosListDocument;\n    \n    constructor(apollo: Apollo.Apollo) {\n      super(apollo);\n    }\n  }\nexport const ViewSosDocument = gql`\n    query ViewSOS($id: ID!) {\n  distressSignal(id: $id) {\n    id\n    createdAt\n    status\n    submittedByRider\n    location {\n      lat\n      lng\n    }\n    activities {\n      action\n      createdAt\n      note\n      operator {\n        id\n        firstName\n        lastName\n      }\n    }\n    order {\n      id\n      status\n      createdOn\n      startTimestamp\n      finishTimestamp\n      expectedTimestamp\n      costBest\n      costAfterCoupon\n      addresses\n      currency\n      rider {\n        id\n        mobileNumber\n        status\n        firstName\n        lastName\n        registrationTimestamp\n      }\n      driver {\n        id\n        mobileNumber\n        status\n        firstName\n        lastName\n        registrationTimestamp\n      }\n    }\n  }\n}\n    `;\n\n  @Injectable({\n    providedIn: 'root'\n  })\n  export class ViewSosGQL extends Apollo.Query<ViewSosQuery, ViewSosQueryVariables> {\n    document = ViewSosDocument;\n    \n    constructor(apollo: Apollo.Apollo) {\n      super(apollo);\n    }\n  }\nexport const CreateSosActivityDocument = gql`\n    mutation CreateSOSActivity($activity: CreateSOSAcitivtyInput!) {\n  createOneSOSActivity(input: {sOSActivity: $activity}) {\n    id\n  }\n}\n    `;\n\n  @Injectable({\n    providedIn: 'root'\n  })\n  export class CreateSosActivityGQL extends Apollo.Mutation<CreateSosActivityMutation, CreateSosActivityMutationVariables> {\n    document = CreateSosActivityDocument;\n    \n    constructor(apollo: Apollo.Apollo) {\n      super(apollo);\n    }\n  }\nexport const CurrentConfigurationDocument = gql`\n    query CurrentConfiguration {\n  currentConfiguration {\n    purchaseCode\n    backendMapsAPIKey\n    adminPanelAPIKey\n    firebaseProjectPrivateKey\n  }\n}\n    `;\n\n  @Injectable({\n    providedIn: 'root'\n  })\n  export class CurrentConfigurationGQL extends Apollo.Query<CurrentConfigurationQuery, CurrentConfigurationQueryVariables> {\n    document = CurrentConfigurationDocument;\n    \n    constructor(apollo: Apollo.Apollo) {\n      super(apollo);\n    }\n  }\nexport const UpdatePurchaseCodeDocument = gql`\n    mutation UpdatePurchaseCode($code: String!, $email: String) {\n  updatePurchaseCode(purchaseCode: $code, email: $email) {\n    status\n    message\n    clients {\n      ip\n    }\n  }\n}\n    `;\n\n  @Injectable({\n    providedIn: 'root'\n  })\n  export class UpdatePurchaseCodeGQL extends Apollo.Mutation<UpdatePurchaseCodeMutation, UpdatePurchaseCodeMutationVariables> {\n    document = UpdatePurchaseCodeDocument;\n    \n    constructor(apollo: Apollo.Apollo) {\n      super(apollo);\n    }\n  }\nexport const UpdateMapsApiKeyDocument = gql`\n    mutation UpdateMapsAPIKey($backend: String!, $adminPanel: String!) {\n  updateMapsAPIKey(backend: $backend, adminPanel: $adminPanel) {\n    status\n    message\n  }\n}\n    `;\n\n  @Injectable({\n    providedIn: 'root'\n  })\n  export class UpdateMapsApiKeyGQL extends Apollo.Mutation<UpdateMapsApiKeyMutation, UpdateMapsApiKeyMutationVariables> {\n    document = UpdateMapsApiKeyDocument;\n    \n    constructor(apollo: Apollo.Apollo) {\n      super(apollo);\n    }\n  }\nexport const UpdateFirebaseDocument = gql`\n    mutation UpdateFirebase($keyFileName: String!) {\n  updateFirebase(keyFileName: $keyFileName) {\n    status\n    message\n  }\n}\n    `;\n\n  @Injectable({\n    providedIn: 'root'\n  })\n  export class UpdateFirebaseGQL extends Apollo.Mutation<UpdateFirebaseMutation, UpdateFirebaseMutationVariables> {\n    document = UpdateFirebaseDocument;\n    \n    constructor(apollo: Apollo.Apollo) {\n      super(apollo);\n    }\n  }\nexport const DisableServerDocument = gql`\n    mutation DisableServer($ip: String!) {\n  disablePreviousServer(ip: $ip) {\n    status\n    message\n  }\n}\n    `;\n\n  @Injectable({\n    providedIn: 'root'\n  })\n  export class DisableServerGQL extends Apollo.Mutation<DisableServerMutation, DisableServerMutationVariables> {\n    document = DisableServerDocument;\n    \n    constructor(apollo: Apollo.Apollo) {\n      super(apollo);\n    }\n  }\nexport const LoginDocument = gql`\n    query Login($username: String!, $password: String!) {\n  login(userName: $username, password: $password) {\n    token\n  }\n}\n    `;\n\n  @Injectable({\n    providedIn: 'root'\n  })\n  export class LoginGQL extends Apollo.Query<LoginQuery, LoginQueryVariables> {\n    document = LoginDocument;\n    \n    constructor(apollo: Apollo.Apollo) {\n      super(apollo);\n    }\n  }"],"mappings":"AAAA,SAASA,GAAG,QAAQ,gBAAgB;AAEpC,OAAO,KAAKC,MAAM,MAAM,gBAAgB;;;AA4FxC,WAAYC,iBAEX;AAFD,WAAYA,iBAAiB;EAC3BA,iBAAA,aAAS;AACX,CAAC,EAFWA,iBAAiB,KAAjBA,iBAAiB;AAyD7B,WAAYC,sBAEX;AAFD,WAAYA,sBAAsB;EAChCA,sBAAA,aAAS;AACX,CAAC,EAFWA,sBAAsB,KAAtBA,sBAAsB;AAIlC,WAAYC,oBAIX;AAJD,WAAYA,oBAAoB;EAC9BA,oBAAA,qBAAiB;EACjBA,oBAAA,yBAAqB;EACrBA,oBAAA,mBAAe;AACjB,CAAC,EAJWA,oBAAoB,KAApBA,oBAAoB;AAoBhC,WAAYC,kBAGX;AAHD,WAAYA,kBAAkB;EAC5BA,kBAAA,2CAAuC;EACvCA,kBAAA,2CAAuC;AACzC,CAAC,EAHWA,kBAAkB,KAAlBA,kBAAkB;AAsC9B,WAAYC,kBAEX;AAFD,WAAYA,kBAAkB;EAC5BA,kBAAA,aAAS;AACX,CAAC,EAFWA,kBAAkB,KAAlBA,kBAAkB;AA0C9B,WAAYC,kBAEX;AAFD,WAAYA,kBAAkB;EAC5BA,kBAAA,aAAS;AACX,CAAC,EAFWA,kBAAkB,KAAlBA,kBAAkB;AAI9B,WAAYC,cAKX;AALD,WAAYA,cAAc;EACxBA,cAAA,mBAAe;EACfA,cAAA,uBAAmB;EACnBA,cAAA,qBAAiB;EACjBA,cAAA,qBAAiB;AACnB,CAAC,EALWA,cAAc,KAAdA,cAAc;AA4G1B,WAAYC,2BAGX;AAHD,WAAYA,2BAA2B;EACrCA,2BAAA,+BAA2B;EAC3BA,2BAAA,aAAS;AACX,CAAC,EAHWA,2BAA2B,KAA3BA,2BAA2B;AAKvC,WAAYC,qBAIX;AAJD,WAAYA,qBAAqB;EAC/BA,qBAAA,yCAAqC;EACrCA,qBAAA,yBAAqB;EACrBA,qBAAA,qBAAiB;AACnB,CAAC,EAJWA,qBAAqB,KAArBA,qBAAqB;AAkFjC,WAAYC,mBAIX;AAJD,WAAYA,mBAAmB;EAC7BA,mBAAA,aAAS;EACTA,mBAAA,2BAAuB;EACvBA,mBAAA,qBAAiB;AACnB,CAAC,EAJWA,mBAAmB,KAAnBA,mBAAmB;AAM/B,WAAYC,eAIX;AAJD,WAAYA,eAAe;EACzBA,eAAA,yBAAqB;EACrBA,eAAA,2BAAuB;EACvBA,eAAA,6CAAyC;AAC3C,CAAC,EAJWA,eAAe,KAAfA,eAAe;AAiH3B,WAAYC,gBAEX;AAFD,WAAYA,gBAAgB;EAC1BA,gBAAA,aAAS;AACX,CAAC,EAFWA,gBAAgB,KAAhBA,gBAAgB;AAihB5B,WAAYC,wBAGX;AAHD,WAAYA,wBAAwB;EAClCA,wBAAA,aAAS;EACTA,wBAAA,qBAAiB;AACnB,CAAC,EAHWA,wBAAwB,KAAxBA,wBAAwB;AA4LpC,WAAYC,2BAIX;AAJD,WAAYA,2BAA2B;EACrCA,2BAAA,6BAAyB;EACzBA,2BAAA,6BAAyB;EACzBA,2BAAA,yBAAqB;AACvB,CAAC,EAJWA,2BAA2B,KAA3BA,2BAA2B;AAgTvC,WAAYC,6BAKX;AALD,WAAYA,6BAA6B;EACvCA,6BAAA,iCAA6B;EAC7BA,6BAAA,iBAAa;EACbA,6BAAA,iCAA6B;EAC7BA,6BAAA,yBAAqB;AACvB,CAAC,EALWA,6BAA6B,KAA7BA,6BAA6B;AAazC,WAAYC,gBAMX;AAND,WAAYA,gBAAgB;EAC1BA,gBAAA,uBAAmB;EACnBA,gBAAA,aAAS;EACTA,gBAAA,yBAAqB;EACrBA,gBAAA,iCAA6B;EAC7BA,gBAAA,qBAAiB;AACnB,CAAC,EANWA,gBAAgB,KAAhBA,gBAAgB;AAQ5B,WAAYC,YASX;AATD,WAAYA,YAAY;EACtBA,YAAA,uBAAmB;EACnBA,YAAA,6BAAyB;EACzBA,YAAA,2BAAuB;EACvBA,YAAA,uBAAmB;EACnBA,YAAA,qBAAiB;EACjBA,YAAA,uCAAmC;EACnCA,YAAA,6BAAyB;EACzBA,YAAA,yCAAqC;AACvC,CAAC,EATWA,YAAY,KAAZA,YAAY;AA+LxB,WAAYC,2BAUX;AAVD,WAAYA,2BAA2B;EACrCA,2BAAA,qBAAiB;EACjBA,2BAAA,2BAAuB;EACvBA,2BAAA,yBAAqB;EACrBA,2BAAA,aAAS;EACTA,2BAAA,yCAAqC;EACrCA,2BAAA,uCAAmC;EACnCA,2BAAA,qCAAiC;EACjCA,2BAAA,uCAAmC;EACnCA,2BAAA,qBAAiB;AACnB,CAAC,EAVWA,2BAA2B,KAA3BA,2BAA2B;AAgKvC,WAAYC,sBAKX;AALD,WAAYA,sBAAsB;EAChCA,sBAAA,uBAAmB;EACnBA,sBAAA,yBAAqB;EACrBA,sBAAA,yBAAqB;EACrBA,sBAAA,aAAS;AACX,CAAC,EALWA,sBAAsB,KAAtBA,sBAAsB;AA2FlC,WAAYC,WAKX;AALD,WAAYA,WAAW;EACrBA,WAAA,iCAA6B;EAC7BA,WAAA,+BAA2B;EAC3BA,WAAA,qCAAiC;EACjCA,WAAA,+BAA2B;AAC7B,CAAC,EALWA,WAAW,KAAXA,WAAW;AAOvB,WAAYC,UAEX;AAFD,WAAYA,UAAU;EACpBA,UAAA,eAAW;AACb,CAAC,EAFWA,UAAU,KAAVA,UAAU;AAuHtB,WAAYC,2BAIX;AAJD,WAAYA,2BAA2B;EACrCA,2BAAA,aAAS;EACTA,2BAAA,qBAAiB;EACjBA,2BAAA,mBAAe;AACjB,CAAC,EAJWA,2BAA2B,KAA3BA,2BAA2B;AA0DvC,WAAYC,kBAIX;AAJD,WAAYA,kBAAkB;EAC5BA,kBAAA,yBAAqB;EACrBA,kBAAA,aAAS;EACTA,kBAAA,2BAAuB;AACzB,CAAC,EAJWA,kBAAkB,KAAlBA,kBAAkB;AAkF9B,WAAYC,eAGX;AAHD,WAAYA,eAAe;EACzBA,eAAA,aAAS;EACTA,eAAA,iBAAa;AACf,CAAC,EAHWA,eAAe,KAAfA,eAAe;AAmE3B,WAAYC,0BAKX;AALD,WAAYA,0BAA0B;EACpCA,0BAAA,uBAAmB;EACnBA,0BAAA,aAAS;EACTA,0BAAA,6BAAyB;EACzBA,0BAAA,2BAAuB;AACzB,CAAC,EALWA,0BAA0B,KAA1BA,0BAA0B;AAmDtC,WAAYC,qBAKX;AALD,WAAYA,qBAAqB;EAC/BA,qBAAA,uBAAmB;EACnBA,qBAAA,yBAAqB;EACrBA,qBAAA,uBAAmB;EACnBA,qBAAA,aAAS;AACX,CAAC,EALWA,qBAAqB,KAArBA,qBAAqB;AAqCjC,WAAYC,MAIX;AAJD,WAAYA,MAAM;EAChBA,MAAA,qBAAiB;EACjBA,MAAA,iBAAa;EACbA,MAAA,uBAAmB;AACrB,CAAC,EAJWA,MAAM,KAANA,MAAM;AA0GlB,WAAYC,mBAEX;AAFD,WAAYA,mBAAmB;EAC7BA,mBAAA,aAAS;AACX,CAAC,EAFWA,mBAAmB,KAAnBA,mBAAmB;AA0C/B,WAAYC,kBAGX;AAHD,WAAYA,kBAAkB;EAC5BA,kBAAA,aAAS;EACTA,kBAAA,qBAAiB;AACnB,CAAC,EAHWA,kBAAkB,KAAlBA,kBAAkB;AAK9B;AACA,WAAYC,OAKX;AALD,WAAYA,OAAO;EACjBA,OAAA,eAAW;EACXA,OAAA,mBAAe;EACfA,OAAA,iBAAa;EACbA,OAAA,iBAAa;AACf,CAAC,EALWA,OAAO,KAAPA,OAAO;AAsEnB,WAAYC,eAEX;AAFD,WAAYA,eAAe;EACzBA,eAAA,aAAS;AACX,CAAC,EAFWA,eAAe,KAAfA,eAAe;AAI3B,WAAYC,aAIX;AAJD,WAAYA,aAAa;EACvBA,aAAA,2BAAuB;EACvBA,aAAA,iBAAa;EACbA,aAAA,iBAAa;AACf,CAAC,EAJWA,aAAa,KAAbA,aAAa;AA0rBzB,WAAYC,kBAwCX;AAxCD,WAAYA,kBAAkB;EAC5BA,kBAAA,4CAAwC;EACxCA,kBAAA,4CAAwC;EACxCA,kBAAA,0BAAsB;EACtBA,kBAAA,0BAAsB;EACtBA,kBAAA,sCAAkC;EAClCA,kBAAA,sCAAkC;EAClCA,kBAAA,gCAA4B;EAC5BA,kBAAA,gCAA4B;EAC5BA,kBAAA,0CAAsC;EACtCA,kBAAA,0CAAsC;EACtCA,kBAAA,gCAA4B;EAC5BA,kBAAA,gCAA4B;EAC5BA,kBAAA,wCAAoC;EACpCA,kBAAA,wCAAoC;EACpCA,kBAAA,8BAA0B;EAC1BA,kBAAA,8BAA0B;EAC1BA,kBAAA,kCAA8B;EAC9BA,kBAAA,kCAA8B;EAC9BA,kBAAA,wCAAoC;EACpCA,kBAAA,oCAAgC;EAChCA,kBAAA,8CAA0C;EAC1CA,kBAAA,gCAA4B;EAC5BA,kBAAA,gCAA4B;EAC5BA,kBAAA,8CAA0C;EAC1CA,kBAAA,8CAA0C;EAC1CA,kBAAA,gCAA4B;EAC5BA,kBAAA,gCAA4B;EAC5BA,kBAAA,kCAA8B;EAC9BA,kBAAA,gDAA4C;EAC5CA,kBAAA,wCAAoC;EACpCA,kBAAA,wCAAoC;EACpCA,kBAAA,8BAA0B;EAC1BA,kBAAA,8BAA0B;EAC1BA,kBAAA,0CAAsC;EACtCA,kBAAA,0CAAsC;EACtCA,kBAAA,kCAA8B;EAC9BA,kBAAA,kCAA8B;EAC9BA,kBAAA,4BAAwB;EACxBA,kBAAA,4BAAwB;AAC1B,CAAC,EAxCWA,kBAAkB,KAAlBA,kBAAkB;AAkE9B,WAAYC,sBAEX;AAFD,WAAYA,sBAAsB;EAChCA,sBAAA,aAAS;AACX,CAAC,EAFWA,sBAAsB,KAAtBA,sBAAsB;AAUlC,WAAYC,kBAEX;AAFD,WAAYA,kBAAkB;EAC5BA,kBAAA,aAAS;AACX,CAAC,EAFWA,kBAAkB,KAAlBA,kBAAkB;AAqP9B,WAAYC,2BAEX;AAFD,WAAYA,2BAA2B;EACrCA,2BAAA,aAAS;AACX,CAAC,EAFWA,2BAA2B,KAA3BA,2BAA2B;AA6SvC,WAAYC,sBAEX;AAFD,WAAYA,sBAAsB;EAChCA,sBAAA,aAAS;AACX,CAAC,EAFWA,sBAAsB,KAAtBA,sBAAsB;AAmIlC,WAAYC,eAMX;AAND,WAAYA,eAAe;EACzBA,eAAA,2BAAuB;EACvBA,eAAA,yBAAqB;EACrBA,eAAA,aAAS;EACTA,eAAA,uBAAmB;EACnBA,eAAA,qBAAiB;AACnB,CAAC,EANWA,eAAe,KAAfA,eAAe;AAQ3B,WAAYC,WAgBX;AAhBD,WAAYA,WAAW;EACrBA,WAAA,uBAAmB;EACnBA,WAAA,qBAAiB;EACjBA,WAAA,qCAAiC;EACjCA,WAAA,qCAAiC;EACjCA,WAAA,uBAAmB;EACnBA,WAAA,yBAAqB;EACrBA,WAAA,mBAAe;EACfA,WAAA,iCAA6B;EAC7BA,WAAA,yBAAqB;EACrBA,WAAA,2BAAuB;EACvBA,WAAA,mCAA+B;EAC/BA,WAAA,uBAAmB;EACnBA,WAAA,2CAAuC;EACvCA,WAAA,yCAAqC;EACrCA,WAAA,yCAAqC;AACvC,CAAC,EAhBWA,WAAW,KAAXA,WAAW;AAqGvB,WAAYC,wBAEX;AAFD,WAAYA,wBAAwB;EAClCA,wBAAA,aAAS;AACX,CAAC,EAFWA,wBAAwB,KAAxBA,wBAAwB;AAIpC,WAAYC,kBAsBX;AAtBD,WAAYA,kBAAkB;EAC5BA,kBAAA,mDAA+C;EAC/CA,kBAAA,6BAAyB;EACzBA,kBAAA,2BAAuB;EACvBA,kBAAA,6BAAyB;EACzBA,kBAAA,+BAA2B;EAC3BA,kBAAA,2BAAuB;EACvBA,kBAAA,iBAAa;EACbA,kBAAA,+BAA2B;EAC3BA,kBAAA,6BAAyB;EACzBA,kBAAA,yBAAqB;EACrBA,kBAAA,uBAAmB;EACnBA,kBAAA,uBAAmB;EACnBA,kBAAA,qBAAiB;EACjBA,kBAAA,mBAAe;EACfA,kBAAA,iBAAa;EACbA,kBAAA,yBAAqB;EACrBA,kBAAA,mBAAe;EACfA,kBAAA,yBAAqB;EACrBA,kBAAA,yBAAqB;EACrBA,kBAAA,qBAAiB;EACjBA,kBAAA,2BAAuB;AACzB,CAAC,EAtBWA,kBAAkB,KAAlBA,kBAAkB;AA6E9B,WAAYC,uBAGX;AAHD,WAAYA,uBAAuB;EACjCA,uBAAA,aAAS;EACTA,uBAAA,2BAAuB;AACzB,CAAC,EAHWA,uBAAuB,KAAvBA,uBAAuB;AAkEnC,WAAYC,sBAEX;AAFD,WAAYA,sBAAsB;EAChCA,sBAAA,aAAS;AACX,CAAC,EAFWA,sBAAsB,KAAtBA,sBAAsB;AAUlC;AACA,WAAYC,gBAGX;AAHD,WAAYA,gBAAgB;EAC1BA,gBAAA,iCAA6B;EAC7BA,gBAAA,qBAAiB;AACnB,CAAC,EAHWA,gBAAgB,KAAhBA,gBAAgB;AAyJ5B,WAAYC,uBAEX;AAFD,WAAYA,uBAAuB;EACjCA,uBAAA,aAAS;AACX,CAAC,EAFWA,uBAAuB,KAAvBA,uBAAuB;AAInC,WAAYC,mBAKX;AALD,WAAYA,mBAAmB;EAC7BA,mBAAA,2BAAuB;EACvBA,mBAAA,qBAAiB;EACjBA,mBAAA,iBAAa;EACbA,mBAAA,uBAAmB;AACrB,CAAC,EALWA,mBAAmB,KAAnBA,mBAAmB;AA4B/B,WAAYC,6BAEX;AAFD,WAAYA,6BAA6B;EACvCA,6BAAA,yBAAqB;AACvB,CAAC,EAFWA,6BAA6B,KAA7BA,6BAA6B;AAIzC,WAAYC,+BAEX;AAFD,WAAYA,+BAA+B;EACzCA,+BAAA,6BAAyB;AAC3B,CAAC,EAFWA,+BAA+B,KAA/BA,+BAA+B;AAgE3C,WAAYC,6BAIX;AAJD,WAAYA,6BAA6B;EACvCA,6BAAA,aAAS;EACTA,6BAAA,6BAAyB;EACzBA,6BAAA,2BAAuB;AACzB,CAAC,EAJWA,6BAA6B,KAA7BA,6BAA6B;AA2BzC,WAAYC,wBAIX;AAJD,WAAYA,wBAAwB;EAClCA,wBAAA,uBAAmB;EACnBA,wBAAA,yBAAqB;EACrBA,wBAAA,aAAS;AACX,CAAC,EAJWA,wBAAwB,KAAxBA,wBAAwB;AAutBpC,WAAYC,gBAGX;AAHD,WAAYA,gBAAgB;EAC1BA,gBAAA,yBAAqB;EACrBA,gBAAA,aAAS;AACX,CAAC,EAHWA,gBAAgB,KAAhBA,gBAAgB;AAyC5B,WAAYC,yBAEX;AAFD,WAAYA,yBAAyB;EACnCA,yBAAA,aAAS;AACX,CAAC,EAFWA,yBAAyB,KAAzBA,yBAAyB;AAIrC,WAAYC,mBAeX;AAfD,WAAYA,mBAAmB;EAC7BA,mBAAA,iDAA6C;EAC7CA,mBAAA,iDAA6C;EAC7CA,mBAAA,yCAAqC;EACrCA,mBAAA,mCAA+B;EAC/BA,mBAAA,yCAAqC;EACrCA,mBAAA,6CAAyC;EACzCA,mBAAA,uCAAmC;EACnCA,mBAAA,qCAAiC;EACjCA,mBAAA,uBAAmB;EACnBA,mBAAA,iBAAa;EACbA,mBAAA,+CAA2C;EAC3CA,mBAAA,yCAAqC;EACrCA,mBAAA,yBAAqB;EACrBA,mBAAA,uBAAmB;AACrB,CAAC,EAfWA,mBAAmB,KAAnBA,mBAAmB;AAwC/B,WAAYC,aAGX;AAHD,WAAYA,aAAa;EACvBA,aAAA,qBAAiB;EACjBA,aAAA,mBAAe;AACjB,CAAC,EAHWA,aAAa,KAAbA,aAAa;AAKzB,WAAYC,iBAGX;AAHD,WAAYA,iBAAiB;EAC3BA,iBAAA,yBAAqB;EACrBA,iBAAA,iBAAa;AACf,CAAC,EAHWA,iBAAiB,KAAjBA,iBAAiB;AA+B7B,WAAYC,WAGX;AAHD,WAAYA,WAAW;EACrBA,WAAA,yBAAqB;EACrBA,WAAA,yCAAqC;AACvC,CAAC,EAHWA,WAAW,KAAXA,WAAW;AAiBvB,WAAYC,gBAEX;AAFD,WAAYA,gBAAgB;EAC1BA,gBAAA,aAAS;AACX,CAAC,EAFWA,gBAAgB,KAAhBA,gBAAgB;AAoF5B,WAAYC,sBAGX;AAHD,WAAYA,sBAAsB;EAChCA,sBAAA,aAAS;EACTA,sBAAA,uBAAmB;AACrB,CAAC,EAHWA,sBAAsB,KAAtBA,sBAAsB;AAKlC,WAAYC,gBASX;AATD,WAAYA,gBAAgB;EAC1BA,gBAAA,iBAAa;EACbA,gBAAA,eAAW;EACXA,gBAAA,iBAAa;EACbA,gBAAA,mBAAe;EACfA,gBAAA,qBAAiB;EACjBA,gBAAA,iBAAa;EACbA,gBAAA,uBAAmB;EACnBA,gBAAA,iBAAa;AACf,CAAC,EATWA,gBAAgB,KAAhBA,gBAAgB;AAsC5B,WAAYC,0BAMX;AAND,WAAYA,0BAA0B;EACpCA,0BAAA,uCAAmC;EACnCA,0BAAA,6BAAyB;EACzBA,0BAAA,yBAAqB;EACrBA,0BAAA,6BAAyB;EACzBA,0BAAA,yBAAqB;AACvB,CAAC,EANWA,0BAA0B,KAA1BA,0BAA0B;AAuCtC,WAAYC,4BAKX;AALD,WAAYA,4BAA4B;EACtCA,4BAAA,iCAA6B;EAC7BA,4BAAA,6BAAyB;EACzBA,4BAAA,iBAAa;EACbA,4BAAA,iCAA6B;AAC/B,CAAC,EALWA,4BAA4B,KAA5BA,4BAA4B;AAaxC,WAAYC,eAKX;AALD,WAAYA,eAAe;EACzBA,eAAA,2BAAuB;EACvBA,eAAA,aAAS;EACTA,eAAA,yBAAqB;EACrBA,eAAA,iCAA6B;AAC/B,CAAC,EALWA,eAAe,KAAfA,eAAe;AAO3B,WAAYC,WAGX;AAHD,WAAYA,WAAW;EACrBA,WAAA,yBAAqB;EACrBA,WAAA,uBAAmB;AACrB,CAAC,EAHWA,WAAW,KAAXA,WAAW;AAyEvB,WAAYC,0BAMX;AAND,WAAYA,0BAA0B;EACpCA,0BAAA,qBAAiB;EACjBA,0BAAA,2BAAuB;EACvBA,0BAAA,yBAAqB;EACrBA,0BAAA,aAAS;EACTA,0BAAA,uBAAmB;AACrB,CAAC,EANWA,0BAA0B,KAA1BA,0BAA0B;AAmDtC,WAAYC,qBAIX;AAJD,WAAYA,qBAAqB;EAC/BA,qBAAA,uBAAmB;EACnBA,qBAAA,aAAS;EACTA,qBAAA,uBAAmB;AACrB,CAAC,EAJWA,qBAAqB,KAArBA,qBAAqB;AAuFjC,WAAYC,qBAEX;AAFD,WAAYA,qBAAqB;EAC/BA,qBAAA,aAAS;AACX,CAAC,EAFWA,qBAAqB,KAArBA,qBAAqB;AAIjC;AACA,WAAYC,eAUX;AAVD,WAAYA,eAAe;EACzBA,eAAA,yBAAqB;EACrBA,eAAA,2BAAuB;EACvBA,eAAA,yBAAqB;EACrBA,eAAA,uBAAmB;EACnBA,eAAA,+BAA2B;EAC3BA,eAAA,uBAAmB;EACnBA,eAAA,mBAAe;EACfA,eAAA,qBAAiB;EACjBA,eAAA,qBAAiB;AACnB,CAAC,EAVWA,eAAe,KAAfA,eAAe;AA4B3B,WAAYC,iBAOX;AAPD,WAAYA,iBAAiB;EAC3BA,iBAAA,6CAAyC;EACzCA,iBAAA,mCAA+B;EAC/BA,iBAAA,6CAAyC;EACzCA,iBAAA,yCAAqC;EACrCA,iBAAA,iBAAa;EACbA,iBAAA,2BAAuB;AACzB,CAAC,EAPWA,iBAAiB,KAAjBA,iBAAiB;AA2B7B,WAAYC,qBAEX;AAFD,WAAYA,qBAAqB;EAC/BA,qBAAA,aAAS;AACX,CAAC,EAFWA,qBAAqB,KAArBA,qBAAqB;AAIjC,WAAYC,SAKX;AALD,WAAYA,SAAS;EACnBA,SAAA,6BAAyB;EACzBA,SAAA,yBAAqB;EACrBA,SAAA,2BAAuB;EACvBA,SAAA,+BAA2B;AAC7B,CAAC,EALWA,SAAS,KAATA,SAAS;AAwBrB;AACA,WAAYC,sBAGX;AAHD,WAAYA,sBAAsB;EAChCA,sBAAA,gCAA4B;EAC5BA,sBAAA,iBAAa;AACf,CAAC,EAHWA,sBAAsB,KAAtBA,sBAAsB;AA4FlC,WAAYC,yBAEX;AAFD,WAAYA,yBAAyB;EACnCA,yBAAA,aAAS;AACX,CAAC,EAFWA,yBAAyB,KAAzBA,yBAAyB;AAkGrC,WAAYC,iBAWX;AAXD,WAAYA,iBAAiB;EAC3BA,iBAAA,uBAAmB;EACnBA,iBAAA,uBAAmB;EACnBA,iBAAA,uBAAmB;EACnBA,iBAAA,uBAAmB;EACnBA,iBAAA,uBAAmB;EACnBA,iBAAA,uBAAmB;EACnBA,iBAAA,uCAAmC;EACnCA,iBAAA,eAAW;EACXA,iBAAA,yBAAqB;EACrBA,iBAAA,qBAAiB;AACnB,CAAC,EAXWA,iBAAiB,KAAjBA,iBAAiB;AA0B7B,WAAYC,uBAEX;AAFD,WAAYA,uBAAuB;EACjCA,uBAAA,aAAS;AACX,CAAC,EAFWA,uBAAuB,KAAvBA,uBAAuB;AAInC,WAAYC,iBAIX;AAJD,WAAYA,iBAAiB;EAC3BA,iBAAA,iBAAa;EACbA,iBAAA,iBAAa;EACbA,iBAAA,qBAAiB;AACnB,CAAC,EAJWA,iBAAiB,KAAjBA,iBAAiB;AAM7B,WAAYC,oBAIX;AAJD,WAAYA,oBAAoB;EAC9BA,oBAAA,6BAAyB;EACzBA,oBAAA,yBAAqB;EACrBA,oBAAA,6BAAyB;AAC3B,CAAC,EAJWA,oBAAoB,KAApBA,oBAAoB;AAYhC,WAAYC,iBAGX;AAHD,WAAYA,iBAAiB;EAC3BA,iBAAA,6BAAyB;EACzBA,iBAAA,aAAS;AACX,CAAC,EAHWA,iBAAiB,KAAjBA,iBAAiB;AAgD7B;AACA,WAAYC,aAGX;AAHD,WAAYA,aAAa;EACvBA,aAAA,eAAW;EACXA,aAAA,iBAAa;AACf,CAAC,EAHWA,aAAa,KAAbA,aAAa;AAKzB;AACA,WAAYC,SAGX;AAHD,WAAYA,SAAS;EACnBA,SAAA,8BAA0B;EAC1BA,SAAA,4BAAwB;AAC1B,CAAC,EAHWA,SAAS,KAATA,SAAS;AAoDrB,WAAYC,iBAGX;AAHD,WAAYA,iBAAiB;EAC3BA,iBAAA,qBAAiB;EACjBA,iBAAA,yBAAqB;AACvB,CAAC,EAHWA,iBAAiB,KAAjBA,iBAAiB;AAK7B,WAAYC,iBAKX;AALD,WAAYA,iBAAiB;EAC3BA,iBAAA,yBAAqB;EACrBA,iBAAA,iBAAa;EACbA,iBAAA,6BAAyB;EACzBA,iBAAA,yBAAqB;AACvB,CAAC,EALWA,iBAAiB,KAAjBA,iBAAiB;AAiD7B,WAAYC,kBAGX;AAHD,WAAYA,kBAAkB;EAC5BA,kBAAA,uBAAmB;EACnBA,kBAAA,aAAS;AACX,CAAC,EAHWA,kBAAkB,KAAlBA,kBAAkB;AA+P9B,WAAYC,wBAKX;AALD,WAAYA,wBAAwB;EAClCA,wBAAA,gCAA4B;EAC5BA,wBAAA,uBAAmB;EACnBA,wBAAA,aAAS;EACTA,wBAAA,yBAAqB;AACvB,CAAC,EALWA,wBAAwB,KAAxBA,wBAAwB;AA+BpC,WAAYC,OAQX;AARD,WAAYA,OAAO;EACjBA,OAAA,qBAAiB;EACjBA,OAAA,qBAAiB;EACjBA,OAAA,yBAAqB;EACrBA,OAAA,qBAAiB;EACjBA,OAAA,yBAAqB;EACrBA,OAAA,uBAAmB;EACnBA,OAAA,2BAAuB;AACzB,CAAC,EARWA,OAAO,KAAPA,OAAO;AAqFnB,WAAYC,mBAEX;AAFD,WAAYA,mBAAmB;EAC7BA,mBAAA,aAAS;AACX,CAAC,EAFWA,mBAAmB,KAAnBA,mBAAmB;AAynC/B,OAAO,MAAMC,6BAA6B,GAAGvF,GAAG;;;;;;;;KAQ3C;AACL,OAAO,MAAMwF,yBAAyB,GAAGxF,GAAG;;;;;;;;;KASvC;AACL,OAAO,MAAMyF,qBAAqB,GAAGzF,GAAG;;;;;;;;;;;;;;;;;;KAkBnC;AAKH,OAAM,MAAO0F,gBAAiB,SAAQzF,MAAM,CAAC0F,KAAsD;EAGjGC,YAAYC,MAAqB;IAC/B,KAAK,CAACA,MAAM,CAAC;IAHf,KAAAC,QAAQ,GAAGL,qBAAqB;EAIhC;;;uBALWC,gBAAgB,EAAAK,EAAA,CAAAC,QAAA,CAAAC,EAAA,CAAAhG,MAAA;IAAA;EAAA;;;aAAhByF,gBAAgB;MAAAQ,OAAA,EAAhBR,gBAAgB,CAAAS,IAAA;MAAAC,UAAA,EAFf;IAAM;EAAA;;AAStB,OAAO,MAAMC,uBAAuB,GAAGrG,GAAG;;;;;;;KAOrC;AAKH,OAAM,MAAOsG,kBAAmB,SAAQrG,MAAM,CAACsG,YAA+E;EAG5HX,YAAYC,MAAqB;IAC/B,KAAK,CAACA,MAAM,CAAC;IAHf,KAAAC,QAAQ,GAAGO,uBAAuB;EAIlC;;;uBALWC,kBAAkB,EAAAP,EAAA,CAAAC,QAAA,CAAAC,EAAA,CAAAhG,MAAA;IAAA;EAAA;;;aAAlBqG,kBAAkB;MAAAJ,OAAA,EAAlBI,kBAAkB,CAAAH,IAAA;MAAAC,UAAA,EAFjB;IAAM;EAAA;;AAStB,OAAO,MAAMI,6BAA6B,GAAGxG,GAAG;;;;;;;KAO3C;AAKH,OAAM,MAAOyG,wBAAyB,SAAQxG,MAAM,CAACsG,YAA2F;EAG9IX,YAAYC,MAAqB;IAC/B,KAAK,CAACA,MAAM,CAAC;IAHf,KAAAC,QAAQ,GAAGU,6BAA6B;EAIxC;;;uBALWC,wBAAwB,EAAAV,EAAA,CAAAC,QAAA,CAAAC,EAAA,CAAAhG,MAAA;IAAA;EAAA;;;aAAxBwG,wBAAwB;MAAAP,OAAA,EAAxBO,wBAAwB,CAAAN,IAAA;MAAAC,UAAA,EAFvB;IAAM;EAAA;;AAStB,OAAO,MAAMM,qBAAqB,GAAG1G,GAAG;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;KAmDnC;AAKH,OAAM,MAAO2G,gBAAiB,SAAQ1G,MAAM,CAAC0F,KAAsD;EAGjGC,YAAYC,MAAqB;IAC/B,KAAK,CAACA,MAAM,CAAC;IAHf,KAAAC,QAAQ,GAAGY,qBAAqB;EAIhC;;;uBALWC,gBAAgB,EAAAZ,EAAA,CAAAC,QAAA,CAAAC,EAAA,CAAAhG,MAAA;IAAA;EAAA;;;aAAhB0G,gBAAgB;MAAAT,OAAA,EAAhBS,gBAAgB,CAAAR,IAAA;MAAAC,UAAA,EAFf;IAAM;EAAA;;AAStB,OAAO,MAAMQ,6BAA6B,GAAG5G,GAAG;;;;;;KAM3C;AAKH,OAAM,MAAO6G,wBAAyB,SAAQ5G,MAAM,CAAC6G,QAA+E;EAGlIlB,YAAYC,MAAqB;IAC/B,KAAK,CAACA,MAAM,CAAC;IAHf,KAAAC,QAAQ,GAAGc,6BAA6B;EAIxC;;;uBALWC,wBAAwB,EAAAd,EAAA,CAAAC,QAAA,CAAAC,EAAA,CAAAhG,MAAA;IAAA;EAAA;;;aAAxB4G,wBAAwB;MAAAX,OAAA,EAAxBW,wBAAwB,CAAAV,IAAA;MAAAC,UAAA,EAFvB;IAAM;EAAA;;AAStB,OAAO,MAAMW,sBAAsB,GAAG/G,GAAG;;;;;;;;;;;;;KAapC;AAKH,OAAM,MAAOgH,iBAAkB,SAAQ/G,MAAM,CAAC0F,KAAwD;EAGpGC,YAAYC,MAAqB;IAC/B,KAAK,CAACA,MAAM,CAAC;IAHf,KAAAC,QAAQ,GAAGiB,sBAAsB;EAIjC;;;uBALWC,iBAAiB,EAAAjB,EAAA,CAAAC,QAAA,CAAAC,EAAA,CAAAhG,MAAA;IAAA;EAAA;;;aAAjB+G,iBAAiB;MAAAd,OAAA,EAAjBc,iBAAiB,CAAAb,IAAA;MAAAC,UAAA,EAFhB;IAAM;EAAA;;AAStB,OAAO,MAAMa,oBAAoB,GAAGjH,GAAG;;;;;;KAMlC;AAKH,OAAM,MAAOkH,eAAgB,SAAQjH,MAAM,CAAC6G,QAA6D;EAGvGlB,YAAYC,MAAqB;IAC/B,KAAK,CAACA,MAAM,CAAC;IAHf,KAAAC,QAAQ,GAAGmB,oBAAoB;EAI/B;;;uBALWC,eAAe,EAAAnB,EAAA,CAAAC,QAAA,CAAAC,EAAA,CAAAhG,MAAA;IAAA;EAAA;;;aAAfiH,eAAe;MAAAhB,OAAA,EAAfgB,eAAe,CAAAf,IAAA;MAAAC,UAAA,EAFd;IAAM;EAAA;;AAStB,OAAO,MAAMe,kBAAkB,GAAGnH,GAAG;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;KA2EhC;AAKH,OAAM,MAAOoH,aAAc,SAAQnH,MAAM,CAAC0F,KAAgD;EAGxFC,YAAYC,MAAqB;IAC/B,KAAK,CAACA,MAAM,CAAC;IAHf,KAAAC,QAAQ,GAAGqB,kBAAkB;EAI7B;;;uBALWC,aAAa,EAAArB,EAAA,CAAAC,QAAA,CAAAC,EAAA,CAAAhG,MAAA;IAAA;EAAA;;;aAAbmH,aAAa;MAAAlB,OAAA,EAAbkB,aAAa,CAAAjB,IAAA;MAAAC,UAAA,EAFZ;IAAM;EAAA;;AAStB,OAAO,MAAMiB,2BAA2B,GAAGrH,GAAG;;;;;;;;;KASzC;AAKH,OAAM,MAAOsH,sBAAuB,SAAQrH,MAAM,CAAC6G,QAA2E;EAG5HlB,YAAYC,MAAqB;IAC/B,KAAK,CAACA,MAAM,CAAC;IAHf,KAAAC,QAAQ,GAAGuB,2BAA2B;EAItC;;;uBALWC,sBAAsB,EAAAvB,EAAA,CAAAC,QAAA,CAAAC,EAAA,CAAAhG,MAAA;IAAA;EAAA;;;aAAtBqH,sBAAsB;MAAApB,OAAA,EAAtBoB,sBAAsB,CAAAnB,IAAA;MAAAC,UAAA,EAFrB;IAAM;EAAA;;AAStB,OAAO,MAAMmB,0BAA0B,GAAGvH,GAAG;;;;;;KAMxC;AAKH,OAAM,MAAOwH,qBAAsB,SAAQvH,MAAM,CAAC6G,QAAyE;EAGzHlB,YAAYC,MAAqB;IAC/B,KAAK,CAACA,MAAM,CAAC;IAHf,KAAAC,QAAQ,GAAGyB,0BAA0B;EAIrC;;;uBALWC,qBAAqB,EAAAzB,EAAA,CAAAC,QAAA,CAAAC,EAAA,CAAAhG,MAAA;IAAA;EAAA;;;aAArBuH,qBAAqB;MAAAtB,OAAA,EAArBsB,qBAAqB,CAAArB,IAAA;MAAAC,UAAA,EAFpB;IAAM;EAAA;;AAStB,OAAO,MAAMqB,wBAAwB,GAAGzH,GAAG;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;KA+BtC;AAKH,OAAM,MAAO0H,mBAAoB,SAAQzH,MAAM,CAAC0F,KAA4D;EAG1GC,YAAYC,MAAqB;IAC/B,KAAK,CAACA,MAAM,CAAC;IAHf,KAAAC,QAAQ,GAAG2B,wBAAwB;EAInC;;;uBALWC,mBAAmB,EAAA3B,EAAA,CAAAC,QAAA,CAAAC,EAAA,CAAAhG,MAAA;IAAA;EAAA;;;aAAnByH,mBAAmB;MAAAxB,OAAA,EAAnBwB,mBAAmB,CAAAvB,IAAA;MAAAC,UAAA,EAFlB;IAAM;EAAA;;AAStB,OAAO,MAAMuB,uBAAuB,GAAG3H,GAAG;;;;;;;;;;;;;;;;KAgBrC;AAKH,OAAM,MAAO4H,kBAAmB,SAAQ3H,MAAM,CAAC0F,KAA0D;EAGvGC,YAAYC,MAAqB;IAC/B,KAAK,CAACA,MAAM,CAAC;IAHf,KAAAC,QAAQ,GAAG6B,uBAAuB;EAIlC;;;uBALWC,kBAAkB,EAAA7B,EAAA,CAAAC,QAAA,CAAAC,EAAA,CAAAhG,MAAA;IAAA;EAAA;;;aAAlB2H,kBAAkB;MAAA1B,OAAA,EAAlB0B,kBAAkB,CAAAzB,IAAA;MAAAC,UAAA,EAFjB;IAAM;EAAA;;AAStB,OAAO,MAAMyB,oBAAoB,GAAG7H,GAAG;;;;;;;;;;;;;;;;;;;;;;;;KAwBlC;AAKH,OAAM,MAAO8H,eAAgB,SAAQ7H,MAAM,CAAC0F,KAAoD;EAG9FC,YAAYC,MAAqB;IAC/B,KAAK,CAACA,MAAM,CAAC;IAHf,KAAAC,QAAQ,GAAG+B,oBAAoB;EAI/B;;;uBALWC,eAAe,EAAA/B,EAAA,CAAAC,QAAA,CAAAC,EAAA,CAAAhG,MAAA;IAAA;EAAA;;;aAAf6H,eAAe;MAAA5B,OAAA,EAAf4B,eAAe,CAAA3B,IAAA;MAAAC,UAAA,EAFd;IAAM;EAAA;;AAStB,OAAO,MAAM2B,+BAA+B,GAAG/H,GAAG;;;;;;KAM7C;AAKH,OAAM,MAAOgI,0BAA2B,SAAQ/H,MAAM,CAAC6G,QAAmF;EAGxIlB,YAAYC,MAAqB;IAC/B,KAAK,CAACA,MAAM,CAAC;IAHf,KAAAC,QAAQ,GAAGiC,+BAA+B;EAI1C;;;uBALWC,0BAA0B,EAAAjC,EAAA,CAAAC,QAAA,CAAAC,EAAA,CAAAhG,MAAA;IAAA;EAAA;;;aAA1B+H,0BAA0B;MAAA9B,OAAA,EAA1B8B,0BAA0B,CAAA7B,IAAA;MAAAC,UAAA,EAFzB;IAAM;EAAA;;AAStB,OAAO,MAAM6B,oBAAoB,GAAGjI,GAAG;;;;;;KAMlC;AAKH,OAAM,MAAOkI,eAAgB,SAAQjI,MAAM,CAAC6G,QAA6D;EAGvGlB,YAAYC,MAAqB;IAC/B,KAAK,CAACA,MAAM,CAAC;IAHf,KAAAC,QAAQ,GAAGmC,oBAAoB;EAI/B;;;uBALWC,eAAe,EAAAnC,EAAA,CAAAC,QAAA,CAAAC,EAAA,CAAAhG,MAAA;IAAA;EAAA;;;aAAfiI,eAAe;MAAAhC,OAAA,EAAfgC,eAAe,CAAA/B,IAAA;MAAAC,UAAA,EAFd;IAAM;EAAA;;AAStB,OAAO,MAAM+B,mBAAmB,GAAGnI,GAAG;;;;;;;;;;;;;;;KAejC;AAKH,OAAM,MAAOoI,cAAe,SAAQnI,MAAM,CAAC0F,KAAkD;EAG3FC,YAAYC,MAAqB;IAC/B,KAAK,CAACA,MAAM,CAAC;IAHf,KAAAC,QAAQ,GAAGqC,mBAAmB;EAI9B;;;uBALWC,cAAc,EAAArC,EAAA,CAAAC,QAAA,CAAAC,EAAA,CAAAhG,MAAA;IAAA;EAAA;;;aAAdmI,cAAc;MAAAlC,OAAA,EAAdkC,cAAc,CAAAjC,IAAA;MAAAC,UAAA,EAFb;IAAM;EAAA;;AAStB,OAAO,MAAMiC,2BAA2B,GAAGrI,GAAG;;;;;;;;;;;;;;;;;;;;;;;;;;KA0BzC;AAKH,OAAM,MAAOsI,sBAAuB,SAAQrI,MAAM,CAAC0F,KAAkE;EAGnHC,YAAYC,MAAqB;IAC/B,KAAK,CAACA,MAAM,CAAC;IAHf,KAAAC,QAAQ,GAAGuC,2BAA2B;EAItC;;;uBALWC,sBAAsB,EAAAvC,EAAA,CAAAC,QAAA,CAAAC,EAAA,CAAAhG,MAAA;IAAA;EAAA;;;aAAtBqI,sBAAsB;MAAApC,OAAA,EAAtBoC,sBAAsB,CAAAnC,IAAA;MAAAC,UAAA,EAFrB;IAAM;EAAA;;AAStB,OAAO,MAAMmC,cAAc,GAAGvI,GAAG;;;;;;KAM5B;AAKH,OAAM,MAAOwI,SAAU,SAAQvI,MAAM,CAAC0F,KAAwC;EAG5EC,YAAYC,MAAqB;IAC/B,KAAK,CAACA,MAAM,CAAC;IAHf,KAAAC,QAAQ,GAAGyC,cAAc;EAIzB;;;uBALWC,SAAS,EAAAzC,EAAA,CAAAC,QAAA,CAAAC,EAAA,CAAAhG,MAAA;IAAA;EAAA;;;aAATuI,SAAS;MAAAtC,OAAA,EAATsC,SAAS,CAAArC,IAAA;MAAAC,UAAA,EAFR;IAAM;EAAA;;AAStB,OAAO,MAAMqC,yBAAyB,GAAGzI,GAAG;;;;;;;;;;;;;;;;;;;;;KAqBvC;AAKH,OAAM,MAAO0I,oBAAqB,SAAQzI,MAAM,CAAC0F,KAA8D;EAG7GC,YAAYC,MAAqB;IAC/B,KAAK,CAACA,MAAM,CAAC;IAHf,KAAAC,QAAQ,GAAG2C,yBAAyB;EAIpC;;;uBALWC,oBAAoB,EAAA3C,EAAA,CAAAC,QAAA,CAAAC,EAAA,CAAAhG,MAAA;IAAA;EAAA;;;aAApByI,oBAAoB;MAAAxC,OAAA,EAApBwC,oBAAoB,CAAAvC,IAAA;MAAAC,UAAA,EAFnB;IAAM;EAAA;;AAStB,OAAO,MAAMuC,wBAAwB,GAAG3I,GAAG;;;;;;;;;;;;;;;;;;;;KAoBtC;AAKH,OAAM,MAAO4I,mBAAoB,SAAQ3I,MAAM,CAAC0F,KAA4D;EAG1GC,YAAYC,MAAqB;IAC/B,KAAK,CAACA,MAAM,CAAC;IAHf,KAAAC,QAAQ,GAAG6C,wBAAwB;EAInC;;;uBALWC,mBAAmB,EAAA7C,EAAA,CAAAC,QAAA,CAAAC,EAAA,CAAAhG,MAAA;IAAA;EAAA;;;aAAnB2I,mBAAmB;MAAA1C,OAAA,EAAnB0C,mBAAmB,CAAAzC,IAAA;MAAAC,UAAA,EAFlB;IAAM;EAAA;;AAStB,OAAO,MAAMyC,wBAAwB,GAAG7I,GAAG;;;;;;;;;;;;;;;;;;;;KAoBtC;AAKH,OAAM,MAAO8I,mBAAoB,SAAQ7I,MAAM,CAAC0F,KAA4D;EAG1GC,YAAYC,MAAqB;IAC/B,KAAK,CAACA,MAAM,CAAC;IAHf,KAAAC,QAAQ,GAAG+C,wBAAwB;EAInC;;;uBALWC,mBAAmB,EAAA/C,EAAA,CAAAC,QAAA,CAAAC,EAAA,CAAAhG,MAAA;IAAA;EAAA;;;aAAnB6I,mBAAmB;MAAA5C,OAAA,EAAnB4C,mBAAmB,CAAA3C,IAAA;MAAAC,UAAA,EAFlB;IAAM;EAAA;;AAStB,OAAO,MAAM2C,+BAA+B,GAAG/I,GAAG;;;;;;;;;;;;;;;;KAgB7C;AAKH,OAAM,MAAOgJ,0BAA2B,SAAQ/I,MAAM,CAAC0F,KAA0E;EAG/HC,YAAYC,MAAqB;IAC/B,KAAK,CAACA,MAAM,CAAC;IAHf,KAAAC,QAAQ,GAAGiD,+BAA+B;EAI1C;;;uBALWC,0BAA0B,EAAAjD,EAAA,CAAAC,QAAA,CAAAC,EAAA,CAAAhG,MAAA;IAAA;EAAA;;;aAA1B+I,0BAA0B;MAAA9C,OAAA,EAA1B8C,0BAA0B,CAAA7C,IAAA;MAAAC,UAAA,EAFzB;IAAM;EAAA;;AAStB,OAAO,MAAM6C,mBAAmB,GAAGjJ,GAAG;;;;;;;;KAQjC;AAKH,OAAM,MAAOkJ,cAAe,SAAQjJ,MAAM,CAAC6G,QAA2D;EAGpGlB,YAAYC,MAAqB;IAC/B,KAAK,CAACA,MAAM,CAAC;IAHf,KAAAC,QAAQ,GAAGmD,mBAAmB;EAI9B;;;uBALWC,cAAc,EAAAnD,EAAA,CAAAC,QAAA,CAAAC,EAAA,CAAAhG,MAAA;IAAA;EAAA;;;aAAdiJ,cAAc;MAAAhD,OAAA,EAAdgD,cAAc,CAAA/C,IAAA;MAAAC,UAAA,EAFb;IAAM;EAAA;;AAStB,OAAO,MAAM+C,oBAAoB,GAAGnJ,GAAG;;;;;;;;;;;;KAYlC;AAKH,OAAM,MAAOoJ,eAAgB,SAAQnJ,MAAM,CAACsG,YAAyE;EAGnHX,YAAYC,MAAqB;IAC/B,KAAK,CAACA,MAAM,CAAC;IAHf,KAAAC,QAAQ,GAAGqD,oBAAoB;EAI/B;;;uBALWC,eAAe,EAAArD,EAAA,CAAAC,QAAA,CAAAC,EAAA,CAAAhG,MAAA;IAAA;EAAA;;;aAAfmJ,eAAe;MAAAlD,OAAA,EAAfkD,eAAe,CAAAjD,IAAA;MAAAC,UAAA,EAFd;IAAM;EAAA;;AAStB,OAAO,MAAMiD,mBAAmB,GAAGrJ,GAAG;;;;;;;KAOjC;AAKH,OAAM,MAAOsJ,cAAe,SAAQrJ,MAAM,CAAC6G,QAA2D;EAGpGlB,YAAYC,MAAqB;IAC/B,KAAK,CAACA,MAAM,CAAC;IAHf,KAAAC,QAAQ,GAAGuD,mBAAmB;EAI9B;;;uBALWC,cAAc,EAAAvD,EAAA,CAAAC,QAAA,CAAAC,EAAA,CAAAhG,MAAA;IAAA;EAAA;;;aAAdqJ,cAAc;MAAApD,OAAA,EAAdoD,cAAc,CAAAnD,IAAA;MAAAC,UAAA,EAFb;IAAM;EAAA;;AAStB,OAAO,MAAMmD,gBAAgB,GAAGvJ,GAAG;;;;;;;;;;;;;;;;;;;;;;;;;;;;MA4B7BwF,yBAAyB,EAAE;AAK/B,OAAM,MAAOgE,WAAY,SAAQvJ,MAAM,CAAC0F,KAA4C;EAGlFC,YAAYC,MAAqB;IAC/B,KAAK,CAACA,MAAM,CAAC;IAHf,KAAAC,QAAQ,GAAGyD,gBAAgB;EAI3B;;;uBALWC,WAAW,EAAAzD,EAAA,CAAAC,QAAA,CAAAC,EAAA,CAAAhG,MAAA;IAAA;EAAA;;;aAAXuJ,WAAW;MAAAtD,OAAA,EAAXsD,WAAW,CAAArD,IAAA;MAAAC,UAAA,EAFV;IAAM;EAAA;;AAStB,OAAO,MAAMqD,4BAA4B,GAAGzJ,GAAG;;;;;;;;;MASzCuF,6BAA6B,EAAE;AAKnC,OAAM,MAAOmE,uBAAwB,SAAQzJ,MAAM,CAAC0F,KAAoE;EAGtHC,YAAYC,MAAqB;IAC/B,KAAK,CAACA,MAAM,CAAC;IAHf,KAAAC,QAAQ,GAAG2D,4BAA4B;EAIvC;;;uBALWC,uBAAuB,EAAA3D,EAAA,CAAAC,QAAA,CAAAC,EAAA,CAAAhG,MAAA;IAAA;EAAA;;;aAAvByJ,uBAAuB;MAAAxD,OAAA,EAAvBwD,uBAAuB,CAAAvD,IAAA;MAAAC,UAAA,EAFtB;IAAM;EAAA;;AAStB,OAAO,MAAMuD,qBAAqB,GAAG3J,GAAG;;;;;;;;KAQnC;AAKH,OAAM,MAAO4J,gBAAiB,SAAQ3J,MAAM,CAAC0F,KAAsD;EAGjGC,YAAYC,MAAqB;IAC/B,KAAK,CAACA,MAAM,CAAC;IAHf,KAAAC,QAAQ,GAAG6D,qBAAqB;EAIhC;;;uBALWC,gBAAgB,EAAA7D,EAAA,CAAAC,QAAA,CAAAC,EAAA,CAAAhG,MAAA;IAAA;EAAA;;;aAAhB2J,gBAAgB;MAAA1D,OAAA,EAAhB0D,gBAAgB,CAAAzD,IAAA;MAAAC,UAAA,EAFf;IAAM;EAAA;;AAStB,OAAO,MAAMyD,mBAAmB,GAAG7J,GAAG;;;;;;;;KAQjC;AAKH,OAAM,MAAO8J,cAAe,SAAQ7J,MAAM,CAAC0F,KAAkD;EAG3FC,YAAYC,MAAqB;IAC/B,KAAK,CAACA,MAAM,CAAC;IAHf,KAAAC,QAAQ,GAAG+D,mBAAmB;EAI9B;;;uBALWC,cAAc,EAAA/D,EAAA,CAAAC,QAAA,CAAAC,EAAA,CAAAhG,MAAA;IAAA;EAAA;;;aAAd6J,cAAc;MAAA5D,OAAA,EAAd4D,cAAc,CAAA3D,IAAA;MAAAC,UAAA,EAFb;IAAM;EAAA;;AAStB,OAAO,MAAM2D,2BAA2B,GAAG/J,GAAG;;;;;;;KAOzC;AAKH,OAAM,MAAOgK,sBAAuB,SAAQ/J,MAAM,CAAC0F,KAAkE;EAGnHC,YAAYC,MAAqB;IAC/B,KAAK,CAACA,MAAM,CAAC;IAHf,KAAAC,QAAQ,GAAGiE,2BAA2B;EAItC;;;uBALWC,sBAAsB,EAAAjE,EAAA,CAAAC,QAAA,CAAAC,EAAA,CAAAhG,MAAA;IAAA;EAAA;;;aAAtB+J,sBAAsB;MAAA9D,OAAA,EAAtB8D,sBAAsB,CAAA7D,IAAA;MAAAC,UAAA,EAFrB;IAAM;EAAA;;AAStB,OAAO,MAAM6D,0BAA0B,GAAGjK,GAAG;;;;;;;KAOxC;AAKH,OAAM,MAAOkK,qBAAsB,SAAQjK,MAAM,CAAC0F,KAAgE;EAGhHC,YAAYC,MAAqB;IAC/B,KAAK,CAACA,MAAM,CAAC;IAHf,KAAAC,QAAQ,GAAGmE,0BAA0B;EAIrC;;;uBALWC,qBAAqB,EAAAnE,EAAA,CAAAC,QAAA,CAAAC,EAAA,CAAAhG,MAAA;IAAA;EAAA;;;aAArBiK,qBAAqB;MAAAhE,OAAA,EAArBgE,qBAAqB,CAAA/D,IAAA;MAAAC,UAAA,EAFpB;IAAM;EAAA;;AAStB,OAAO,MAAM+D,gBAAgB,GAAGnK,GAAG;;;;;;;;;;;;;KAa9B;AAKH,OAAM,MAAOoK,WAAY,SAAQnK,MAAM,CAAC0F,KAA4C;EAGlFC,YAAYC,MAAqB;IAC/B,KAAK,CAACA,MAAM,CAAC;IAHf,KAAAC,QAAQ,GAAGqE,gBAAgB;EAI3B;;;uBALWC,WAAW,EAAArE,EAAA,CAAAC,QAAA,CAAAC,EAAA,CAAAhG,MAAA;IAAA;EAAA;;;aAAXmK,WAAW;MAAAlE,OAAA,EAAXkE,WAAW,CAAAjE,IAAA;MAAAC,UAAA,EAFV;IAAM;EAAA;;AAStB,OAAO,MAAMiE,sBAAsB,GAAGrK,GAAG;;;;;;KAMpC;AAKH,OAAM,MAAOsK,iBAAkB,SAAQrK,MAAM,CAAC6G,QAAiE;EAG7GlB,YAAYC,MAAqB;IAC/B,KAAK,CAACA,MAAM,CAAC;IAHf,KAAAC,QAAQ,GAAGuE,sBAAsB;EAIjC;;;uBALWC,iBAAiB,EAAAvE,EAAA,CAAAC,QAAA,CAAAC,EAAA,CAAAhG,MAAA;IAAA;EAAA;;;aAAjBqK,iBAAiB;MAAApE,OAAA,EAAjBoE,iBAAiB,CAAAnE,IAAA;MAAAC,UAAA,EAFhB;IAAM;EAAA;;AAStB,OAAO,MAAMmE,sBAAsB,GAAGvK,GAAG;;;;;;KAMpC;AAKH,OAAM,MAAOwK,iBAAkB,SAAQvK,MAAM,CAAC6G,QAAiE;EAG7GlB,YAAYC,MAAqB;IAC/B,KAAK,CAACA,MAAM,CAAC;IAHf,KAAAC,QAAQ,GAAGyE,sBAAsB;EAIjC;;;uBALWC,iBAAiB,EAAAzE,EAAA,CAAAC,QAAA,CAAAC,EAAA,CAAAhG,MAAA;IAAA;EAAA;;;aAAjBuK,iBAAiB;MAAAtE,OAAA,EAAjBsE,iBAAiB,CAAArE,IAAA;MAAAC,UAAA,EAFhB;IAAM;EAAA;;AAStB,OAAO,MAAMqE,sBAAsB,GAAGzK,GAAG;;;;;;KAMpC;AAKH,OAAM,MAAO0K,iBAAkB,SAAQzK,MAAM,CAAC6G,QAAiE;EAG7GlB,YAAYC,MAAqB;IAC/B,KAAK,CAACA,MAAM,CAAC;IAHf,KAAAC,QAAQ,GAAG2E,sBAAsB;EAIjC;;;uBALWC,iBAAiB,EAAA3E,EAAA,CAAAC,QAAA,CAAAC,EAAA,CAAAhG,MAAA;IAAA;EAAA;;;aAAjByK,iBAAiB;MAAAxE,OAAA,EAAjBwE,iBAAiB,CAAAvE,IAAA;MAAAC,UAAA,EAFhB;IAAM;EAAA;;AAStB,OAAO,MAAMuE,sBAAsB,GAAG3K,GAAG;;;;;;KAMpC;AAKH,OAAM,MAAO4K,iBAAkB,SAAQ3K,MAAM,CAAC6G,QAAiE;EAG7GlB,YAAYC,MAAqB;IAC/B,KAAK,CAACA,MAAM,CAAC;IAHf,KAAAC,QAAQ,GAAG6E,sBAAsB;EAIjC;;;uBALWC,iBAAiB,EAAA7E,EAAA,CAAAC,QAAA,CAAAC,EAAA,CAAAhG,MAAA;IAAA;EAAA;;;aAAjB2K,iBAAiB;MAAA1E,OAAA,EAAjB0E,iBAAiB,CAAAzE,IAAA;MAAAC,UAAA,EAFhB;IAAM;EAAA;;AAStB,OAAO,MAAMyE,sBAAsB,GAAG7K,GAAG;;;;;;KAMpC;AAKH,OAAM,MAAO8K,iBAAkB,SAAQ7K,MAAM,CAAC6G,QAAiE;EAG7GlB,YAAYC,MAAqB;IAC/B,KAAK,CAACA,MAAM,CAAC;IAHf,KAAAC,QAAQ,GAAG+E,sBAAsB;EAIjC;;;uBALWC,iBAAiB,EAAA/E,EAAA,CAAAC,QAAA,CAAAC,EAAA,CAAAhG,MAAA;IAAA;EAAA;;;aAAjB6K,iBAAiB;MAAA5E,OAAA,EAAjB4E,iBAAiB,CAAA3E,IAAA;MAAAC,UAAA,EAFhB;IAAM;EAAA;;AAStB,OAAO,MAAM2E,sBAAsB,GAAG/K,GAAG;;;;;;KAMpC;AAKH,OAAM,MAAOgL,iBAAkB,SAAQ/K,MAAM,CAAC6G,QAAiE;EAG7GlB,YAAYC,MAAqB;IAC/B,KAAK,CAACA,MAAM,CAAC;IAHf,KAAAC,QAAQ,GAAGiF,sBAAsB;EAIjC;;;uBALWC,iBAAiB,EAAAjF,EAAA,CAAAC,QAAA,CAAAC,EAAA,CAAAhG,MAAA;IAAA;EAAA;;;aAAjB+K,iBAAiB;MAAA9E,OAAA,EAAjB8E,iBAAiB,CAAA7E,IAAA;MAAAC,UAAA,EAFhB;IAAM;EAAA;;AAStB,OAAO,MAAM6E,mBAAmB,GAAGjL,GAAG;;;;;;KAMjC;AAKH,OAAM,MAAOkL,cAAe,SAAQjL,MAAM,CAAC6G,QAA2D;EAGpGlB,YAAYC,MAAqB;IAC/B,KAAK,CAACA,MAAM,CAAC;IAHf,KAAAC,QAAQ,GAAGmF,mBAAmB;EAI9B;;;uBALWC,cAAc,EAAAnF,EAAA,CAAAC,QAAA,CAAAC,EAAA,CAAAhG,MAAA;IAAA;EAAA;;;aAAdiL,cAAc;MAAAhF,OAAA,EAAdgF,cAAc,CAAA/E,IAAA;MAAAC,UAAA,EAFb;IAAM;EAAA;;AAStB,OAAO,MAAM+E,iBAAiB,GAAGnL,GAAG;;;;;;;;;;;;;;;;;;;;KAoB/B;AAKH,OAAM,MAAOoL,YAAa,SAAQnL,MAAM,CAAC0F,KAA8C;EAGrFC,YAAYC,MAAqB;IAC/B,KAAK,CAACA,MAAM,CAAC;IAHf,KAAAC,QAAQ,GAAGqF,iBAAiB;EAI5B;;;uBALWC,YAAY,EAAArF,EAAA,CAAAC,QAAA,CAAAC,EAAA,CAAAhG,MAAA;IAAA;EAAA;;;aAAZmL,YAAY;MAAAlF,OAAA,EAAZkF,YAAY,CAAAjF,IAAA;MAAAC,UAAA,EAFX;IAAM;EAAA;;AAStB,OAAO,MAAMiF,uBAAuB,GAAGrL,GAAG;;;;;;;;;;;;;;;;;;;;;;;;;;;;;KA6BrC;AAKH,OAAM,MAAOsL,kBAAmB,SAAQrL,MAAM,CAAC0F,KAA0D;EAGvGC,YAAYC,MAAqB;IAC/B,KAAK,CAACA,MAAM,CAAC;IAHf,KAAAC,QAAQ,GAAGuF,uBAAuB;EAIlC;;;uBALWC,kBAAkB,EAAAvF,EAAA,CAAAC,QAAA,CAAAC,EAAA,CAAAhG,MAAA;IAAA;EAAA;;;aAAlBqL,kBAAkB;MAAApF,OAAA,EAAlBoF,kBAAkB,CAAAnF,IAAA;MAAAC,UAAA,EAFjB;IAAM;EAAA;;AAStB,OAAO,MAAMmF,uBAAuB,GAAGvL,GAAG;;;;;;;;;;;;KAYrC;AAKH,OAAM,MAAOwL,kBAAmB,SAAQvL,MAAM,CAAC0F,KAA0D;EAGvGC,YAAYC,MAAqB;IAC/B,KAAK,CAACA,MAAM,CAAC;IAHf,KAAAC,QAAQ,GAAGyF,uBAAuB;EAIlC;;;uBALWC,kBAAkB,EAAAzF,EAAA,CAAAC,QAAA,CAAAC,EAAA,CAAAhG,MAAA;IAAA;EAAA;;;aAAlBuL,kBAAkB;MAAAtF,OAAA,EAAlBsF,kBAAkB,CAAArF,IAAA;MAAAC,UAAA,EAFjB;IAAM;EAAA;;AAStB,OAAO,MAAMqF,oBAAoB,GAAGzL,GAAG;;;;;;;;;;;KAWlC;AAKH,OAAM,MAAO0L,eAAgB,SAAQzL,MAAM,CAAC0F,KAAoD;EAG9FC,YAAYC,MAAqB;IAC/B,KAAK,CAACA,MAAM,CAAC;IAHf,KAAAC,QAAQ,GAAG2F,oBAAoB;EAI/B;;;uBALWC,eAAe,EAAA3F,EAAA,CAAAC,QAAA,CAAAC,EAAA,CAAAhG,MAAA;IAAA;EAAA;;;aAAfyL,eAAe;MAAAxF,OAAA,EAAfwF,eAAe,CAAAvF,IAAA;MAAAC,UAAA,EAFd;IAAM;EAAA;;AAStB,OAAO,MAAMuF,mBAAmB,GAAG3L,GAAG;;;;;;KAMjC;AAKH,OAAM,MAAO4L,cAAe,SAAQ3L,MAAM,CAAC6G,QAA2D;EAGpGlB,YAAYC,MAAqB;IAC/B,KAAK,CAACA,MAAM,CAAC;IAHf,KAAAC,QAAQ,GAAG6F,mBAAmB;EAI9B;;;uBALWC,cAAc,EAAA7F,EAAA,CAAAC,QAAA,CAAAC,EAAA,CAAAhG,MAAA;IAAA;EAAA;;;aAAd2L,cAAc;MAAA1F,OAAA,EAAd0F,cAAc,CAAAzF,IAAA;MAAAC,UAAA,EAFb;IAAM;EAAA;;AAStB,OAAO,MAAMyF,8BAA8B,GAAG7L,GAAG;;;;;;KAM5C;AAKH,OAAM,MAAO8L,yBAA0B,SAAQ7L,MAAM,CAAC6G,QAAiF;EAGrIlB,YAAYC,MAAqB;IAC/B,KAAK,CAACA,MAAM,CAAC;IAHf,KAAAC,QAAQ,GAAG+F,8BAA8B;EAIzC;;;uBALWC,yBAAyB,EAAA/F,EAAA,CAAAC,QAAA,CAAAC,EAAA,CAAAhG,MAAA;IAAA;EAAA;;;aAAzB6L,yBAAyB;MAAA5F,OAAA,EAAzB4F,yBAAyB,CAAA3F,IAAA;MAAAC,UAAA,EAFxB;IAAM;EAAA;;AAStB,OAAO,MAAM2F,kBAAkB,GAAG/L,GAAG;;;;;;;;;;;;KAYhC;AAKH,OAAM,MAAOgM,aAAc,SAAQ/L,MAAM,CAAC0F,KAAgD;EAGxFC,YAAYC,MAAqB;IAC/B,KAAK,CAACA,MAAM,CAAC;IAHf,KAAAC,QAAQ,GAAGiG,kBAAkB;EAI7B;;;uBALWC,aAAa,EAAAjG,EAAA,CAAAC,QAAA,CAAAC,EAAA,CAAAhG,MAAA;IAAA;EAAA;;;aAAb+L,aAAa;MAAA9F,OAAA,EAAb8F,aAAa,CAAA7F,IAAA;MAAAC,UAAA,EAFZ;IAAM;EAAA;;AAStB,OAAO,MAAM6F,6BAA6B,GAAGjM,GAAG;;;;;;;;;;;;KAY3C;AAKH,OAAM,MAAOkM,wBAAyB,SAAQjM,MAAM,CAAC0F,KAAsE;EAGzHC,YAAYC,MAAqB;IAC/B,KAAK,CAACA,MAAM,CAAC;IAHf,KAAAC,QAAQ,GAAGmG,6BAA6B;EAIxC;;;uBALWC,wBAAwB,EAAAnG,EAAA,CAAAC,QAAA,CAAAC,EAAA,CAAAhG,MAAA;IAAA;EAAA;;;aAAxBiM,wBAAwB;MAAAhG,OAAA,EAAxBgG,wBAAwB,CAAA/F,IAAA;MAAAC,UAAA,EAFvB;IAAM;EAAA;;AAStB,OAAO,MAAM+F,6BAA6B,GAAGnM,GAAG;;;;;;;;;KAS3C;AAKH,OAAM,MAAOoM,wBAAyB,SAAQnM,MAAM,CAAC0F,KAAsE;EAGzHC,YAAYC,MAAqB;IAC/B,KAAK,CAACA,MAAM,CAAC;IAHf,KAAAC,QAAQ,GAAGqG,6BAA6B;EAIxC;;;uBALWC,wBAAwB,EAAArG,EAAA,CAAAC,QAAA,CAAAC,EAAA,CAAAhG,MAAA;IAAA;EAAA;;;aAAxBmM,wBAAwB;MAAAlG,OAAA,EAAxBkG,wBAAwB,CAAAjG,IAAA;MAAAC,UAAA,EAFvB;IAAM;EAAA;;AAStB,OAAO,MAAMiG,+BAA+B,GAAGrM,GAAG;;;;;;KAM7C;AAKH,OAAM,MAAOsM,0BAA2B,SAAQrM,MAAM,CAAC6G,QAAmF;EAGxIlB,YAAYC,MAAqB;IAC/B,KAAK,CAACA,MAAM,CAAC;IAHf,KAAAC,QAAQ,GAAGuG,+BAA+B;EAI1C;;;uBALWC,0BAA0B,EAAAvG,EAAA,CAAAC,QAAA,CAAAC,EAAA,CAAAhG,MAAA;IAAA;EAAA;;;aAA1BqM,0BAA0B;MAAApG,OAAA,EAA1BoG,0BAA0B,CAAAnG,IAAA;MAAAC,UAAA,EAFzB;IAAM;EAAA;;AAStB,OAAO,MAAMmG,+BAA+B,GAAGvM,GAAG;;;;;;KAM7C;AAKH,OAAM,MAAOwM,0BAA2B,SAAQvM,MAAM,CAAC6G,QAAmF;EAGxIlB,YAAYC,MAAqB;IAC/B,KAAK,CAACA,MAAM,CAAC;IAHf,KAAAC,QAAQ,GAAGyG,+BAA+B;EAI1C;;;uBALWC,0BAA0B,EAAAzG,EAAA,CAAAC,QAAA,CAAAC,EAAA,CAAAhG,MAAA;IAAA;EAAA;;;aAA1BuM,0BAA0B;MAAAtG,OAAA,EAA1BsG,0BAA0B,CAAArG,IAAA;MAAAC,UAAA,EAFzB;IAAM;EAAA;;AAStB,OAAO,MAAMqG,0BAA0B,GAAGzM,GAAG;;;;;;;;;;;;;;;;;KAiBxC;AAKH,OAAM,MAAO0M,qBAAsB,SAAQzM,MAAM,CAAC0F,KAAgE;EAGhHC,YAAYC,MAAqB;IAC/B,KAAK,CAACA,MAAM,CAAC;IAHf,KAAAC,QAAQ,GAAG2G,0BAA0B;EAIrC;;;uBALWC,qBAAqB,EAAA3G,EAAA,CAAAC,QAAA,CAAAC,EAAA,CAAAhG,MAAA;IAAA;EAAA;;;aAArByM,qBAAqB;MAAAxG,OAAA,EAArBwG,qBAAqB,CAAAvG,IAAA;MAAAC,UAAA,EAFpB;IAAM;EAAA;;AAStB,OAAO,MAAMuG,4BAA4B,GAAG3M,GAAG;;;;;;KAM1C;AAKH,OAAM,MAAO4M,uBAAwB,SAAQ3M,MAAM,CAAC6G,QAA6E;EAG/HlB,YAAYC,MAAqB;IAC/B,KAAK,CAACA,MAAM,CAAC;IAHf,KAAAC,QAAQ,GAAG6G,4BAA4B;EAIvC;;;uBALWC,uBAAuB,EAAA7G,EAAA,CAAAC,QAAA,CAAAC,EAAA,CAAAhG,MAAA;IAAA;EAAA;;;aAAvB2M,uBAAuB;MAAA1G,OAAA,EAAvB0G,uBAAuB,CAAAzG,IAAA;MAAAC,UAAA,EAFtB;IAAM;EAAA;;AAStB,OAAO,MAAMyG,4BAA4B,GAAG7M,GAAG;;;;;;KAM1C;AAKH,OAAM,MAAO8M,uBAAwB,SAAQ7M,MAAM,CAAC6G,QAA6E;EAG/HlB,YAAYC,MAAqB;IAC/B,KAAK,CAACA,MAAM,CAAC;IAHf,KAAAC,QAAQ,GAAG+G,4BAA4B;EAIvC;;;uBALWC,uBAAuB,EAAA/G,EAAA,CAAAC,QAAA,CAAAC,EAAA,CAAAhG,MAAA;IAAA;EAAA;;;aAAvB6M,uBAAuB;MAAA5G,OAAA,EAAvB4G,uBAAuB,CAAA3G,IAAA;MAAAC,UAAA,EAFtB;IAAM;EAAA;;AAStB,OAAO,MAAM2G,uBAAuB,GAAG/M,GAAG;;;;;;;;;;;;;;;KAerC;AAKH,OAAM,MAAOgN,kBAAmB,SAAQ/M,MAAM,CAAC0F,KAA0D;EAGvGC,YAAYC,MAAqB;IAC/B,KAAK,CAACA,MAAM,CAAC;IAHf,KAAAC,QAAQ,GAAGiH,uBAAuB;EAIlC;;;uBALWC,kBAAkB,EAAAjH,EAAA,CAAAC,QAAA,CAAAC,EAAA,CAAAhG,MAAA;IAAA;EAAA;;;aAAlB+M,kBAAkB;MAAA9G,OAAA,EAAlB8G,kBAAkB,CAAA7G,IAAA;MAAAC,UAAA,EAFjB;IAAM;EAAA;;AAStB,OAAO,MAAM6G,kBAAkB,GAAGjN,GAAG;;;;;;;;;;;;;;;;KAgBhC;AAKH,OAAM,MAAOkN,aAAc,SAAQjN,MAAM,CAAC0F,KAAgD;EAGxFC,YAAYC,MAAqB;IAC/B,KAAK,CAACA,MAAM,CAAC;IAHf,KAAAC,QAAQ,GAAGmH,kBAAkB;EAI7B;;;uBALWC,aAAa,EAAAnH,EAAA,CAAAC,QAAA,CAAAC,EAAA,CAAAhG,MAAA;IAAA;EAAA;;;aAAbiN,aAAa;MAAAhH,OAAA,EAAbgH,aAAa,CAAA/G,IAAA;MAAAC,UAAA,EAFZ;IAAM;EAAA;;AAStB,OAAO,MAAM+G,kBAAkB,GAAGnN,GAAG;;;;;;;;;;;;;KAahC;AAKH,OAAM,MAAOoN,aAAc,SAAQnN,MAAM,CAAC0F,KAAgD;EAGxFC,YAAYC,MAAqB;IAC/B,KAAK,CAACA,MAAM,CAAC;IAHf,KAAAC,QAAQ,GAAGqH,kBAAkB;EAI7B;;;uBALWC,aAAa,EAAArH,EAAA,CAAAC,QAAA,CAAAC,EAAA,CAAAhG,MAAA;IAAA;EAAA;;;aAAbmN,aAAa;MAAAlH,OAAA,EAAbkH,aAAa,CAAAjH,IAAA;MAAAC,UAAA,EAFZ;IAAM;EAAA;;AAStB,OAAO,MAAMiH,oBAAoB,GAAGrN,GAAG;;;;;;KAMlC;AAKH,OAAM,MAAOsN,eAAgB,SAAQrN,MAAM,CAAC6G,QAA6D;EAGvGlB,YAAYC,MAAqB;IAC/B,KAAK,CAACA,MAAM,CAAC;IAHf,KAAAC,QAAQ,GAAGuH,oBAAoB;EAI/B;;;uBALWC,eAAe,EAAAvH,EAAA,CAAAC,QAAA,CAAAC,EAAA,CAAAhG,MAAA;IAAA;EAAA;;;aAAfqN,eAAe;MAAApH,OAAA,EAAfoH,eAAe,CAAAnH,IAAA;MAAAC,UAAA,EAFd;IAAM;EAAA;;AAStB,OAAO,MAAMmH,oBAAoB,GAAGvN,GAAG;;;;;;KAMlC;AAKH,OAAM,MAAOwN,eAAgB,SAAQvN,MAAM,CAAC6G,QAA6D;EAGvGlB,YAAYC,MAAqB;IAC/B,KAAK,CAACA,MAAM,CAAC;IAHf,KAAAC,QAAQ,GAAGyH,oBAAoB;EAI/B;;;uBALWC,eAAe,EAAAzH,EAAA,CAAAC,QAAA,CAAAC,EAAA,CAAAhG,MAAA;IAAA;EAAA;;;aAAfuN,eAAe;MAAAtH,OAAA,EAAfsH,eAAe,CAAArH,IAAA;MAAAC,UAAA,EAFd;IAAM;EAAA;;AAStB,OAAO,MAAMqH,2BAA2B,GAAGzN,GAAG;;;;;;;;KAQzC;AAKH,OAAM,MAAO0N,sBAAuB,SAAQzN,MAAM,CAAC0F,KAAkE;EAGnHC,YAAYC,MAAqB;IAC/B,KAAK,CAACA,MAAM,CAAC;IAHf,KAAAC,QAAQ,GAAG2H,2BAA2B;EAItC;;;uBALWC,sBAAsB,EAAA3H,EAAA,CAAAC,QAAA,CAAAC,EAAA,CAAAhG,MAAA;IAAA;EAAA;;;aAAtByN,sBAAsB;MAAAxH,OAAA,EAAtBwH,sBAAsB,CAAAvH,IAAA;MAAAC,UAAA,EAFrB;IAAM;EAAA;;AAStB,OAAO,MAAMuH,6BAA6B,GAAG3N,GAAG;;;;;;KAM3C;AAKH,OAAM,MAAO4N,wBAAyB,SAAQ3N,MAAM,CAAC6G,QAA+E;EAGlIlB,YAAYC,MAAqB;IAC/B,KAAK,CAACA,MAAM,CAAC;IAHf,KAAAC,QAAQ,GAAG6H,6BAA6B;EAIxC;;;uBALWC,wBAAwB,EAAA7H,EAAA,CAAAC,QAAA,CAAAC,EAAA,CAAAhG,MAAA;IAAA;EAAA;;;aAAxB2N,wBAAwB;MAAA1H,OAAA,EAAxB0H,wBAAwB,CAAAzH,IAAA;MAAAC,UAAA,EAFvB;IAAM;EAAA;;AAStB,OAAO,MAAMyH,6BAA6B,GAAG7N,GAAG;;;;;;KAM3C;AAKH,OAAM,MAAO8N,wBAAyB,SAAQ7N,MAAM,CAAC6G,QAA+E;EAGlIlB,YAAYC,MAAqB;IAC/B,KAAK,CAACA,MAAM,CAAC;IAHf,KAAAC,QAAQ,GAAG+H,6BAA6B;EAIxC;;;uBALWC,wBAAwB,EAAA/H,EAAA,CAAAC,QAAA,CAAAC,EAAA,CAAAhG,MAAA;IAAA;EAAA;;;aAAxB6N,wBAAwB;MAAA5H,OAAA,EAAxB4H,wBAAwB,CAAA3H,IAAA;MAAAC,UAAA,EAFvB;IAAM;EAAA;;AAStB,OAAO,MAAM2H,4BAA4B,GAAG/N,GAAG;;;;;;;;KAQ1C;AAKH,OAAM,MAAOgO,uBAAwB,SAAQ/N,MAAM,CAAC0F,KAAoE;EAGtHC,YAAYC,MAAqB;IAC/B,KAAK,CAACA,MAAM,CAAC;IAHf,KAAAC,QAAQ,GAAGiI,4BAA4B;EAIvC;;;uBALWC,uBAAuB,EAAAjI,EAAA,CAAAC,QAAA,CAAAC,EAAA,CAAAhG,MAAA;IAAA;EAAA;;;aAAvB+N,uBAAuB;MAAA9H,OAAA,EAAvB8H,uBAAuB,CAAA7H,IAAA;MAAAC,UAAA,EAFtB;IAAM;EAAA;;AAStB,OAAO,MAAM6H,aAAa,GAAGjO,GAAG;;;;;;;KAO3B;AAKH,OAAM,MAAOkO,QAAS,SAAQjO,MAAM,CAAC0F,KAAsC;EAGzEC,YAAYC,MAAqB;IAC/B,KAAK,CAACA,MAAM,CAAC;IAHf,KAAAC,QAAQ,GAAGmI,aAAa;EAIxB;;;uBALWC,QAAQ,EAAAnI,EAAA,CAAAC,QAAA,CAAAC,EAAA,CAAAhG,MAAA;IAAA;EAAA;;;aAARiO,QAAQ;MAAAhI,OAAA,EAARgI,QAAQ,CAAA/H,IAAA;MAAAC,UAAA,EAFP;IAAM;EAAA;;AAStB,OAAO,MAAM+H,YAAY,GAAGnO,GAAG;;;;;;;;KAQ1B;AAKH,OAAM,MAAOoO,OAAQ,SAAQnO,MAAM,CAAC0F,KAAoC;EAGtEC,YAAYC,MAAqB;IAC/B,KAAK,CAACA,MAAM,CAAC;IAHf,KAAAC,QAAQ,GAAGqI,YAAY;EAIvB;;;uBALWC,OAAO,EAAArI,EAAA,CAAAC,QAAA,CAAAC,EAAA,CAAAhG,MAAA;IAAA;EAAA;;;aAAPmO,OAAO;MAAAlI,OAAA,EAAPkI,OAAO,CAAAjI,IAAA;MAAAC,UAAA,EAFN;IAAM;EAAA;;AAStB,OAAO,MAAMiI,kBAAkB,GAAGrO,GAAG;;;;;;;;KAQhC;AAKH,OAAM,MAAOsO,aAAc,SAAQrO,MAAM,CAAC6G,QAAyD;EAGjGlB,YAAYC,MAAqB;IAC/B,KAAK,CAACA,MAAM,CAAC;IAHf,KAAAC,QAAQ,GAAGuI,kBAAkB;EAI7B;;;uBALWC,aAAa,EAAAvI,EAAA,CAAAC,QAAA,CAAAC,EAAA,CAAAhG,MAAA;IAAA;EAAA;;;aAAbqO,aAAa;MAAApI,OAAA,EAAboI,aAAa,CAAAnI,IAAA;MAAAC,UAAA,EAFZ;IAAM;EAAA;;AAStB,OAAO,MAAMmI,kBAAkB,GAAGvO,GAAG;;;;;;KAMhC;AAKH,OAAM,MAAOwO,aAAc,SAAQvO,MAAM,CAAC6G,QAAyD;EAGjGlB,YAAYC,MAAqB;IAC/B,KAAK,CAACA,MAAM,CAAC;IAHf,KAAAC,QAAQ,GAAGyI,kBAAkB;EAI7B;;;uBALWC,aAAa,EAAAzI,EAAA,CAAAC,QAAA,CAAAC,EAAA,CAAAhG,MAAA;IAAA;EAAA;;;aAAbuO,aAAa;MAAAtI,OAAA,EAAbsI,aAAa,CAAArI,IAAA;MAAAC,UAAA,EAFZ;IAAM;EAAA;;AAStB,OAAO,MAAMqI,yBAAyB,GAAGzO,GAAG;;;;;;;;;;KAUvC;AAKH,OAAM,MAAO0O,oBAAqB,SAAQzO,MAAM,CAAC0F,KAA8D;EAG7GC,YAAYC,MAAqB;IAC/B,KAAK,CAACA,MAAM,CAAC;IAHf,KAAAC,QAAQ,GAAG2I,yBAAyB;EAIpC;;;uBALWC,oBAAoB,EAAA3I,EAAA,CAAAC,QAAA,CAAAC,EAAA,CAAAhG,MAAA;IAAA;EAAA;;;aAApByO,oBAAoB;MAAAxI,OAAA,EAApBwI,oBAAoB,CAAAvI,IAAA;MAAAC,UAAA,EAFnB;IAAM;EAAA;;AAStB,OAAO,MAAMuI,2BAA2B,GAAG3O,GAAG;;;;;;KAMzC;AAKH,OAAM,MAAO4O,sBAAuB,SAAQ3O,MAAM,CAAC6G,QAA2E;EAG5HlB,YAAYC,MAAqB;IAC/B,KAAK,CAACA,MAAM,CAAC;IAHf,KAAAC,QAAQ,GAAG6I,2BAA2B;EAItC;;;uBALWC,sBAAsB,EAAA7I,EAAA,CAAAC,QAAA,CAAAC,EAAA,CAAAhG,MAAA;IAAA;EAAA;;;aAAtB2O,sBAAsB;MAAA1I,OAAA,EAAtB0I,sBAAsB,CAAAzI,IAAA;MAAAC,UAAA,EAFrB;IAAM;EAAA;;AAStB,OAAO,MAAMyI,2BAA2B,GAAG7O,GAAG;;;;;;KAMzC;AAKH,OAAM,MAAO8O,sBAAuB,SAAQ7O,MAAM,CAAC6G,QAA2E;EAG5HlB,YAAYC,MAAqB;IAC/B,KAAK,CAACA,MAAM,CAAC;IAHf,KAAAC,QAAQ,GAAG+I,2BAA2B;EAItC;;;uBALWC,sBAAsB,EAAA/I,EAAA,CAAAC,QAAA,CAAAC,EAAA,CAAAhG,MAAA;IAAA;EAAA;;;aAAtB6O,sBAAsB;MAAA5I,OAAA,EAAtB4I,sBAAsB,CAAA3I,IAAA;MAAAC,UAAA,EAFrB;IAAM;EAAA;;AAStB,OAAO,MAAM2I,0BAA0B,GAAG/O,GAAG;;;;;;;;;;KAUxC;AAKH,OAAM,MAAOgP,qBAAsB,SAAQ/O,MAAM,CAAC0F,KAAgE;EAGhHC,YAAYC,MAAqB;IAC/B,KAAK,CAACA,MAAM,CAAC;IAHf,KAAAC,QAAQ,GAAGiJ,0BAA0B;EAIrC;;;uBALWC,qBAAqB,EAAAjJ,EAAA,CAAAC,QAAA,CAAAC,EAAA,CAAAhG,MAAA;IAAA;EAAA;;;aAArB+O,qBAAqB;MAAA9I,OAAA,EAArB8I,qBAAqB,CAAA7I,IAAA;MAAAC,UAAA,EAFpB;IAAM;EAAA;;AAStB,OAAO,MAAM6I,2BAA2B,GAAGjP,GAAG;;;;;;;KAOzC;AAKH,OAAM,MAAOkP,sBAAuB,SAAQjP,MAAM,CAAC0F,KAAkE;EAGnHC,YAAYC,MAAqB;IAC/B,KAAK,CAACA,MAAM,CAAC;IAHf,KAAAC,QAAQ,GAAGmJ,2BAA2B;EAItC;;;uBALWC,sBAAsB,EAAAnJ,EAAA,CAAAC,QAAA,CAAAC,EAAA,CAAAhG,MAAA;IAAA;EAAA;;;aAAtBiP,sBAAsB;MAAAhJ,OAAA,EAAtBgJ,sBAAsB,CAAA/I,IAAA;MAAAC,UAAA,EAFrB;IAAM;EAAA;;AAStB,OAAO,MAAM+I,6BAA6B,GAAGnP,GAAG;;;;;;KAM3C;AAKH,OAAM,MAAOoP,wBAAyB,SAAQnP,MAAM,CAAC6G,QAA+E;EAGlIlB,YAAYC,MAAqB;IAC/B,KAAK,CAACA,MAAM,CAAC;IAHf,KAAAC,QAAQ,GAAGqJ,6BAA6B;EAIxC;;;uBALWC,wBAAwB,EAAArJ,EAAA,CAAAC,QAAA,CAAAC,EAAA,CAAAhG,MAAA;IAAA;EAAA;;;aAAxBmP,wBAAwB;MAAAlJ,OAAA,EAAxBkJ,wBAAwB,CAAAjJ,IAAA;MAAAC,UAAA,EAFvB;IAAM;EAAA;;AAStB,OAAO,MAAMiJ,6BAA6B,GAAGrP,GAAG;;;;;;KAM3C;AAKH,OAAM,MAAOsP,wBAAyB,SAAQrP,MAAM,CAAC6G,QAA+E;EAGlIlB,YAAYC,MAAqB;IAC/B,KAAK,CAACA,MAAM,CAAC;IAHf,KAAAC,QAAQ,GAAGuJ,6BAA6B;EAIxC;;;uBALWC,wBAAwB,EAAAvJ,EAAA,CAAAC,QAAA,CAAAC,EAAA,CAAAhG,MAAA;IAAA;EAAA;;;aAAxBqP,wBAAwB;MAAApJ,OAAA,EAAxBoJ,wBAAwB,CAAAnJ,IAAA;MAAAC,UAAA,EAFvB;IAAM;EAAA;;AAStB,OAAO,MAAMmJ,6BAA6B,GAAGvP,GAAG;;;;;;KAM3C;AAKH,OAAM,MAAOwP,wBAAyB,SAAQvP,MAAM,CAAC6G,QAA+E;EAGlIlB,YAAYC,MAAqB;IAC/B,KAAK,CAACA,MAAM,CAAC;IAHf,KAAAC,QAAQ,GAAGyJ,6BAA6B;EAIxC;;;uBALWC,wBAAwB,EAAAzJ,EAAA,CAAAC,QAAA,CAAAC,EAAA,CAAAhG,MAAA;IAAA;EAAA;;;aAAxBuP,wBAAwB;MAAAtJ,OAAA,EAAxBsJ,wBAAwB,CAAArJ,IAAA;MAAAC,UAAA,EAFvB;IAAM;EAAA;;AAStB,OAAO,MAAMqJ,oBAAoB,GAAGzP,GAAG;;;;;;;;;;;;;;;KAelC;AAKH,OAAM,MAAO0P,eAAgB,SAAQzP,MAAM,CAAC0F,KAAoD;EAG9FC,YAAYC,MAAqB;IAC/B,KAAK,CAACA,MAAM,CAAC;IAHf,KAAAC,QAAQ,GAAG2J,oBAAoB;EAI/B;;;uBALWC,eAAe,EAAA3J,EAAA,CAAAC,QAAA,CAAAC,EAAA,CAAAhG,MAAA;IAAA;EAAA;;;aAAfyP,eAAe;MAAAxJ,OAAA,EAAfwJ,eAAe,CAAAvJ,IAAA;MAAAC,UAAA,EAFd;IAAM;EAAA;;AAStB,OAAO,MAAMuJ,mBAAmB,GAAG3P,GAAG;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;KA8EjC;AAKH,OAAM,MAAO4P,cAAe,SAAQ3P,MAAM,CAAC0F,KAAkD;EAG3FC,YAAYC,MAAqB;IAC/B,KAAK,CAACA,MAAM,CAAC;IAHf,KAAAC,QAAQ,GAAG6J,mBAAmB;EAI9B;;;uBALWC,cAAc,EAAA7J,EAAA,CAAAC,QAAA,CAAAC,EAAA,CAAAhG,MAAA;IAAA;EAAA;;;aAAd2P,cAAc;MAAA1J,OAAA,EAAd0J,cAAc,CAAAzJ,IAAA;MAAAC,UAAA,EAFb;IAAM;EAAA;;AAStB,OAAO,MAAMyJ,kBAAkB,GAAG7P,GAAG;;;;;;;;;;;;;;;;;;;;;KAqBhC;AAKH,OAAM,MAAO8P,aAAc,SAAQ7P,MAAM,CAAC0F,KAAgD;EAGxFC,YAAYC,MAAqB;IAC/B,KAAK,CAACA,MAAM,CAAC;IAHf,KAAAC,QAAQ,GAAG+J,kBAAkB;EAI7B;;;uBALWC,aAAa,EAAA/J,EAAA,CAAAC,QAAA,CAAAC,EAAA,CAAAhG,MAAA;IAAA;EAAA;;;aAAb6P,aAAa;MAAA5J,OAAA,EAAb4J,aAAa,CAAA3J,IAAA;MAAAC,UAAA,EAFZ;IAAM;EAAA;;AAStB,OAAO,MAAM2J,qBAAqB,GAAG/P,GAAG;;;;;;KAMnC;AAKH,OAAM,MAAOgQ,gBAAiB,SAAQ/P,MAAM,CAAC6G,QAA+D;EAG1GlB,YAAYC,MAAqB;IAC/B,KAAK,CAACA,MAAM,CAAC;IAHf,KAAAC,QAAQ,GAAGiK,qBAAqB;EAIhC;;;uBALWC,gBAAgB,EAAAjK,EAAA,CAAAC,QAAA,CAAAC,EAAA,CAAAhG,MAAA;IAAA;EAAA;;;aAAhB+P,gBAAgB;MAAA9J,OAAA,EAAhB8J,gBAAgB,CAAA7J,IAAA;MAAAC,UAAA,EAFf;IAAM;EAAA;;AAStB,OAAO,MAAM6J,qBAAqB,GAAGjQ,GAAG;;;;;;KAMnC;AAKH,OAAM,MAAOkQ,gBAAiB,SAAQjQ,MAAM,CAAC6G,QAA+D;EAG1GlB,YAAYC,MAAqB;IAC/B,KAAK,CAACA,MAAM,CAAC;IAHf,KAAAC,QAAQ,GAAGmK,qBAAqB;EAIhC;;;uBALWC,gBAAgB,EAAAnK,EAAA,CAAAC,QAAA,CAAAC,EAAA,CAAAhG,MAAA;IAAA;EAAA;;;aAAhBiQ,gBAAgB;MAAAhK,OAAA,EAAhBgK,gBAAgB,CAAA/J,IAAA;MAAAC,UAAA,EAFf;IAAM;EAAA;;AAStB,OAAO,MAAM+J,qBAAqB,GAAGnQ,GAAG;;;;;;KAMnC;AAKH,OAAM,MAAOoQ,gBAAiB,SAAQnQ,MAAM,CAAC6G,QAA+D;EAG1GlB,YAAYC,MAAqB;IAC/B,KAAK,CAACA,MAAM,CAAC;IAHf,KAAAC,QAAQ,GAAGqK,qBAAqB;EAIhC;;;uBALWC,gBAAgB,EAAArK,EAAA,CAAAC,QAAA,CAAAC,EAAA,CAAAhG,MAAA;IAAA;EAAA;;;aAAhBmQ,gBAAgB;MAAAlK,OAAA,EAAhBkK,gBAAgB,CAAAjK,IAAA;MAAAC,UAAA,EAFf;IAAM;EAAA;;AAStB,OAAO,MAAMiK,2BAA2B,GAAGrQ,GAAG;;;;;;KAMzC;AAKH,OAAM,MAAOsQ,sBAAuB,SAAQrQ,MAAM,CAAC6G,QAA2E;EAG5HlB,YAAYC,MAAqB;IAC/B,KAAK,CAACA,MAAM,CAAC;IAHf,KAAAC,QAAQ,GAAGuK,2BAA2B;EAItC;;;uBALWC,sBAAsB,EAAAvK,EAAA,CAAAC,QAAA,CAAAC,EAAA,CAAAhG,MAAA;IAAA;EAAA;;;aAAtBqQ,sBAAsB;MAAApK,OAAA,EAAtBoK,sBAAsB,CAAAnK,IAAA;MAAAC,UAAA,EAFrB;IAAM;EAAA;;AAStB,OAAO,MAAMmK,2BAA2B,GAAGvQ,GAAG;;;;;;KAMzC;AAKH,OAAM,MAAOwQ,sBAAuB,SAAQvQ,MAAM,CAAC6G,QAA2E;EAG5HlB,YAAYC,MAAqB;IAC/B,KAAK,CAACA,MAAM,CAAC;IAHf,KAAAC,QAAQ,GAAGyK,2BAA2B;EAItC;;;uBALWC,sBAAsB,EAAAzK,EAAA,CAAAC,QAAA,CAAAC,EAAA,CAAAhG,MAAA;IAAA;EAAA;;;aAAtBuQ,sBAAsB;MAAAtK,OAAA,EAAtBsK,sBAAsB,CAAArK,IAAA;MAAAC,UAAA,EAFrB;IAAM;EAAA;;AAStB,OAAO,MAAMqK,sBAAsB,GAAGzQ,GAAG;;;;;;KAMpC;AAKH,OAAM,MAAO0Q,iBAAkB,SAAQzQ,MAAM,CAAC6G,QAAiE;EAG7GlB,YAAYC,MAAqB;IAC/B,KAAK,CAACA,MAAM,CAAC;IAHf,KAAAC,QAAQ,GAAG2K,sBAAsB;EAIjC;;;uBALWC,iBAAiB,EAAA3K,EAAA,CAAAC,QAAA,CAAAC,EAAA,CAAAhG,MAAA;IAAA;EAAA;;;aAAjByQ,iBAAiB;MAAAxK,OAAA,EAAjBwK,iBAAiB,CAAAvK,IAAA;MAAAC,UAAA,EAFhB;IAAM;EAAA;;AAStB,OAAO,MAAMuK,wBAAwB,GAAG3Q,GAAG;;;;;;;;;;KAUtC;AAKH,OAAM,MAAO4Q,mBAAoB,SAAQ3Q,MAAM,CAAC0F,KAA4D;EAG1GC,YAAYC,MAAqB;IAC/B,KAAK,CAACA,MAAM,CAAC;IAHf,KAAAC,QAAQ,GAAG6K,wBAAwB;EAInC;;;uBALWC,mBAAmB,EAAA7K,EAAA,CAAAC,QAAA,CAAAC,EAAA,CAAAhG,MAAA;IAAA;EAAA;;;aAAnB2Q,mBAAmB;MAAA1K,OAAA,EAAnB0K,mBAAmB,CAAAzK,IAAA;MAAAC,UAAA,EAFlB;IAAM;EAAA;;AAStB,OAAO,MAAMyK,oBAAoB,GAAG7Q,GAAG;;;;;;;;;;KAUlC;AAKH,OAAM,MAAO8Q,eAAgB,SAAQ7Q,MAAM,CAAC6G,QAA6D;EAGvGlB,YAAYC,MAAqB;IAC/B,KAAK,CAACA,MAAM,CAAC;IAHf,KAAAC,QAAQ,GAAG+K,oBAAoB;EAI/B;;;uBALWC,eAAe,EAAA/K,EAAA,CAAAC,QAAA,CAAAC,EAAA,CAAAhG,MAAA;IAAA;EAAA;;;aAAf6Q,eAAe;MAAA5K,OAAA,EAAf4K,eAAe,CAAA3K,IAAA;MAAAC,UAAA,EAFd;IAAM;EAAA;;AAStB,OAAO,MAAM2K,oBAAoB,GAAG/Q,GAAG;;;;;;;;;;;;KAYlC;AAKH,OAAM,MAAOgR,eAAgB,SAAQ/Q,MAAM,CAAC0F,KAAoD;EAG9FC,YAAYC,MAAqB;IAC/B,KAAK,CAACA,MAAM,CAAC;IAHf,KAAAC,QAAQ,GAAGiL,oBAAoB;EAI/B;;;uBALWC,eAAe,EAAAjL,EAAA,CAAAC,QAAA,CAAAC,EAAA,CAAAhG,MAAA;IAAA;EAAA;;;aAAf+Q,eAAe;MAAA9K,OAAA,EAAf8K,eAAe,CAAA7K,IAAA;MAAAC,UAAA,EAFd;IAAM;EAAA;;AAStB,OAAO,MAAM6K,uBAAuB,GAAGjR,GAAG;;;;;;;;;;;;;;KAcrC;AAKH,OAAM,MAAOkR,kBAAmB,SAAQjR,MAAM,CAAC0F,KAA0D;EAGvGC,YAAYC,MAAqB;IAC/B,KAAK,CAACA,MAAM,CAAC;IAHf,KAAAC,QAAQ,GAAGmL,uBAAuB;EAIlC;;;uBALWC,kBAAkB,EAAAnL,EAAA,CAAAC,QAAA,CAAAC,EAAA,CAAAhG,MAAA;IAAA;EAAA;;;aAAlBiR,kBAAkB;MAAAhL,OAAA,EAAlBgL,kBAAkB,CAAA/K,IAAA;MAAAC,UAAA,EAFjB;IAAM;EAAA;;AAStB,OAAO,MAAM+K,yBAAyB,GAAGnR,GAAG;;;;;;KAMvC;AAKH,OAAM,MAAOoR,oBAAqB,SAAQnR,MAAM,CAAC6G,QAAuE;EAGtHlB,YAAYC,MAAqB;IAC/B,KAAK,CAACA,MAAM,CAAC;IAHf,KAAAC,QAAQ,GAAGqL,yBAAyB;EAIpC;;;uBALWC,oBAAoB,EAAArL,EAAA,CAAAC,QAAA,CAAAC,EAAA,CAAAhG,MAAA;IAAA;EAAA;;;aAApBmR,oBAAoB;MAAAlL,OAAA,EAApBkL,oBAAoB,CAAAjL,IAAA;MAAAC,UAAA,EAFnB;IAAM;EAAA;;AAStB,OAAO,MAAMiL,yBAAyB,GAAGrR,GAAG;;;;;;KAMvC;AAKH,OAAM,MAAOsR,oBAAqB,SAAQrR,MAAM,CAAC6G,QAAuE;EAGtHlB,YAAYC,MAAqB;IAC/B,KAAK,CAACA,MAAM,CAAC;IAHf,KAAAC,QAAQ,GAAGuL,yBAAyB;EAIpC;;;uBALWC,oBAAoB,EAAAvL,EAAA,CAAAC,QAAA,CAAAC,EAAA,CAAAhG,MAAA;IAAA;EAAA;;;aAApBqR,oBAAoB;MAAApL,OAAA,EAApBoL,oBAAoB,CAAAnL,IAAA;MAAAC,UAAA,EAFnB;IAAM;EAAA;;AAStB,OAAO,MAAMmL,gCAAgC,GAAGvR,GAAG;;;;;;KAM9C;AAKH,OAAM,MAAOwR,2BAA4B,SAAQvR,MAAM,CAAC6G,QAAqF;EAG3IlB,YAAYC,MAAqB;IAC/B,KAAK,CAACA,MAAM,CAAC;IAHf,KAAAC,QAAQ,GAAGyL,gCAAgC;EAI3C;;;uBALWC,2BAA2B,EAAAzL,EAAA,CAAAC,QAAA,CAAAC,EAAA,CAAAhG,MAAA;IAAA;EAAA;;;aAA3BuR,2BAA2B;MAAAtL,OAAA,EAA3BsL,2BAA2B,CAAArL,IAAA;MAAAC,UAAA,EAF1B;IAAM;EAAA;;AAStB,OAAO,MAAMqL,sBAAsB,GAAGzR,GAAG;;;;;;KAMpC;AAKH,OAAM,MAAO0R,iBAAkB,SAAQzR,MAAM,CAAC6G,QAAiE;EAG7GlB,YAAYC,MAAqB;IAC/B,KAAK,CAACA,MAAM,CAAC;IAHf,KAAAC,QAAQ,GAAG2L,sBAAsB;EAIjC;;;uBALWC,iBAAiB,EAAA3L,EAAA,CAAAC,QAAA,CAAAC,EAAA,CAAAhG,MAAA;IAAA;EAAA;;;aAAjByR,iBAAiB;MAAAxL,OAAA,EAAjBwL,iBAAiB,CAAAvL,IAAA;MAAAC,UAAA,EAFhB;IAAM;EAAA;;AAStB,OAAO,MAAMuL,oBAAoB,GAAG3R,GAAG;;;;;;;;;;;;;;;;KAgBlC;AAKH,OAAM,MAAO4R,eAAgB,SAAQ3R,MAAM,CAAC0F,KAAoD;EAG9FC,YAAYC,MAAqB;IAC/B,KAAK,CAACA,MAAM,CAAC;IAHf,KAAAC,QAAQ,GAAG6L,oBAAoB;EAI/B;;;uBALWC,eAAe,EAAA7L,EAAA,CAAAC,QAAA,CAAAC,EAAA,CAAAhG,MAAA;IAAA;EAAA;;;aAAf2R,eAAe;MAAA1L,OAAA,EAAf0L,eAAe,CAAAzL,IAAA;MAAAC,UAAA,EAFd;IAAM;EAAA;;AAStB,OAAO,MAAMyL,mBAAmB,GAAG7R,GAAG;;;;;;;KAOjC;AAKH,OAAM,MAAO8R,cAAe,SAAQ7R,MAAM,CAAC0F,KAAkD;EAG3FC,YAAYC,MAAqB;IAC/B,KAAK,CAACA,MAAM,CAAC;IAHf,KAAAC,QAAQ,GAAG+L,mBAAmB;EAI9B;;;uBALWC,cAAc,EAAA/L,EAAA,CAAAC,QAAA,CAAAC,EAAA,CAAAhG,MAAA;IAAA;EAAA;;;aAAd6R,cAAc;MAAA5L,OAAA,EAAd4L,cAAc,CAAA3L,IAAA;MAAAC,UAAA,EAFb;IAAM;EAAA;;AAStB,OAAO,MAAM2L,sBAAsB,GAAG/R,GAAG;;;;;;KAMpC;AAKH,OAAM,MAAOgS,iBAAkB,SAAQ/R,MAAM,CAAC6G,QAAiE;EAG7GlB,YAAYC,MAAqB;IAC/B,KAAK,CAACA,MAAM,CAAC;IAHf,KAAAC,QAAQ,GAAGiM,sBAAsB;EAIjC;;;uBALWC,iBAAiB,EAAAjM,EAAA,CAAAC,QAAA,CAAAC,EAAA,CAAAhG,MAAA;IAAA;EAAA;;;aAAjB+R,iBAAiB;MAAA9L,OAAA,EAAjB8L,iBAAiB,CAAA7L,IAAA;MAAAC,UAAA,EAFhB;IAAM;EAAA;;AAStB,OAAO,MAAM6L,iBAAiB,GAAGjS,GAAG;;;;;;;;;;;;;;;KAe/B;AAKH,OAAM,MAAOkS,YAAa,SAAQjS,MAAM,CAAC0F,KAA8C;EAGrFC,YAAYC,MAAqB;IAC/B,KAAK,CAACA,MAAM,CAAC;IAHf,KAAAC,QAAQ,GAAGmM,iBAAiB;EAI5B;;;uBALWC,YAAY,EAAAnM,EAAA,CAAAC,QAAA,CAAAC,EAAA,CAAAhG,MAAA;IAAA;EAAA;;;aAAZiS,YAAY;MAAAhM,OAAA,EAAZgM,YAAY,CAAA/L,IAAA;MAAAC,UAAA,EAFX;IAAM;EAAA;;AAStB,OAAO,MAAM+L,qBAAqB,GAAGnS,GAAG;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;KAqCnC;AAKH,OAAM,MAAOoS,gBAAiB,SAAQnS,MAAM,CAAC0F,KAAsD;EAGjGC,YAAYC,MAAqB;IAC/B,KAAK,CAACA,MAAM,CAAC;IAHf,KAAAC,QAAQ,GAAGqM,qBAAqB;EAIhC;;;uBALWC,gBAAgB,EAAArM,EAAA,CAAAC,QAAA,CAAAC,EAAA,CAAAhG,MAAA;IAAA;EAAA;;;aAAhBmS,gBAAgB;MAAAlM,OAAA,EAAhBkM,gBAAgB,CAAAjM,IAAA;MAAAC,UAAA,EAFf;IAAM;EAAA;;AAStB,OAAO,MAAMiM,oBAAoB,GAAGrS,GAAG;;;;;;;;;;;;;KAalC;AAKH,OAAM,MAAOsS,eAAgB,SAAQrS,MAAM,CAAC0F,KAAoD;EAG9FC,YAAYC,MAAqB;IAC/B,KAAK,CAACA,MAAM,CAAC;IAHf,KAAAC,QAAQ,GAAGuM,oBAAoB;EAI/B;;;uBALWC,eAAe,EAAAvM,EAAA,CAAAC,QAAA,CAAAC,EAAA,CAAAhG,MAAA;IAAA;EAAA;;;aAAfqS,eAAe;MAAApM,OAAA,EAAfoM,eAAe,CAAAnM,IAAA;MAAAC,UAAA,EAFd;IAAM;EAAA;;AAStB,OAAO,MAAMmM,uBAAuB,GAAGvS,GAAG;;;;;;KAMrC;AAKH,OAAM,MAAOwS,kBAAmB,SAAQvS,MAAM,CAAC6G,QAAmE;EAGhHlB,YAAYC,MAAqB;IAC/B,KAAK,CAACA,MAAM,CAAC;IAHf,KAAAC,QAAQ,GAAGyM,uBAAuB;EAIlC;;;uBALWC,kBAAkB,EAAAzM,EAAA,CAAAC,QAAA,CAAAC,EAAA,CAAAhG,MAAA;IAAA;EAAA;;;aAAlBuS,kBAAkB;MAAAtM,OAAA,EAAlBsM,kBAAkB,CAAArM,IAAA;MAAAC,UAAA,EAFjB;IAAM;EAAA;;AAStB,OAAO,MAAMqM,uBAAuB,GAAGzS,GAAG;;;;;;KAMrC;AAKH,OAAM,MAAO0S,kBAAmB,SAAQzS,MAAM,CAAC6G,QAAmE;EAGhHlB,YAAYC,MAAqB;IAC/B,KAAK,CAACA,MAAM,CAAC;IAHf,KAAAC,QAAQ,GAAG2M,uBAAuB;EAIlC;;;uBALWC,kBAAkB,EAAA3M,EAAA,CAAAC,QAAA,CAAAC,EAAA,CAAAhG,MAAA;IAAA;EAAA;;;aAAlByS,kBAAkB;MAAAxM,OAAA,EAAlBwM,kBAAkB,CAAAvM,IAAA;MAAAC,UAAA,EAFjB;IAAM;EAAA;;AAStB,OAAO,MAAMuM,uBAAuB,GAAG3S,GAAG;;;;;;KAMrC;AAKH,OAAM,MAAO4S,kBAAmB,SAAQ3S,MAAM,CAAC6G,QAAmE;EAGhHlB,YAAYC,MAAqB;IAC/B,KAAK,CAACA,MAAM,CAAC;IAHf,KAAAC,QAAQ,GAAG6M,uBAAuB;EAIlC;;;uBALWC,kBAAkB,EAAA7M,EAAA,CAAAC,QAAA,CAAAC,EAAA,CAAAhG,MAAA;IAAA;EAAA;;;aAAlB2S,kBAAkB;MAAA1M,OAAA,EAAlB0M,kBAAkB,CAAAzM,IAAA;MAAAC,UAAA,EAFjB;IAAM;EAAA;;AAStB,OAAO,MAAMyM,6BAA6B,GAAG7S,GAAG;;;;;;;;;KAS3C;AAKH,OAAM,MAAO8S,wBAAyB,SAAQ7S,MAAM,CAAC6G,QAA+E;EAGlIlB,YAAYC,MAAqB;IAC/B,KAAK,CAACA,MAAM,CAAC;IAHf,KAAAC,QAAQ,GAAG+M,6BAA6B;EAIxC;;;uBALWC,wBAAwB,EAAA/M,EAAA,CAAAC,QAAA,CAAAC,EAAA,CAAAhG,MAAA;IAAA;EAAA;;;aAAxB6S,wBAAwB;MAAA5M,OAAA,EAAxB4M,wBAAwB,CAAA3M,IAAA;MAAAC,UAAA,EAFvB;IAAM;EAAA;;AAStB,OAAO,MAAM2M,sBAAsB,GAAG/S,GAAG;;;;;;;;;;KAUpC;AAKH,OAAM,MAAOgT,iBAAkB,SAAQ/S,MAAM,CAAC0F,KAAwD;EAGpGC,YAAYC,MAAqB;IAC/B,KAAK,CAACA,MAAM,CAAC;IAHf,KAAAC,QAAQ,GAAGiN,sBAAsB;EAIjC;;;uBALWC,iBAAiB,EAAAjN,EAAA,CAAAC,QAAA,CAAAC,EAAA,CAAAhG,MAAA;IAAA;EAAA;;;aAAjB+S,iBAAiB;MAAA9M,OAAA,EAAjB8M,iBAAiB,CAAA7M,IAAA;MAAAC,UAAA,EAFhB;IAAM;EAAA;;AAStB,OAAO,MAAM6M,wBAAwB,GAAGjT,GAAG;;;;;;;;;;;;KAYtC;AAKH,OAAM,MAAOkT,mBAAoB,SAAQjT,MAAM,CAAC0F,KAA4D;EAG1GC,YAAYC,MAAqB;IAC/B,KAAK,CAACA,MAAM,CAAC;IAHf,KAAAC,QAAQ,GAAGmN,wBAAwB;EAInC;;;uBALWC,mBAAmB,EAAAnN,EAAA,CAAAC,QAAA,CAAAC,EAAA,CAAAhG,MAAA;IAAA;EAAA;;;aAAnBiT,mBAAmB;MAAAhN,OAAA,EAAnBgN,mBAAmB,CAAA/M,IAAA;MAAAC,UAAA,EAFlB;IAAM;EAAA;;AAStB,OAAO,MAAM+M,0BAA0B,GAAGnT,GAAG;;;;;;KAMxC;AAKH,OAAM,MAAOoT,qBAAsB,SAAQnT,MAAM,CAAC6G,QAAyE;EAGzHlB,YAAYC,MAAqB;IAC/B,KAAK,CAACA,MAAM,CAAC;IAHf,KAAAC,QAAQ,GAAGqN,0BAA0B;EAIrC;;;uBALWC,qBAAqB,EAAArN,EAAA,CAAAC,QAAA,CAAAC,EAAA,CAAAhG,MAAA;IAAA;EAAA;;;aAArBmT,qBAAqB;MAAAlN,OAAA,EAArBkN,qBAAqB,CAAAjN,IAAA;MAAAC,UAAA,EAFpB;IAAM;EAAA;;AAStB,OAAO,MAAMiN,0BAA0B,GAAGrT,GAAG;;;;;;KAMxC;AAKH,OAAM,MAAOsT,qBAAsB,SAAQrT,MAAM,CAAC6G,QAAyE;EAGzHlB,YAAYC,MAAqB;IAC/B,KAAK,CAACA,MAAM,CAAC;IAHf,KAAAC,QAAQ,GAAGuN,0BAA0B;EAIrC;;;uBALWC,qBAAqB,EAAAvN,EAAA,CAAAC,QAAA,CAAAC,EAAA,CAAAhG,MAAA;IAAA;EAAA;;;aAArBqT,qBAAqB;MAAApN,OAAA,EAArBoN,qBAAqB,CAAAnN,IAAA;MAAAC,UAAA,EAFpB;IAAM;EAAA;;AAStB,OAAO,MAAMmN,0BAA0B,GAAGvT,GAAG;;;;;;KAMxC;AAKH,OAAM,MAAOwT,qBAAsB,SAAQvT,MAAM,CAAC6G,QAAyE;EAGzHlB,YAAYC,MAAqB;IAC/B,KAAK,CAACA,MAAM,CAAC;IAHf,KAAAC,QAAQ,GAAGyN,0BAA0B;EAIrC;;;uBALWC,qBAAqB,EAAAzN,EAAA,CAAAC,QAAA,CAAAC,EAAA,CAAAhG,MAAA;IAAA;EAAA;;;aAArBuT,qBAAqB;MAAAtN,OAAA,EAArBsN,qBAAqB,CAAArN,IAAA;MAAAC,UAAA,EAFpB;IAAM;EAAA;;AAStB,OAAO,MAAMqN,yBAAyB,GAAGzT,GAAG;;;;;;;;;;;;;KAavC;AAKH,OAAM,MAAO0T,oBAAqB,SAAQzT,MAAM,CAAC0F,KAA8D;EAG7GC,YAAYC,MAAqB;IAC/B,KAAK,CAACA,MAAM,CAAC;IAHf,KAAAC,QAAQ,GAAG2N,yBAAyB;EAIpC;;;uBALWC,oBAAoB,EAAA3N,EAAA,CAAAC,QAAA,CAAAC,EAAA,CAAAhG,MAAA;IAAA;EAAA;;;aAApByT,oBAAoB;MAAAxN,OAAA,EAApBwN,oBAAoB,CAAAvN,IAAA;MAAAC,UAAA,EAFnB;IAAM;EAAA;;AAStB,OAAO,MAAMuN,kBAAkB,GAAG3T,GAAG;;;;;;;;;;;;;;;;;;;;;;;;;KAyBhC;AAKH,OAAM,MAAO4T,aAAc,SAAQ3T,MAAM,CAAC0F,KAAgD;EAGxFC,YAAYC,MAAqB;IAC/B,KAAK,CAACA,MAAM,CAAC;IAHf,KAAAC,QAAQ,GAAG6N,kBAAkB;EAI7B;;;uBALWC,aAAa,EAAA7N,EAAA,CAAAC,QAAA,CAAAC,EAAA,CAAAhG,MAAA;IAAA;EAAA;;;aAAb2T,aAAa;MAAA1N,OAAA,EAAb0N,aAAa,CAAAzN,IAAA;MAAAC,UAAA,EAFZ;IAAM;EAAA;;AAStB,OAAO,MAAMyN,oBAAoB,GAAG7T,GAAG;;;;;;KAMlC;AAKH,OAAM,MAAO8T,eAAgB,SAAQ7T,MAAM,CAAC6G,QAA6D;EAGvGlB,YAAYC,MAAqB;IAC/B,KAAK,CAACA,MAAM,CAAC;IAHf,KAAAC,QAAQ,GAAG+N,oBAAoB;EAI/B;;;uBALWC,eAAe,EAAA/N,EAAA,CAAAC,QAAA,CAAAC,EAAA,CAAAhG,MAAA;IAAA;EAAA;;;aAAf6T,eAAe;MAAA5N,OAAA,EAAf4N,eAAe,CAAA3N,IAAA;MAAAC,UAAA,EAFd;IAAM;EAAA;;AAStB,OAAO,MAAM2N,oBAAoB,GAAG/T,GAAG;;;;;;KAMlC;AAKH,OAAM,MAAOgU,eAAgB,SAAQ/T,MAAM,CAAC6G,QAA6D;EAGvGlB,YAAYC,MAAqB;IAC/B,KAAK,CAACA,MAAM,CAAC;IAHf,KAAAC,QAAQ,GAAGiO,oBAAoB;EAI/B;;;uBALWC,eAAe,EAAAjO,EAAA,CAAAC,QAAA,CAAAC,EAAA,CAAAhG,MAAA;IAAA;EAAA;;;aAAf+T,eAAe;MAAA9N,OAAA,EAAf8N,eAAe,CAAA7N,IAAA;MAAAC,UAAA,EAFd;IAAM;EAAA;;AAStB,OAAO,MAAM6N,oBAAoB,GAAGjU,GAAG;;;;;;KAMlC;AAKH,OAAM,MAAOkU,eAAgB,SAAQjU,MAAM,CAAC6G,QAA6D;EAGvGlB,YAAYC,MAAqB;IAC/B,KAAK,CAACA,MAAM,CAAC;IAHf,KAAAC,QAAQ,GAAGmO,oBAAoB;EAI/B;;;uBALWC,eAAe,EAAAnO,EAAA,CAAAC,QAAA,CAAAC,EAAA,CAAAhG,MAAA;IAAA;EAAA;;;aAAfiU,eAAe;MAAAhO,OAAA,EAAfgO,eAAe,CAAA/N,IAAA;MAAAC,UAAA,EAFd;IAAM;EAAA;;AAStB,OAAO,MAAM+N,kBAAkB,GAAGnU,GAAG;;;;;;;;;;;;;;;KAehC;AAKH,OAAM,MAAOoU,aAAc,SAAQnU,MAAM,CAAC0F,KAAgD;EAGxFC,YAAYC,MAAqB;IAC/B,KAAK,CAACA,MAAM,CAAC;IAHf,KAAAC,QAAQ,GAAGqO,kBAAkB;EAI7B;;;uBALWC,aAAa,EAAArO,EAAA,CAAAC,QAAA,CAAAC,EAAA,CAAAhG,MAAA;IAAA;EAAA;;;aAAbmU,aAAa;MAAAlO,OAAA,EAAbkO,aAAa,CAAAjO,IAAA;MAAAC,UAAA,EAFZ;IAAM;EAAA;;AAStB,OAAO,MAAMiO,qBAAqB,GAAGrU,GAAG;;;;;;;;;;;;;;;;;;;;;;;;KAwBnC;AAKH,OAAM,MAAOsU,gBAAiB,SAAQrU,MAAM,CAAC0F,KAAsD;EAGjGC,YAAYC,MAAqB;IAC/B,KAAK,CAACA,MAAM,CAAC;IAHf,KAAAC,QAAQ,GAAGuO,qBAAqB;EAIhC;;;uBALWC,gBAAgB,EAAAvO,EAAA,CAAAC,QAAA,CAAAC,EAAA,CAAAhG,MAAA;IAAA;EAAA;;;aAAhBqU,gBAAgB;MAAApO,OAAA,EAAhBoO,gBAAgB,CAAAnO,IAAA;MAAAC,UAAA,EAFf;IAAM;EAAA;;AAStB,OAAO,MAAMmO,sBAAsB,GAAGvU,GAAG;;;;;;;KAOpC;AAKH,OAAM,MAAOwU,iBAAkB,SAAQvU,MAAM,CAAC6G,QAAiE;EAG7GlB,YAAYC,MAAqB;IAC/B,KAAK,CAACA,MAAM,CAAC;IAHf,KAAAC,QAAQ,GAAGyO,sBAAsB;EAIjC;;;uBALWC,iBAAiB,EAAAzO,EAAA,CAAAC,QAAA,CAAAC,EAAA,CAAAhG,MAAA;IAAA;EAAA;;;aAAjBuU,iBAAiB;MAAAtO,OAAA,EAAjBsO,iBAAiB,CAAArO,IAAA;MAAAC,UAAA,EAFhB;IAAM;EAAA;;AAStB,OAAO,MAAMqO,qBAAqB,GAAGzU,GAAG;;;;;;;;;;;;;;;;;;;;;KAqBnC;AAKH,OAAM,MAAO0U,gBAAiB,SAAQzU,MAAM,CAAC0F,KAAsD;EAGjGC,YAAYC,MAAqB;IAC/B,KAAK,CAACA,MAAM,CAAC;IAHf,KAAAC,QAAQ,GAAG2O,qBAAqB;EAIhC;;;uBALWC,gBAAgB,EAAA3O,EAAA,CAAAC,QAAA,CAAAC,EAAA,CAAAhG,MAAA;IAAA;EAAA;;;aAAhByU,gBAAgB;MAAAxO,OAAA,EAAhBwO,gBAAgB,CAAAvO,IAAA;MAAAC,UAAA,EAFf;IAAM;EAAA;;AAStB,OAAO,MAAMuO,oBAAoB,GAAG3U,GAAG;;;;;;;;;;;;;;;;;;;;;;;;;;;KA2BlC;AAKH,OAAM,MAAO4U,eAAgB,SAAQ3U,MAAM,CAAC0F,KAAoD;EAG9FC,YAAYC,MAAqB;IAC/B,KAAK,CAACA,MAAM,CAAC;IAHf,KAAAC,QAAQ,GAAG6O,oBAAoB;EAI/B;;;uBALWC,eAAe,EAAA7O,EAAA,CAAAC,QAAA,CAAAC,EAAA,CAAAhG,MAAA;IAAA;EAAA;;;aAAf2U,eAAe;MAAA1O,OAAA,EAAf0O,eAAe,CAAAzO,IAAA;MAAAC,UAAA,EAFd;IAAM;EAAA;;AAStB,OAAO,MAAMyO,4BAA4B,GAAG7U,GAAG;;;;KAI1C;AAKH,OAAM,MAAO8U,uBAAwB,SAAQ7U,MAAM,CAAC6G,QAA6E;EAG/HlB,YAAYC,MAAqB;IAC/B,KAAK,CAACA,MAAM,CAAC;IAHf,KAAAC,QAAQ,GAAG+O,4BAA4B;EAIvC;;;uBALWC,uBAAuB,EAAA/O,EAAA,CAAAC,QAAA,CAAAC,EAAA,CAAAhG,MAAA;IAAA;EAAA;;;aAAvB6U,uBAAuB;MAAA5O,OAAA,EAAvB4O,uBAAuB,CAAA3O,IAAA;MAAAC,UAAA,EAFtB;IAAM;EAAA;;AAStB,OAAO,MAAM2O,kBAAkB,GAAG/U,GAAG;;;;;;;;;;;;;;KAchC;AAKH,OAAM,MAAOgV,aAAc,SAAQ/U,MAAM,CAAC0F,KAAgD;EAGxFC,YAAYC,MAAqB;IAC/B,KAAK,CAACA,MAAM,CAAC;IAHf,KAAAC,QAAQ,GAAGiP,kBAAkB;EAI7B;;;uBALWC,aAAa,EAAAjP,EAAA,CAAAC,QAAA,CAAAC,EAAA,CAAAhG,MAAA;IAAA;EAAA;;;aAAb+U,aAAa;MAAA9O,OAAA,EAAb8O,aAAa,CAAA7O,IAAA;MAAAC,UAAA,EAFZ;IAAM;EAAA;;AAStB,OAAO,MAAM6O,kBAAkB,GAAGjV,GAAG;;;;;;;;;;;;;;;;;KAiBhC;AAKH,OAAM,MAAOkV,aAAc,SAAQjV,MAAM,CAAC0F,KAAgD;EAGxFC,YAAYC,MAAqB;IAC/B,KAAK,CAACA,MAAM,CAAC;IAHf,KAAAC,QAAQ,GAAGmP,kBAAkB;EAI7B;;;uBALWC,aAAa,EAAAnP,EAAA,CAAAC,QAAA,CAAAC,EAAA,CAAAhG,MAAA;IAAA;EAAA;;;aAAbiV,aAAa;MAAAhP,OAAA,EAAbgP,aAAa,CAAA/O,IAAA;MAAAC,UAAA,EAFZ;IAAM;EAAA;;AAStB,OAAO,MAAM+O,oBAAoB,GAAGnV,GAAG;;;;;;KAMlC;AAKH,OAAM,MAAOoV,eAAgB,SAAQnV,MAAM,CAAC6G,QAA6D;EAGvGlB,YAAYC,MAAqB;IAC/B,KAAK,CAACA,MAAM,CAAC;IAHf,KAAAC,QAAQ,GAAGqP,oBAAoB;EAI/B;;;uBALWC,eAAe,EAAArP,EAAA,CAAAC,QAAA,CAAAC,EAAA,CAAAhG,MAAA;IAAA;EAAA;;;aAAfmV,eAAe;MAAAlP,OAAA,EAAfkP,eAAe,CAAAjP,IAAA;MAAAC,UAAA,EAFd;IAAM;EAAA;;AAStB,OAAO,MAAMiP,oBAAoB,GAAGrV,GAAG;;;;;;KAMlC;AAKH,OAAM,MAAOsV,eAAgB,SAAQrV,MAAM,CAAC6G,QAA6D;EAGvGlB,YAAYC,MAAqB;IAC/B,KAAK,CAACA,MAAM,CAAC;IAHf,KAAAC,QAAQ,GAAGuP,oBAAoB;EAI/B;;;uBALWC,eAAe,EAAAvP,EAAA,CAAAC,QAAA,CAAAC,EAAA,CAAAhG,MAAA;IAAA;EAAA;;;aAAfqV,eAAe;MAAApP,OAAA,EAAfoP,eAAe,CAAAnP,IAAA;MAAAC,UAAA,EAFd;IAAM;EAAA;;AAStB,OAAO,MAAMmP,iCAAiC,GAAGvV,GAAG;;;;;;;;KAQ/C;AAKH,OAAM,MAAOwV,4BAA6B,SAAQvV,MAAM,CAAC0F,KAA8E;EAGrIC,YAAYC,MAAqB;IAC/B,KAAK,CAACA,MAAM,CAAC;IAHf,KAAAC,QAAQ,GAAGyP,iCAAiC;EAI5C;;;uBALWC,4BAA4B,EAAAzP,EAAA,CAAAC,QAAA,CAAAC,EAAA,CAAAhG,MAAA;IAAA;EAAA;;;aAA5BuV,4BAA4B;MAAAtP,OAAA,EAA5BsP,4BAA4B,CAAArP,IAAA;MAAAC,UAAA,EAF3B;IAAM;EAAA;;AAStB,OAAO,MAAMqP,2BAA2B,GAAGzV,GAAG;;;;;;KAMzC;AAKH,OAAM,MAAO0V,sBAAuB,SAAQzV,MAAM,CAAC6G,QAA2E;EAG5HlB,YAAYC,MAAqB;IAC/B,KAAK,CAACA,MAAM,CAAC;IAHf,KAAAC,QAAQ,GAAG2P,2BAA2B;EAItC;;;uBALWC,sBAAsB,EAAA3P,EAAA,CAAAC,QAAA,CAAAC,EAAA,CAAAhG,MAAA;IAAA;EAAA;;;aAAtByV,sBAAsB;MAAAxP,OAAA,EAAtBwP,sBAAsB,CAAAvP,IAAA;MAAAC,UAAA,EAFrB;IAAM;EAAA;;AAStB,OAAO,MAAMuP,qBAAqB,GAAG3V,GAAG;;;;;;;;;;;;;KAanC;AAKH,OAAM,MAAO4V,gBAAiB,SAAQ3V,MAAM,CAAC0F,KAAsD;EAGjGC,YAAYC,MAAqB;IAC/B,KAAK,CAACA,MAAM,CAAC;IAHf,KAAAC,QAAQ,GAAG6P,qBAAqB;EAIhC;;;uBALWC,gBAAgB,EAAA7P,EAAA,CAAAC,QAAA,CAAAC,EAAA,CAAAhG,MAAA;IAAA;EAAA;;;aAAhB2V,gBAAgB;MAAA1P,OAAA,EAAhB0P,gBAAgB,CAAAzP,IAAA;MAAAC,UAAA,EAFf;IAAM;EAAA;;AAStB,OAAO,MAAMyP,wBAAwB,GAAG7V,GAAG;;;;;;;;;;;;;;;;;KAiBtC;AAKH,OAAM,MAAO8V,mBAAoB,SAAQ7V,MAAM,CAAC0F,KAA4D;EAG1GC,YAAYC,MAAqB;IAC/B,KAAK,CAACA,MAAM,CAAC;IAHf,KAAAC,QAAQ,GAAG+P,wBAAwB;EAInC;;;uBALWC,mBAAmB,EAAA/P,EAAA,CAAAC,QAAA,CAAAC,EAAA,CAAAhG,MAAA;IAAA;EAAA;;;aAAnB6V,mBAAmB;MAAA5P,OAAA,EAAnB4P,mBAAmB,CAAA3P,IAAA;MAAAC,UAAA,EAFlB;IAAM;EAAA;;AAStB,OAAO,MAAM2P,0BAA0B,GAAG/V,GAAG;;;;;;KAMxC;AAKH,OAAM,MAAOgW,qBAAsB,SAAQ/V,MAAM,CAAC6G,QAAyE;EAGzHlB,YAAYC,MAAqB;IAC/B,KAAK,CAACA,MAAM,CAAC;IAHf,KAAAC,QAAQ,GAAGiQ,0BAA0B;EAIrC;;;uBALWC,qBAAqB,EAAAjQ,EAAA,CAAAC,QAAA,CAAAC,EAAA,CAAAhG,MAAA;IAAA;EAAA;;;aAArB+V,qBAAqB;MAAA9P,OAAA,EAArB8P,qBAAqB,CAAA7P,IAAA;MAAAC,UAAA,EAFpB;IAAM;EAAA;;AAStB,OAAO,MAAM6P,0BAA0B,GAAGjW,GAAG;;;;;;KAMxC;AAKH,OAAM,MAAOkW,qBAAsB,SAAQjW,MAAM,CAAC6G,QAAyE;EAGzHlB,YAAYC,MAAqB;IAC/B,KAAK,CAACA,MAAM,CAAC;IAHf,KAAAC,QAAQ,GAAGmQ,0BAA0B;EAIrC;;;uBALWC,qBAAqB,EAAAnQ,EAAA,CAAAC,QAAA,CAAAC,EAAA,CAAAhG,MAAA;IAAA;EAAA;;;aAArBiW,qBAAqB;MAAAhQ,OAAA,EAArBgQ,qBAAqB,CAAA/P,IAAA;MAAAC,UAAA,EAFpB;IAAM;EAAA;;AAStB,OAAO,MAAM+P,eAAe,GAAGnW,GAAG;;;;;;;;;;;;;;;;;;;;;;;;;;;KA2B7B;AAKH,OAAM,MAAOoW,UAAW,SAAQnW,MAAM,CAAC0F,KAA0C;EAG/EC,YAAYC,MAAqB;IAC/B,KAAK,CAACA,MAAM,CAAC;IAHf,KAAAC,QAAQ,GAAGqQ,eAAe;EAI1B;;;uBALWC,UAAU,EAAArQ,EAAA,CAAAC,QAAA,CAAAC,EAAA,CAAAhG,MAAA;IAAA;EAAA;;;aAAVmW,UAAU;MAAAlQ,OAAA,EAAVkQ,UAAU,CAAAjQ,IAAA;MAAAC,UAAA,EAFT;IAAM;EAAA;;AAStB,OAAO,MAAMiQ,yBAAyB,GAAGrW,GAAG;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;KAyDvC;AAKH,OAAM,MAAOsW,oBAAqB,SAAQrW,MAAM,CAAC0F,KAA8D;EAG7GC,YAAYC,MAAqB;IAC/B,KAAK,CAACA,MAAM,CAAC;IAHf,KAAAC,QAAQ,GAAGuQ,yBAAyB;EAIpC;;;uBALWC,oBAAoB,EAAAvQ,EAAA,CAAAC,QAAA,CAAAC,EAAA,CAAAhG,MAAA;IAAA;EAAA;;;aAApBqW,oBAAoB;MAAApQ,OAAA,EAApBoQ,oBAAoB,CAAAnQ,IAAA;MAAAC,UAAA,EAFnB;IAAM;EAAA;;AAStB,OAAO,MAAMmQ,kCAAkC,GAAGvW,GAAG;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;KA6ChD;AAKH,OAAM,MAAOwW,6BAA8B,SAAQvW,MAAM,CAAC0F,KAAgF;EAGxIC,YAAYC,MAAqB;IAC/B,KAAK,CAACA,MAAM,CAAC;IAHf,KAAAC,QAAQ,GAAGyQ,kCAAkC;EAI7C;;;uBALWC,6BAA6B,EAAAzQ,EAAA,CAAAC,QAAA,CAAAC,EAAA,CAAAhG,MAAA;IAAA;EAAA;;;aAA7BuW,6BAA6B;MAAAtQ,OAAA,EAA7BsQ,6BAA6B,CAAArQ,IAAA;MAAAC,UAAA,EAF5B;IAAM;EAAA;;AAStB,OAAO,MAAMqQ,mBAAmB,GAAGzW,GAAG;;;;KAIjC;AAKH,OAAM,MAAO0W,cAAe,SAAQzW,MAAM,CAAC6G,QAA2D;EAGpGlB,YAAYC,MAAqB;IAC/B,KAAK,CAACA,MAAM,CAAC;IAHf,KAAAC,QAAQ,GAAG2Q,mBAAmB;EAI9B;;;uBALWC,cAAc,EAAA3Q,EAAA,CAAAC,QAAA,CAAAC,EAAA,CAAAhG,MAAA;IAAA;EAAA;;;aAAdyW,cAAc;MAAAxQ,OAAA,EAAdwQ,cAAc,CAAAvQ,IAAA;MAAAC,UAAA,EAFb;IAAM;EAAA;;AAStB,OAAO,MAAMuQ,qBAAqB,GAAG3W,GAAG;;;;KAInC;AAKH,OAAM,MAAO4W,gBAAiB,SAAQ3W,MAAM,CAAC6G,QAA+D;EAG1GlB,YAAYC,MAAqB;IAC/B,KAAK,CAACA,MAAM,CAAC;IAHf,KAAAC,QAAQ,GAAG6Q,qBAAqB;EAIhC;;;uBALWC,gBAAgB,EAAA7Q,EAAA,CAAAC,QAAA,CAAAC,EAAA,CAAAhG,MAAA;IAAA;EAAA;;;aAAhB2W,gBAAgB;MAAA1Q,OAAA,EAAhB0Q,gBAAgB,CAAAzQ,IAAA;MAAAC,UAAA,EAFf;IAAM;EAAA;;AAStB,OAAO,MAAMyQ,4BAA4B,GAAG7W,GAAG;;;;;;KAM1C;AAKH,OAAM,MAAO8W,uBAAwB,SAAQ7W,MAAM,CAAC6G,QAA6E;EAG/HlB,YAAYC,MAAqB;IAC/B,KAAK,CAACA,MAAM,CAAC;IAHf,KAAAC,QAAQ,GAAG+Q,4BAA4B;EAIvC;;;uBALWC,uBAAuB,EAAA/Q,EAAA,CAAAC,QAAA,CAAAC,EAAA,CAAAhG,MAAA;IAAA;EAAA;;;aAAvB6W,uBAAuB;MAAA5Q,OAAA,EAAvB4Q,uBAAuB,CAAA3Q,IAAA;MAAAC,UAAA,EAFtB;IAAM;EAAA;;AAStB,OAAO,MAAM2Q,2BAA2B,GAAG/W,GAAG;;;;;;;KAOzC;AAKH,OAAM,MAAOgX,sBAAuB,SAAQ/W,MAAM,CAAC6G,QAA2E;EAG5HlB,YAAYC,MAAqB;IAC/B,KAAK,CAACA,MAAM,CAAC;IAHf,KAAAC,QAAQ,GAAGiR,2BAA2B;EAItC;;;uBALWC,sBAAsB,EAAAjR,EAAA,CAAAC,QAAA,CAAAC,EAAA,CAAAhG,MAAA;IAAA;EAAA;;;aAAtB+W,sBAAsB;MAAA9Q,OAAA,EAAtB8Q,sBAAsB,CAAA7Q,IAAA;MAAAC,UAAA,EAFrB;IAAM;EAAA;;AAStB,OAAO,MAAM6Q,gCAAgC,GAAGjX,GAAG;;;;;;;;;;;;;;;;;KAiB9C;AAKH,OAAM,MAAOkX,2BAA4B,SAAQjX,MAAM,CAAC0F,KAA4E;EAGlIC,YAAYC,MAAqB;IAC/B,KAAK,CAACA,MAAM,CAAC;IAHf,KAAAC,QAAQ,GAAGmR,gCAAgC;EAI3C;;;uBALWC,2BAA2B,EAAAnR,EAAA,CAAAC,QAAA,CAAAC,EAAA,CAAAhG,MAAA;IAAA;EAAA;;;aAA3BiX,2BAA2B;MAAAhR,OAAA,EAA3BgR,2BAA2B,CAAA/Q,IAAA;MAAAC,UAAA,EAF1B;IAAM;EAAA;;AAStB,OAAO,MAAM+Q,oBAAoB,GAAGnX,GAAG;;;;;;;;;;;;;;;;KAgBlC;AAKH,OAAM,MAAOoX,eAAgB,SAAQnX,MAAM,CAAC0F,KAAoD;EAG9FC,YAAYC,MAAqB;IAC/B,KAAK,CAACA,MAAM,CAAC;IAHf,KAAAC,QAAQ,GAAGqR,oBAAoB;EAI/B;;;uBALWC,eAAe,EAAArR,EAAA,CAAAC,QAAA,CAAAC,EAAA,CAAAhG,MAAA;IAAA;EAAA;;;aAAfmX,eAAe;MAAAlR,OAAA,EAAfkR,eAAe,CAAAjR,IAAA;MAAAC,UAAA,EAFd;IAAM;EAAA;;AAStB,OAAO,MAAMiR,2BAA2B,GAAGrX,GAAG;;;;;;KAMzC;AAKH,OAAM,MAAOsX,sBAAuB,SAAQrX,MAAM,CAAC6G,QAA2E;EAG5HlB,YAAYC,MAAqB;IAC/B,KAAK,CAACA,MAAM,CAAC;IAHf,KAAAC,QAAQ,GAAGuR,2BAA2B;EAItC;;;uBALWC,sBAAsB,EAAAvR,EAAA,CAAAC,QAAA,CAAAC,EAAA,CAAAhG,MAAA;IAAA;EAAA;;;aAAtBqX,sBAAsB;MAAApR,OAAA,EAAtBoR,sBAAsB,CAAAnR,IAAA;MAAAC,UAAA,EAFrB;IAAM;EAAA;;AAStB,OAAO,MAAMmR,iBAAiB,GAAGvX,GAAG;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;KAyG/B;AAKH,OAAM,MAAOwX,YAAa,SAAQvX,MAAM,CAAC0F,KAA8C;EAGrFC,YAAYC,MAAqB;IAC/B,KAAK,CAACA,MAAM,CAAC;IAHf,KAAAC,QAAQ,GAAGyR,iBAAiB;EAI5B;;;uBALWC,YAAY,EAAAzR,EAAA,CAAAC,QAAA,CAAAC,EAAA,CAAAhG,MAAA;IAAA;EAAA;;;aAAZuX,YAAY;MAAAtR,OAAA,EAAZsR,YAAY,CAAArR,IAAA;MAAAC,UAAA,EAFX;IAAM;EAAA;;AAStB,OAAO,MAAMqR,kBAAkB,GAAGzX,GAAG;;;;;;;;;;;;;;KAchC;AAKH,OAAM,MAAO0X,aAAc,SAAQzX,MAAM,CAAC0F,KAAgD;EAGxFC,YAAYC,MAAqB;IAC/B,KAAK,CAACA,MAAM,CAAC;IAHf,KAAAC,QAAQ,GAAG2R,kBAAkB;EAI7B;;;uBALWC,aAAa,EAAA3R,EAAA,CAAAC,QAAA,CAAAC,EAAA,CAAAhG,MAAA;IAAA;EAAA;;;aAAbyX,aAAa;MAAAxR,OAAA,EAAbwR,aAAa,CAAAvR,IAAA;MAAAC,UAAA,EAFZ;IAAM;EAAA;;AAStB,OAAO,MAAMuR,mBAAmB,GAAG3X,GAAG;;;;;;;;;;KAUjC;AAKH,OAAM,MAAO4X,cAAe,SAAQ3X,MAAM,CAAC6G,QAA2D;EAGpGlB,YAAYC,MAAqB;IAC/B,KAAK,CAACA,MAAM,CAAC;IAHf,KAAAC,QAAQ,GAAG6R,mBAAmB;EAI9B;;;uBALWC,cAAc,EAAA7R,EAAA,CAAAC,QAAA,CAAAC,EAAA,CAAAhG,MAAA;IAAA;EAAA;;;aAAd2X,cAAc;MAAA1R,OAAA,EAAd0R,cAAc,CAAAzR,IAAA;MAAAC,UAAA,EAFb;IAAM;EAAA;;AAStB,OAAO,MAAMyR,iBAAiB,GAAG7X,GAAG;;;;;;;;;;;;;;;;;;;;;;;;;KAyB/B;AAKH,OAAM,MAAO8X,YAAa,SAAQ7X,MAAM,CAAC0F,KAA8C;EAGrFC,YAAYC,MAAqB;IAC/B,KAAK,CAACA,MAAM,CAAC;IAHf,KAAAC,QAAQ,GAAG+R,iBAAiB;EAI5B;;;uBALWC,YAAY,EAAA/R,EAAA,CAAAC,QAAA,CAAAC,EAAA,CAAAhG,MAAA;IAAA;EAAA;;;aAAZ6X,YAAY;MAAA5R,OAAA,EAAZ4R,YAAY,CAAA3R,IAAA;MAAAC,UAAA,EAFX;IAAM;EAAA;;AAStB,OAAO,MAAM2R,sBAAsB,GAAG/X,GAAG;;;;;;;;;;;;;KAapC;AAKH,OAAM,MAAOgY,iBAAkB,SAAQ/X,MAAM,CAAC0F,KAAwD;EAGpGC,YAAYC,MAAqB;IAC/B,KAAK,CAACA,MAAM,CAAC;IAHf,KAAAC,QAAQ,GAAGiS,sBAAsB;EAIjC;;;uBALWC,iBAAiB,EAAAjS,EAAA,CAAAC,QAAA,CAAAC,EAAA,CAAAhG,MAAA;IAAA;EAAA;;;aAAjB+X,iBAAiB;MAAA9R,OAAA,EAAjB8R,iBAAiB,CAAA7R,IAAA;MAAAC,UAAA,EAFhB;IAAM;EAAA;;AAStB,OAAO,MAAM6R,mBAAmB,GAAGjY,GAAG;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;KAiCjC;AAKH,OAAM,MAAOkY,cAAe,SAAQjY,MAAM,CAAC0F,KAAkD;EAG3FC,YAAYC,MAAqB;IAC/B,KAAK,CAACA,MAAM,CAAC;IAHf,KAAAC,QAAQ,GAAGmS,mBAAmB;EAI9B;;;uBALWC,cAAc,EAAAnS,EAAA,CAAAC,QAAA,CAAAC,EAAA,CAAAhG,MAAA;IAAA;EAAA;;;aAAdiY,cAAc;MAAAhS,OAAA,EAAdgS,cAAc,CAAA/R,IAAA;MAAAC,UAAA,EAFb;IAAM;EAAA;;AAStB,OAAO,MAAM+R,mBAAmB,GAAGnY,GAAG;;;;;;;;;;;;;;;;;;;;;;;;KAwBjC;AAKH,OAAM,MAAOoY,cAAe,SAAQnY,MAAM,CAAC0F,KAAkD;EAG3FC,YAAYC,MAAqB;IAC/B,KAAK,CAACA,MAAM,CAAC;IAHf,KAAAC,QAAQ,GAAGqS,mBAAmB;EAI9B;;;uBALWC,cAAc,EAAArS,EAAA,CAAAC,QAAA,CAAAC,EAAA,CAAAhG,MAAA;IAAA;EAAA;;;aAAdmY,cAAc;MAAAlS,OAAA,EAAdkS,cAAc,CAAAjS,IAAA;MAAAC,UAAA,EAFb;IAAM;EAAA;;AAStB,OAAO,MAAMiS,mBAAmB,GAAGrY,GAAG;;;;;;KAMjC;AAKH,OAAM,MAAOsY,cAAe,SAAQrY,MAAM,CAAC6G,QAA2D;EAGpGlB,YAAYC,MAAqB;IAC/B,KAAK,CAACA,MAAM,CAAC;IAHf,KAAAC,QAAQ,GAAGuS,mBAAmB;EAI9B;;;uBALWC,cAAc,EAAAvS,EAAA,CAAAC,QAAA,CAAAC,EAAA,CAAAhG,MAAA;IAAA;EAAA;;;aAAdqY,cAAc;MAAApS,OAAA,EAAdoS,cAAc,CAAAnS,IAAA;MAAAC,UAAA,EAFb;IAAM;EAAA;;AAStB,OAAO,MAAMmS,8BAA8B,GAAGvY,GAAG;;;;;;KAM5C;AAKH,OAAM,MAAOwY,yBAA0B,SAAQvY,MAAM,CAAC6G,QAAiF;EAGrIlB,YAAYC,MAAqB;IAC/B,KAAK,CAACA,MAAM,CAAC;IAHf,KAAAC,QAAQ,GAAGyS,8BAA8B;EAIzC;;;uBALWC,yBAAyB,EAAAzS,EAAA,CAAAC,QAAA,CAAAC,EAAA,CAAAhG,MAAA;IAAA;EAAA;;;aAAzBuY,yBAAyB;MAAAtS,OAAA,EAAzBsS,yBAAyB,CAAArS,IAAA;MAAAC,UAAA,EAFxB;IAAM;EAAA;;AAStB,OAAO,MAAMqS,mBAAmB,GAAGzY,GAAG;;;;;;KAMjC;AAKH,OAAM,MAAO0Y,cAAe,SAAQzY,MAAM,CAAC6G,QAA2D;EAGpGlB,YAAYC,MAAqB;IAC/B,KAAK,CAACA,MAAM,CAAC;IAHf,KAAAC,QAAQ,GAAG2S,mBAAmB;EAI9B;;;uBALWC,cAAc,EAAA3S,EAAA,CAAAC,QAAA,CAAAC,EAAA,CAAAhG,MAAA;IAAA;EAAA;;;aAAdyY,cAAc;MAAAxS,OAAA,EAAdwS,cAAc,CAAAvS,IAAA;MAAAC,UAAA,EAFb;IAAM;EAAA;;AAStB,OAAO,MAAMuS,kBAAkB,GAAG3Y,GAAG;;;;;;;;;;;;;;;KAehC;AAKH,OAAM,MAAO4Y,aAAc,SAAQ3Y,MAAM,CAAC0F,KAAgD;EAGxFC,YAAYC,MAAqB;IAC/B,KAAK,CAACA,MAAM,CAAC;IAHf,KAAAC,QAAQ,GAAG6S,kBAAkB;EAI7B;;;uBALWC,aAAa,EAAA7S,EAAA,CAAAC,QAAA,CAAAC,EAAA,CAAAhG,MAAA;IAAA;EAAA;;;aAAb2Y,aAAa;MAAA1S,OAAA,EAAb0S,aAAa,CAAAzS,IAAA;MAAAC,UAAA,EAFZ;IAAM;EAAA;;AAStB,OAAO,MAAMyS,eAAe,GAAG7Y,GAAG;;;;;;;;;;;;;;;KAe7B;AAKH,OAAM,MAAO8Y,UAAW,SAAQ7Y,MAAM,CAAC0F,KAA0C;EAG/EC,YAAYC,MAAqB;IAC/B,KAAK,CAACA,MAAM,CAAC;IAHf,KAAAC,QAAQ,GAAG+S,eAAe;EAI1B;;;uBALWC,UAAU,EAAA/S,EAAA,CAAAC,QAAA,CAAAC,EAAA,CAAAhG,MAAA;IAAA;EAAA;;;aAAV6Y,UAAU;MAAA5S,OAAA,EAAV4S,UAAU,CAAA3S,IAAA;MAAAC,UAAA,EAFT;IAAM;EAAA;;AAStB,OAAO,MAAM2S,eAAe,GAAG/Y,GAAG;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;KAmD7B;AAKH,OAAM,MAAOgZ,UAAW,SAAQ/Y,MAAM,CAAC0F,KAA0C;EAG/EC,YAAYC,MAAqB;IAC/B,KAAK,CAACA,MAAM,CAAC;IAHf,KAAAC,QAAQ,GAAGiT,eAAe;EAI1B;;;uBALWC,UAAU,EAAAjT,EAAA,CAAAC,QAAA,CAAAC,EAAA,CAAAhG,MAAA;IAAA;EAAA;;;aAAV+Y,UAAU;MAAA9S,OAAA,EAAV8S,UAAU,CAAA7S,IAAA;MAAAC,UAAA,EAFT;IAAM;EAAA;;AAStB,OAAO,MAAM6S,yBAAyB,GAAGjZ,GAAG;;;;;;KAMvC;AAKH,OAAM,MAAOkZ,oBAAqB,SAAQjZ,MAAM,CAAC6G,QAAuE;EAGtHlB,YAAYC,MAAqB;IAC/B,KAAK,CAACA,MAAM,CAAC;IAHf,KAAAC,QAAQ,GAAGmT,yBAAyB;EAIpC;;;uBALWC,oBAAoB,EAAAnT,EAAA,CAAAC,QAAA,CAAAC,EAAA,CAAAhG,MAAA;IAAA;EAAA;;;aAApBiZ,oBAAoB;MAAAhT,OAAA,EAApBgT,oBAAoB,CAAA/S,IAAA;MAAAC,UAAA,EAFnB;IAAM;EAAA;;AAStB,OAAO,MAAM+S,4BAA4B,GAAGnZ,GAAG;;;;;;;;;KAS1C;AAKH,OAAM,MAAOoZ,uBAAwB,SAAQnZ,MAAM,CAAC0F,KAAoE;EAGtHC,YAAYC,MAAqB;IAC/B,KAAK,CAACA,MAAM,CAAC;IAHf,KAAAC,QAAQ,GAAGqT,4BAA4B;EAIvC;;;uBALWC,uBAAuB,EAAArT,EAAA,CAAAC,QAAA,CAAAC,EAAA,CAAAhG,MAAA;IAAA;EAAA;;;aAAvBmZ,uBAAuB;MAAAlT,OAAA,EAAvBkT,uBAAuB,CAAAjT,IAAA;MAAAC,UAAA,EAFtB;IAAM;EAAA;;AAStB,OAAO,MAAMiT,0BAA0B,GAAGrZ,GAAG;;;;;;;;;;KAUxC;AAKH,OAAM,MAAOsZ,qBAAsB,SAAQrZ,MAAM,CAAC6G,QAAyE;EAGzHlB,YAAYC,MAAqB;IAC/B,KAAK,CAACA,MAAM,CAAC;IAHf,KAAAC,QAAQ,GAAGuT,0BAA0B;EAIrC;;;uBALWC,qBAAqB,EAAAvT,EAAA,CAAAC,QAAA,CAAAC,EAAA,CAAAhG,MAAA;IAAA;EAAA;;;aAArBqZ,qBAAqB;MAAApT,OAAA,EAArBoT,qBAAqB,CAAAnT,IAAA;MAAAC,UAAA,EAFpB;IAAM;EAAA;;AAStB,OAAO,MAAMmT,wBAAwB,GAAGvZ,GAAG;;;;;;;KAOtC;AAKH,OAAM,MAAOwZ,mBAAoB,SAAQvZ,MAAM,CAAC6G,QAAqE;EAGnHlB,YAAYC,MAAqB;IAC/B,KAAK,CAACA,MAAM,CAAC;IAHf,KAAAC,QAAQ,GAAGyT,wBAAwB;EAInC;;;uBALWC,mBAAmB,EAAAzT,EAAA,CAAAC,QAAA,CAAAC,EAAA,CAAAhG,MAAA;IAAA;EAAA;;;aAAnBuZ,mBAAmB;MAAAtT,OAAA,EAAnBsT,mBAAmB,CAAArT,IAAA;MAAAC,UAAA,EAFlB;IAAM;EAAA;;AAStB,OAAO,MAAMqT,sBAAsB,GAAGzZ,GAAG;;;;;;;KAOpC;AAKH,OAAM,MAAO0Z,iBAAkB,SAAQzZ,MAAM,CAAC6G,QAAiE;EAG7GlB,YAAYC,MAAqB;IAC/B,KAAK,CAACA,MAAM,CAAC;IAHf,KAAAC,QAAQ,GAAG2T,sBAAsB;EAIjC;;;uBALWC,iBAAiB,EAAA3T,EAAA,CAAAC,QAAA,CAAAC,EAAA,CAAAhG,MAAA;IAAA;EAAA;;;aAAjByZ,iBAAiB;MAAAxT,OAAA,EAAjBwT,iBAAiB,CAAAvT,IAAA;MAAAC,UAAA,EAFhB;IAAM;EAAA;;AAStB,OAAO,MAAMuT,qBAAqB,GAAG3Z,GAAG;;;;;;;KAOnC;AAKH,OAAM,MAAO4Z,gBAAiB,SAAQ3Z,MAAM,CAAC6G,QAA+D;EAG1GlB,YAAYC,MAAqB;IAC/B,KAAK,CAACA,MAAM,CAAC;IAHf,KAAAC,QAAQ,GAAG6T,qBAAqB;EAIhC;;;uBALWC,gBAAgB,EAAA7T,EAAA,CAAAC,QAAA,CAAAC,EAAA,CAAAhG,MAAA;IAAA;EAAA;;;aAAhB2Z,gBAAgB;MAAA1T,OAAA,EAAhB0T,gBAAgB,CAAAzT,IAAA;MAAAC,UAAA,EAFf;IAAM;EAAA;;AAStB,OAAO,MAAMyT,aAAa,GAAG7Z,GAAG;;;;;;KAM3B;AAKH,OAAM,MAAO8Z,QAAS,SAAQ7Z,MAAM,CAAC0F,KAAsC;EAGzEC,YAAYC,MAAqB;IAC/B,KAAK,CAACA,MAAM,CAAC;IAHf,KAAAC,QAAQ,GAAG+T,aAAa;EAIxB;;;uBALWC,QAAQ,EAAA/T,EAAA,CAAAC,QAAA,CAAAC,EAAA,CAAAhG,MAAA;IAAA;EAAA;;;aAAR6Z,QAAQ;MAAA5T,OAAA,EAAR4T,QAAQ,CAAA3T,IAAA;MAAAC,UAAA,EAFP;IAAM;EAAA","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}