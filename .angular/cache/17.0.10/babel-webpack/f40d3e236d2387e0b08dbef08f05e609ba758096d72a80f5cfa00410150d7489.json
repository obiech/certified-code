{"ast":null,"code":"import { EventEmitter } from '@angular/core';\nimport * as i0 from \"@angular/core\";\nimport * as i1 from \"@angular/forms\";\nimport * as i2 from \"ng-zorro-antd/input\";\nconst _c0 = [\"addresstext\"];\nexport class GooglePlacesComponent {\n  constructor() {\n    this.setAddress = new EventEmitter();\n  }\n  ngAfterViewInit() {\n    this.getPlaceAutocomplete();\n  }\n  getPlaceAutocomplete() {\n    this.autocompleteObject = new google.maps.places.Autocomplete(this.addresstext.nativeElement, {\n      types: [this.adressType] // 'establishment' / 'address' / 'geocode',\n    });\n\n    google.maps.event.addListener(this.autocompleteObject, 'place_changed', () => {\n      const place = this.autocompleteObject.getPlace();\n      this.invokeEvent(place);\n    });\n  }\n  setBounds(bounds) {\n    this.autocompleteObject.setBounds(bounds);\n  }\n  invokeEvent(place) {\n    this.setAddress.emit(place);\n  }\n  static {\n    this.ɵfac = function GooglePlacesComponent_Factory(t) {\n      return new (t || GooglePlacesComponent)();\n    };\n  }\n  static {\n    this.ɵcmp = /*@__PURE__*/i0.ɵɵdefineComponent({\n      type: GooglePlacesComponent,\n      selectors: [[\"google-places-autocomplete\"]],\n      viewQuery: function GooglePlacesComponent_Query(rf, ctx) {\n        if (rf & 1) {\n          i0.ɵɵviewQuery(_c0, 5);\n        }\n        if (rf & 2) {\n          let _t;\n          i0.ɵɵqueryRefresh(_t = i0.ɵɵloadQuery()) && (ctx.addresstext = _t.first);\n        }\n      },\n      inputs: {\n        adressType: \"adressType\"\n      },\n      outputs: {\n        setAddress: \"setAddress\"\n      },\n      decls: 2,\n      vars: 1,\n      consts: [[\"type\", \"text\", \"nz-input\", \"\", 1, \"input\", 2, \"width\", \"100%\", \"margin-top\", \"10px\", \"margin-bottom\", \"10px\", 3, \"ngModel\", \"ngModelChange\"], [\"addresstext\", \"\"]],\n      template: function GooglePlacesComponent_Template(rf, ctx) {\n        if (rf & 1) {\n          i0.ɵɵelementStart(0, \"input\", 0, 1);\n          i0.ɵɵlistener(\"ngModelChange\", function GooglePlacesComponent_Template_input_ngModelChange_0_listener($event) {\n            return ctx.autocompleteInput = $event;\n          });\n          i0.ɵɵelementEnd();\n        }\n        if (rf & 2) {\n          i0.ɵɵproperty(\"ngModel\", ctx.autocompleteInput);\n        }\n      },\n      dependencies: [i1.DefaultValueAccessor, i1.NgControlStatus, i1.NgModel, i2.NzInputDirective],\n      encapsulation: 2\n    });\n  }\n}","map":{"version":3,"names":["EventEmitter","GooglePlacesComponent","constructor","setAddress","ngAfterViewInit","getPlaceAutocomplete","autocompleteObject","google","maps","places","Autocomplete","addresstext","nativeElement","types","adressType","event","addListener","place","getPlace","invokeEvent","setBounds","bounds","emit","selectors","viewQuery","GooglePlacesComponent_Query","rf","ctx","i0","ɵɵelementStart","ɵɵlistener","GooglePlacesComponent_Template_input_ngModelChange_0_listener","$event","autocompleteInput","ɵɵelementEnd","ɵɵproperty"],"sources":["/Users/obiechina/Documents/ridy-flutter-full-taxi-solution 2/apps/admin-panel/src/app/@components/google-places.component.ts"],"sourcesContent":["import { Component, ViewChild, EventEmitter, Output, OnInit, AfterViewInit, Input } from '@angular/core';\n\n@Component({\n    selector: 'google-places-autocomplete',\n    template: `\n      <input class=\"input\"\n        type=\"text\"\n        nz-input\n        [(ngModel)]=\"autocompleteInput\"\n        #addresstext style=\"width: 100%; margin-top:10px; margin-bottom: 10px;\"\n        >\n    `,\n})\nexport class GooglePlacesComponent implements AfterViewInit {\n    @Input() adressType!: string;\n    @Output() setAddress: EventEmitter<any> = new EventEmitter();\n    @ViewChild('addresstext') addresstext: any;\n\n    autocompleteObject!: google.maps.places.Autocomplete;\n    autocompleteInput!: string;\n    queryWait!: boolean;\n\n\n    ngAfterViewInit() {\n        this.getPlaceAutocomplete();\n    }\n\n    private getPlaceAutocomplete() {\n        this.autocompleteObject = new google.maps.places.Autocomplete(this.addresstext.nativeElement,\n            {\n                types: [this.adressType]  // 'establishment' / 'address' / 'geocode',\n            });\n        google.maps.event.addListener(this.autocompleteObject, 'place_changed', () => {\n            const place = this.autocompleteObject.getPlace();\n            this.invokeEvent(place);\n        });\n    }\n\n    setBounds(bounds: google.maps.LatLngBounds) {\n        this.autocompleteObject.setBounds(bounds);\n    }\n\n    invokeEvent(place: unknown) {\n        this.setAddress.emit(place);\n    }\n\n}"],"mappings":"AAAA,SAA+BA,YAAY,QAA8C,eAAe;;;;;AAaxG,OAAM,MAAOC,qBAAqB;EAXlCC,YAAA;IAac,KAAAC,UAAU,GAAsB,IAAIH,YAAY,EAAE;;EAQ5DI,eAAeA,CAAA;IACX,IAAI,CAACC,oBAAoB,EAAE;EAC/B;EAEQA,oBAAoBA,CAAA;IACxB,IAAI,CAACC,kBAAkB,GAAG,IAAIC,MAAM,CAACC,IAAI,CAACC,MAAM,CAACC,YAAY,CAAC,IAAI,CAACC,WAAW,CAACC,aAAa,EACxF;MACIC,KAAK,EAAE,CAAC,IAAI,CAACC,UAAU,CAAC,CAAE;KAC7B,CAAC;;IACNP,MAAM,CAACC,IAAI,CAACO,KAAK,CAACC,WAAW,CAAC,IAAI,CAACV,kBAAkB,EAAE,eAAe,EAAE,MAAK;MACzE,MAAMW,KAAK,GAAG,IAAI,CAACX,kBAAkB,CAACY,QAAQ,EAAE;MAChD,IAAI,CAACC,WAAW,CAACF,KAAK,CAAC;IAC3B,CAAC,CAAC;EACN;EAEAG,SAASA,CAACC,MAAgC;IACtC,IAAI,CAACf,kBAAkB,CAACc,SAAS,CAACC,MAAM,CAAC;EAC7C;EAEAF,WAAWA,CAACF,KAAc;IACtB,IAAI,CAACd,UAAU,CAACmB,IAAI,CAACL,KAAK,CAAC;EAC/B;;;uBA/BShB,qBAAqB;IAAA;EAAA;;;YAArBA,qBAAqB;MAAAsB,SAAA;MAAAC,SAAA,WAAAC,4BAAAC,EAAA,EAAAC,GAAA;QAAA,IAAAD,EAAA;;;;;;;;;;;;;;;;;;;UAR5BE,EAAA,CAAAC,cAAA,kBAKG;UAFDD,EAAA,CAAAE,UAAA,2BAAAC,8DAAAC,MAAA;YAAA,OAAAL,GAAA,CAAAM,iBAAA,GAAAD,MAAA;UAAA,EAA+B;UAHjCJ,EAAA,CAAAM,YAAA,EAKG;;;UAFDN,EAAA,CAAAO,UAAA,YAAAR,GAAA,CAAAM,iBAAA,CAA+B","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}