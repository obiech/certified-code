{"ast":null,"code":"import { __assign, __extends } from \"tslib\";\nimport { each, isString, mix, isFunction } from '@antv/util';\nimport GroupComponent from '../abstract/group-component';\nimport Theme from '../util/theme';\nvar GridBase = /** @class */function (_super) {\n  __extends(GridBase, _super);\n  function GridBase() {\n    return _super !== null && _super.apply(this, arguments) || this;\n  }\n  GridBase.prototype.getDefaultCfg = function () {\n    var cfg = _super.prototype.getDefaultCfg.call(this);\n    return __assign(__assign({}, cfg), {\n      name: 'grid',\n      line: {},\n      alternateColor: null,\n      capture: false,\n      items: [],\n      closed: false,\n      defaultCfg: {\n        line: {\n          type: 'line',\n          style: {\n            lineWidth: 1,\n            stroke: Theme.lineColor\n          }\n        }\n      }\n    });\n  };\n  /**\n   * 获取栅格线的类型\n   * @return {string} 栅格线类型\n   */\n  GridBase.prototype.getLineType = function () {\n    var line = this.get('line') || this.get('defaultCfg').line;\n    return line.type;\n  };\n  GridBase.prototype.renderInner = function (group) {\n    this.drawGrid(group);\n  };\n  GridBase.prototype.getAlternatePath = function (prePoints, points) {\n    var regionPath = this.getGridPath(prePoints);\n    var reversePoints = points.slice(0).reverse();\n    var nextPath = this.getGridPath(reversePoints, true);\n    var closed = this.get('closed');\n    if (closed) {\n      regionPath = regionPath.concat(nextPath);\n    } else {\n      nextPath[0][0] = 'L'; // 更新第一个节点\n      regionPath = regionPath.concat(nextPath);\n      regionPath.push(['Z']);\n    }\n    return regionPath;\n  };\n  // 获取路径的配置项\n  GridBase.prototype.getPathStyle = function () {\n    return this.get('line').style;\n  };\n  // 绘制栅格\n  GridBase.prototype.drawGrid = function (group) {\n    var _this = this;\n    var line = this.get('line');\n    var items = this.get('items');\n    var alternateColor = this.get('alternateColor');\n    var preItem = null;\n    each(items, function (item, index) {\n      var id = item.id || index;\n      // 绘制栅格线\n      if (line) {\n        var style = _this.getPathStyle();\n        style = isFunction(style) ? style(item, index, items) : style;\n        var lineId = _this.getElementId(\"line-\" + id);\n        var gridPath = _this.getGridPath(item.points);\n        _this.addShape(group, {\n          type: 'path',\n          name: 'grid-line',\n          id: lineId,\n          attrs: mix({\n            path: gridPath\n          }, style)\n        });\n      }\n      // 如果存在 alternateColor 则绘制矩形\n      // 从第二个栅格线开始绘制\n      if (alternateColor && index > 0) {\n        var regionId = _this.getElementId(\"region-\" + id);\n        var isEven = index % 2 === 0;\n        if (isString(alternateColor)) {\n          // 如果颜色是单值，则是仅绘制偶数时的区域\n          if (isEven) {\n            _this.drawAlternateRegion(regionId, group, preItem.points, item.points, alternateColor);\n          }\n        } else {\n          var color = isEven ? alternateColor[1] : alternateColor[0];\n          _this.drawAlternateRegion(regionId, group, preItem.points, item.points, color);\n        }\n      }\n      preItem = item;\n    });\n  };\n  // 绘制栅格线间的间隔\n  GridBase.prototype.drawAlternateRegion = function (id, group, prePoints, points, color) {\n    var regionPath = this.getAlternatePath(prePoints, points);\n    this.addShape(group, {\n      type: 'path',\n      id: id,\n      name: 'grid-region',\n      attrs: {\n        path: regionPath,\n        fill: color\n      }\n    });\n  };\n  return GridBase;\n}(GroupComponent);\nexport default GridBase;","map":{"version":3,"names":["__assign","__extends","each","isString","mix","isFunction","GroupComponent","Theme","GridBase","_super","apply","arguments","prototype","getDefaultCfg","cfg","call","name","line","alternateColor","capture","items","closed","defaultCfg","type","style","lineWidth","stroke","lineColor","getLineType","get","renderInner","group","drawGrid","getAlternatePath","prePoints","points","regionPath","getGridPath","reversePoints","slice","reverse","nextPath","concat","push","getPathStyle","_this","preItem","item","index","id","lineId","getElementId","gridPath","addShape","attrs","path","regionId","isEven","drawAlternateRegion","color","fill"],"sources":["/Users/obiechina/Documents/ridy-flutter-full-taxi-solution 2/node_modules/@antv/component/esm/grid/base.js"],"sourcesContent":["import { __assign, __extends } from \"tslib\";\nimport { each, isString, mix, isFunction } from '@antv/util';\nimport GroupComponent from '../abstract/group-component';\nimport Theme from '../util/theme';\nvar GridBase = /** @class */ (function (_super) {\n    __extends(GridBase, _super);\n    function GridBase() {\n        return _super !== null && _super.apply(this, arguments) || this;\n    }\n    GridBase.prototype.getDefaultCfg = function () {\n        var cfg = _super.prototype.getDefaultCfg.call(this);\n        return __assign(__assign({}, cfg), { name: 'grid', line: {}, alternateColor: null, capture: false, items: [], closed: false, defaultCfg: {\n                line: {\n                    type: 'line',\n                    style: {\n                        lineWidth: 1,\n                        stroke: Theme.lineColor,\n                    },\n                },\n            } });\n    };\n    /**\n     * 获取栅格线的类型\n     * @return {string} 栅格线类型\n     */\n    GridBase.prototype.getLineType = function () {\n        var line = this.get('line') || this.get('defaultCfg').line;\n        return line.type;\n    };\n    GridBase.prototype.renderInner = function (group) {\n        this.drawGrid(group);\n    };\n    GridBase.prototype.getAlternatePath = function (prePoints, points) {\n        var regionPath = this.getGridPath(prePoints);\n        var reversePoints = points.slice(0).reverse();\n        var nextPath = this.getGridPath(reversePoints, true);\n        var closed = this.get('closed');\n        if (closed) {\n            regionPath = regionPath.concat(nextPath);\n        }\n        else {\n            nextPath[0][0] = 'L'; // 更新第一个节点\n            regionPath = regionPath.concat(nextPath);\n            regionPath.push(['Z']);\n        }\n        return regionPath;\n    };\n    // 获取路径的配置项\n    GridBase.prototype.getPathStyle = function () {\n        return this.get('line').style;\n    };\n    // 绘制栅格\n    GridBase.prototype.drawGrid = function (group) {\n        var _this = this;\n        var line = this.get('line');\n        var items = this.get('items');\n        var alternateColor = this.get('alternateColor');\n        var preItem = null;\n        each(items, function (item, index) {\n            var id = item.id || index;\n            // 绘制栅格线\n            if (line) {\n                var style = _this.getPathStyle();\n                style = isFunction(style) ? style(item, index, items) : style;\n                var lineId = _this.getElementId(\"line-\" + id);\n                var gridPath = _this.getGridPath(item.points);\n                _this.addShape(group, {\n                    type: 'path',\n                    name: 'grid-line',\n                    id: lineId,\n                    attrs: mix({\n                        path: gridPath,\n                    }, style),\n                });\n            }\n            // 如果存在 alternateColor 则绘制矩形\n            // 从第二个栅格线开始绘制\n            if (alternateColor && index > 0) {\n                var regionId = _this.getElementId(\"region-\" + id);\n                var isEven = index % 2 === 0;\n                if (isString(alternateColor)) {\n                    // 如果颜色是单值，则是仅绘制偶数时的区域\n                    if (isEven) {\n                        _this.drawAlternateRegion(regionId, group, preItem.points, item.points, alternateColor);\n                    }\n                }\n                else {\n                    var color = isEven ? alternateColor[1] : alternateColor[0];\n                    _this.drawAlternateRegion(regionId, group, preItem.points, item.points, color);\n                }\n            }\n            preItem = item;\n        });\n    };\n    // 绘制栅格线间的间隔\n    GridBase.prototype.drawAlternateRegion = function (id, group, prePoints, points, color) {\n        var regionPath = this.getAlternatePath(prePoints, points);\n        this.addShape(group, {\n            type: 'path',\n            id: id,\n            name: 'grid-region',\n            attrs: {\n                path: regionPath,\n                fill: color,\n            },\n        });\n    };\n    return GridBase;\n}(GroupComponent));\nexport default GridBase;\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}