{"ast":null,"code":"import { __rest } from \"tslib\";\nimport { ApolloLink } from \"../core/index.js\";\nimport { Observable } from \"../../utilities/index.js\";\nexport function setContext(setter) {\n  return new ApolloLink(function (operation, forward) {\n    var request = __rest(operation, []);\n    return new Observable(function (observer) {\n      var handle;\n      var closed = false;\n      Promise.resolve(request).then(function (req) {\n        return setter(req, operation.getContext());\n      }).then(operation.setContext).then(function () {\n        // if the observer is already closed, no need to subscribe.\n        if (closed) return;\n        handle = forward(operation).subscribe({\n          next: observer.next.bind(observer),\n          error: observer.error.bind(observer),\n          complete: observer.complete.bind(observer)\n        });\n      }).catch(observer.error.bind(observer));\n      return function () {\n        closed = true;\n        if (handle) handle.unsubscribe();\n      };\n    });\n  });\n}","map":{"version":3,"names":["__rest","ApolloLink","Observable","setContext","setter","operation","forward","request","observer","handle","closed","Promise","resolve","then","req","getContext","subscribe","next","bind","error","complete","catch","unsubscribe"],"sources":["/Users/obiechina/Documents/ridy-flutter-full-taxi-solution 2/node_modules/@apollo/client/link/context/index.js"],"sourcesContent":["import { __rest } from \"tslib\";\nimport { ApolloLink } from \"../core/index.js\";\nimport { Observable } from \"../../utilities/index.js\";\nexport function setContext(setter) {\n    return new ApolloLink(function (operation, forward) {\n        var request = __rest(operation, []);\n        return new Observable(function (observer) {\n            var handle;\n            var closed = false;\n            Promise.resolve(request)\n                .then(function (req) { return setter(req, operation.getContext()); })\n                .then(operation.setContext)\n                .then(function () {\n                // if the observer is already closed, no need to subscribe.\n                if (closed)\n                    return;\n                handle = forward(operation).subscribe({\n                    next: observer.next.bind(observer),\n                    error: observer.error.bind(observer),\n                    complete: observer.complete.bind(observer),\n                });\n            })\n                .catch(observer.error.bind(observer));\n            return function () {\n                closed = true;\n                if (handle)\n                    handle.unsubscribe();\n            };\n        });\n    });\n}\n"],"mappings":"AAAA,SAASA,MAAM,QAAQ,OAAO;AAC9B,SAASC,UAAU,QAAQ,kBAAkB;AAC7C,SAASC,UAAU,QAAQ,0BAA0B;AACrD,OAAO,SAASC,UAAUA,CAACC,MAAM,EAAE;EAC/B,OAAO,IAAIH,UAAU,CAAC,UAAUI,SAAS,EAAEC,OAAO,EAAE;IAChD,IAAIC,OAAO,GAAGP,MAAM,CAACK,SAAS,EAAE,EAAE,CAAC;IACnC,OAAO,IAAIH,UAAU,CAAC,UAAUM,QAAQ,EAAE;MACtC,IAAIC,MAAM;MACV,IAAIC,MAAM,GAAG,KAAK;MAClBC,OAAO,CAACC,OAAO,CAACL,OAAO,CAAC,CACnBM,IAAI,CAAC,UAAUC,GAAG,EAAE;QAAE,OAAOV,MAAM,CAACU,GAAG,EAAET,SAAS,CAACU,UAAU,CAAC,CAAC,CAAC;MAAE,CAAC,CAAC,CACpEF,IAAI,CAACR,SAAS,CAACF,UAAU,CAAC,CAC1BU,IAAI,CAAC,YAAY;QAClB;QACA,IAAIH,MAAM,EACN;QACJD,MAAM,GAAGH,OAAO,CAACD,SAAS,CAAC,CAACW,SAAS,CAAC;UAClCC,IAAI,EAAET,QAAQ,CAACS,IAAI,CAACC,IAAI,CAACV,QAAQ,CAAC;UAClCW,KAAK,EAAEX,QAAQ,CAACW,KAAK,CAACD,IAAI,CAACV,QAAQ,CAAC;UACpCY,QAAQ,EAAEZ,QAAQ,CAACY,QAAQ,CAACF,IAAI,CAACV,QAAQ;QAC7C,CAAC,CAAC;MACN,CAAC,CAAC,CACGa,KAAK,CAACb,QAAQ,CAACW,KAAK,CAACD,IAAI,CAACV,QAAQ,CAAC,CAAC;MACzC,OAAO,YAAY;QACfE,MAAM,GAAG,IAAI;QACb,IAAID,MAAM,EACNA,MAAM,CAACa,WAAW,CAAC,CAAC;MAC5B,CAAC;IACL,CAAC,CAAC;EACN,CAAC,CAAC;AACN","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}