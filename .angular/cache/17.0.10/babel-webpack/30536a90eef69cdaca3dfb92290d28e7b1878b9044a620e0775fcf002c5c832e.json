{"ast":null,"code":"import { APOLLO_OPTIONS } from 'apollo-angular';\nimport { ApolloClientOptions, ApolloLink, InMemoryCache, NormalizedCacheObject, split } from '@apollo/client/core';\nimport { HttpLink } from 'apollo-angular/http';\nimport { setContext } from '@apollo/client/link/context';\nimport { environment } from '@ridy/admin-panel/src/environments/environment';\nimport { getMainDefinition } from '@apollo/client/utilities';\nimport { GraphQLWsLink } from '@apollo/client/link/subscriptions';\nimport { createClient } from 'graphql-ws';\nimport { onError } from '@apollo/client/link/error';\nimport * as i0 from \"@angular/core\";\nexport function createApollo(httpLink) {\n  const http = httpLink.create({\n    uri: `${environment.root}graphql`\n  });\n  const wsLink = new GraphQLWsLink(createClient({\n    url: environment.wsEndpoint,\n    connectionParams: () => ({\n      authToken: localStorage.getItem('ridy_admin_token')\n    })\n  }));\n  const basic = setContext(() => ({\n    headers: {\n      Accept: 'charset=utf-8'\n    }\n  }));\n  const auth = setContext(() => {\n    return {\n      headers: {\n        Authorization: `Bearer ${localStorage.getItem('ridy_admin_token')}`\n      }\n    };\n  });\n  const defaultOptions = {\n    watchQuery: {\n      fetchPolicy: 'no-cache'\n      //errorPolicy: 'ignore',\n    },\n\n    query: {\n      fetchPolicy: 'no-cache'\n      //errorPolicy: 'all',\n    }\n  };\n\n  const errorLink = onError(({\n    graphQLErrors,\n    networkError\n  }) => {\n    if (graphQLErrors) graphQLErrors.forEach(({\n      message,\n      locations,\n      path\n    }) => console.log(`[GraphQL error]: Message: ${message}, Location: ${locations}, Path: ${path}`));\n    if (networkError) console.log(`[Network error]: ${networkError}`);\n  });\n  const link = ApolloLink.from([basic, auth, errorLink, http]);\n  const splitLink = split(({\n    query\n  }) => {\n    const definition = getMainDefinition(query);\n    return definition.kind === 'OperationDefinition' && definition.operation === 'subscription';\n  }, wsLink, link);\n  return {\n    cache: new InMemoryCache({\n      addTypename: false\n    }),\n    link: splitLink,\n    defaultOptions\n  };\n}\nexport class GraphQLModule {\n  static {\n    this.ɵfac = function GraphQLModule_Factory(t) {\n      return new (t || GraphQLModule)();\n    };\n  }\n  static {\n    this.ɵmod = /*@__PURE__*/i0.ɵɵdefineNgModule({\n      type: GraphQLModule\n    });\n  }\n  static {\n    this.ɵinj = /*@__PURE__*/i0.ɵɵdefineInjector({\n      providers: [{\n        provide: APOLLO_OPTIONS,\n        useFactory: createApollo,\n        deps: [HttpLink]\n      }]\n    });\n  }\n}","map":{"version":3,"names":["APOLLO_OPTIONS","ApolloClientOptions","ApolloLink","InMemoryCache","NormalizedCacheObject","split","HttpLink","setContext","environment","getMainDefinition","GraphQLWsLink","createClient","onError","createApollo","httpLink","http","create","uri","root","wsLink","url","wsEndpoint","connectionParams","authToken","localStorage","getItem","basic","headers","Accept","auth","Authorization","defaultOptions","watchQuery","fetchPolicy","query","errorLink","graphQLErrors","networkError","forEach","message","locations","path","console","log","link","from","splitLink","definition","kind","operation","cache","addTypename","GraphQLModule","provide","useFactory","deps"],"sources":["/Users/obiechina/Documents/ridy-flutter-full-taxi-solution 2/apps/admin-panel/src/app/graphql.module.ts"],"sourcesContent":["import { NgModule } from '@angular/core';\nimport { APOLLO_OPTIONS } from 'apollo-angular';\nimport {\n  ApolloCache,\n  ApolloClientOptions,\n  ApolloLink,\n  InMemoryCache,\n  NormalizedCacheObject,\n  split,\n} from '@apollo/client/core';\nimport { HttpLink } from 'apollo-angular/http';\nimport { DefaultOptions } from '@apollo/client/core';\nimport { setContext } from '@apollo/client/link/context';\nimport { environment } from '@ridy/admin-panel/src/environments/environment';\nimport { getMainDefinition } from '@apollo/client/utilities';\nimport { GraphQLWsLink } from '@apollo/client/link/subscriptions';\nimport { createClient } from 'graphql-ws';\nimport { onError } from '@apollo/client/link/error';\n\nexport function createApollo(\n  httpLink: HttpLink,\n): ApolloClientOptions<NormalizedCacheObject> {\n  const http = httpLink.create({\n    uri: `${environment.root}graphql`,\n  });\n  const wsLink = new GraphQLWsLink(\n    createClient({\n      url: environment.wsEndpoint,\n      connectionParams: () => ({\n        authToken: localStorage.getItem('ridy_admin_token'),\n      }),\n    }),\n  );\n  const basic = setContext(() => ({\n    headers: {\n      Accept: 'charset=utf-8',\n    },\n  }));\n  const auth = setContext(() => {\n    return {\n      headers: {\n        Authorization: `Bearer ${localStorage.getItem('ridy_admin_token')}`,\n      },\n    };\n  });\n  const defaultOptions: DefaultOptions = {\n    watchQuery: {\n      fetchPolicy: 'no-cache',\n      //errorPolicy: 'ignore',\n    },\n    query: {\n      fetchPolicy: 'no-cache',\n      //errorPolicy: 'all',\n    },\n  };\n  const errorLink = onError(({ graphQLErrors, networkError }) => {\n    if (graphQLErrors)\n      graphQLErrors.forEach(({ message, locations, path }) =>\n        console.log(\n          `[GraphQL error]: Message: ${message}, Location: ${locations}, Path: ${path}`,\n        ),\n      );\n    if (networkError) console.log(`[Network error]: ${networkError}`);\n  });\n\n  const link = ApolloLink.from([basic, auth, errorLink, http]);\n  const splitLink = split(\n    ({ query }) => {\n      const definition = getMainDefinition(query);\n      return (\n        definition.kind === 'OperationDefinition' &&\n        definition.operation === 'subscription'\n      );\n    },\n    wsLink,\n    link,\n  );\n\n  return {\n    cache: new InMemoryCache({\n      addTypename: false,\n    }),\n    link: splitLink,\n\n    defaultOptions,\n  };\n}\n\n@NgModule({\n  providers: [\n    {\n      provide: APOLLO_OPTIONS,\n      useFactory: createApollo,\n      deps: [HttpLink],\n    },\n  ],\n})\nexport class GraphQLModule {}\n"],"mappings":"AACA,SAASA,cAAc,QAAQ,gBAAgB;AAC/C,SAEEC,mBAAmB,EACnBC,UAAU,EACVC,aAAa,EACbC,qBAAqB,EACrBC,KAAK,QACA,qBAAqB;AAC5B,SAASC,QAAQ,QAAQ,qBAAqB;AAE9C,SAASC,UAAU,QAAQ,6BAA6B;AACxD,SAASC,WAAW,QAAQ,gDAAgD;AAC5E,SAASC,iBAAiB,QAAQ,0BAA0B;AAC5D,SAASC,aAAa,QAAQ,mCAAmC;AACjE,SAASC,YAAY,QAAQ,YAAY;AACzC,SAASC,OAAO,QAAQ,2BAA2B;;AAEnD,OAAM,SAAUC,YAAYA,CAC1BC,QAAkB;EAElB,MAAMC,IAAI,GAAGD,QAAQ,CAACE,MAAM,CAAC;IAC3BC,GAAG,EAAE,GAAGT,WAAW,CAACU,IAAI;GACzB,CAAC;EACF,MAAMC,MAAM,GAAG,IAAIT,aAAa,CAC9BC,YAAY,CAAC;IACXS,GAAG,EAAEZ,WAAW,CAACa,UAAU;IAC3BC,gBAAgB,EAAEA,CAAA,MAAO;MACvBC,SAAS,EAAEC,YAAY,CAACC,OAAO,CAAC,kBAAkB;KACnD;GACF,CAAC,CACH;EACD,MAAMC,KAAK,GAAGnB,UAAU,CAAC,OAAO;IAC9BoB,OAAO,EAAE;MACPC,MAAM,EAAE;;GAEX,CAAC,CAAC;EACH,MAAMC,IAAI,GAAGtB,UAAU,CAAC,MAAK;IAC3B,OAAO;MACLoB,OAAO,EAAE;QACPG,aAAa,EAAE,UAAUN,YAAY,CAACC,OAAO,CAAC,kBAAkB,CAAC;;KAEpE;EACH,CAAC,CAAC;EACF,MAAMM,cAAc,GAAmB;IACrCC,UAAU,EAAE;MACVC,WAAW,EAAE;MACb;KACD;;IACDC,KAAK,EAAE;MACLD,WAAW,EAAE;MACb;;GAEH;;EACD,MAAME,SAAS,GAAGvB,OAAO,CAAC,CAAC;IAAEwB,aAAa;IAAEC;EAAY,CAAE,KAAI;IAC5D,IAAID,aAAa,EACfA,aAAa,CAACE,OAAO,CAAC,CAAC;MAAEC,OAAO;MAAEC,SAAS;MAAEC;IAAI,CAAE,KACjDC,OAAO,CAACC,GAAG,CACT,6BAA6BJ,OAAO,eAAeC,SAAS,WAAWC,IAAI,EAAE,CAC9E,CACF;IACH,IAAIJ,YAAY,EAAEK,OAAO,CAACC,GAAG,CAAC,oBAAoBN,YAAY,EAAE,CAAC;EACnE,CAAC,CAAC;EAEF,MAAMO,IAAI,GAAG1C,UAAU,CAAC2C,IAAI,CAAC,CAACnB,KAAK,EAAEG,IAAI,EAAEM,SAAS,EAAEpB,IAAI,CAAC,CAAC;EAC5D,MAAM+B,SAAS,GAAGzC,KAAK,CACrB,CAAC;IAAE6B;EAAK,CAAE,KAAI;IACZ,MAAMa,UAAU,GAAGtC,iBAAiB,CAACyB,KAAK,CAAC;IAC3C,OACEa,UAAU,CAACC,IAAI,KAAK,qBAAqB,IACzCD,UAAU,CAACE,SAAS,KAAK,cAAc;EAE3C,CAAC,EACD9B,MAAM,EACNyB,IAAI,CACL;EAED,OAAO;IACLM,KAAK,EAAE,IAAI/C,aAAa,CAAC;MACvBgD,WAAW,EAAE;KACd,CAAC;IACFP,IAAI,EAAEE,SAAS;IAEff;GACD;AACH;AAWA,OAAM,MAAOqB,aAAa;;;uBAAbA,aAAa;IAAA;EAAA;;;YAAbA;IAAa;EAAA;;;iBARb,CACT;QACEC,OAAO,EAAErD,cAAc;QACvBsD,UAAU,EAAEzC,YAAY;QACxB0C,IAAI,EAAE,CAACjD,QAAQ;OAChB;IACF;EAAA","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}