{"ast":null,"code":"import { __extends } from \"tslib\";\nimport { each, some } from '@antv/util';\nimport ListState from './list-state';\nvar STATUS_UNCHECKED = 'unchecked';\nvar STATUS_CHECKED = 'checked';\n/**\n * checked Action\n * 提供三个对外方法\n * 1. toggle 切换状态\n * 2. checked 选中\n * 3. reset 清除重置\n */\nvar ListChecked = /** @class */function (_super) {\n  __extends(ListChecked, _super);\n  function ListChecked() {\n    var _this = _super !== null && _super.apply(this, arguments) || this;\n    _this.stateName = STATUS_CHECKED;\n    return _this;\n  }\n  // 单个 item 设置状态\n  ListChecked.prototype.setItemState = function (list, item, enable) {\n    this.setCheckedBy(list, function (el) {\n      return el === item;\n    }, enable);\n  };\n  // 根据条件设置 checked\n  ListChecked.prototype.setCheckedBy = function (list, callback, enable) {\n    var items = list.getItems();\n    if (enable) {\n      // 设置 checked 时，保留之前已经 checked 的项\n      each(items, function (item) {\n        if (callback(item)) {\n          if (list.hasState(item, STATUS_UNCHECKED)) {\n            list.setItemState(item, STATUS_UNCHECKED, false);\n          }\n          list.setItemState(item, STATUS_CHECKED, true);\n        } else if (!list.hasState(item, STATUS_CHECKED)) {\n          list.setItemState(item, STATUS_UNCHECKED, true);\n        }\n      });\n    }\n  };\n  /**\n   * 切换状态.\n   * 1. 当全部选中的时候 或者 当前 item 未选中时，进行激活操作\n   * 2. 否则，重置\n   * @override\n   */\n  ListChecked.prototype.toggle = function () {\n    var triggerInfo = this.getTriggerListInfo();\n    if (triggerInfo && triggerInfo.item) {\n      var list_1 = triggerInfo.list,\n        item = triggerInfo.item;\n      // 不知道 🤷‍♀️ 只认 unchecked status\n      var allChecked = !some(list_1.getItems(), function (t) {\n        return list_1.hasState(t, STATUS_UNCHECKED);\n      });\n      //\n      if (allChecked || list_1.hasState(item, STATUS_UNCHECKED)) {\n        this.setItemState(list_1, item, true);\n      } else {\n        this.reset();\n      }\n    }\n  };\n  /**\n   * checked 图例项\n   */\n  ListChecked.prototype.checked = function () {\n    this.setState();\n  };\n  /**\n   * 重置，需要全部清理 checked 和 unchecked\n   */\n  ListChecked.prototype.reset = function () {\n    var components = this.getAllowComponents();\n    each(components, function (component) {\n      component.clearItemsState(STATUS_CHECKED);\n      component.clearItemsState(STATUS_UNCHECKED);\n    });\n  };\n  return ListChecked;\n}(ListState);\nexport default ListChecked;","map":{"version":3,"names":["__extends","each","some","ListState","STATUS_UNCHECKED","STATUS_CHECKED","ListChecked","_super","_this","apply","arguments","stateName","prototype","setItemState","list","item","enable","setCheckedBy","el","callback","items","getItems","hasState","toggle","triggerInfo","getTriggerListInfo","list_1","allChecked","t","reset","checked","setState","components","getAllowComponents","component","clearItemsState"],"sources":["/Users/obiechina/Documents/ridy-flutter-full-taxi-solution 2/node_modules/@antv/g2/esm/interaction/action/component/list-checked.js"],"sourcesContent":["import { __extends } from \"tslib\";\nimport { each, some } from '@antv/util';\nimport ListState from './list-state';\nvar STATUS_UNCHECKED = 'unchecked';\nvar STATUS_CHECKED = 'checked';\n/**\n * checked Action\n * 提供三个对外方法\n * 1. toggle 切换状态\n * 2. checked 选中\n * 3. reset 清除重置\n */\nvar ListChecked = /** @class */ (function (_super) {\n    __extends(ListChecked, _super);\n    function ListChecked() {\n        var _this = _super !== null && _super.apply(this, arguments) || this;\n        _this.stateName = STATUS_CHECKED;\n        return _this;\n    }\n    // 单个 item 设置状态\n    ListChecked.prototype.setItemState = function (list, item, enable) {\n        this.setCheckedBy(list, function (el) { return el === item; }, enable);\n    };\n    // 根据条件设置 checked\n    ListChecked.prototype.setCheckedBy = function (list, callback, enable) {\n        var items = list.getItems();\n        if (enable) {\n            // 设置 checked 时，保留之前已经 checked 的项\n            each(items, function (item) {\n                if (callback(item)) {\n                    if (list.hasState(item, STATUS_UNCHECKED)) {\n                        list.setItemState(item, STATUS_UNCHECKED, false);\n                    }\n                    list.setItemState(item, STATUS_CHECKED, true);\n                }\n                else if (!list.hasState(item, STATUS_CHECKED)) {\n                    list.setItemState(item, STATUS_UNCHECKED, true);\n                }\n            });\n        }\n    };\n    /**\n     * 切换状态.\n     * 1. 当全部选中的时候 或者 当前 item 未选中时，进行激活操作\n     * 2. 否则，重置\n     * @override\n     */\n    ListChecked.prototype.toggle = function () {\n        var triggerInfo = this.getTriggerListInfo();\n        if (triggerInfo && triggerInfo.item) {\n            var list_1 = triggerInfo.list, item = triggerInfo.item;\n            // 不知道 🤷‍♀️ 只认 unchecked status\n            var allChecked = !some(list_1.getItems(), function (t) { return list_1.hasState(t, STATUS_UNCHECKED); });\n            //\n            if (allChecked || list_1.hasState(item, STATUS_UNCHECKED)) {\n                this.setItemState(list_1, item, true);\n            }\n            else {\n                this.reset();\n            }\n        }\n    };\n    /**\n     * checked 图例项\n     */\n    ListChecked.prototype.checked = function () {\n        this.setState();\n    };\n    /**\n     * 重置，需要全部清理 checked 和 unchecked\n     */\n    ListChecked.prototype.reset = function () {\n        var components = this.getAllowComponents();\n        each(components, function (component) {\n            component.clearItemsState(STATUS_CHECKED);\n            component.clearItemsState(STATUS_UNCHECKED);\n        });\n    };\n    return ListChecked;\n}(ListState));\nexport default ListChecked;\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}