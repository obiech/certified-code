{"ast":null,"code":"/**\n * @fileoverview 图片\n * @author dxq613@gmail.com\n */\nimport { __assign, __extends } from \"tslib\";\nimport ShapeBase from './base';\nimport { isString, isNil } from '../util/util';\nfunction isCanvas(dom) {\n  return dom instanceof HTMLElement && isString(dom.nodeName) && dom.nodeName.toUpperCase() === 'CANVAS';\n}\nvar ImageShape = /** @class */function (_super) {\n  __extends(ImageShape, _super);\n  function ImageShape() {\n    return _super !== null && _super.apply(this, arguments) || this;\n  }\n  ImageShape.prototype.getDefaultAttrs = function () {\n    var attrs = _super.prototype.getDefaultAttrs.call(this);\n    return __assign(__assign({}, attrs), {\n      x: 0,\n      y: 0,\n      width: 0,\n      height: 0\n    });\n  };\n  ImageShape.prototype.initAttrs = function (attrs) {\n    this._setImage(attrs.img);\n  };\n  // image 不计算 stroke\n  ImageShape.prototype.isStroke = function () {\n    return false;\n  };\n  // 仅仅使用包围盒检测来进行拾取\n  // 所以不需要复写 isInStrokeOrPath 的方法\n  ImageShape.prototype.isOnlyHitBox = function () {\n    return true;\n  };\n  ImageShape.prototype._afterLoading = function () {\n    if (this.get('toDraw') === true) {\n      var canvas = this.get('canvas');\n      if (canvas) {\n        // 这段应该改成局部渲染\n        canvas.draw();\n      } else {\n        // 这种方式如果发生遮挡会出现问题\n        this.createPath(this.get('context'));\n      }\n    }\n  };\n  ImageShape.prototype._setImage = function (img) {\n    var _this = this;\n    var attrs = this.attrs;\n    if (isString(img)) {\n      var image_1 = new Image();\n      image_1.onload = function () {\n        // 图片未加载完，则已经被销毁\n        if (_this.destroyed) {\n          return false;\n        }\n        // 缓存原始地址，可以做对比，防止重复加载图片\n        // 如果考虑到在加载过程中可能替换 img 属性，则情况更加复杂\n        // this.set('imgSrc', img);\n        // 这里会循环调用 _setImage 方法，但不会再走这个分支\n        _this.attr('img', image_1);\n        _this.set('loading', false);\n        _this._afterLoading();\n        var callback = _this.get('callback');\n        if (callback) {\n          callback.call(_this);\n        }\n      };\n      // 设置跨域\n      image_1.crossOrigin = 'Anonymous';\n      image_1.src = img;\n      // loading 过程中不绘制\n      this.set('loading', true);\n    } else if (img instanceof Image) {\n      // 如果是一个 image 对象，则设置宽高\n      if (!attrs.width) {\n        attrs.width = img.width;\n      }\n      if (!attrs.height) {\n        attrs.height = img.height;\n      }\n    } else if (isCanvas(img)) {\n      // 如果设置了 canvas 对象\n      if (!attrs.width) {\n        attrs.width = Number(img.getAttribute('width'));\n      }\n      if (!attrs.height) {\n        attrs.height, Number(img.getAttribute('height'));\n      }\n    }\n  };\n  ImageShape.prototype.onAttrChange = function (name, value, originValue) {\n    _super.prototype.onAttrChange.call(this, name, value, originValue);\n    // 如果加载的已经是当前图片，则不再处理\n    if (name === 'img') {\n      // 可以加缓冲，&& this.get('imgSrc') !== value\n      this._setImage(value);\n    }\n  };\n  ImageShape.prototype.createPath = function (context) {\n    // 正在加载则不绘制\n    if (this.get('loading')) {\n      this.set('toDraw', true); // 加载完成后绘制\n      this.set('context', context);\n      return;\n    }\n    var attrs = this.attr();\n    var x = attrs.x,\n      y = attrs.y,\n      width = attrs.width,\n      height = attrs.height,\n      sx = attrs.sx,\n      sy = attrs.sy,\n      swidth = attrs.swidth,\n      sheight = attrs.sheight;\n    var img = attrs.img;\n    if (img instanceof Image || isCanvas(img)) {\n      if (!isNil(sx) && !isNil(sy) && !isNil(swidth) && !isNil(sheight)) {\n        context.drawImage(img, sx, sy, swidth, sheight, x, y, width, height);\n      } else {\n        context.drawImage(img, x, y, width, height);\n      }\n    }\n  };\n  return ImageShape;\n}(ShapeBase);\nexport default ImageShape;","map":{"version":3,"names":["__assign","__extends","ShapeBase","isString","isNil","isCanvas","dom","HTMLElement","nodeName","toUpperCase","ImageShape","_super","apply","arguments","prototype","getDefaultAttrs","attrs","call","x","y","width","height","initAttrs","_setImage","img","isStroke","isOnlyHitBox","_afterLoading","get","canvas","draw","createPath","_this","image_1","Image","onload","destroyed","attr","set","callback","crossOrigin","src","Number","getAttribute","onAttrChange","name","value","originValue","context","sx","sy","swidth","sheight","drawImage"],"sources":["/Users/obiechina/Documents/ridy-flutter-full-taxi-solution 2/node_modules/@antv/g-canvas/esm/shape/image.js"],"sourcesContent":["/**\n * @fileoverview 图片\n * @author dxq613@gmail.com\n */\nimport { __assign, __extends } from \"tslib\";\nimport ShapeBase from './base';\nimport { isString, isNil } from '../util/util';\nfunction isCanvas(dom) {\n    return dom instanceof HTMLElement && isString(dom.nodeName) && dom.nodeName.toUpperCase() === 'CANVAS';\n}\nvar ImageShape = /** @class */ (function (_super) {\n    __extends(ImageShape, _super);\n    function ImageShape() {\n        return _super !== null && _super.apply(this, arguments) || this;\n    }\n    ImageShape.prototype.getDefaultAttrs = function () {\n        var attrs = _super.prototype.getDefaultAttrs.call(this);\n        return __assign(__assign({}, attrs), { x: 0, y: 0, width: 0, height: 0 });\n    };\n    ImageShape.prototype.initAttrs = function (attrs) {\n        this._setImage(attrs.img);\n    };\n    // image 不计算 stroke\n    ImageShape.prototype.isStroke = function () {\n        return false;\n    };\n    // 仅仅使用包围盒检测来进行拾取\n    // 所以不需要复写 isInStrokeOrPath 的方法\n    ImageShape.prototype.isOnlyHitBox = function () {\n        return true;\n    };\n    ImageShape.prototype._afterLoading = function () {\n        if (this.get('toDraw') === true) {\n            var canvas = this.get('canvas');\n            if (canvas) {\n                // 这段应该改成局部渲染\n                canvas.draw();\n            }\n            else {\n                // 这种方式如果发生遮挡会出现问题\n                this.createPath(this.get('context'));\n            }\n        }\n    };\n    ImageShape.prototype._setImage = function (img) {\n        var _this = this;\n        var attrs = this.attrs;\n        if (isString(img)) {\n            var image_1 = new Image();\n            image_1.onload = function () {\n                // 图片未加载完，则已经被销毁\n                if (_this.destroyed) {\n                    return false;\n                }\n                // 缓存原始地址，可以做对比，防止重复加载图片\n                // 如果考虑到在加载过程中可能替换 img 属性，则情况更加复杂\n                // this.set('imgSrc', img);\n                // 这里会循环调用 _setImage 方法，但不会再走这个分支\n                _this.attr('img', image_1);\n                _this.set('loading', false);\n                _this._afterLoading();\n                var callback = _this.get('callback');\n                if (callback) {\n                    callback.call(_this);\n                }\n            };\n            // 设置跨域\n            image_1.crossOrigin = 'Anonymous';\n            image_1.src = img;\n            // loading 过程中不绘制\n            this.set('loading', true);\n        }\n        else if (img instanceof Image) {\n            // 如果是一个 image 对象，则设置宽高\n            if (!attrs.width) {\n                attrs.width = img.width;\n            }\n            if (!attrs.height) {\n                attrs.height = img.height;\n            }\n        }\n        else if (isCanvas(img)) {\n            // 如果设置了 canvas 对象\n            if (!attrs.width) {\n                attrs.width = Number(img.getAttribute('width'));\n            }\n            if (!attrs.height) {\n                attrs.height, Number(img.getAttribute('height'));\n            }\n        }\n    };\n    ImageShape.prototype.onAttrChange = function (name, value, originValue) {\n        _super.prototype.onAttrChange.call(this, name, value, originValue);\n        // 如果加载的已经是当前图片，则不再处理\n        if (name === 'img') {\n            // 可以加缓冲，&& this.get('imgSrc') !== value\n            this._setImage(value);\n        }\n    };\n    ImageShape.prototype.createPath = function (context) {\n        // 正在加载则不绘制\n        if (this.get('loading')) {\n            this.set('toDraw', true); // 加载完成后绘制\n            this.set('context', context);\n            return;\n        }\n        var attrs = this.attr();\n        var x = attrs.x, y = attrs.y, width = attrs.width, height = attrs.height, sx = attrs.sx, sy = attrs.sy, swidth = attrs.swidth, sheight = attrs.sheight;\n        var img = attrs.img;\n        if (img instanceof Image || isCanvas(img)) {\n            if (!isNil(sx) && !isNil(sy) && !isNil(swidth) && !isNil(sheight)) {\n                context.drawImage(img, sx, sy, swidth, sheight, x, y, width, height);\n            }\n            else {\n                context.drawImage(img, x, y, width, height);\n            }\n        }\n    };\n    return ImageShape;\n}(ShapeBase));\nexport default ImageShape;\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}