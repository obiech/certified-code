{"ast":null,"code":"import { each, get } from '@antv/util';\nimport { getComponents, isInBox } from './action/util';\n/**\n * 交互的上下文\n */\nvar Context = /** @class */function () {\n  function Context(view) {\n    /** 当前所有的 Action */\n    this.actions = [];\n    /** 当前事件对象 */\n    this.event = null;\n    this.cacheMap = {};\n    this.view = view;\n  }\n  /**\n   * 缓存信息\n   * @param params 缓存的字段\n   *  - 如果一个字段则获取缓存\n   *  - 两个字段则设置缓存\n   */\n  Context.prototype.cache = function () {\n    var params = [];\n    for (var _i = 0; _i < arguments.length; _i++) {\n      params[_i] = arguments[_i];\n    }\n    if (params.length === 1) {\n      return this.cacheMap[params[0]];\n    } else if (params.length === 2) {\n      this.cacheMap[params[0]] = params[1];\n    }\n  };\n  /**\n   * 获取 Action\n   * @param name Action 的名称\n   */\n  Context.prototype.getAction = function (name) {\n    return this.actions.find(function (action) {\n      return action.name === name;\n    });\n  };\n  /**\n   * 获取 Action\n   * @param action Action 对象\n   */\n  Context.prototype.addAction = function (action) {\n    this.actions.push(action);\n  };\n  /**\n   * 移除 Action\n   * @param action Action 对象\n   */\n  Context.prototype.removeAction = function (action) {\n    var actions = this.actions;\n    var index = this.actions.indexOf(action);\n    if (index >= 0) {\n      actions.splice(index, 1);\n    }\n  };\n  /**\n   * 获取当前的点\n   */\n  Context.prototype.getCurrentPoint = function () {\n    var event = this.event;\n    if (event) {\n      if (event.target instanceof HTMLElement) {\n        var canvas = this.view.getCanvas();\n        var point = canvas.getPointByClient(event.clientX, event.clientY);\n        return point;\n      } else {\n        return {\n          x: event.x,\n          y: event.y\n        };\n      }\n    }\n    return null;\n  };\n  /**\n   * 获取当前 shape\n   * @returns current shape\n   */\n  Context.prototype.getCurrentShape = function () {\n    return get(this.event, ['gEvent', 'shape']);\n  };\n  /**\n   * 当前的触发是否在 View 内\n   */\n  Context.prototype.isInPlot = function () {\n    var point = this.getCurrentPoint();\n    if (point) {\n      return this.view.isPointInPlot(point);\n    }\n    return false;\n  };\n  /**\n   * 是否在指定的图形内\n   * @param name shape 的 name\n   */\n  Context.prototype.isInShape = function (name) {\n    var shape = this.getCurrentShape(); // 不再考虑在 shape 的 parent 内的情况\n    if (shape) {\n      return shape.get('name') === name;\n    }\n    return false;\n  };\n  /**\n   * 当前的触发是组件内部\n   * @param name 组件名，可以为空\n   */\n  Context.prototype.isInComponent = function (name) {\n    var components = getComponents(this.view);\n    var point = this.getCurrentPoint();\n    if (point) {\n      return !!components.find(function (component) {\n        var bbox = component.getBBox();\n        if (name) {\n          return component.get('name') === name && isInBox(bbox, point);\n        } else {\n          return isInBox(bbox, point);\n        }\n      });\n    }\n    return false;\n  };\n  /**\n   * 销毁\n   */\n  Context.prototype.destroy = function () {\n    // 先销毁 action 再清空，一边遍历，一边删除，所以数组需要更新引用\n    each(this.actions.slice(), function (action) {\n      action.destroy();\n    });\n    this.view = null;\n    this.event = null;\n    this.actions = null;\n    this.cacheMap = null;\n  };\n  return Context;\n}();\nexport default Context;","map":{"version":3,"names":["each","get","getComponents","isInBox","Context","view","actions","event","cacheMap","prototype","cache","params","_i","arguments","length","getAction","name","find","action","addAction","push","removeAction","index","indexOf","splice","getCurrentPoint","target","HTMLElement","canvas","getCanvas","point","getPointByClient","clientX","clientY","x","y","getCurrentShape","isInPlot","isPointInPlot","isInShape","shape","isInComponent","components","component","bbox","getBBox","destroy","slice"],"sources":["/Users/obiechina/Documents/ridy-flutter-full-taxi-solution 2/node_modules/@antv/g2/esm/interaction/context.js"],"sourcesContent":["import { each, get } from '@antv/util';\nimport { getComponents, isInBox } from './action/util';\n/**\n * 交互的上下文\n */\nvar Context = /** @class */ (function () {\n    function Context(view) {\n        /** 当前所有的 Action */\n        this.actions = [];\n        /** 当前事件对象 */\n        this.event = null;\n        this.cacheMap = {};\n        this.view = view;\n    }\n    /**\n     * 缓存信息\n     * @param params 缓存的字段\n     *  - 如果一个字段则获取缓存\n     *  - 两个字段则设置缓存\n     */\n    Context.prototype.cache = function () {\n        var params = [];\n        for (var _i = 0; _i < arguments.length; _i++) {\n            params[_i] = arguments[_i];\n        }\n        if (params.length === 1) {\n            return this.cacheMap[params[0]];\n        }\n        else if (params.length === 2) {\n            this.cacheMap[params[0]] = params[1];\n        }\n    };\n    /**\n     * 获取 Action\n     * @param name Action 的名称\n     */\n    Context.prototype.getAction = function (name) {\n        return this.actions.find(function (action) { return action.name === name; });\n    };\n    /**\n     * 获取 Action\n     * @param action Action 对象\n     */\n    Context.prototype.addAction = function (action) {\n        this.actions.push(action);\n    };\n    /**\n     * 移除 Action\n     * @param action Action 对象\n     */\n    Context.prototype.removeAction = function (action) {\n        var actions = this.actions;\n        var index = this.actions.indexOf(action);\n        if (index >= 0) {\n            actions.splice(index, 1);\n        }\n    };\n    /**\n     * 获取当前的点\n     */\n    Context.prototype.getCurrentPoint = function () {\n        var event = this.event;\n        if (event) {\n            if (event.target instanceof HTMLElement) {\n                var canvas = this.view.getCanvas();\n                var point = canvas.getPointByClient(event.clientX, event.clientY);\n                return point;\n            }\n            else {\n                return {\n                    x: event.x,\n                    y: event.y,\n                };\n            }\n        }\n        return null;\n    };\n    /**\n     * 获取当前 shape\n     * @returns current shape\n     */\n    Context.prototype.getCurrentShape = function () {\n        return get(this.event, ['gEvent', 'shape']);\n    };\n    /**\n     * 当前的触发是否在 View 内\n     */\n    Context.prototype.isInPlot = function () {\n        var point = this.getCurrentPoint();\n        if (point) {\n            return this.view.isPointInPlot(point);\n        }\n        return false;\n    };\n    /**\n     * 是否在指定的图形内\n     * @param name shape 的 name\n     */\n    Context.prototype.isInShape = function (name) {\n        var shape = this.getCurrentShape(); // 不再考虑在 shape 的 parent 内的情况\n        if (shape) {\n            return shape.get('name') === name;\n        }\n        return false;\n    };\n    /**\n     * 当前的触发是组件内部\n     * @param name 组件名，可以为空\n     */\n    Context.prototype.isInComponent = function (name) {\n        var components = getComponents(this.view);\n        var point = this.getCurrentPoint();\n        if (point) {\n            return !!components.find(function (component) {\n                var bbox = component.getBBox();\n                if (name) {\n                    return component.get('name') === name && isInBox(bbox, point);\n                }\n                else {\n                    return isInBox(bbox, point);\n                }\n            });\n        }\n        return false;\n    };\n    /**\n     * 销毁\n     */\n    Context.prototype.destroy = function () {\n        // 先销毁 action 再清空，一边遍历，一边删除，所以数组需要更新引用\n        each(this.actions.slice(), function (action) {\n            action.destroy();\n        });\n        this.view = null;\n        this.event = null;\n        this.actions = null;\n        this.cacheMap = null;\n    };\n    return Context;\n}());\nexport default Context;\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}