{"ast":null,"code":"import * as i0 from '@angular/core';\nimport { TemplateRef, Directive, Input, NgModule } from '@angular/core';\n\n/**\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://github.com/NG-ZORRO/ng-zorro-antd/blob/master/LICENSE\n */\nclass NzStringTemplateOutletDirective {\n  static ngTemplateContextGuard(_dir, _ctx) {\n    return true;\n  }\n  recreateView() {\n    this.viewContainer.clear();\n    const isTemplateRef = this.nzStringTemplateOutlet instanceof TemplateRef;\n    const templateRef = isTemplateRef ? this.nzStringTemplateOutlet : this.templateRef;\n    this.embeddedViewRef = this.viewContainer.createEmbeddedView(templateRef, isTemplateRef ? this.nzStringTemplateOutletContext : this.context);\n  }\n  updateContext() {\n    const isTemplateRef = this.nzStringTemplateOutlet instanceof TemplateRef;\n    const newCtx = isTemplateRef ? this.nzStringTemplateOutletContext : this.context;\n    const oldCtx = this.embeddedViewRef.context;\n    if (newCtx) {\n      for (const propName of Object.keys(newCtx)) {\n        oldCtx[propName] = newCtx[propName];\n      }\n    }\n  }\n  constructor(viewContainer, templateRef) {\n    this.viewContainer = viewContainer;\n    this.templateRef = templateRef;\n    this.embeddedViewRef = null;\n    this.context = new NzStringTemplateOutletContext();\n    this.nzStringTemplateOutletContext = null;\n    this.nzStringTemplateOutlet = null;\n  }\n  ngOnChanges(changes) {\n    const {\n      nzStringTemplateOutletContext,\n      nzStringTemplateOutlet\n    } = changes;\n    const shouldRecreateView = () => {\n      let shouldOutletRecreate = false;\n      if (nzStringTemplateOutlet) {\n        if (nzStringTemplateOutlet.firstChange) {\n          shouldOutletRecreate = true;\n        } else {\n          const isPreviousOutletTemplate = nzStringTemplateOutlet.previousValue instanceof TemplateRef;\n          const isCurrentOutletTemplate = nzStringTemplateOutlet.currentValue instanceof TemplateRef;\n          shouldOutletRecreate = isPreviousOutletTemplate || isCurrentOutletTemplate;\n        }\n      }\n      const hasContextShapeChanged = ctxChange => {\n        const prevCtxKeys = Object.keys(ctxChange.previousValue || {});\n        const currCtxKeys = Object.keys(ctxChange.currentValue || {});\n        if (prevCtxKeys.length === currCtxKeys.length) {\n          for (const propName of currCtxKeys) {\n            if (prevCtxKeys.indexOf(propName) === -1) {\n              return true;\n            }\n          }\n          return false;\n        } else {\n          return true;\n        }\n      };\n      const shouldContextRecreate = nzStringTemplateOutletContext && hasContextShapeChanged(nzStringTemplateOutletContext);\n      return shouldContextRecreate || shouldOutletRecreate;\n    };\n    if (nzStringTemplateOutlet) {\n      this.context.$implicit = nzStringTemplateOutlet.currentValue;\n    }\n    const recreateView = shouldRecreateView();\n    if (recreateView) {\n      /** recreate view when context shape or outlet change **/\n      this.recreateView();\n    } else {\n      /** update context **/\n      this.updateContext();\n    }\n  }\n  static {\n    this.ɵfac = function NzStringTemplateOutletDirective_Factory(t) {\n      return new (t || NzStringTemplateOutletDirective)(i0.ɵɵdirectiveInject(i0.ViewContainerRef), i0.ɵɵdirectiveInject(i0.TemplateRef));\n    };\n  }\n  static {\n    this.ɵdir = /* @__PURE__ */i0.ɵɵdefineDirective({\n      type: NzStringTemplateOutletDirective,\n      selectors: [[\"\", \"nzStringTemplateOutlet\", \"\"]],\n      inputs: {\n        nzStringTemplateOutletContext: \"nzStringTemplateOutletContext\",\n        nzStringTemplateOutlet: \"nzStringTemplateOutlet\"\n      },\n      exportAs: [\"nzStringTemplateOutlet\"],\n      standalone: true,\n      features: [i0.ɵɵNgOnChangesFeature]\n    });\n  }\n}\n(() => {\n  (typeof ngDevMode === \"undefined\" || ngDevMode) && i0.ɵsetClassMetadata(NzStringTemplateOutletDirective, [{\n    type: Directive,\n    args: [{\n      selector: '[nzStringTemplateOutlet]',\n      exportAs: 'nzStringTemplateOutlet',\n      standalone: true\n    }]\n  }], () => [{\n    type: i0.ViewContainerRef\n  }, {\n    type: i0.TemplateRef\n  }], {\n    nzStringTemplateOutletContext: [{\n      type: Input\n    }],\n    nzStringTemplateOutlet: [{\n      type: Input\n    }]\n  });\n})();\nclass NzStringTemplateOutletContext {}\n\n/**\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://github.com/NG-ZORRO/ng-zorro-antd/blob/master/LICENSE\n */\nclass NzOutletModule {\n  static {\n    this.ɵfac = function NzOutletModule_Factory(t) {\n      return new (t || NzOutletModule)();\n    };\n  }\n  static {\n    this.ɵmod = /* @__PURE__ */i0.ɵɵdefineNgModule({\n      type: NzOutletModule\n    });\n  }\n  static {\n    this.ɵinj = /* @__PURE__ */i0.ɵɵdefineInjector({});\n  }\n}\n(() => {\n  (typeof ngDevMode === \"undefined\" || ngDevMode) && i0.ɵsetClassMetadata(NzOutletModule, [{\n    type: NgModule,\n    args: [{\n      imports: [NzStringTemplateOutletDirective],\n      exports: [NzStringTemplateOutletDirective]\n    }]\n  }], null, null);\n})();\n\n/**\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://github.com/NG-ZORRO/ng-zorro-antd/blob/master/LICENSE\n */\n\n/**\n * Generated bundle index. Do not edit.\n */\n\nexport { NzOutletModule, NzStringTemplateOutletDirective };","map":{"version":3,"names":["i0","TemplateRef","Directive","Input","NgModule","NzStringTemplateOutletDirective","ngTemplateContextGuard","_dir","_ctx","recreateView","viewContainer","clear","isTemplateRef","nzStringTemplateOutlet","templateRef","embeddedViewRef","createEmbeddedView","nzStringTemplateOutletContext","context","updateContext","newCtx","oldCtx","propName","Object","keys","constructor","NzStringTemplateOutletContext","ngOnChanges","changes","shouldRecreateView","shouldOutletRecreate","firstChange","isPreviousOutletTemplate","previousValue","isCurrentOutletTemplate","currentValue","hasContextShapeChanged","ctxChange","prevCtxKeys","currCtxKeys","length","indexOf","shouldContextRecreate","$implicit","ɵfac","NzStringTemplateOutletDirective_Factory","t","ɵɵdirectiveInject","ViewContainerRef","ɵdir","ɵɵdefineDirective","type","selectors","inputs","exportAs","standalone","features","ɵɵNgOnChangesFeature","ngDevMode","ɵsetClassMetadata","args","selector","NzOutletModule","NzOutletModule_Factory","ɵmod","ɵɵdefineNgModule","ɵinj","ɵɵdefineInjector","imports","exports"],"sources":["/Users/obiechina/Documents/ridy-flutter-full-taxi-solution 2/node_modules/ng-zorro-antd/fesm2022/ng-zorro-antd-core-outlet.mjs"],"sourcesContent":["import * as i0 from '@angular/core';\nimport { TemplateRef, Directive, Input, NgModule } from '@angular/core';\n\n/**\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://github.com/NG-ZORRO/ng-zorro-antd/blob/master/LICENSE\n */\nclass NzStringTemplateOutletDirective {\n    static ngTemplateContextGuard(_dir, _ctx) {\n        return true;\n    }\n    recreateView() {\n        this.viewContainer.clear();\n        const isTemplateRef = this.nzStringTemplateOutlet instanceof TemplateRef;\n        const templateRef = (isTemplateRef ? this.nzStringTemplateOutlet : this.templateRef);\n        this.embeddedViewRef = this.viewContainer.createEmbeddedView(templateRef, isTemplateRef ? this.nzStringTemplateOutletContext : this.context);\n    }\n    updateContext() {\n        const isTemplateRef = this.nzStringTemplateOutlet instanceof TemplateRef;\n        const newCtx = isTemplateRef ? this.nzStringTemplateOutletContext : this.context;\n        const oldCtx = this.embeddedViewRef.context;\n        if (newCtx) {\n            for (const propName of Object.keys(newCtx)) {\n                oldCtx[propName] = newCtx[propName];\n            }\n        }\n    }\n    constructor(viewContainer, templateRef) {\n        this.viewContainer = viewContainer;\n        this.templateRef = templateRef;\n        this.embeddedViewRef = null;\n        this.context = new NzStringTemplateOutletContext();\n        this.nzStringTemplateOutletContext = null;\n        this.nzStringTemplateOutlet = null;\n    }\n    ngOnChanges(changes) {\n        const { nzStringTemplateOutletContext, nzStringTemplateOutlet } = changes;\n        const shouldRecreateView = () => {\n            let shouldOutletRecreate = false;\n            if (nzStringTemplateOutlet) {\n                if (nzStringTemplateOutlet.firstChange) {\n                    shouldOutletRecreate = true;\n                }\n                else {\n                    const isPreviousOutletTemplate = nzStringTemplateOutlet.previousValue instanceof TemplateRef;\n                    const isCurrentOutletTemplate = nzStringTemplateOutlet.currentValue instanceof TemplateRef;\n                    shouldOutletRecreate = isPreviousOutletTemplate || isCurrentOutletTemplate;\n                }\n            }\n            const hasContextShapeChanged = (ctxChange) => {\n                const prevCtxKeys = Object.keys(ctxChange.previousValue || {});\n                const currCtxKeys = Object.keys(ctxChange.currentValue || {});\n                if (prevCtxKeys.length === currCtxKeys.length) {\n                    for (const propName of currCtxKeys) {\n                        if (prevCtxKeys.indexOf(propName) === -1) {\n                            return true;\n                        }\n                    }\n                    return false;\n                }\n                else {\n                    return true;\n                }\n            };\n            const shouldContextRecreate = nzStringTemplateOutletContext && hasContextShapeChanged(nzStringTemplateOutletContext);\n            return shouldContextRecreate || shouldOutletRecreate;\n        };\n        if (nzStringTemplateOutlet) {\n            this.context.$implicit = nzStringTemplateOutlet.currentValue;\n        }\n        const recreateView = shouldRecreateView();\n        if (recreateView) {\n            /** recreate view when context shape or outlet change **/\n            this.recreateView();\n        }\n        else {\n            /** update context **/\n            this.updateContext();\n        }\n    }\n    static { this.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: \"12.0.0\", version: \"17.3.8\", ngImport: i0, type: NzStringTemplateOutletDirective, deps: [{ token: i0.ViewContainerRef }, { token: i0.TemplateRef }], target: i0.ɵɵFactoryTarget.Directive }); }\n    static { this.ɵdir = i0.ɵɵngDeclareDirective({ minVersion: \"14.0.0\", version: \"17.3.8\", type: NzStringTemplateOutletDirective, isStandalone: true, selector: \"[nzStringTemplateOutlet]\", inputs: { nzStringTemplateOutletContext: \"nzStringTemplateOutletContext\", nzStringTemplateOutlet: \"nzStringTemplateOutlet\" }, exportAs: [\"nzStringTemplateOutlet\"], usesOnChanges: true, ngImport: i0 }); }\n}\ni0.ɵɵngDeclareClassMetadata({ minVersion: \"12.0.0\", version: \"17.3.8\", ngImport: i0, type: NzStringTemplateOutletDirective, decorators: [{\n            type: Directive,\n            args: [{\n                    selector: '[nzStringTemplateOutlet]',\n                    exportAs: 'nzStringTemplateOutlet',\n                    standalone: true\n                }]\n        }], ctorParameters: () => [{ type: i0.ViewContainerRef }, { type: i0.TemplateRef }], propDecorators: { nzStringTemplateOutletContext: [{\n                type: Input\n            }], nzStringTemplateOutlet: [{\n                type: Input\n            }] } });\nclass NzStringTemplateOutletContext {\n}\n\n/**\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://github.com/NG-ZORRO/ng-zorro-antd/blob/master/LICENSE\n */\nclass NzOutletModule {\n    static { this.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: \"12.0.0\", version: \"17.3.8\", ngImport: i0, type: NzOutletModule, deps: [], target: i0.ɵɵFactoryTarget.NgModule }); }\n    static { this.ɵmod = i0.ɵɵngDeclareNgModule({ minVersion: \"14.0.0\", version: \"17.3.8\", ngImport: i0, type: NzOutletModule, imports: [NzStringTemplateOutletDirective], exports: [NzStringTemplateOutletDirective] }); }\n    static { this.ɵinj = i0.ɵɵngDeclareInjector({ minVersion: \"12.0.0\", version: \"17.3.8\", ngImport: i0, type: NzOutletModule }); }\n}\ni0.ɵɵngDeclareClassMetadata({ minVersion: \"12.0.0\", version: \"17.3.8\", ngImport: i0, type: NzOutletModule, decorators: [{\n            type: NgModule,\n            args: [{\n                    imports: [NzStringTemplateOutletDirective],\n                    exports: [NzStringTemplateOutletDirective]\n                }]\n        }] });\n\n/**\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://github.com/NG-ZORRO/ng-zorro-antd/blob/master/LICENSE\n */\n\n/**\n * Generated bundle index. Do not edit.\n */\n\nexport { NzOutletModule, NzStringTemplateOutletDirective };\n"],"mappings":"AAAA,OAAO,KAAKA,EAAE,MAAM,eAAe;AACnC,SAASC,WAAW,EAAEC,SAAS,EAAEC,KAAK,EAAEC,QAAQ,QAAQ,eAAe;;AAEvE;AACA;AACA;AACA;AACA,MAAMC,+BAA+B,CAAC;EAClC,OAAOC,sBAAsBA,CAACC,IAAI,EAAEC,IAAI,EAAE;IACtC,OAAO,IAAI;EACf;EACAC,YAAYA,CAAA,EAAG;IACX,IAAI,CAACC,aAAa,CAACC,KAAK,CAAC,CAAC;IAC1B,MAAMC,aAAa,GAAG,IAAI,CAACC,sBAAsB,YAAYZ,WAAW;IACxE,MAAMa,WAAW,GAAIF,aAAa,GAAG,IAAI,CAACC,sBAAsB,GAAG,IAAI,CAACC,WAAY;IACpF,IAAI,CAACC,eAAe,GAAG,IAAI,CAACL,aAAa,CAACM,kBAAkB,CAACF,WAAW,EAAEF,aAAa,GAAG,IAAI,CAACK,6BAA6B,GAAG,IAAI,CAACC,OAAO,CAAC;EAChJ;EACAC,aAAaA,CAAA,EAAG;IACZ,MAAMP,aAAa,GAAG,IAAI,CAACC,sBAAsB,YAAYZ,WAAW;IACxE,MAAMmB,MAAM,GAAGR,aAAa,GAAG,IAAI,CAACK,6BAA6B,GAAG,IAAI,CAACC,OAAO;IAChF,MAAMG,MAAM,GAAG,IAAI,CAACN,eAAe,CAACG,OAAO;IAC3C,IAAIE,MAAM,EAAE;MACR,KAAK,MAAME,QAAQ,IAAIC,MAAM,CAACC,IAAI,CAACJ,MAAM,CAAC,EAAE;QACxCC,MAAM,CAACC,QAAQ,CAAC,GAAGF,MAAM,CAACE,QAAQ,CAAC;MACvC;IACJ;EACJ;EACAG,WAAWA,CAACf,aAAa,EAAEI,WAAW,EAAE;IACpC,IAAI,CAACJ,aAAa,GAAGA,aAAa;IAClC,IAAI,CAACI,WAAW,GAAGA,WAAW;IAC9B,IAAI,CAACC,eAAe,GAAG,IAAI;IAC3B,IAAI,CAACG,OAAO,GAAG,IAAIQ,6BAA6B,CAAC,CAAC;IAClD,IAAI,CAACT,6BAA6B,GAAG,IAAI;IACzC,IAAI,CAACJ,sBAAsB,GAAG,IAAI;EACtC;EACAc,WAAWA,CAACC,OAAO,EAAE;IACjB,MAAM;MAAEX,6BAA6B;MAAEJ;IAAuB,CAAC,GAAGe,OAAO;IACzE,MAAMC,kBAAkB,GAAGA,CAAA,KAAM;MAC7B,IAAIC,oBAAoB,GAAG,KAAK;MAChC,IAAIjB,sBAAsB,EAAE;QACxB,IAAIA,sBAAsB,CAACkB,WAAW,EAAE;UACpCD,oBAAoB,GAAG,IAAI;QAC/B,CAAC,MACI;UACD,MAAME,wBAAwB,GAAGnB,sBAAsB,CAACoB,aAAa,YAAYhC,WAAW;UAC5F,MAAMiC,uBAAuB,GAAGrB,sBAAsB,CAACsB,YAAY,YAAYlC,WAAW;UAC1F6B,oBAAoB,GAAGE,wBAAwB,IAAIE,uBAAuB;QAC9E;MACJ;MACA,MAAME,sBAAsB,GAAIC,SAAS,IAAK;QAC1C,MAAMC,WAAW,GAAGf,MAAM,CAACC,IAAI,CAACa,SAAS,CAACJ,aAAa,IAAI,CAAC,CAAC,CAAC;QAC9D,MAAMM,WAAW,GAAGhB,MAAM,CAACC,IAAI,CAACa,SAAS,CAACF,YAAY,IAAI,CAAC,CAAC,CAAC;QAC7D,IAAIG,WAAW,CAACE,MAAM,KAAKD,WAAW,CAACC,MAAM,EAAE;UAC3C,KAAK,MAAMlB,QAAQ,IAAIiB,WAAW,EAAE;YAChC,IAAID,WAAW,CAACG,OAAO,CAACnB,QAAQ,CAAC,KAAK,CAAC,CAAC,EAAE;cACtC,OAAO,IAAI;YACf;UACJ;UACA,OAAO,KAAK;QAChB,CAAC,MACI;UACD,OAAO,IAAI;QACf;MACJ,CAAC;MACD,MAAMoB,qBAAqB,GAAGzB,6BAA6B,IAAImB,sBAAsB,CAACnB,6BAA6B,CAAC;MACpH,OAAOyB,qBAAqB,IAAIZ,oBAAoB;IACxD,CAAC;IACD,IAAIjB,sBAAsB,EAAE;MACxB,IAAI,CAACK,OAAO,CAACyB,SAAS,GAAG9B,sBAAsB,CAACsB,YAAY;IAChE;IACA,MAAM1B,YAAY,GAAGoB,kBAAkB,CAAC,CAAC;IACzC,IAAIpB,YAAY,EAAE;MACd;MACA,IAAI,CAACA,YAAY,CAAC,CAAC;IACvB,CAAC,MACI;MACD;MACA,IAAI,CAACU,aAAa,CAAC,CAAC;IACxB;EACJ;EACA;IAAS,IAAI,CAACyB,IAAI,YAAAC,wCAAAC,CAAA;MAAA,YAAAA,CAAA,IAAwFzC,+BAA+B,EAAzCL,EAAE,CAAA+C,iBAAA,CAAyD/C,EAAE,CAACgD,gBAAgB,GAA9EhD,EAAE,CAAA+C,iBAAA,CAAyF/C,EAAE,CAACC,WAAW;IAAA,CAA4C;EAAE;EACvP;IAAS,IAAI,CAACgD,IAAI,kBAD8EjD,EAAE,CAAAkD,iBAAA;MAAAC,IAAA,EACJ9C,+BAA+B;MAAA+C,SAAA;MAAAC,MAAA;QAAApC,6BAAA;QAAAJ,sBAAA;MAAA;MAAAyC,QAAA;MAAAC,UAAA;MAAAC,QAAA,GAD7BxD,EAAE,CAAAyD,oBAAA;IAAA,EAC+R;EAAE;AACvY;AACA;EAAA,QAAAC,SAAA,oBAAAA,SAAA,KAHoG1D,EAAE,CAAA2D,iBAAA,CAGXtD,+BAA+B,EAAc,CAAC;IAC7H8C,IAAI,EAAEjD,SAAS;IACf0D,IAAI,EAAE,CAAC;MACCC,QAAQ,EAAE,0BAA0B;MACpCP,QAAQ,EAAE,wBAAwB;MAClCC,UAAU,EAAE;IAChB,CAAC;EACT,CAAC,CAAC,EAAkB,MAAM,CAAC;IAAEJ,IAAI,EAAEnD,EAAE,CAACgD;EAAiB,CAAC,EAAE;IAAEG,IAAI,EAAEnD,EAAE,CAACC;EAAY,CAAC,CAAC,EAAkB;IAAEgB,6BAA6B,EAAE,CAAC;MAC/HkC,IAAI,EAAEhD;IACV,CAAC,CAAC;IAAEU,sBAAsB,EAAE,CAAC;MACzBsC,IAAI,EAAEhD;IACV,CAAC;EAAE,CAAC;AAAA;AAChB,MAAMuB,6BAA6B,CAAC;;AAGpC;AACA;AACA;AACA;AACA,MAAMoC,cAAc,CAAC;EACjB;IAAS,IAAI,CAAClB,IAAI,YAAAmB,uBAAAjB,CAAA;MAAA,YAAAA,CAAA,IAAwFgB,cAAc;IAAA,CAAkD;EAAE;EAC5K;IAAS,IAAI,CAACE,IAAI,kBAxB8EhE,EAAE,CAAAiE,gBAAA;MAAAd,IAAA,EAwBSW;IAAc,EAA2F;EAAE;EACtN;IAAS,IAAI,CAACI,IAAI,kBAzB8ElE,EAAE,CAAAmE,gBAAA,IAyB0B;EAAE;AAClI;AACA;EAAA,QAAAT,SAAA,oBAAAA,SAAA,KA3BoG1D,EAAE,CAAA2D,iBAAA,CA2BXG,cAAc,EAAc,CAAC;IAC5GX,IAAI,EAAE/C,QAAQ;IACdwD,IAAI,EAAE,CAAC;MACCQ,OAAO,EAAE,CAAC/D,+BAA+B,CAAC;MAC1CgE,OAAO,EAAE,CAAChE,+BAA+B;IAC7C,CAAC;EACT,CAAC,CAAC;AAAA;;AAEV;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA,SAASyD,cAAc,EAAEzD,+BAA+B","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}