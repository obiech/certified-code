{"ast":null,"code":"import { __values } from \"tslib\";\nimport { registerShape } from '../base';\nimport { getStyle } from '../util/get-style';\nregisterShape('point', 'image', {\n  draw: function (cfg, container) {\n    var e_1, _a;\n    var size = getStyle(cfg, false, false, 'r').r;\n    var points = this.parsePoints(cfg.points);\n    var pointPosition = points[0];\n    if (cfg.isStack) {\n      pointPosition = points[1];\n    } else if (points.length > 1) {\n      var group = container.addGroup();\n      try {\n        for (var points_1 = __values(points), points_1_1 = points_1.next(); !points_1_1.done; points_1_1 = points_1.next()) {\n          var point = points_1_1.value;\n          group.addShape('image', {\n            attrs: {\n              x: point.x - size / 2,\n              y: point.y - size,\n              width: size,\n              height: size,\n              img: cfg.shape[1]\n            }\n          });\n        }\n      } catch (e_1_1) {\n        e_1 = {\n          error: e_1_1\n        };\n      } finally {\n        try {\n          if (points_1_1 && !points_1_1.done && (_a = points_1.return)) _a.call(points_1);\n        } finally {\n          if (e_1) throw e_1.error;\n        }\n      }\n      return group;\n    }\n    return container.addShape('image', {\n      attrs: {\n        x: pointPosition.x - size / 2,\n        y: pointPosition.y - size,\n        width: size,\n        height: size,\n        img: cfg.shape[1]\n      }\n    });\n  },\n  getMarker: function (markerCfg) {\n    var color = markerCfg.color;\n    return {\n      symbol: 'circle',\n      style: {\n        r: 4.5,\n        fill: color\n      }\n    };\n  }\n});","map":{"version":3,"names":["__values","registerShape","getStyle","draw","cfg","container","e_1","_a","size","r","points","parsePoints","pointPosition","isStack","length","group","addGroup","points_1","points_1_1","next","done","point","value","addShape","attrs","x","y","width","height","img","shape","e_1_1","error","return","call","getMarker","markerCfg","color","symbol","style","fill"],"sources":["/Users/obiechina/Documents/ridy-flutter-full-taxi-solution 2/node_modules/@antv/g2/esm/geometry/shape/point/image.js"],"sourcesContent":["import { __values } from \"tslib\";\nimport { registerShape } from '../base';\nimport { getStyle } from '../util/get-style';\nregisterShape('point', 'image', {\n    draw: function (cfg, container) {\n        var e_1, _a;\n        var size = getStyle(cfg, false, false, 'r').r;\n        var points = this.parsePoints(cfg.points);\n        var pointPosition = points[0];\n        if (cfg.isStack) {\n            pointPosition = points[1];\n        }\n        else if (points.length > 1) {\n            var group = container.addGroup();\n            try {\n                for (var points_1 = __values(points), points_1_1 = points_1.next(); !points_1_1.done; points_1_1 = points_1.next()) {\n                    var point = points_1_1.value;\n                    group.addShape('image', {\n                        attrs: {\n                            x: point.x - size / 2,\n                            y: point.y - size,\n                            width: size,\n                            height: size,\n                            img: cfg.shape[1],\n                        },\n                    });\n                }\n            }\n            catch (e_1_1) { e_1 = { error: e_1_1 }; }\n            finally {\n                try {\n                    if (points_1_1 && !points_1_1.done && (_a = points_1.return)) _a.call(points_1);\n                }\n                finally { if (e_1) throw e_1.error; }\n            }\n            return group;\n        }\n        return container.addShape('image', {\n            attrs: {\n                x: pointPosition.x - size / 2,\n                y: pointPosition.y - size,\n                width: size,\n                height: size,\n                img: cfg.shape[1],\n            },\n        });\n    },\n    getMarker: function (markerCfg) {\n        var color = markerCfg.color;\n        return {\n            symbol: 'circle',\n            style: {\n                r: 4.5,\n                fill: color,\n            },\n        };\n    },\n});\n"],"mappings":"AAAA,SAASA,QAAQ,QAAQ,OAAO;AAChC,SAASC,aAAa,QAAQ,SAAS;AACvC,SAASC,QAAQ,QAAQ,mBAAmB;AAC5CD,aAAa,CAAC,OAAO,EAAE,OAAO,EAAE;EAC5BE,IAAI,EAAE,SAAAA,CAAUC,GAAG,EAAEC,SAAS,EAAE;IAC5B,IAAIC,GAAG,EAAEC,EAAE;IACX,IAAIC,IAAI,GAAGN,QAAQ,CAACE,GAAG,EAAE,KAAK,EAAE,KAAK,EAAE,GAAG,CAAC,CAACK,CAAC;IAC7C,IAAIC,MAAM,GAAG,IAAI,CAACC,WAAW,CAACP,GAAG,CAACM,MAAM,CAAC;IACzC,IAAIE,aAAa,GAAGF,MAAM,CAAC,CAAC,CAAC;IAC7B,IAAIN,GAAG,CAACS,OAAO,EAAE;MACbD,aAAa,GAAGF,MAAM,CAAC,CAAC,CAAC;IAC7B,CAAC,MACI,IAAIA,MAAM,CAACI,MAAM,GAAG,CAAC,EAAE;MACxB,IAAIC,KAAK,GAAGV,SAAS,CAACW,QAAQ,CAAC,CAAC;MAChC,IAAI;QACA,KAAK,IAAIC,QAAQ,GAAGjB,QAAQ,CAACU,MAAM,CAAC,EAAEQ,UAAU,GAAGD,QAAQ,CAACE,IAAI,CAAC,CAAC,EAAE,CAACD,UAAU,CAACE,IAAI,EAAEF,UAAU,GAAGD,QAAQ,CAACE,IAAI,CAAC,CAAC,EAAE;UAChH,IAAIE,KAAK,GAAGH,UAAU,CAACI,KAAK;UAC5BP,KAAK,CAACQ,QAAQ,CAAC,OAAO,EAAE;YACpBC,KAAK,EAAE;cACHC,CAAC,EAAEJ,KAAK,CAACI,CAAC,GAAGjB,IAAI,GAAG,CAAC;cACrBkB,CAAC,EAAEL,KAAK,CAACK,CAAC,GAAGlB,IAAI;cACjBmB,KAAK,EAAEnB,IAAI;cACXoB,MAAM,EAAEpB,IAAI;cACZqB,GAAG,EAAEzB,GAAG,CAAC0B,KAAK,CAAC,CAAC;YACpB;UACJ,CAAC,CAAC;QACN;MACJ,CAAC,CACD,OAAOC,KAAK,EAAE;QAAEzB,GAAG,GAAG;UAAE0B,KAAK,EAAED;QAAM,CAAC;MAAE,CAAC,SACjC;QACJ,IAAI;UACA,IAAIb,UAAU,IAAI,CAACA,UAAU,CAACE,IAAI,KAAKb,EAAE,GAAGU,QAAQ,CAACgB,MAAM,CAAC,EAAE1B,EAAE,CAAC2B,IAAI,CAACjB,QAAQ,CAAC;QACnF,CAAC,SACO;UAAE,IAAIX,GAAG,EAAE,MAAMA,GAAG,CAAC0B,KAAK;QAAE;MACxC;MACA,OAAOjB,KAAK;IAChB;IACA,OAAOV,SAAS,CAACkB,QAAQ,CAAC,OAAO,EAAE;MAC/BC,KAAK,EAAE;QACHC,CAAC,EAAEb,aAAa,CAACa,CAAC,GAAGjB,IAAI,GAAG,CAAC;QAC7BkB,CAAC,EAAEd,aAAa,CAACc,CAAC,GAAGlB,IAAI;QACzBmB,KAAK,EAAEnB,IAAI;QACXoB,MAAM,EAAEpB,IAAI;QACZqB,GAAG,EAAEzB,GAAG,CAAC0B,KAAK,CAAC,CAAC;MACpB;IACJ,CAAC,CAAC;EACN,CAAC;EACDK,SAAS,EAAE,SAAAA,CAAUC,SAAS,EAAE;IAC5B,IAAIC,KAAK,GAAGD,SAAS,CAACC,KAAK;IAC3B,OAAO;MACHC,MAAM,EAAE,QAAQ;MAChBC,KAAK,EAAE;QACH9B,CAAC,EAAE,GAAG;QACN+B,IAAI,EAAEH;MACV;IACJ,CAAC;EACL;AACJ,CAAC,CAAC","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}