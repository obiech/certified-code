{"ast":null,"code":"import { DAY, HOUR, MINUTE, MONTH, SECOND, YEAR } from '../util/time';\nfunction getYear(date) {\n  return new Date(date).getFullYear();\n}\nfunction createYear(year) {\n  return new Date(year, 0, 1).getTime();\n}\nfunction getMonth(date) {\n  return new Date(date).getMonth();\n}\nfunction diffMonth(min, max) {\n  var minYear = getYear(min);\n  var maxYear = getYear(max);\n  var minMonth = getMonth(min);\n  var maxMonth = getMonth(max);\n  return (maxYear - minYear) * 12 + (maxMonth - minMonth) % 12;\n}\nfunction creatMonth(year, month) {\n  return new Date(year, month, 1).getTime();\n}\nfunction diffDay(min, max) {\n  return Math.ceil((max - min) / DAY);\n}\nfunction diffHour(min, max) {\n  return Math.ceil((max - min) / HOUR);\n}\nfunction diffMinus(min, max) {\n  return Math.ceil((max - min) / (60 * 1000));\n}\n/**\n * 计算 time 的 ticks，对 month, year 进行 pretty 处理\n * @param cfg 度量的配置项\n * @returns 计算后的 ticks\n */\nexport default function timePretty(cfg) {\n  var min = cfg.min,\n    max = cfg.max,\n    minTickInterval = cfg.minTickInterval,\n    tickCount = cfg.tickCount;\n  var tickInterval = cfg.tickInterval;\n  var ticks = [];\n  // 指定 tickInterval 后 tickCount 不生效，需要重新计算\n  if (!tickInterval) {\n    tickInterval = (max - min) / tickCount;\n    // 如果设置了最小间距，则使用最小间距\n    if (minTickInterval && tickInterval < minTickInterval) {\n      tickInterval = minTickInterval;\n    }\n  }\n  tickInterval = Math.max(Math.floor((max - min) / (Math.pow(2, 12) - 1)), tickInterval);\n  var minYear = getYear(min);\n  // 如果间距大于 1 年，则将开始日期从整年开始\n  if (tickInterval > YEAR) {\n    var maxYear = getYear(max);\n    var yearInterval = Math.ceil(tickInterval / YEAR);\n    for (var i = minYear; i <= maxYear + yearInterval; i = i + yearInterval) {\n      ticks.push(createYear(i));\n    }\n  } else if (tickInterval > MONTH) {\n    // 大于月时\n    var monthInterval = Math.ceil(tickInterval / MONTH);\n    var mmMoth = getMonth(min);\n    var dMonths = diffMonth(min, max);\n    for (var i = 0; i <= dMonths + monthInterval; i = i + monthInterval) {\n      ticks.push(creatMonth(minYear, i + mmMoth));\n    }\n  } else if (tickInterval > DAY) {\n    // 大于天\n    var date = new Date(min);\n    var year = date.getFullYear();\n    var month = date.getMonth();\n    var mday = date.getDate();\n    var day = Math.ceil(tickInterval / DAY);\n    var ddays = diffDay(min, max);\n    for (var i = 0; i < ddays + day; i = i + day) {\n      ticks.push(new Date(year, month, mday + i).getTime());\n    }\n  } else if (tickInterval > HOUR) {\n    // 大于小时\n    var date = new Date(min);\n    var year = date.getFullYear();\n    var month = date.getMonth();\n    var day = date.getDate();\n    var hour = date.getHours();\n    var hours = Math.ceil(tickInterval / HOUR);\n    var dHours = diffHour(min, max);\n    for (var i = 0; i <= dHours + hours; i = i + hours) {\n      ticks.push(new Date(year, month, day, hour + i).getTime());\n    }\n  } else if (tickInterval > MINUTE) {\n    // 大于分钟\n    var dMinus = diffMinus(min, max);\n    var minutes = Math.ceil(tickInterval / MINUTE);\n    for (var i = 0; i <= dMinus + minutes; i = i + minutes) {\n      ticks.push(min + i * MINUTE);\n    }\n  } else {\n    // 小于分钟\n    var interval = tickInterval;\n    if (interval < SECOND) {\n      interval = SECOND;\n    }\n    var minSecond = Math.floor(min / SECOND) * SECOND;\n    var dSeconds = Math.ceil((max - min) / SECOND);\n    var seconds = Math.ceil(interval / SECOND);\n    for (var i = 0; i < dSeconds + seconds; i = i + seconds) {\n      ticks.push(minSecond + i * SECOND);\n    }\n  }\n  // 最好是能从算法能解决这个问题，但是如果指定了 tickInterval，计算 ticks，也只能这么算，所以\n  // 打印警告提示\n  if (ticks.length >= 512) {\n    console.warn(\"Notice: current ticks length(\" + ticks.length + \") >= 512, may cause performance issues, even out of memory. Because of the configure \\\"tickInterval\\\"(in milliseconds, current is \" + tickInterval + \") is too small, increase the value to solve the problem!\");\n  }\n  return ticks;\n}","map":{"version":3,"names":["DAY","HOUR","MINUTE","MONTH","SECOND","YEAR","getYear","date","Date","getFullYear","createYear","year","getTime","getMonth","diffMonth","min","max","minYear","maxYear","minMonth","maxMonth","creatMonth","month","diffDay","Math","ceil","diffHour","diffMinus","timePretty","cfg","minTickInterval","tickCount","tickInterval","ticks","floor","pow","yearInterval","i","push","monthInterval","mmMoth","dMonths","mday","getDate","day","ddays","hour","getHours","hours","dHours","dMinus","minutes","interval","minSecond","dSeconds","seconds","length","console","warn"],"sources":["/Users/obiechina/Documents/ridy-flutter-full-taxi-solution 2/node_modules/@antv/scale/esm/tick-method/time-pretty.js"],"sourcesContent":["import { DAY, HOUR, MINUTE, MONTH, SECOND, YEAR } from '../util/time';\nfunction getYear(date) {\n    return new Date(date).getFullYear();\n}\nfunction createYear(year) {\n    return new Date(year, 0, 1).getTime();\n}\nfunction getMonth(date) {\n    return new Date(date).getMonth();\n}\nfunction diffMonth(min, max) {\n    var minYear = getYear(min);\n    var maxYear = getYear(max);\n    var minMonth = getMonth(min);\n    var maxMonth = getMonth(max);\n    return (maxYear - minYear) * 12 + ((maxMonth - minMonth) % 12);\n}\nfunction creatMonth(year, month) {\n    return new Date(year, month, 1).getTime();\n}\nfunction diffDay(min, max) {\n    return Math.ceil((max - min) / DAY);\n}\nfunction diffHour(min, max) {\n    return Math.ceil((max - min) / HOUR);\n}\nfunction diffMinus(min, max) {\n    return Math.ceil((max - min) / (60 * 1000));\n}\n/**\n * 计算 time 的 ticks，对 month, year 进行 pretty 处理\n * @param cfg 度量的配置项\n * @returns 计算后的 ticks\n */\nexport default function timePretty(cfg) {\n    var min = cfg.min, max = cfg.max, minTickInterval = cfg.minTickInterval, tickCount = cfg.tickCount;\n    var tickInterval = cfg.tickInterval;\n    var ticks = [];\n    // 指定 tickInterval 后 tickCount 不生效，需要重新计算\n    if (!tickInterval) {\n        tickInterval = (max - min) / tickCount;\n        // 如果设置了最小间距，则使用最小间距\n        if (minTickInterval && tickInterval < minTickInterval) {\n            tickInterval = minTickInterval;\n        }\n    }\n    tickInterval = Math.max(Math.floor((max - min) / (Math.pow(2, 12) - 1)), tickInterval);\n    var minYear = getYear(min);\n    // 如果间距大于 1 年，则将开始日期从整年开始\n    if (tickInterval > YEAR) {\n        var maxYear = getYear(max);\n        var yearInterval = Math.ceil(tickInterval / YEAR);\n        for (var i = minYear; i <= maxYear + yearInterval; i = i + yearInterval) {\n            ticks.push(createYear(i));\n        }\n    }\n    else if (tickInterval > MONTH) {\n        // 大于月时\n        var monthInterval = Math.ceil(tickInterval / MONTH);\n        var mmMoth = getMonth(min);\n        var dMonths = diffMonth(min, max);\n        for (var i = 0; i <= dMonths + monthInterval; i = i + monthInterval) {\n            ticks.push(creatMonth(minYear, i + mmMoth));\n        }\n    }\n    else if (tickInterval > DAY) {\n        // 大于天\n        var date = new Date(min);\n        var year = date.getFullYear();\n        var month = date.getMonth();\n        var mday = date.getDate();\n        var day = Math.ceil(tickInterval / DAY);\n        var ddays = diffDay(min, max);\n        for (var i = 0; i < ddays + day; i = i + day) {\n            ticks.push(new Date(year, month, mday + i).getTime());\n        }\n    }\n    else if (tickInterval > HOUR) {\n        // 大于小时\n        var date = new Date(min);\n        var year = date.getFullYear();\n        var month = date.getMonth();\n        var day = date.getDate();\n        var hour = date.getHours();\n        var hours = Math.ceil(tickInterval / HOUR);\n        var dHours = diffHour(min, max);\n        for (var i = 0; i <= dHours + hours; i = i + hours) {\n            ticks.push(new Date(year, month, day, hour + i).getTime());\n        }\n    }\n    else if (tickInterval > MINUTE) {\n        // 大于分钟\n        var dMinus = diffMinus(min, max);\n        var minutes = Math.ceil(tickInterval / MINUTE);\n        for (var i = 0; i <= dMinus + minutes; i = i + minutes) {\n            ticks.push(min + i * MINUTE);\n        }\n    }\n    else {\n        // 小于分钟\n        var interval = tickInterval;\n        if (interval < SECOND) {\n            interval = SECOND;\n        }\n        var minSecond = Math.floor(min / SECOND) * SECOND;\n        var dSeconds = Math.ceil((max - min) / SECOND);\n        var seconds = Math.ceil(interval / SECOND);\n        for (var i = 0; i < dSeconds + seconds; i = i + seconds) {\n            ticks.push(minSecond + i * SECOND);\n        }\n    }\n    // 最好是能从算法能解决这个问题，但是如果指定了 tickInterval，计算 ticks，也只能这么算，所以\n    // 打印警告提示\n    if (ticks.length >= 512) {\n        console.warn(\"Notice: current ticks length(\" + ticks.length + \") >= 512, may cause performance issues, even out of memory. Because of the configure \\\"tickInterval\\\"(in milliseconds, current is \" + tickInterval + \") is too small, increase the value to solve the problem!\");\n    }\n    return ticks;\n}\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}