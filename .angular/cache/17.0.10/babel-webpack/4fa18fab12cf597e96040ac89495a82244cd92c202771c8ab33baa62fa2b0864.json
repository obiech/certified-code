{"ast":null,"code":"import * as i0 from '@angular/core';\nimport { Component, ChangeDetectionStrategy, ViewEncapsulation, Optional, Input, NgModule } from '@angular/core';\nimport { __decorate } from 'tslib';\nimport { NgClass, NgTemplateOutlet, NgStyle } from '@angular/common';\nimport { Subject } from 'rxjs';\nimport { takeUntil } from 'rxjs/operators';\nimport * as i1 from 'ng-zorro-antd/core/config';\nimport { WithConfig } from 'ng-zorro-antd/core/config';\nimport * as i4 from 'ng-zorro-antd/core/outlet';\nimport { NzOutletModule } from 'ng-zorro-antd/core/outlet';\nimport { isNotNil, InputNumber } from 'ng-zorro-antd/core/util';\nimport * as i3 from 'ng-zorro-antd/icon';\nimport { NzIconModule } from 'ng-zorro-antd/icon';\nimport * as i2 from '@angular/cdk/bidi';\n\n/**\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://github.com/NG-ZORRO/ng-zorro-antd/blob/master/LICENSE\n */\nfunction NzProgressComponent_ng_template_0_Conditional_0_Conditional_1_Template(rf, ctx) {\n  if (rf & 1) {\n    i0.ɵɵelement(0, \"span\", 5);\n  }\n  if (rf & 2) {\n    const ctx_r5 = i0.ɵɵnextContext(3);\n    i0.ɵɵproperty(\"nzType\", ctx_r5.icon);\n  }\n}\nfunction NzProgressComponent_ng_template_0_Conditional_0_Conditional_2_ng_container_0_Template(rf, ctx) {\n  if (rf & 1) {\n    i0.ɵɵelementContainerStart(0);\n    i0.ɵɵtext(1);\n    i0.ɵɵelementContainerEnd();\n  }\n  if (rf & 2) {\n    const formatter_r8 = ctx.$implicit;\n    const ctx_r7 = i0.ɵɵnextContext(4);\n    i0.ɵɵadvance();\n    i0.ɵɵtextInterpolate1(\" \", formatter_r8(ctx_r7.nzPercent), \" \");\n  }\n}\nconst _c0 = a0 => ({\n  $implicit: a0\n});\nfunction NzProgressComponent_ng_template_0_Conditional_0_Conditional_2_Template(rf, ctx) {\n  if (rf & 1) {\n    i0.ɵɵtemplate(0, NzProgressComponent_ng_template_0_Conditional_0_Conditional_2_ng_container_0_Template, 2, 1, \"ng-container\", 6);\n  }\n  if (rf & 2) {\n    const ctx_r6 = i0.ɵɵnextContext(3);\n    i0.ɵɵproperty(\"nzStringTemplateOutlet\", ctx_r6.formatter)(\"nzStringTemplateOutletContext\", i0.ɵɵpureFunction1(2, _c0, ctx_r6.nzPercent));\n  }\n}\nfunction NzProgressComponent_ng_template_0_Conditional_0_Template(rf, ctx) {\n  if (rf & 1) {\n    i0.ɵɵelementStart(0, \"span\", 4);\n    i0.ɵɵtemplate(1, NzProgressComponent_ng_template_0_Conditional_0_Conditional_1_Template, 1, 1, \"span\", 5)(2, NzProgressComponent_ng_template_0_Conditional_0_Conditional_2_Template, 1, 4);\n    i0.ɵɵelementEnd();\n  }\n  if (rf & 2) {\n    const ctx_r4 = i0.ɵɵnextContext(2);\n    i0.ɵɵadvance();\n    i0.ɵɵconditional(1, (ctx_r4.status === \"exception\" || ctx_r4.status === \"success\") && !ctx_r4.nzFormat ? 1 : 2);\n  }\n}\nfunction NzProgressComponent_ng_template_0_Template(rf, ctx) {\n  if (rf & 1) {\n    i0.ɵɵtemplate(0, NzProgressComponent_ng_template_0_Conditional_0_Template, 3, 1, \"span\", 3);\n  }\n  if (rf & 2) {\n    const ctx_r0 = i0.ɵɵnextContext();\n    i0.ɵɵconditional(0, ctx_r0.nzShowInfo ? 0 : -1);\n  }\n}\nfunction NzProgressComponent_Conditional_3_Conditional_1_For_2_Template(rf, ctx) {\n  if (rf & 1) {\n    i0.ɵɵelement(0, \"div\", 10);\n  }\n  if (rf & 2) {\n    const step_r13 = ctx.$implicit;\n    i0.ɵɵproperty(\"ngStyle\", step_r13);\n  }\n}\nfunction NzProgressComponent_Conditional_3_Conditional_1_ng_template_3_Template(rf, ctx) {}\nfunction NzProgressComponent_Conditional_3_Conditional_1_Template(rf, ctx) {\n  if (rf & 1) {\n    i0.ɵɵelementStart(0, \"div\", 8);\n    i0.ɵɵrepeaterCreate(1, NzProgressComponent_Conditional_3_Conditional_1_For_2_Template, 1, 1, \"div\", 11, i0.ɵɵrepeaterTrackByIdentity);\n    i0.ɵɵtemplate(3, NzProgressComponent_Conditional_3_Conditional_1_ng_template_3_Template, 0, 0, \"ng-template\", 9);\n    i0.ɵɵelementEnd();\n  }\n  if (rf & 2) {\n    const ctx_r9 = i0.ɵɵnextContext(2);\n    const _r1 = i0.ɵɵreference(1);\n    i0.ɵɵadvance();\n    i0.ɵɵrepeater(ctx_r9.steps);\n    i0.ɵɵadvance(2);\n    i0.ɵɵproperty(\"ngTemplateOutlet\", _r1);\n  }\n}\nfunction NzProgressComponent_Conditional_3_Conditional_2_Conditional_3_Template(rf, ctx) {\n  if (rf & 1) {\n    i0.ɵɵelement(0, \"div\", 16);\n  }\n  if (rf & 2) {\n    const ctx_r18 = i0.ɵɵnextContext(3);\n    i0.ɵɵstyleProp(\"width\", ctx_r18.nzSuccessPercent, \"%\")(\"border-radius\", ctx_r18.nzStrokeLinecap === \"round\" ? \"100px\" : \"0\")(\"height\", ctx_r18.strokeWidth, \"px\");\n  }\n}\nfunction NzProgressComponent_Conditional_3_Conditional_2_ng_template_4_Template(rf, ctx) {}\nfunction NzProgressComponent_Conditional_3_Conditional_2_Template(rf, ctx) {\n  if (rf & 1) {\n    i0.ɵɵelementStart(0, \"div\", 12)(1, \"div\", 13);\n    i0.ɵɵelement(2, \"div\", 14);\n    i0.ɵɵtemplate(3, NzProgressComponent_Conditional_3_Conditional_2_Conditional_3_Template, 1, 6, \"div\", 15);\n    i0.ɵɵelementEnd()();\n    i0.ɵɵtemplate(4, NzProgressComponent_Conditional_3_Conditional_2_ng_template_4_Template, 0, 0, \"ng-template\", 9);\n  }\n  if (rf & 2) {\n    const ctx_r10 = i0.ɵɵnextContext(2);\n    const _r1 = i0.ɵɵreference(1);\n    i0.ɵɵadvance(2);\n    i0.ɵɵstyleProp(\"width\", ctx_r10.nzPercent, \"%\")(\"border-radius\", ctx_r10.nzStrokeLinecap === \"round\" ? \"100px\" : \"0\")(\"background\", !ctx_r10.isGradient ? ctx_r10.nzStrokeColor : null)(\"background-image\", ctx_r10.isGradient ? ctx_r10.lineGradient : null)(\"height\", ctx_r10.strokeWidth, \"px\");\n    i0.ɵɵadvance();\n    i0.ɵɵconditional(3, ctx_r10.nzSuccessPercent || ctx_r10.nzSuccessPercent === 0 ? 3 : -1);\n    i0.ɵɵadvance();\n    i0.ɵɵproperty(\"ngTemplateOutlet\", _r1);\n  }\n}\nfunction NzProgressComponent_Conditional_3_Template(rf, ctx) {\n  if (rf & 1) {\n    i0.ɵɵelementStart(0, \"div\");\n    i0.ɵɵtemplate(1, NzProgressComponent_Conditional_3_Conditional_1_Template, 4, 1, \"div\", 7)(2, NzProgressComponent_Conditional_3_Conditional_2_Template, 5, 12);\n    i0.ɵɵelementEnd();\n  }\n  if (rf & 2) {\n    const ctx_r2 = i0.ɵɵnextContext();\n    i0.ɵɵadvance();\n    i0.ɵɵconditional(1, ctx_r2.isSteps ? 1 : 2);\n  }\n}\nfunction NzProgressComponent_Conditional_4_Conditional_2_For_3_Template(rf, ctx) {\n  if (rf & 1) {\n    i0.ɵɵnamespaceSVG();\n    i0.ɵɵelement(0, \"stop\");\n  }\n  if (rf & 2) {\n    const i_r24 = ctx.$implicit;\n    i0.ɵɵattribute(\"offset\", i_r24.offset)(\"stop-color\", i_r24.color);\n  }\n}\nfunction NzProgressComponent_Conditional_4_Conditional_2_Template(rf, ctx) {\n  if (rf & 1) {\n    i0.ɵɵnamespaceSVG();\n    i0.ɵɵelementStart(0, \"defs\")(1, \"linearGradient\", 19);\n    i0.ɵɵrepeaterCreate(2, NzProgressComponent_Conditional_4_Conditional_2_For_3_Template, 1, 2, \":svg:stop\", null, i0.ɵɵrepeaterTrackByIdentity);\n    i0.ɵɵelementEnd()();\n  }\n  if (rf & 2) {\n    const ctx_r20 = i0.ɵɵnextContext(2);\n    i0.ɵɵadvance();\n    i0.ɵɵproperty(\"id\", \"gradient-\" + ctx_r20.gradientId);\n    i0.ɵɵadvance();\n    i0.ɵɵrepeater(ctx_r20.circleGradient);\n  }\n}\nfunction NzProgressComponent_Conditional_4_For_5_Template(rf, ctx) {\n  if (rf & 1) {\n    i0.ɵɵnamespaceSVG();\n    i0.ɵɵelement(0, \"path\", 20);\n  }\n  if (rf & 2) {\n    const p_r29 = ctx.$implicit;\n    const ctx_r21 = i0.ɵɵnextContext(2);\n    i0.ɵɵproperty(\"ngStyle\", p_r29.strokePathStyle);\n    i0.ɵɵattribute(\"d\", ctx_r21.pathString)(\"stroke-linecap\", ctx_r21.nzStrokeLinecap)(\"stroke\", p_r29.stroke)(\"stroke-width\", ctx_r21.nzPercent ? ctx_r21.strokeWidth : 0);\n  }\n}\nfunction NzProgressComponent_Conditional_4_ng_template_6_Template(rf, ctx) {\n  if (rf & 1) {\n    i0.ɵɵnamespaceSVG();\n  }\n}\nfunction NzProgressComponent_Conditional_4_Template(rf, ctx) {\n  if (rf & 1) {\n    i0.ɵɵelementStart(0, \"div\", 13);\n    i0.ɵɵnamespaceSVG();\n    i0.ɵɵelementStart(1, \"svg\", 17);\n    i0.ɵɵtemplate(2, NzProgressComponent_Conditional_4_Conditional_2_Template, 4, 1, \":svg:defs\");\n    i0.ɵɵelement(3, \"path\", 18);\n    i0.ɵɵrepeaterCreate(4, NzProgressComponent_Conditional_4_For_5_Template, 1, 5, \":svg:path\", 21, i0.ɵɵrepeaterTrackByIdentity);\n    i0.ɵɵelementEnd();\n    i0.ɵɵtemplate(6, NzProgressComponent_Conditional_4_ng_template_6_Template, 0, 0, \"ng-template\", 9);\n    i0.ɵɵelementEnd();\n  }\n  if (rf & 2) {\n    const ctx_r3 = i0.ɵɵnextContext();\n    const _r1 = i0.ɵɵreference(1);\n    i0.ɵɵstyleProp(\"width\", ctx_r3.nzWidth, \"px\")(\"height\", ctx_r3.nzWidth, \"px\")(\"font-size\", ctx_r3.nzWidth * 0.15 + 6, \"px\");\n    i0.ɵɵclassProp(\"ant-progress-circle-gradient\", ctx_r3.isGradient);\n    i0.ɵɵadvance(2);\n    i0.ɵɵconditional(2, ctx_r3.isGradient ? 2 : -1);\n    i0.ɵɵadvance();\n    i0.ɵɵproperty(\"ngStyle\", ctx_r3.trailPathStyle);\n    i0.ɵɵattribute(\"stroke-width\", ctx_r3.strokeWidth)(\"d\", ctx_r3.pathString);\n    i0.ɵɵadvance();\n    i0.ɵɵrepeater(ctx_r3.progressCirclePath);\n    i0.ɵɵadvance(2);\n    i0.ɵɵproperty(\"ngTemplateOutlet\", _r1);\n  }\n}\nfunction stripPercentToNumber(percent) {\n  return +percent.replace('%', '');\n}\nconst sortGradient = gradients => {\n  let tempArr = [];\n  Object.keys(gradients).forEach(key => {\n    const value = gradients[key];\n    const formatKey = stripPercentToNumber(key);\n    if (!isNaN(formatKey)) {\n      tempArr.push({\n        key: formatKey,\n        value\n      });\n    }\n  });\n  tempArr = tempArr.sort((a, b) => a.key - b.key);\n  return tempArr;\n};\nconst handleCircleGradient = strokeColor => sortGradient(strokeColor).map(({\n  key,\n  value\n}) => ({\n  offset: `${key}%`,\n  color: value\n}));\nconst handleLinearGradient = strokeColor => {\n  const {\n    from = '#1890ff',\n    to = '#1890ff',\n    direction = 'to right',\n    ...rest\n  } = strokeColor;\n  if (Object.keys(rest).length !== 0) {\n    const sortedGradients = sortGradient(rest).map(({\n      key,\n      value\n    }) => `${value} ${key}%`).join(', ');\n    return `linear-gradient(${direction}, ${sortedGradients})`;\n  }\n  return `linear-gradient(${direction}, ${from}, ${to})`;\n};\nlet gradientIdSeed = 0;\nconst NZ_CONFIG_MODULE_NAME = 'progress';\nconst statusIconNameMap = new Map([['success', 'check'], ['exception', 'close']]);\nconst statusColorMap = new Map([['normal', '#108ee9'], ['exception', '#ff5500'], ['success', '#87d068']]);\nconst defaultFormatter = p => `${p}%`;\nclass NzProgressComponent {\n  get formatter() {\n    return this.nzFormat || defaultFormatter;\n  }\n  get status() {\n    return this.nzStatus || this.inferredStatus;\n  }\n  get strokeWidth() {\n    return this.nzStrokeWidth || (this.nzType === 'line' && this.nzSize !== 'small' ? 8 : 6);\n  }\n  get isCircleStyle() {\n    return this.nzType === 'circle' || this.nzType === 'dashboard';\n  }\n  constructor(cdr, nzConfigService, directionality) {\n    this.cdr = cdr;\n    this.nzConfigService = nzConfigService;\n    this.directionality = directionality;\n    this._nzModuleName = NZ_CONFIG_MODULE_NAME;\n    this.nzShowInfo = true;\n    this.nzWidth = 132;\n    this.nzStrokeColor = undefined;\n    this.nzSize = 'default';\n    this.nzPercent = 0;\n    this.nzStrokeWidth = undefined;\n    this.nzGapDegree = undefined;\n    this.nzType = 'line';\n    this.nzGapPosition = 'top';\n    this.nzStrokeLinecap = 'round';\n    this.nzSteps = 0;\n    this.steps = [];\n    /** Gradient style when `nzType` is `line`. */\n    this.lineGradient = null;\n    /** If user uses gradient color. */\n    this.isGradient = false;\n    /** If the linear progress is a step progress. */\n    this.isSteps = false;\n    /**\n     * Each progress whose `nzType` is circle or dashboard should have unique id to\n     * define `<linearGradient>`.\n     */\n    this.gradientId = gradientIdSeed++;\n    /** Paths to rendered in the template. */\n    this.progressCirclePath = [];\n    this.trailPathStyle = null;\n    this.dir = 'ltr';\n    this.cachedStatus = 'normal';\n    this.inferredStatus = 'normal';\n    this.destroy$ = new Subject();\n  }\n  ngOnChanges(changes) {\n    const {\n      nzSteps,\n      nzGapPosition,\n      nzStrokeLinecap,\n      nzStrokeColor,\n      nzGapDegree,\n      nzType,\n      nzStatus,\n      nzPercent,\n      nzSuccessPercent,\n      nzStrokeWidth\n    } = changes;\n    if (nzStatus) {\n      this.cachedStatus = this.nzStatus || this.cachedStatus;\n    }\n    if (nzPercent || nzSuccessPercent) {\n      const fillAll = parseInt(this.nzPercent.toString(), 10) >= 100;\n      if (fillAll) {\n        if (isNotNil(this.nzSuccessPercent) && this.nzSuccessPercent >= 100 || this.nzSuccessPercent === undefined) {\n          this.inferredStatus = 'success';\n        }\n      } else {\n        this.inferredStatus = this.cachedStatus;\n      }\n    }\n    if (nzStatus || nzPercent || nzSuccessPercent || nzStrokeColor) {\n      this.updateIcon();\n    }\n    if (nzStrokeColor) {\n      this.setStrokeColor();\n    }\n    if (nzGapPosition || nzStrokeLinecap || nzGapDegree || nzType || nzPercent || nzStrokeColor || nzStrokeColor) {\n      this.getCirclePaths();\n    }\n    if (nzPercent || nzSteps || nzStrokeWidth) {\n      this.isSteps = this.nzSteps > 0;\n      if (this.isSteps) {\n        this.getSteps();\n      }\n    }\n  }\n  ngOnInit() {\n    this.nzConfigService.getConfigChangeEventForComponent(NZ_CONFIG_MODULE_NAME).pipe(takeUntil(this.destroy$)).subscribe(() => {\n      this.updateIcon();\n      this.setStrokeColor();\n      this.getCirclePaths();\n    });\n    this.directionality.change?.pipe(takeUntil(this.destroy$)).subscribe(direction => {\n      this.dir = direction;\n      this.cdr.detectChanges();\n    });\n    this.dir = this.directionality.value;\n  }\n  ngOnDestroy() {\n    this.destroy$.next();\n    this.destroy$.complete();\n  }\n  updateIcon() {\n    const ret = statusIconNameMap.get(this.status);\n    this.icon = ret ? ret + (this.isCircleStyle ? '-o' : '-circle-fill') : '';\n  }\n  /**\n   * Calculate step render configs.\n   */\n  getSteps() {\n    const current = Math.floor(this.nzSteps * (this.nzPercent / 100));\n    const stepWidth = this.nzSize === 'small' ? 2 : 14;\n    const steps = [];\n    for (let i = 0; i < this.nzSteps; i++) {\n      let color;\n      if (i <= current - 1) {\n        color = this.nzStrokeColor;\n      }\n      const stepStyle = {\n        backgroundColor: `${color}`,\n        width: `${stepWidth}px`,\n        height: `${this.strokeWidth}px`\n      };\n      steps.push(stepStyle);\n    }\n    this.steps = steps;\n  }\n  /**\n   * Calculate paths when the type is circle or dashboard.\n   */\n  getCirclePaths() {\n    if (!this.isCircleStyle) {\n      return;\n    }\n    const values = isNotNil(this.nzSuccessPercent) ? [this.nzSuccessPercent, this.nzPercent] : [this.nzPercent];\n    // Calculate shared styles.\n    const radius = 50 - this.strokeWidth / 2;\n    const gapPosition = this.nzGapPosition || (this.nzType === 'circle' ? 'top' : 'bottom');\n    const len = Math.PI * 2 * radius;\n    const gapDegree = this.nzGapDegree || (this.nzType === 'circle' ? 0 : 75);\n    let beginPositionX = 0;\n    let beginPositionY = -radius;\n    let endPositionX = 0;\n    let endPositionY = radius * -2;\n    switch (gapPosition) {\n      case 'left':\n        beginPositionX = -radius;\n        beginPositionY = 0;\n        endPositionX = radius * 2;\n        endPositionY = 0;\n        break;\n      case 'right':\n        beginPositionX = radius;\n        beginPositionY = 0;\n        endPositionX = radius * -2;\n        endPositionY = 0;\n        break;\n      case 'bottom':\n        beginPositionY = radius;\n        endPositionY = radius * 2;\n        break;\n      default:\n    }\n    this.pathString = `M 50,50 m ${beginPositionX},${beginPositionY}\n       a ${radius},${radius} 0 1 1 ${endPositionX},${-endPositionY}\n       a ${radius},${radius} 0 1 1 ${-endPositionX},${endPositionY}`;\n    this.trailPathStyle = {\n      strokeDasharray: `${len - gapDegree}px ${len}px`,\n      strokeDashoffset: `-${gapDegree / 2}px`,\n      transition: 'stroke-dashoffset .3s ease 0s, stroke-dasharray .3s ease 0s, stroke .3s'\n    };\n    // Calculate styles for each path.\n    this.progressCirclePath = values.map((value, index) => {\n      const isSuccessPercent = values.length === 2 && index === 0;\n      return {\n        stroke: this.isGradient && !isSuccessPercent ? `url(#gradient-${this.gradientId})` : null,\n        strokePathStyle: {\n          stroke: !this.isGradient ? isSuccessPercent ? statusColorMap.get('success') : this.nzStrokeColor : null,\n          transition: 'stroke-dashoffset .3s ease 0s, stroke-dasharray .3s ease 0s, stroke .3s, stroke-width .06s ease .3s',\n          strokeDasharray: `${(value || 0) / 100 * (len - gapDegree)}px ${len}px`,\n          strokeDashoffset: `-${gapDegree / 2}px`\n        }\n      };\n    }).reverse();\n  }\n  setStrokeColor() {\n    const color = this.nzStrokeColor;\n    const isGradient = this.isGradient = !!color && typeof color !== 'string';\n    if (isGradient && !this.isCircleStyle) {\n      this.lineGradient = handleLinearGradient(color);\n    } else if (isGradient && this.isCircleStyle) {\n      this.circleGradient = handleCircleGradient(this.nzStrokeColor);\n    } else {\n      this.lineGradient = null;\n      this.circleGradient = [];\n    }\n  }\n  static {\n    this.ɵfac = function NzProgressComponent_Factory(t) {\n      return new (t || NzProgressComponent)(i0.ɵɵdirectiveInject(i0.ChangeDetectorRef), i0.ɵɵdirectiveInject(i1.NzConfigService), i0.ɵɵdirectiveInject(i2.Directionality, 8));\n    };\n  }\n  static {\n    this.ɵcmp = /* @__PURE__ */i0.ɵɵdefineComponent({\n      type: NzProgressComponent,\n      selectors: [[\"nz-progress\"]],\n      inputs: {\n        nzShowInfo: \"nzShowInfo\",\n        nzWidth: \"nzWidth\",\n        nzStrokeColor: \"nzStrokeColor\",\n        nzSize: \"nzSize\",\n        nzFormat: \"nzFormat\",\n        nzSuccessPercent: \"nzSuccessPercent\",\n        nzPercent: \"nzPercent\",\n        nzStrokeWidth: \"nzStrokeWidth\",\n        nzGapDegree: \"nzGapDegree\",\n        nzStatus: \"nzStatus\",\n        nzType: \"nzType\",\n        nzGapPosition: \"nzGapPosition\",\n        nzStrokeLinecap: \"nzStrokeLinecap\",\n        nzSteps: \"nzSteps\"\n      },\n      exportAs: [\"nzProgress\"],\n      standalone: true,\n      features: [i0.ɵɵNgOnChangesFeature, i0.ɵɵStandaloneFeature],\n      decls: 5,\n      vars: 17,\n      consts: [[\"progressInfoTemplate\", \"\"], [3, \"ngClass\"], [\"class\", \"ant-progress-inner\", 3, \"width\", \"height\", \"fontSize\", \"ant-progress-circle-gradient\"], [\"class\", \"ant-progress-text\"], [1, \"ant-progress-text\"], [\"nz-icon\", \"\", 3, \"nzType\"], [4, \"nzStringTemplateOutlet\", \"nzStringTemplateOutletContext\"], [\"class\", \"ant-progress-steps-outer\"], [1, \"ant-progress-steps-outer\"], [3, \"ngTemplateOutlet\"], [1, \"ant-progress-steps-item\", 3, \"ngStyle\"], [\"class\", \"ant-progress-steps-item\", 3, \"ngStyle\"], [1, \"ant-progress-outer\"], [1, \"ant-progress-inner\"], [1, \"ant-progress-bg\"], [\"class\", \"ant-progress-success-bg\", 3, \"width\", \"border-radius\", \"height\"], [1, \"ant-progress-success-bg\"], [\"viewBox\", \"0 0 100 100\", 1, \"ant-progress-circle\"], [\"stroke\", \"#f3f3f3\", \"fill-opacity\", \"0\", 1, \"ant-progress-circle-trail\", 3, \"ngStyle\"], [\"x1\", \"100%\", \"y1\", \"0%\", \"x2\", \"0%\", \"y2\", \"0%\", 3, \"id\"], [\"fill-opacity\", \"0\", 1, \"ant-progress-circle-path\", 3, \"ngStyle\"], [\"class\", \"ant-progress-circle-path\", \"fill-opacity\", \"0\", 3, \"ngStyle\"]],\n      template: function NzProgressComponent_Template(rf, ctx) {\n        if (rf & 1) {\n          i0.ɵɵtemplate(0, NzProgressComponent_ng_template_0_Template, 1, 1, \"ng-template\", null, 0, i0.ɵɵtemplateRefExtractor);\n          i0.ɵɵelementStart(2, \"div\", 1);\n          i0.ɵɵtemplate(3, NzProgressComponent_Conditional_3_Template, 3, 1, \"div\")(4, NzProgressComponent_Conditional_4_Template, 7, 13, \"div\", 2);\n          i0.ɵɵelementEnd();\n        }\n        if (rf & 2) {\n          i0.ɵɵadvance(2);\n          i0.ɵɵclassProp(\"ant-progress-line\", ctx.nzType === \"line\")(\"ant-progress-small\", ctx.nzSize === \"small\")(\"ant-progress-default\", ctx.nzSize === \"default\")(\"ant-progress-show-info\", ctx.nzShowInfo)(\"ant-progress-circle\", ctx.isCircleStyle)(\"ant-progress-steps\", ctx.isSteps)(\"ant-progress-rtl\", ctx.dir === \"rtl\");\n          i0.ɵɵproperty(\"ngClass\", \"ant-progress ant-progress-status-\" + ctx.status);\n          i0.ɵɵadvance();\n          i0.ɵɵconditional(3, ctx.nzType === \"line\" ? 3 : -1);\n          i0.ɵɵadvance();\n          i0.ɵɵconditional(4, ctx.isCircleStyle ? 4 : -1);\n        }\n      },\n      dependencies: [NzIconModule, i3.NzIconDirective, NzOutletModule, i4.NzStringTemplateOutletDirective, NgClass, NgTemplateOutlet, NgStyle],\n      encapsulation: 2,\n      changeDetection: 0\n    });\n  }\n}\n__decorate([WithConfig()], NzProgressComponent.prototype, \"nzShowInfo\", void 0);\n__decorate([WithConfig()], NzProgressComponent.prototype, \"nzStrokeColor\", void 0);\n__decorate([WithConfig()], NzProgressComponent.prototype, \"nzSize\", void 0);\n__decorate([InputNumber()], NzProgressComponent.prototype, \"nzSuccessPercent\", void 0);\n__decorate([InputNumber()], NzProgressComponent.prototype, \"nzPercent\", void 0);\n__decorate([WithConfig(), InputNumber()], NzProgressComponent.prototype, \"nzStrokeWidth\", void 0);\n__decorate([WithConfig(), InputNumber()], NzProgressComponent.prototype, \"nzGapDegree\", void 0);\n__decorate([WithConfig()], NzProgressComponent.prototype, \"nzGapPosition\", void 0);\n__decorate([WithConfig()], NzProgressComponent.prototype, \"nzStrokeLinecap\", void 0);\n__decorate([InputNumber()], NzProgressComponent.prototype, \"nzSteps\", void 0);\n(() => {\n  (typeof ngDevMode === \"undefined\" || ngDevMode) && i0.ɵsetClassMetadata(NzProgressComponent, [{\n    type: Component,\n    args: [{\n      changeDetection: ChangeDetectionStrategy.OnPush,\n      encapsulation: ViewEncapsulation.None,\n      selector: 'nz-progress',\n      exportAs: 'nzProgress',\n      preserveWhitespaces: false,\n      standalone: true,\n      imports: [NzIconModule, NzOutletModule, NgClass, NgTemplateOutlet, NgStyle],\n      template: `\n    <ng-template #progressInfoTemplate>\n      @if (nzShowInfo) {\n        <span class=\"ant-progress-text\">\n          @if ((status === 'exception' || status === 'success') && !nzFormat) {\n            <span nz-icon [nzType]=\"icon\"></span>\n          } @else {\n            <ng-container *nzStringTemplateOutlet=\"formatter; context: { $implicit: nzPercent }; let formatter\">\n              {{ formatter(nzPercent) }}\n            </ng-container>\n          }\n        </span>\n      }\n    </ng-template>\n\n    <div\n      [ngClass]=\"'ant-progress ant-progress-status-' + status\"\n      [class.ant-progress-line]=\"nzType === 'line'\"\n      [class.ant-progress-small]=\"nzSize === 'small'\"\n      [class.ant-progress-default]=\"nzSize === 'default'\"\n      [class.ant-progress-show-info]=\"nzShowInfo\"\n      [class.ant-progress-circle]=\"isCircleStyle\"\n      [class.ant-progress-steps]=\"isSteps\"\n      [class.ant-progress-rtl]=\"dir === 'rtl'\"\n    >\n      @if (nzType === 'line') {\n        <div>\n          <!-- normal line style -->\n          @if (isSteps) {\n            <div class=\"ant-progress-steps-outer\">\n              @for (step of steps; track step) {\n                <div class=\"ant-progress-steps-item\" [ngStyle]=\"step\"></div>\n              }\n              <ng-template [ngTemplateOutlet]=\"progressInfoTemplate\" />\n            </div>\n          } @else {\n            <div class=\"ant-progress-outer\">\n              <div class=\"ant-progress-inner\">\n                <div\n                  class=\"ant-progress-bg\"\n                  [style.width.%]=\"nzPercent\"\n                  [style.border-radius]=\"nzStrokeLinecap === 'round' ? '100px' : '0'\"\n                  [style.background]=\"!isGradient ? nzStrokeColor : null\"\n                  [style.background-image]=\"isGradient ? lineGradient : null\"\n                  [style.height.px]=\"strokeWidth\"\n                ></div>\n                @if (nzSuccessPercent || nzSuccessPercent === 0) {\n                  <div\n                    class=\"ant-progress-success-bg\"\n                    [style.width.%]=\"nzSuccessPercent\"\n                    [style.border-radius]=\"nzStrokeLinecap === 'round' ? '100px' : '0'\"\n                    [style.height.px]=\"strokeWidth\"\n                  ></div>\n                }\n              </div>\n            </div>\n            <ng-template [ngTemplateOutlet]=\"progressInfoTemplate\" />\n          }\n        </div>\n      }\n      <!-- line progress -->\n\n      <!-- circle / dashboard progress -->\n\n      @if (isCircleStyle) {\n        <div\n          [style.width.px]=\"this.nzWidth\"\n          [style.height.px]=\"this.nzWidth\"\n          [style.fontSize.px]=\"this.nzWidth * 0.15 + 6\"\n          class=\"ant-progress-inner\"\n          [class.ant-progress-circle-gradient]=\"isGradient\"\n        >\n          <svg class=\"ant-progress-circle \" viewBox=\"0 0 100 100\">\n            @if (isGradient) {\n              <defs>\n                <linearGradient [id]=\"'gradient-' + gradientId\" x1=\"100%\" y1=\"0%\" x2=\"0%\" y2=\"0%\">\n                  @for (i of circleGradient; track i) {\n                    <stop [attr.offset]=\"i.offset\" [attr.stop-color]=\"i.color\"></stop>\n                  }\n                </linearGradient>\n              </defs>\n            }\n\n            <path\n              class=\"ant-progress-circle-trail\"\n              stroke=\"#f3f3f3\"\n              fill-opacity=\"0\"\n              [attr.stroke-width]=\"strokeWidth\"\n              [attr.d]=\"pathString\"\n              [ngStyle]=\"trailPathStyle\"\n            ></path>\n            @for (p of progressCirclePath; track p) {\n              <path\n                class=\"ant-progress-circle-path\"\n                fill-opacity=\"0\"\n                [attr.d]=\"pathString\"\n                [attr.stroke-linecap]=\"nzStrokeLinecap\"\n                [attr.stroke]=\"p.stroke\"\n                [attr.stroke-width]=\"nzPercent ? strokeWidth : 0\"\n                [ngStyle]=\"p.strokePathStyle\"\n              ></path>\n            }\n          </svg>\n          <ng-template [ngTemplateOutlet]=\"progressInfoTemplate\" />\n        </div>\n      }\n    </div>\n  `\n    }]\n  }], () => [{\n    type: i0.ChangeDetectorRef\n  }, {\n    type: i1.NzConfigService\n  }, {\n    type: i2.Directionality,\n    decorators: [{\n      type: Optional\n    }]\n  }], {\n    nzShowInfo: [{\n      type: Input\n    }],\n    nzWidth: [{\n      type: Input\n    }],\n    nzStrokeColor: [{\n      type: Input\n    }],\n    nzSize: [{\n      type: Input\n    }],\n    nzFormat: [{\n      type: Input\n    }],\n    nzSuccessPercent: [{\n      type: Input\n    }],\n    nzPercent: [{\n      type: Input\n    }],\n    nzStrokeWidth: [{\n      type: Input\n    }],\n    nzGapDegree: [{\n      type: Input\n    }],\n    nzStatus: [{\n      type: Input\n    }],\n    nzType: [{\n      type: Input\n    }],\n    nzGapPosition: [{\n      type: Input\n    }],\n    nzStrokeLinecap: [{\n      type: Input\n    }],\n    nzSteps: [{\n      type: Input\n    }]\n  });\n})();\n\n/**\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://github.com/NG-ZORRO/ng-zorro-antd/blob/master/LICENSE\n */\nclass NzProgressModule {\n  static {\n    this.ɵfac = function NzProgressModule_Factory(t) {\n      return new (t || NzProgressModule)();\n    };\n  }\n  static {\n    this.ɵmod = /* @__PURE__ */i0.ɵɵdefineNgModule({\n      type: NzProgressModule\n    });\n  }\n  static {\n    this.ɵinj = /* @__PURE__ */i0.ɵɵdefineInjector({\n      imports: [NzProgressComponent]\n    });\n  }\n}\n(() => {\n  (typeof ngDevMode === \"undefined\" || ngDevMode) && i0.ɵsetClassMetadata(NzProgressModule, [{\n    type: NgModule,\n    args: [{\n      imports: [NzProgressComponent],\n      exports: [NzProgressComponent]\n    }]\n  }], null, null);\n})();\n\n/**\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://github.com/NG-ZORRO/ng-zorro-antd/blob/master/LICENSE\n */\n\n/**\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://github.com/NG-ZORRO/ng-zorro-antd/blob/master/LICENSE\n */\n\n/**\n * Generated bundle index. Do not edit.\n */\n\nexport { NzProgressComponent, NzProgressModule };","map":{"version":3,"names":["i0","Component","ChangeDetectionStrategy","ViewEncapsulation","Optional","Input","NgModule","__decorate","NgClass","NgTemplateOutlet","NgStyle","Subject","takeUntil","i1","WithConfig","i4","NzOutletModule","isNotNil","InputNumber","i3","NzIconModule","i2","NzProgressComponent_ng_template_0_Conditional_0_Conditional_1_Template","rf","ctx","ɵɵelement","ctx_r5","ɵɵnextContext","ɵɵproperty","icon","NzProgressComponent_ng_template_0_Conditional_0_Conditional_2_ng_container_0_Template","ɵɵelementContainerStart","ɵɵtext","ɵɵelementContainerEnd","formatter_r8","$implicit","ctx_r7","ɵɵadvance","ɵɵtextInterpolate1","nzPercent","_c0","a0","NzProgressComponent_ng_template_0_Conditional_0_Conditional_2_Template","ɵɵtemplate","ctx_r6","formatter","ɵɵpureFunction1","NzProgressComponent_ng_template_0_Conditional_0_Template","ɵɵelementStart","ɵɵelementEnd","ctx_r4","ɵɵconditional","status","nzFormat","NzProgressComponent_ng_template_0_Template","ctx_r0","nzShowInfo","NzProgressComponent_Conditional_3_Conditional_1_For_2_Template","step_r13","NzProgressComponent_Conditional_3_Conditional_1_ng_template_3_Template","NzProgressComponent_Conditional_3_Conditional_1_Template","ɵɵrepeaterCreate","ɵɵrepeaterTrackByIdentity","ctx_r9","_r1","ɵɵreference","ɵɵrepeater","steps","NzProgressComponent_Conditional_3_Conditional_2_Conditional_3_Template","ctx_r18","ɵɵstyleProp","nzSuccessPercent","nzStrokeLinecap","strokeWidth","NzProgressComponent_Conditional_3_Conditional_2_ng_template_4_Template","NzProgressComponent_Conditional_3_Conditional_2_Template","ctx_r10","isGradient","nzStrokeColor","lineGradient","NzProgressComponent_Conditional_3_Template","ctx_r2","isSteps","NzProgressComponent_Conditional_4_Conditional_2_For_3_Template","ɵɵnamespaceSVG","i_r24","ɵɵattribute","offset","color","NzProgressComponent_Conditional_4_Conditional_2_Template","ctx_r20","gradientId","circleGradient","NzProgressComponent_Conditional_4_For_5_Template","p_r29","ctx_r21","strokePathStyle","pathString","stroke","NzProgressComponent_Conditional_4_ng_template_6_Template","NzProgressComponent_Conditional_4_Template","ctx_r3","nzWidth","ɵɵclassProp","trailPathStyle","progressCirclePath","stripPercentToNumber","percent","replace","sortGradient","gradients","tempArr","Object","keys","forEach","key","value","formatKey","isNaN","push","sort","a","b","handleCircleGradient","strokeColor","map","handleLinearGradient","from","to","direction","rest","length","sortedGradients","join","gradientIdSeed","NZ_CONFIG_MODULE_NAME","statusIconNameMap","Map","statusColorMap","defaultFormatter","p","NzProgressComponent","nzStatus","inferredStatus","nzStrokeWidth","nzType","nzSize","isCircleStyle","constructor","cdr","nzConfigService","directionality","_nzModuleName","undefined","nzGapDegree","nzGapPosition","nzSteps","dir","cachedStatus","destroy$","ngOnChanges","changes","fillAll","parseInt","toString","updateIcon","setStrokeColor","getCirclePaths","getSteps","ngOnInit","getConfigChangeEventForComponent","pipe","subscribe","change","detectChanges","ngOnDestroy","next","complete","ret","get","current","Math","floor","stepWidth","i","stepStyle","backgroundColor","width","height","values","radius","gapPosition","len","PI","gapDegree","beginPositionX","beginPositionY","endPositionX","endPositionY","strokeDasharray","strokeDashoffset","transition","index","isSuccessPercent","reverse","ɵfac","NzProgressComponent_Factory","t","ɵɵdirectiveInject","ChangeDetectorRef","NzConfigService","Directionality","ɵcmp","ɵɵdefineComponent","type","selectors","inputs","exportAs","standalone","features","ɵɵNgOnChangesFeature","ɵɵStandaloneFeature","decls","vars","consts","template","NzProgressComponent_Template","ɵɵtemplateRefExtractor","dependencies","NzIconDirective","NzStringTemplateOutletDirective","encapsulation","changeDetection","prototype","ngDevMode","ɵsetClassMetadata","args","OnPush","None","selector","preserveWhitespaces","imports","decorators","NzProgressModule","NzProgressModule_Factory","ɵmod","ɵɵdefineNgModule","ɵinj","ɵɵdefineInjector","exports"],"sources":["/Users/obiechina/Documents/ridy-flutter-full-taxi-solution 2/node_modules/ng-zorro-antd/fesm2022/ng-zorro-antd-progress.mjs"],"sourcesContent":["import * as i0 from '@angular/core';\nimport { Component, ChangeDetectionStrategy, ViewEncapsulation, Optional, Input, NgModule } from '@angular/core';\nimport { __decorate } from 'tslib';\nimport { NgClass, NgTemplateOutlet, NgStyle } from '@angular/common';\nimport { Subject } from 'rxjs';\nimport { takeUntil } from 'rxjs/operators';\nimport * as i1 from 'ng-zorro-antd/core/config';\nimport { WithConfig } from 'ng-zorro-antd/core/config';\nimport * as i4 from 'ng-zorro-antd/core/outlet';\nimport { NzOutletModule } from 'ng-zorro-antd/core/outlet';\nimport { isNotNil, InputNumber } from 'ng-zorro-antd/core/util';\nimport * as i3 from 'ng-zorro-antd/icon';\nimport { NzIconModule } from 'ng-zorro-antd/icon';\nimport * as i2 from '@angular/cdk/bidi';\n\n/**\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://github.com/NG-ZORRO/ng-zorro-antd/blob/master/LICENSE\n */\nfunction stripPercentToNumber(percent) {\n    return +percent.replace('%', '');\n}\nconst sortGradient = (gradients) => {\n    let tempArr = [];\n    Object.keys(gradients).forEach(key => {\n        const value = gradients[key];\n        const formatKey = stripPercentToNumber(key);\n        if (!isNaN(formatKey)) {\n            tempArr.push({\n                key: formatKey,\n                value\n            });\n        }\n    });\n    tempArr = tempArr.sort((a, b) => a.key - b.key);\n    return tempArr;\n};\nconst handleCircleGradient = (strokeColor) => sortGradient(strokeColor).map(({ key, value }) => ({ offset: `${key}%`, color: value }));\nconst handleLinearGradient = (strokeColor) => {\n    const { from = '#1890ff', to = '#1890ff', direction = 'to right', ...rest } = strokeColor;\n    if (Object.keys(rest).length !== 0) {\n        const sortedGradients = sortGradient(rest)\n            .map(({ key, value }) => `${value} ${key}%`)\n            .join(', ');\n        return `linear-gradient(${direction}, ${sortedGradients})`;\n    }\n    return `linear-gradient(${direction}, ${from}, ${to})`;\n};\n\nlet gradientIdSeed = 0;\nconst NZ_CONFIG_MODULE_NAME = 'progress';\nconst statusIconNameMap = new Map([\n    ['success', 'check'],\n    ['exception', 'close']\n]);\nconst statusColorMap = new Map([\n    ['normal', '#108ee9'],\n    ['exception', '#ff5500'],\n    ['success', '#87d068']\n]);\nconst defaultFormatter = (p) => `${p}%`;\nclass NzProgressComponent {\n    get formatter() {\n        return this.nzFormat || defaultFormatter;\n    }\n    get status() {\n        return this.nzStatus || this.inferredStatus;\n    }\n    get strokeWidth() {\n        return this.nzStrokeWidth || (this.nzType === 'line' && this.nzSize !== 'small' ? 8 : 6);\n    }\n    get isCircleStyle() {\n        return this.nzType === 'circle' || this.nzType === 'dashboard';\n    }\n    constructor(cdr, nzConfigService, directionality) {\n        this.cdr = cdr;\n        this.nzConfigService = nzConfigService;\n        this.directionality = directionality;\n        this._nzModuleName = NZ_CONFIG_MODULE_NAME;\n        this.nzShowInfo = true;\n        this.nzWidth = 132;\n        this.nzStrokeColor = undefined;\n        this.nzSize = 'default';\n        this.nzPercent = 0;\n        this.nzStrokeWidth = undefined;\n        this.nzGapDegree = undefined;\n        this.nzType = 'line';\n        this.nzGapPosition = 'top';\n        this.nzStrokeLinecap = 'round';\n        this.nzSteps = 0;\n        this.steps = [];\n        /** Gradient style when `nzType` is `line`. */\n        this.lineGradient = null;\n        /** If user uses gradient color. */\n        this.isGradient = false;\n        /** If the linear progress is a step progress. */\n        this.isSteps = false;\n        /**\n         * Each progress whose `nzType` is circle or dashboard should have unique id to\n         * define `<linearGradient>`.\n         */\n        this.gradientId = gradientIdSeed++;\n        /** Paths to rendered in the template. */\n        this.progressCirclePath = [];\n        this.trailPathStyle = null;\n        this.dir = 'ltr';\n        this.cachedStatus = 'normal';\n        this.inferredStatus = 'normal';\n        this.destroy$ = new Subject();\n    }\n    ngOnChanges(changes) {\n        const { nzSteps, nzGapPosition, nzStrokeLinecap, nzStrokeColor, nzGapDegree, nzType, nzStatus, nzPercent, nzSuccessPercent, nzStrokeWidth } = changes;\n        if (nzStatus) {\n            this.cachedStatus = this.nzStatus || this.cachedStatus;\n        }\n        if (nzPercent || nzSuccessPercent) {\n            const fillAll = parseInt(this.nzPercent.toString(), 10) >= 100;\n            if (fillAll) {\n                if ((isNotNil(this.nzSuccessPercent) && this.nzSuccessPercent >= 100) || this.nzSuccessPercent === undefined) {\n                    this.inferredStatus = 'success';\n                }\n            }\n            else {\n                this.inferredStatus = this.cachedStatus;\n            }\n        }\n        if (nzStatus || nzPercent || nzSuccessPercent || nzStrokeColor) {\n            this.updateIcon();\n        }\n        if (nzStrokeColor) {\n            this.setStrokeColor();\n        }\n        if (nzGapPosition || nzStrokeLinecap || nzGapDegree || nzType || nzPercent || nzStrokeColor || nzStrokeColor) {\n            this.getCirclePaths();\n        }\n        if (nzPercent || nzSteps || nzStrokeWidth) {\n            this.isSteps = this.nzSteps > 0;\n            if (this.isSteps) {\n                this.getSteps();\n            }\n        }\n    }\n    ngOnInit() {\n        this.nzConfigService\n            .getConfigChangeEventForComponent(NZ_CONFIG_MODULE_NAME)\n            .pipe(takeUntil(this.destroy$))\n            .subscribe(() => {\n            this.updateIcon();\n            this.setStrokeColor();\n            this.getCirclePaths();\n        });\n        this.directionality.change?.pipe(takeUntil(this.destroy$)).subscribe((direction) => {\n            this.dir = direction;\n            this.cdr.detectChanges();\n        });\n        this.dir = this.directionality.value;\n    }\n    ngOnDestroy() {\n        this.destroy$.next();\n        this.destroy$.complete();\n    }\n    updateIcon() {\n        const ret = statusIconNameMap.get(this.status);\n        this.icon = ret ? ret + (this.isCircleStyle ? '-o' : '-circle-fill') : '';\n    }\n    /**\n     * Calculate step render configs.\n     */\n    getSteps() {\n        const current = Math.floor(this.nzSteps * (this.nzPercent / 100));\n        const stepWidth = this.nzSize === 'small' ? 2 : 14;\n        const steps = [];\n        for (let i = 0; i < this.nzSteps; i++) {\n            let color;\n            if (i <= current - 1) {\n                color = this.nzStrokeColor;\n            }\n            const stepStyle = {\n                backgroundColor: `${color}`,\n                width: `${stepWidth}px`,\n                height: `${this.strokeWidth}px`\n            };\n            steps.push(stepStyle);\n        }\n        this.steps = steps;\n    }\n    /**\n     * Calculate paths when the type is circle or dashboard.\n     */\n    getCirclePaths() {\n        if (!this.isCircleStyle) {\n            return;\n        }\n        const values = isNotNil(this.nzSuccessPercent) ? [this.nzSuccessPercent, this.nzPercent] : [this.nzPercent];\n        // Calculate shared styles.\n        const radius = 50 - this.strokeWidth / 2;\n        const gapPosition = this.nzGapPosition || (this.nzType === 'circle' ? 'top' : 'bottom');\n        const len = Math.PI * 2 * radius;\n        const gapDegree = this.nzGapDegree || (this.nzType === 'circle' ? 0 : 75);\n        let beginPositionX = 0;\n        let beginPositionY = -radius;\n        let endPositionX = 0;\n        let endPositionY = radius * -2;\n        switch (gapPosition) {\n            case 'left':\n                beginPositionX = -radius;\n                beginPositionY = 0;\n                endPositionX = radius * 2;\n                endPositionY = 0;\n                break;\n            case 'right':\n                beginPositionX = radius;\n                beginPositionY = 0;\n                endPositionX = radius * -2;\n                endPositionY = 0;\n                break;\n            case 'bottom':\n                beginPositionY = radius;\n                endPositionY = radius * 2;\n                break;\n            default:\n        }\n        this.pathString = `M 50,50 m ${beginPositionX},${beginPositionY}\n       a ${radius},${radius} 0 1 1 ${endPositionX},${-endPositionY}\n       a ${radius},${radius} 0 1 1 ${-endPositionX},${endPositionY}`;\n        this.trailPathStyle = {\n            strokeDasharray: `${len - gapDegree}px ${len}px`,\n            strokeDashoffset: `-${gapDegree / 2}px`,\n            transition: 'stroke-dashoffset .3s ease 0s, stroke-dasharray .3s ease 0s, stroke .3s'\n        };\n        // Calculate styles for each path.\n        this.progressCirclePath = values\n            .map((value, index) => {\n            const isSuccessPercent = values.length === 2 && index === 0;\n            return {\n                stroke: this.isGradient && !isSuccessPercent ? `url(#gradient-${this.gradientId})` : null,\n                strokePathStyle: {\n                    stroke: !this.isGradient\n                        ? isSuccessPercent\n                            ? statusColorMap.get('success')\n                            : this.nzStrokeColor\n                        : null,\n                    transition: 'stroke-dashoffset .3s ease 0s, stroke-dasharray .3s ease 0s, stroke .3s, stroke-width .06s ease .3s',\n                    strokeDasharray: `${((value || 0) / 100) * (len - gapDegree)}px ${len}px`,\n                    strokeDashoffset: `-${gapDegree / 2}px`\n                }\n            };\n        })\n            .reverse();\n    }\n    setStrokeColor() {\n        const color = this.nzStrokeColor;\n        const isGradient = (this.isGradient = !!color && typeof color !== 'string');\n        if (isGradient && !this.isCircleStyle) {\n            this.lineGradient = handleLinearGradient(color);\n        }\n        else if (isGradient && this.isCircleStyle) {\n            this.circleGradient = handleCircleGradient(this.nzStrokeColor);\n        }\n        else {\n            this.lineGradient = null;\n            this.circleGradient = [];\n        }\n    }\n    static { this.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: \"12.0.0\", version: \"17.3.8\", ngImport: i0, type: NzProgressComponent, deps: [{ token: i0.ChangeDetectorRef }, { token: i1.NzConfigService }, { token: i2.Directionality, optional: true }], target: i0.ɵɵFactoryTarget.Component }); }\n    static { this.ɵcmp = i0.ɵɵngDeclareComponent({ minVersion: \"17.0.0\", version: \"17.3.8\", type: NzProgressComponent, isStandalone: true, selector: \"nz-progress\", inputs: { nzShowInfo: \"nzShowInfo\", nzWidth: \"nzWidth\", nzStrokeColor: \"nzStrokeColor\", nzSize: \"nzSize\", nzFormat: \"nzFormat\", nzSuccessPercent: \"nzSuccessPercent\", nzPercent: \"nzPercent\", nzStrokeWidth: \"nzStrokeWidth\", nzGapDegree: \"nzGapDegree\", nzStatus: \"nzStatus\", nzType: \"nzType\", nzGapPosition: \"nzGapPosition\", nzStrokeLinecap: \"nzStrokeLinecap\", nzSteps: \"nzSteps\" }, exportAs: [\"nzProgress\"], usesOnChanges: true, ngImport: i0, template: `\n    <ng-template #progressInfoTemplate>\n      @if (nzShowInfo) {\n        <span class=\"ant-progress-text\">\n          @if ((status === 'exception' || status === 'success') && !nzFormat) {\n            <span nz-icon [nzType]=\"icon\"></span>\n          } @else {\n            <ng-container *nzStringTemplateOutlet=\"formatter; context: { $implicit: nzPercent }; let formatter\">\n              {{ formatter(nzPercent) }}\n            </ng-container>\n          }\n        </span>\n      }\n    </ng-template>\n\n    <div\n      [ngClass]=\"'ant-progress ant-progress-status-' + status\"\n      [class.ant-progress-line]=\"nzType === 'line'\"\n      [class.ant-progress-small]=\"nzSize === 'small'\"\n      [class.ant-progress-default]=\"nzSize === 'default'\"\n      [class.ant-progress-show-info]=\"nzShowInfo\"\n      [class.ant-progress-circle]=\"isCircleStyle\"\n      [class.ant-progress-steps]=\"isSteps\"\n      [class.ant-progress-rtl]=\"dir === 'rtl'\"\n    >\n      @if (nzType === 'line') {\n        <div>\n          <!-- normal line style -->\n          @if (isSteps) {\n            <div class=\"ant-progress-steps-outer\">\n              @for (step of steps; track step) {\n                <div class=\"ant-progress-steps-item\" [ngStyle]=\"step\"></div>\n              }\n              <ng-template [ngTemplateOutlet]=\"progressInfoTemplate\" />\n            </div>\n          } @else {\n            <div class=\"ant-progress-outer\">\n              <div class=\"ant-progress-inner\">\n                <div\n                  class=\"ant-progress-bg\"\n                  [style.width.%]=\"nzPercent\"\n                  [style.border-radius]=\"nzStrokeLinecap === 'round' ? '100px' : '0'\"\n                  [style.background]=\"!isGradient ? nzStrokeColor : null\"\n                  [style.background-image]=\"isGradient ? lineGradient : null\"\n                  [style.height.px]=\"strokeWidth\"\n                ></div>\n                @if (nzSuccessPercent || nzSuccessPercent === 0) {\n                  <div\n                    class=\"ant-progress-success-bg\"\n                    [style.width.%]=\"nzSuccessPercent\"\n                    [style.border-radius]=\"nzStrokeLinecap === 'round' ? '100px' : '0'\"\n                    [style.height.px]=\"strokeWidth\"\n                  ></div>\n                }\n              </div>\n            </div>\n            <ng-template [ngTemplateOutlet]=\"progressInfoTemplate\" />\n          }\n        </div>\n      }\n      <!-- line progress -->\n\n      <!-- circle / dashboard progress -->\n\n      @if (isCircleStyle) {\n        <div\n          [style.width.px]=\"this.nzWidth\"\n          [style.height.px]=\"this.nzWidth\"\n          [style.fontSize.px]=\"this.nzWidth * 0.15 + 6\"\n          class=\"ant-progress-inner\"\n          [class.ant-progress-circle-gradient]=\"isGradient\"\n        >\n          <svg class=\"ant-progress-circle \" viewBox=\"0 0 100 100\">\n            @if (isGradient) {\n              <defs>\n                <linearGradient [id]=\"'gradient-' + gradientId\" x1=\"100%\" y1=\"0%\" x2=\"0%\" y2=\"0%\">\n                  @for (i of circleGradient; track i) {\n                    <stop [attr.offset]=\"i.offset\" [attr.stop-color]=\"i.color\"></stop>\n                  }\n                </linearGradient>\n              </defs>\n            }\n\n            <path\n              class=\"ant-progress-circle-trail\"\n              stroke=\"#f3f3f3\"\n              fill-opacity=\"0\"\n              [attr.stroke-width]=\"strokeWidth\"\n              [attr.d]=\"pathString\"\n              [ngStyle]=\"trailPathStyle\"\n            ></path>\n            @for (p of progressCirclePath; track p) {\n              <path\n                class=\"ant-progress-circle-path\"\n                fill-opacity=\"0\"\n                [attr.d]=\"pathString\"\n                [attr.stroke-linecap]=\"nzStrokeLinecap\"\n                [attr.stroke]=\"p.stroke\"\n                [attr.stroke-width]=\"nzPercent ? strokeWidth : 0\"\n                [ngStyle]=\"p.strokePathStyle\"\n              ></path>\n            }\n          </svg>\n          <ng-template [ngTemplateOutlet]=\"progressInfoTemplate\" />\n        </div>\n      }\n    </div>\n  `, isInline: true, dependencies: [{ kind: \"ngmodule\", type: NzIconModule }, { kind: \"directive\", type: i3.NzIconDirective, selector: \"[nz-icon]\", inputs: [\"nzSpin\", \"nzRotate\", \"nzType\", \"nzTheme\", \"nzTwotoneColor\", \"nzIconfont\"], exportAs: [\"nzIcon\"] }, { kind: \"ngmodule\", type: NzOutletModule }, { kind: \"directive\", type: i4.NzStringTemplateOutletDirective, selector: \"[nzStringTemplateOutlet]\", inputs: [\"nzStringTemplateOutletContext\", \"nzStringTemplateOutlet\"], exportAs: [\"nzStringTemplateOutlet\"] }, { kind: \"directive\", type: NgClass, selector: \"[ngClass]\", inputs: [\"class\", \"ngClass\"] }, { kind: \"directive\", type: NgTemplateOutlet, selector: \"[ngTemplateOutlet]\", inputs: [\"ngTemplateOutletContext\", \"ngTemplateOutlet\", \"ngTemplateOutletInjector\"] }, { kind: \"directive\", type: NgStyle, selector: \"[ngStyle]\", inputs: [\"ngStyle\"] }], changeDetection: i0.ChangeDetectionStrategy.OnPush, encapsulation: i0.ViewEncapsulation.None }); }\n}\n__decorate([\n    WithConfig()\n], NzProgressComponent.prototype, \"nzShowInfo\", void 0);\n__decorate([\n    WithConfig()\n], NzProgressComponent.prototype, \"nzStrokeColor\", void 0);\n__decorate([\n    WithConfig()\n], NzProgressComponent.prototype, \"nzSize\", void 0);\n__decorate([\n    InputNumber()\n], NzProgressComponent.prototype, \"nzSuccessPercent\", void 0);\n__decorate([\n    InputNumber()\n], NzProgressComponent.prototype, \"nzPercent\", void 0);\n__decorate([\n    WithConfig(),\n    InputNumber()\n], NzProgressComponent.prototype, \"nzStrokeWidth\", void 0);\n__decorate([\n    WithConfig(),\n    InputNumber()\n], NzProgressComponent.prototype, \"nzGapDegree\", void 0);\n__decorate([\n    WithConfig()\n], NzProgressComponent.prototype, \"nzGapPosition\", void 0);\n__decorate([\n    WithConfig()\n], NzProgressComponent.prototype, \"nzStrokeLinecap\", void 0);\n__decorate([\n    InputNumber()\n], NzProgressComponent.prototype, \"nzSteps\", void 0);\ni0.ɵɵngDeclareClassMetadata({ minVersion: \"12.0.0\", version: \"17.3.8\", ngImport: i0, type: NzProgressComponent, decorators: [{\n            type: Component,\n            args: [{\n                    changeDetection: ChangeDetectionStrategy.OnPush,\n                    encapsulation: ViewEncapsulation.None,\n                    selector: 'nz-progress',\n                    exportAs: 'nzProgress',\n                    preserveWhitespaces: false,\n                    standalone: true,\n                    imports: [NzIconModule, NzOutletModule, NgClass, NgTemplateOutlet, NgStyle],\n                    template: `\n    <ng-template #progressInfoTemplate>\n      @if (nzShowInfo) {\n        <span class=\"ant-progress-text\">\n          @if ((status === 'exception' || status === 'success') && !nzFormat) {\n            <span nz-icon [nzType]=\"icon\"></span>\n          } @else {\n            <ng-container *nzStringTemplateOutlet=\"formatter; context: { $implicit: nzPercent }; let formatter\">\n              {{ formatter(nzPercent) }}\n            </ng-container>\n          }\n        </span>\n      }\n    </ng-template>\n\n    <div\n      [ngClass]=\"'ant-progress ant-progress-status-' + status\"\n      [class.ant-progress-line]=\"nzType === 'line'\"\n      [class.ant-progress-small]=\"nzSize === 'small'\"\n      [class.ant-progress-default]=\"nzSize === 'default'\"\n      [class.ant-progress-show-info]=\"nzShowInfo\"\n      [class.ant-progress-circle]=\"isCircleStyle\"\n      [class.ant-progress-steps]=\"isSteps\"\n      [class.ant-progress-rtl]=\"dir === 'rtl'\"\n    >\n      @if (nzType === 'line') {\n        <div>\n          <!-- normal line style -->\n          @if (isSteps) {\n            <div class=\"ant-progress-steps-outer\">\n              @for (step of steps; track step) {\n                <div class=\"ant-progress-steps-item\" [ngStyle]=\"step\"></div>\n              }\n              <ng-template [ngTemplateOutlet]=\"progressInfoTemplate\" />\n            </div>\n          } @else {\n            <div class=\"ant-progress-outer\">\n              <div class=\"ant-progress-inner\">\n                <div\n                  class=\"ant-progress-bg\"\n                  [style.width.%]=\"nzPercent\"\n                  [style.border-radius]=\"nzStrokeLinecap === 'round' ? '100px' : '0'\"\n                  [style.background]=\"!isGradient ? nzStrokeColor : null\"\n                  [style.background-image]=\"isGradient ? lineGradient : null\"\n                  [style.height.px]=\"strokeWidth\"\n                ></div>\n                @if (nzSuccessPercent || nzSuccessPercent === 0) {\n                  <div\n                    class=\"ant-progress-success-bg\"\n                    [style.width.%]=\"nzSuccessPercent\"\n                    [style.border-radius]=\"nzStrokeLinecap === 'round' ? '100px' : '0'\"\n                    [style.height.px]=\"strokeWidth\"\n                  ></div>\n                }\n              </div>\n            </div>\n            <ng-template [ngTemplateOutlet]=\"progressInfoTemplate\" />\n          }\n        </div>\n      }\n      <!-- line progress -->\n\n      <!-- circle / dashboard progress -->\n\n      @if (isCircleStyle) {\n        <div\n          [style.width.px]=\"this.nzWidth\"\n          [style.height.px]=\"this.nzWidth\"\n          [style.fontSize.px]=\"this.nzWidth * 0.15 + 6\"\n          class=\"ant-progress-inner\"\n          [class.ant-progress-circle-gradient]=\"isGradient\"\n        >\n          <svg class=\"ant-progress-circle \" viewBox=\"0 0 100 100\">\n            @if (isGradient) {\n              <defs>\n                <linearGradient [id]=\"'gradient-' + gradientId\" x1=\"100%\" y1=\"0%\" x2=\"0%\" y2=\"0%\">\n                  @for (i of circleGradient; track i) {\n                    <stop [attr.offset]=\"i.offset\" [attr.stop-color]=\"i.color\"></stop>\n                  }\n                </linearGradient>\n              </defs>\n            }\n\n            <path\n              class=\"ant-progress-circle-trail\"\n              stroke=\"#f3f3f3\"\n              fill-opacity=\"0\"\n              [attr.stroke-width]=\"strokeWidth\"\n              [attr.d]=\"pathString\"\n              [ngStyle]=\"trailPathStyle\"\n            ></path>\n            @for (p of progressCirclePath; track p) {\n              <path\n                class=\"ant-progress-circle-path\"\n                fill-opacity=\"0\"\n                [attr.d]=\"pathString\"\n                [attr.stroke-linecap]=\"nzStrokeLinecap\"\n                [attr.stroke]=\"p.stroke\"\n                [attr.stroke-width]=\"nzPercent ? strokeWidth : 0\"\n                [ngStyle]=\"p.strokePathStyle\"\n              ></path>\n            }\n          </svg>\n          <ng-template [ngTemplateOutlet]=\"progressInfoTemplate\" />\n        </div>\n      }\n    </div>\n  `\n                }]\n        }], ctorParameters: () => [{ type: i0.ChangeDetectorRef }, { type: i1.NzConfigService }, { type: i2.Directionality, decorators: [{\n                    type: Optional\n                }] }], propDecorators: { nzShowInfo: [{\n                type: Input\n            }], nzWidth: [{\n                type: Input\n            }], nzStrokeColor: [{\n                type: Input\n            }], nzSize: [{\n                type: Input\n            }], nzFormat: [{\n                type: Input\n            }], nzSuccessPercent: [{\n                type: Input\n            }], nzPercent: [{\n                type: Input\n            }], nzStrokeWidth: [{\n                type: Input\n            }], nzGapDegree: [{\n                type: Input\n            }], nzStatus: [{\n                type: Input\n            }], nzType: [{\n                type: Input\n            }], nzGapPosition: [{\n                type: Input\n            }], nzStrokeLinecap: [{\n                type: Input\n            }], nzSteps: [{\n                type: Input\n            }] } });\n\n/**\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://github.com/NG-ZORRO/ng-zorro-antd/blob/master/LICENSE\n */\nclass NzProgressModule {\n    static { this.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: \"12.0.0\", version: \"17.3.8\", ngImport: i0, type: NzProgressModule, deps: [], target: i0.ɵɵFactoryTarget.NgModule }); }\n    static { this.ɵmod = i0.ɵɵngDeclareNgModule({ minVersion: \"14.0.0\", version: \"17.3.8\", ngImport: i0, type: NzProgressModule, imports: [NzProgressComponent], exports: [NzProgressComponent] }); }\n    static { this.ɵinj = i0.ɵɵngDeclareInjector({ minVersion: \"12.0.0\", version: \"17.3.8\", ngImport: i0, type: NzProgressModule, imports: [NzProgressComponent] }); }\n}\ni0.ɵɵngDeclareClassMetadata({ minVersion: \"12.0.0\", version: \"17.3.8\", ngImport: i0, type: NzProgressModule, decorators: [{\n            type: NgModule,\n            args: [{\n                    imports: [NzProgressComponent],\n                    exports: [NzProgressComponent]\n                }]\n        }] });\n\n/**\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://github.com/NG-ZORRO/ng-zorro-antd/blob/master/LICENSE\n */\n\n/**\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://github.com/NG-ZORRO/ng-zorro-antd/blob/master/LICENSE\n */\n\n/**\n * Generated bundle index. Do not edit.\n */\n\nexport { NzProgressComponent, NzProgressModule };\n"],"mappings":"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2O,IAAI;MACrCC,QAAQ,EAAE,aAAa;MACvBtB,QAAQ,EAAE,YAAY;MACtBuB,mBAAmB,EAAE,KAAK;MAC1BtB,UAAU,EAAE,IAAI;MAChBuB,OAAO,EAAE,CAAC7N,YAAY,EAAEJ,cAAc,EAAER,OAAO,EAAEC,gBAAgB,EAAEC,OAAO,CAAC;MAC3EuN,QAAQ,EAAG;AAC/B;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;IACgB,CAAC;EACT,CAAC,CAAC,EAAkB,MAAM,CAAC;IAAEX,IAAI,EAAEtN,EAAE,CAACiN;EAAkB,CAAC,EAAE;IAAEK,IAAI,EAAEzM,EAAE,CAACqM;EAAgB,CAAC,EAAE;IAAEI,IAAI,EAAEjM,EAAE,CAAC8L,cAAc;IAAE+B,UAAU,EAAE,CAAC;MACrH5B,IAAI,EAAElN;IACV,CAAC;EAAE,CAAC,CAAC,EAAkB;IAAEoD,UAAU,EAAE,CAAC;MACtC8J,IAAI,EAAEjN;IACV,CAAC,CAAC;IAAEiG,OAAO,EAAE,CAAC;MACVgH,IAAI,EAAEjN;IACV,CAAC,CAAC;IAAEyE,aAAa,EAAE,CAAC;MAChBwI,IAAI,EAAEjN;IACV,CAAC,CAAC;IAAE6I,MAAM,EAAE,CAAC;MACToE,IAAI,EAAEjN;IACV,CAAC,CAAC;IAAEgD,QAAQ,EAAE,CAAC;MACXiK,IAAI,EAAEjN;IACV,CAAC,CAAC;IAAEkE,gBAAgB,EAAE,CAAC;MACnB+I,IAAI,EAAEjN;IACV,CAAC,CAAC;IAAEkC,SAAS,EAAE,CAAC;MACZ+K,IAAI,EAAEjN;IACV,CAAC,CAAC;IAAE2I,aAAa,EAAE,CAAC;MAChBsE,IAAI,EAAEjN;IACV,CAAC,CAAC;IAAEqJ,WAAW,EAAE,CAAC;MACd4D,IAAI,EAAEjN;IACV,CAAC,CAAC;IAAEyI,QAAQ,EAAE,CAAC;MACXwE,IAAI,EAAEjN;IACV,CAAC,CAAC;IAAE4I,MAAM,EAAE,CAAC;MACTqE,IAAI,EAAEjN;IACV,CAAC,CAAC;IAAEsJ,aAAa,EAAE,CAAC;MAChB2D,IAAI,EAAEjN;IACV,CAAC,CAAC;IAAEmE,eAAe,EAAE,CAAC;MAClB8I,IAAI,EAAEjN;IACV,CAAC,CAAC;IAAEuJ,OAAO,EAAE,CAAC;MACV0D,IAAI,EAAEjN;IACV,CAAC;EAAE,CAAC;AAAA;;AAEhB;AACA;AACA;AACA;AACA,MAAM8O,gBAAgB,CAAC;EACnB;IAAS,IAAI,CAACtC,IAAI,YAAAuC,yBAAArC,CAAA;MAAA,YAAAA,CAAA,IAAwFoC,gBAAgB;IAAA,CAAkD;EAAE;EAC9K;IAAS,IAAI,CAACE,IAAI,kBA3S8ErP,EAAE,CAAAsP,gBAAA;MAAAhC,IAAA,EA2SS6B;IAAgB,EAAmE;EAAE;EAChM;IAAS,IAAI,CAACI,IAAI,kBA5S8EvP,EAAE,CAAAwP,gBAAA;MAAAP,OAAA,GA4SqCpG,mBAAmB;IAAA,EAAI;EAAE;AACpK;AACA;EAAA,QAAA6F,SAAA,oBAAAA,SAAA,KA9SoG1O,EAAE,CAAA2O,iBAAA,CA8SXQ,gBAAgB,EAAc,CAAC;IAC9G7B,IAAI,EAAEhN,QAAQ;IACdsO,IAAI,EAAE,CAAC;MACCK,OAAO,EAAE,CAACpG,mBAAmB,CAAC;MAC9B4G,OAAO,EAAE,CAAC5G,mBAAmB;IACjC,CAAC;EACT,CAAC,CAAC;AAAA;;AAEV;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA,SAASA,mBAAmB,EAAEsG,gBAAgB","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}