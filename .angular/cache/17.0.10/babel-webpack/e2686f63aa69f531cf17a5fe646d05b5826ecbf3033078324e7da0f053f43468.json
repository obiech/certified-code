{"ast":null,"code":"import { RouterStateSnapshot, ActivatedRouteSnapshot } from '@angular/router';\nimport { AvailableDriversForOrderGQL } from '@ridy/admin-panel/generated/graphql';\nimport { Observable } from 'rxjs';\nimport * as i0 from \"@angular/core\";\nimport * as i1 from \"@ridy/admin-panel/generated/graphql\";\nexport class RequestViewAssignResolver {\n  constructor(gql) {\n    this.gql = gql;\n  }\n  resolve(route, state) {\n    const order = route.parent.data.order;\n    return this.gql.fetch({\n      center: order.data.order.points[0],\n      count: 10\n    });\n  }\n  static {\n    this.ɵfac = function RequestViewAssignResolver_Factory(t) {\n      return new (t || RequestViewAssignResolver)(i0.ɵɵinject(i1.AvailableDriversForOrderGQL));\n    };\n  }\n  static {\n    this.ɵprov = /*@__PURE__*/i0.ɵɵdefineInjectable({\n      token: RequestViewAssignResolver,\n      factory: RequestViewAssignResolver.ɵfac\n    });\n  }\n}","map":{"version":3,"names":["RouterStateSnapshot","ActivatedRouteSnapshot","AvailableDriversForOrderGQL","Observable","RequestViewAssignResolver","constructor","gql","resolve","route","state","order","parent","data","fetch","center","points","count","i0","ɵɵinject","i1","factory","ɵfac"],"sources":["/Users/obiechina/Documents/ridy-flutter-full-taxi-solution 2/apps/admin-panel/src/app/cms/requests/request-view/request-view-assign/request-view-assign.resolver.ts"],"sourcesContent":["import { Injectable } from '@angular/core';\nimport { Router, RouterStateSnapshot, ActivatedRouteSnapshot } from '@angular/router';\nimport { ApolloQueryResult } from '@apollo/client/core';\nimport { AvailableDriversForOrderGQL, AvailableDriversForOrderQuery, ViewOrderQuery } from '@ridy/admin-panel/generated/graphql';\nimport { Observable, of } from 'rxjs';\n\n@Injectable()\nexport class RequestViewAssignResolver  {\n  constructor(\n    private gql: AvailableDriversForOrderGQL\n  ) {}\n\n  resolve(route: ActivatedRouteSnapshot, state: RouterStateSnapshot): Observable<ApolloQueryResult<AvailableDriversForOrderQuery>> {\n    const order: ApolloQueryResult<ViewOrderQuery> = route.parent!.data.order;\n    return this.gql.fetch({ center: order.data.order!.points[0],count: 10});\n  }\n}\n"],"mappings":"AACA,SAAiBA,mBAAmB,EAAEC,sBAAsB,QAAQ,iBAAiB;AAErF,SAASC,2BAA2B,QAAuD,qCAAqC;AAChI,SAASC,UAAU,QAAY,MAAM;;;AAGrC,OAAM,MAAOC,yBAAyB;EACpCC,YACUC,GAAgC;IAAhC,KAAAA,GAAG,GAAHA,GAAG;EACV;EAEHC,OAAOA,CAACC,KAA6B,EAAEC,KAA0B;IAC/D,MAAMC,KAAK,GAAsCF,KAAK,CAACG,MAAO,CAACC,IAAI,CAACF,KAAK;IACzE,OAAO,IAAI,CAACJ,GAAG,CAACO,KAAK,CAAC;MAAEC,MAAM,EAAEJ,KAAK,CAACE,IAAI,CAACF,KAAM,CAACK,MAAM,CAAC,CAAC,CAAC;MAACC,KAAK,EAAE;IAAE,CAAC,CAAC;EACzE;;;uBARWZ,yBAAyB,EAAAa,EAAA,CAAAC,QAAA,CAAAC,EAAA,CAAAjB,2BAAA;IAAA;EAAA;;;aAAzBE,yBAAyB;MAAAgB,OAAA,EAAzBhB,yBAAyB,CAAAiB;IAAA;EAAA","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}