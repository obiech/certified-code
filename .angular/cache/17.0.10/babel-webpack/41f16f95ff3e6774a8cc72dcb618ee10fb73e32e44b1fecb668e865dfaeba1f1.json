{"ast":null,"code":"import { __assign, __extends } from \"tslib\";\nimport * as _ from '@antv/util';\nimport Adjust from './adjust';\nvar Cache = _.Cache;\nvar Stack = /** @class */function (_super) {\n  __extends(Stack, _super);\n  function Stack(cfg) {\n    var _this = _super.call(this, cfg) || this;\n    var _a = cfg.adjustNames,\n      adjustNames = _a === void 0 ? ['y'] : _a,\n      _b = cfg.height,\n      height = _b === void 0 ? NaN : _b,\n      _c = cfg.size,\n      size = _c === void 0 ? 10 : _c,\n      _d = cfg.reverseOrder,\n      reverseOrder = _d === void 0 ? false : _d;\n    _this.adjustNames = adjustNames;\n    _this.height = height;\n    _this.size = size;\n    _this.reverseOrder = reverseOrder;\n    return _this;\n  }\n  /**\n   * 方法入参是经过数据分组、数据数字化之后的二维数组\n   * @param groupDataArray 分组之后的数据\n   */\n  Stack.prototype.process = function (groupDataArray) {\n    var _a = this,\n      yField = _a.yField,\n      reverseOrder = _a.reverseOrder;\n    // 如果有指定 y 字段，那么按照 y 字段来 stack\n    // 否则，按照高度均分\n    var d = yField ? this.processStack(groupDataArray) : this.processOneDimStack(groupDataArray);\n    return reverseOrder ? this.reverse(d) : d;\n  };\n  Stack.prototype.reverse = function (groupedDataArray) {\n    return groupedDataArray.slice(0).reverse();\n  };\n  Stack.prototype.processStack = function (groupDataArray) {\n    var _a = this,\n      xField = _a.xField,\n      yField = _a.yField,\n      reverseOrder = _a.reverseOrder;\n    // 层叠顺序翻转\n    var groupedDataArray = reverseOrder ? this.reverse(groupDataArray) : groupDataArray;\n    // 用来缓存，正数和负数的堆叠问题\n    var positive = new Cache();\n    var negative = new Cache();\n    return groupedDataArray.map(function (dataArray) {\n      return dataArray.map(function (data) {\n        var _a;\n        var x = _.get(data, xField, 0);\n        var y = _.get(data, [yField]);\n        var xKey = x.toString();\n        // todo 是否应该取 _origin？因为 y 可能取到的值不正确，比如先 symmetric，再 stack！\n        y = _.isArray(y) ? y[1] : y;\n        if (!_.isNil(y)) {\n          var cache = y >= 0 ? positive : negative;\n          if (!cache.has(xKey)) {\n            cache.set(xKey, 0);\n          }\n          var xValue = cache.get(xKey);\n          var newXValue = y + xValue;\n          // 存起来\n          cache.set(xKey, newXValue);\n          return __assign(__assign({}, data), (_a = {}, _a[yField] = [xValue, newXValue], _a));\n        }\n        // 没有修改，则直接返回\n        return data;\n      });\n    });\n  };\n  Stack.prototype.processOneDimStack = function (groupDataArray) {\n    var _this = this;\n    var _a = this,\n      xField = _a.xField,\n      height = _a.height,\n      reverseOrder = _a.reverseOrder;\n    var yField = 'y';\n    // 如果层叠的顺序翻转\n    var groupedDataArray = reverseOrder ? this.reverse(groupDataArray) : groupDataArray;\n    // 缓存累加数据\n    var cache = new Cache();\n    return groupedDataArray.map(function (dataArray) {\n      return dataArray.map(function (data) {\n        var _a;\n        var size = _this.size;\n        var xValue = data[xField];\n        // todo 没有看到这个 stack 计算原理\n        var stackHeight = size * 2 / height;\n        if (!cache.has(xValue)) {\n          cache.set(xValue, stackHeight / 2); // 初始值大小\n        }\n\n        var stackValue = cache.get(xValue);\n        // 增加一层 stackHeight\n        cache.set(xValue, stackValue + stackHeight);\n        return __assign(__assign({}, data), (_a = {}, _a[yField] = stackValue, _a));\n      });\n    });\n  };\n  return Stack;\n}(Adjust);\nexport default Stack;","map":{"version":3,"names":["__assign","__extends","_","Adjust","Cache","Stack","_super","cfg","_this","call","_a","adjustNames","_b","height","NaN","_c","size","_d","reverseOrder","prototype","process","groupDataArray","yField","d","processStack","processOneDimStack","reverse","groupedDataArray","slice","xField","positive","negative","map","dataArray","data","x","get","y","xKey","toString","isArray","isNil","cache","has","set","xValue","newXValue","stackHeight","stackValue"],"sources":["/Users/obiechina/Documents/ridy-flutter-full-taxi-solution 2/node_modules/@antv/adjust/esm/adjusts/stack.js"],"sourcesContent":["import { __assign, __extends } from \"tslib\";\nimport * as _ from '@antv/util';\nimport Adjust from './adjust';\nvar Cache = _.Cache;\nvar Stack = /** @class */ (function (_super) {\n    __extends(Stack, _super);\n    function Stack(cfg) {\n        var _this = _super.call(this, cfg) || this;\n        var _a = cfg.adjustNames, adjustNames = _a === void 0 ? ['y'] : _a, _b = cfg.height, height = _b === void 0 ? NaN : _b, _c = cfg.size, size = _c === void 0 ? 10 : _c, _d = cfg.reverseOrder, reverseOrder = _d === void 0 ? false : _d;\n        _this.adjustNames = adjustNames;\n        _this.height = height;\n        _this.size = size;\n        _this.reverseOrder = reverseOrder;\n        return _this;\n    }\n    /**\n     * 方法入参是经过数据分组、数据数字化之后的二维数组\n     * @param groupDataArray 分组之后的数据\n     */\n    Stack.prototype.process = function (groupDataArray) {\n        var _a = this, yField = _a.yField, reverseOrder = _a.reverseOrder;\n        // 如果有指定 y 字段，那么按照 y 字段来 stack\n        // 否则，按照高度均分\n        var d = yField ? this.processStack(groupDataArray) : this.processOneDimStack(groupDataArray);\n        return reverseOrder ? this.reverse(d) : d;\n    };\n    Stack.prototype.reverse = function (groupedDataArray) {\n        return groupedDataArray.slice(0).reverse();\n    };\n    Stack.prototype.processStack = function (groupDataArray) {\n        var _a = this, xField = _a.xField, yField = _a.yField, reverseOrder = _a.reverseOrder;\n        // 层叠顺序翻转\n        var groupedDataArray = reverseOrder ? this.reverse(groupDataArray) : groupDataArray;\n        // 用来缓存，正数和负数的堆叠问题\n        var positive = new Cache();\n        var negative = new Cache();\n        return groupedDataArray.map(function (dataArray) {\n            return dataArray.map(function (data) {\n                var _a;\n                var x = _.get(data, xField, 0);\n                var y = _.get(data, [yField]);\n                var xKey = x.toString();\n                // todo 是否应该取 _origin？因为 y 可能取到的值不正确，比如先 symmetric，再 stack！\n                y = _.isArray(y) ? y[1] : y;\n                if (!_.isNil(y)) {\n                    var cache = y >= 0 ? positive : negative;\n                    if (!cache.has(xKey)) {\n                        cache.set(xKey, 0);\n                    }\n                    var xValue = cache.get(xKey);\n                    var newXValue = y + xValue;\n                    // 存起来\n                    cache.set(xKey, newXValue);\n                    return __assign(__assign({}, data), (_a = {}, _a[yField] = [xValue, newXValue], _a));\n                }\n                // 没有修改，则直接返回\n                return data;\n            });\n        });\n    };\n    Stack.prototype.processOneDimStack = function (groupDataArray) {\n        var _this = this;\n        var _a = this, xField = _a.xField, height = _a.height, reverseOrder = _a.reverseOrder;\n        var yField = 'y';\n        // 如果层叠的顺序翻转\n        var groupedDataArray = reverseOrder ? this.reverse(groupDataArray) : groupDataArray;\n        // 缓存累加数据\n        var cache = new Cache();\n        return groupedDataArray.map(function (dataArray) {\n            return dataArray.map(function (data) {\n                var _a;\n                var size = _this.size;\n                var xValue = data[xField];\n                // todo 没有看到这个 stack 计算原理\n                var stackHeight = (size * 2) / height;\n                if (!cache.has(xValue)) {\n                    cache.set(xValue, stackHeight / 2); // 初始值大小\n                }\n                var stackValue = cache.get(xValue);\n                // 增加一层 stackHeight\n                cache.set(xValue, stackValue + stackHeight);\n                return __assign(__assign({}, data), (_a = {}, _a[yField] = stackValue, _a));\n            });\n        });\n    };\n    return Stack;\n}(Adjust));\nexport default Stack;\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}