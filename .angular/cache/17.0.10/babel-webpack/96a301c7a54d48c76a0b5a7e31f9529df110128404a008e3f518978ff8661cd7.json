{"ast":null,"code":"import parsePathString from './parse-path-string';\nvar REGEX_MD = /[a-z]/;\nfunction toSymmetry(p, c) {\n  return [c[0] + (c[0] - p[0]), c[1] + (c[1] - p[1])];\n}\nexport default function pathToAbsolute(pathString) {\n  var pathArray = parsePathString(pathString);\n  if (!pathArray || !pathArray.length) {\n    return [['M', 0, 0]];\n  }\n  var needProcess = false; // 如果存在小写的命令或者 V,H,T,S 则需要处理\n  for (var i = 0; i < pathArray.length; i++) {\n    var cmd = pathArray[i][0];\n    // 如果存在相对位置的命令，则中断返回\n    if (REGEX_MD.test(cmd) || ['V', 'H', 'T', 'S'].indexOf(cmd) >= 0) {\n      needProcess = true;\n      break;\n    }\n  }\n  // 如果不存在相对命令，则直接返回\n  // 如果在业务上都写绝对路径，这种方式最快，仅做了一次检测\n  if (!needProcess) {\n    return pathArray;\n  }\n  var res = [];\n  var x = 0;\n  var y = 0;\n  var mx = 0;\n  var my = 0;\n  var start = 0;\n  var pa0;\n  var dots;\n  var first = pathArray[0];\n  if (first[0] === 'M' || first[0] === 'm') {\n    x = +first[1];\n    y = +first[2];\n    mx = x;\n    my = y;\n    start++;\n    res[0] = ['M', x, y];\n  }\n  for (var i = start, ii = pathArray.length; i < ii; i++) {\n    var pa = pathArray[i];\n    var preParams = res[i - 1]; // 取前一个已经处理后的节点，否则会出现问题\n    var r = [];\n    var cmd = pa[0];\n    var upCmd = cmd.toUpperCase();\n    if (cmd !== upCmd) {\n      r[0] = upCmd;\n      switch (upCmd) {\n        case 'A':\n          r[1] = pa[1];\n          r[2] = pa[2];\n          r[3] = pa[3];\n          r[4] = pa[4];\n          r[5] = pa[5];\n          r[6] = +pa[6] + x;\n          r[7] = +pa[7] + y;\n          break;\n        case 'V':\n          r[1] = +pa[1] + y;\n          break;\n        case 'H':\n          r[1] = +pa[1] + x;\n          break;\n        case 'M':\n          mx = +pa[1] + x;\n          my = +pa[2] + y;\n          r[1] = mx;\n          r[2] = my;\n          break;\n        // for lint\n        default:\n          for (var j = 1, jj = pa.length; j < jj; j++) {\n            r[j] = +pa[j] + (j % 2 ? x : y);\n          }\n      }\n    } else {\n      // 如果本来已经大写，则不处理\n      r = pathArray[i];\n    }\n    // 需要在外面统一做，同时处理 V,H,S,T 等特殊指令\n    switch (upCmd) {\n      case 'Z':\n        x = +mx;\n        y = +my;\n        break;\n      case 'H':\n        x = r[1];\n        r = ['L', x, y];\n        break;\n      case 'V':\n        y = r[1];\n        r = ['L', x, y];\n        break;\n      case 'T':\n        x = r[1];\n        y = r[2];\n        // 以 x, y 为中心的，上一个控制点的对称点\n        // 需要假设上一个节点的命令为 Q\n        var symetricT = toSymmetry([preParams[1], preParams[2]], [preParams[3], preParams[4]]);\n        r = ['Q', symetricT[0], symetricT[1], x, y];\n        break;\n      case 'S':\n        x = r[r.length - 2];\n        y = r[r.length - 1];\n        // 以 x,y 为中心，取上一个控制点，\n        // 需要假设上一个线段为 C 或者 S\n        var length_1 = preParams.length;\n        var symetricS = toSymmetry([preParams[length_1 - 4], preParams[length_1 - 3]], [preParams[length_1 - 2], preParams[length_1 - 1]]);\n        r = ['C', symetricS[0], symetricS[1], r[1], r[2], x, y];\n        break;\n      case 'M':\n        mx = r[r.length - 2];\n        my = r[r.length - 1];\n        break;\n      // for lint\n      default:\n        x = r[r.length - 2];\n        y = r[r.length - 1];\n    }\n    res.push(r);\n  }\n  return res;\n}","map":{"version":3,"names":["parsePathString","REGEX_MD","toSymmetry","p","c","pathToAbsolute","pathString","pathArray","length","needProcess","i","cmd","test","indexOf","res","x","y","mx","my","start","pa0","dots","first","ii","pa","preParams","r","upCmd","toUpperCase","j","jj","symetricT","length_1","symetricS","push"],"sources":["/Users/obiechina/Documents/ridy-flutter-full-taxi-solution 2/node_modules/@antv/path-util/esm/path-2-absolute.js"],"sourcesContent":["import parsePathString from './parse-path-string';\nvar REGEX_MD = /[a-z]/;\nfunction toSymmetry(p, c) {\n    return [\n        c[0] + (c[0] - p[0]),\n        c[1] + (c[1] - p[1]),\n    ];\n}\nexport default function pathToAbsolute(pathString) {\n    var pathArray = parsePathString(pathString);\n    if (!pathArray || !pathArray.length) {\n        return [\n            ['M', 0, 0],\n        ];\n    }\n    var needProcess = false; // 如果存在小写的命令或者 V,H,T,S 则需要处理\n    for (var i = 0; i < pathArray.length; i++) {\n        var cmd = pathArray[i][0];\n        // 如果存在相对位置的命令，则中断返回\n        if (REGEX_MD.test(cmd) || ['V', 'H', 'T', 'S'].indexOf(cmd) >= 0) {\n            needProcess = true;\n            break;\n        }\n    }\n    // 如果不存在相对命令，则直接返回\n    // 如果在业务上都写绝对路径，这种方式最快，仅做了一次检测\n    if (!needProcess) {\n        return pathArray;\n    }\n    var res = [];\n    var x = 0;\n    var y = 0;\n    var mx = 0;\n    var my = 0;\n    var start = 0;\n    var pa0;\n    var dots;\n    var first = pathArray[0];\n    if (first[0] === 'M' || first[0] === 'm') {\n        x = +first[1];\n        y = +first[2];\n        mx = x;\n        my = y;\n        start++;\n        res[0] = ['M', x, y];\n    }\n    for (var i = start, ii = pathArray.length; i < ii; i++) {\n        var pa = pathArray[i];\n        var preParams = res[i - 1]; // 取前一个已经处理后的节点，否则会出现问题\n        var r = [];\n        var cmd = pa[0];\n        var upCmd = cmd.toUpperCase();\n        if (cmd !== upCmd) {\n            r[0] = upCmd;\n            switch (upCmd) {\n                case 'A':\n                    r[1] = pa[1];\n                    r[2] = pa[2];\n                    r[3] = pa[3];\n                    r[4] = pa[4];\n                    r[5] = pa[5];\n                    r[6] = +pa[6] + x;\n                    r[7] = +pa[7] + y;\n                    break;\n                case 'V':\n                    r[1] = +pa[1] + y;\n                    break;\n                case 'H':\n                    r[1] = +pa[1] + x;\n                    break;\n                case 'M':\n                    mx = +pa[1] + x;\n                    my = +pa[2] + y;\n                    r[1] = mx;\n                    r[2] = my;\n                    break; // for lint\n                default:\n                    for (var j = 1, jj = pa.length; j < jj; j++) {\n                        r[j] = +pa[j] + ((j % 2) ? x : y);\n                    }\n            }\n        }\n        else { // 如果本来已经大写，则不处理\n            r = pathArray[i];\n        }\n        // 需要在外面统一做，同时处理 V,H,S,T 等特殊指令\n        switch (upCmd) {\n            case 'Z':\n                x = +mx;\n                y = +my;\n                break;\n            case 'H':\n                x = r[1];\n                r = ['L', x, y];\n                break;\n            case 'V':\n                y = r[1];\n                r = ['L', x, y];\n                break;\n            case 'T':\n                x = r[1];\n                y = r[2];\n                // 以 x, y 为中心的，上一个控制点的对称点\n                // 需要假设上一个节点的命令为 Q\n                var symetricT = toSymmetry([preParams[1], preParams[2]], [preParams[3], preParams[4]]);\n                r = ['Q', symetricT[0], symetricT[1], x, y];\n                break;\n            case 'S':\n                x = r[r.length - 2];\n                y = r[r.length - 1];\n                // 以 x,y 为中心，取上一个控制点，\n                // 需要假设上一个线段为 C 或者 S\n                var length_1 = preParams.length;\n                var symetricS = toSymmetry([preParams[length_1 - 4], preParams[length_1 - 3]], [preParams[length_1 - 2], preParams[length_1 - 1]]);\n                r = ['C', symetricS[0], symetricS[1], r[1], r[2], x, y];\n                break;\n            case 'M':\n                mx = r[r.length - 2];\n                my = r[r.length - 1];\n                break; // for lint\n            default:\n                x = r[r.length - 2];\n                y = r[r.length - 1];\n        }\n        res.push(r);\n    }\n    return res;\n}\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}