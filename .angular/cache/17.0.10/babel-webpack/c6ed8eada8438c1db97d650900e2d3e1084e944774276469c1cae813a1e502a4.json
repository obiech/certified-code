{"ast":null,"code":"import { __spreadArray } from \"tslib\";\nimport { ext, mat3, vec3 } from '@antv/matrix-util';\nimport { assign } from '@antv/util';\n/**\n * Coordinate Base Class\n */\nvar Coordinate = /** @class */function () {\n  function Coordinate(cfg) {\n    // 自身属性\n    this.type = 'coordinate';\n    this.isRect = false;\n    this.isHelix = false;\n    this.isPolar = false;\n    this.isReflectX = false;\n    this.isReflectY = false;\n    var start = cfg.start,\n      end = cfg.end,\n      _a = cfg.matrix,\n      matrix = _a === void 0 ? [1, 0, 0, 0, 1, 0, 0, 0, 1] : _a,\n      _b = cfg.isTransposed,\n      isTransposed = _b === void 0 ? false : _b;\n    this.start = start;\n    this.end = end;\n    this.matrix = matrix;\n    this.originalMatrix = __spreadArray([], matrix); // 去除引用\n    this.isTransposed = isTransposed;\n  }\n  /**\n   * 初始化流程\n   */\n  Coordinate.prototype.initial = function () {\n    // center、width、height\n    this.center = {\n      x: (this.start.x + this.end.x) / 2,\n      y: (this.start.y + this.end.y) / 2\n    };\n    this.width = Math.abs(this.end.x - this.start.x);\n    this.height = Math.abs(this.end.y - this.start.y);\n  };\n  /**\n   * 更新配置\n   * @param cfg\n   */\n  Coordinate.prototype.update = function (cfg) {\n    assign(this, cfg);\n    this.initial();\n  };\n  Coordinate.prototype.convertDim = function (percent, dim) {\n    var _a;\n    var _b = this[dim],\n      start = _b.start,\n      end = _b.end;\n    // 交换\n    if (this.isReflect(dim)) {\n      _a = [end, start], start = _a[0], end = _a[1];\n    }\n    return start + percent * (end - start);\n  };\n  Coordinate.prototype.invertDim = function (value, dim) {\n    var _a;\n    var _b = this[dim],\n      start = _b.start,\n      end = _b.end;\n    // 交换\n    if (this.isReflect(dim)) {\n      _a = [end, start], start = _a[0], end = _a[1];\n    }\n    return (value - start) / (end - start);\n  };\n  /**\n   * 将坐标点进行矩阵变换\n   * @param x   对应 x 轴画布坐标\n   * @param y   对应 y 轴画布坐标\n   * @param tag 默认为 0，可取值 0, 1\n   * @return    返回变换后的三阶向量 [x, y, z]\n   */\n  Coordinate.prototype.applyMatrix = function (x, y, tag) {\n    if (tag === void 0) {\n      tag = 0;\n    }\n    var matrix = this.matrix;\n    var vector = [x, y, tag];\n    vec3.transformMat3(vector, vector, matrix);\n    return vector;\n  };\n  /**\n   * 将坐标点进行矩阵逆变换\n   * @param x   对应 x 轴画布坐标\n   * @param y   对应 y 轴画布坐标\n   * @param tag 默认为 0，可取值 0, 1\n   * @return    返回矩阵逆变换后的三阶向量 [x, y, z]\n   */\n  Coordinate.prototype.invertMatrix = function (x, y, tag) {\n    if (tag === void 0) {\n      tag = 0;\n    }\n    var matrix = this.matrix;\n    var inverted = mat3.invert([0, 0, 0, 0, 0, 0, 0, 0, 0], matrix);\n    var vector = [x, y, tag];\n    if (inverted) {\n      // 如果为空则不进行矩阵变化，防止报错\n      vec3.transformMat3(vector, vector, inverted);\n    }\n    return vector;\n  };\n  /**\n   * 将归一化的坐标点数据转换为画布坐标，并根据坐标系当前矩阵进行变换\n   * @param point 归一化的坐标点\n   * @return      返回进行矩阵变换后的画布坐标\n   */\n  Coordinate.prototype.convert = function (point) {\n    var _a = this.convertPoint(point),\n      x = _a.x,\n      y = _a.y;\n    var vector = this.applyMatrix(x, y, 1);\n    return {\n      x: vector[0],\n      y: vector[1]\n    };\n  };\n  /**\n   * 将进行过矩阵变换画布坐标转换为归一化坐标\n   * @param point 画布坐标\n   * @return      返回归一化的坐标点\n   */\n  Coordinate.prototype.invert = function (point) {\n    var vector = this.invertMatrix(point.x, point.y, 1);\n    return this.invertPoint({\n      x: vector[0],\n      y: vector[1]\n    });\n  };\n  /**\n   * 坐标系旋转变换\n   * @param  radian 旋转弧度\n   * @return        返回坐标系对象\n   */\n  Coordinate.prototype.rotate = function (radian) {\n    var matrix = this.matrix;\n    var center = this.center;\n    ext.leftTranslate(matrix, matrix, [-center.x, -center.y]);\n    ext.leftRotate(matrix, matrix, radian);\n    ext.leftTranslate(matrix, matrix, [center.x, center.y]);\n    return this;\n  };\n  /**\n   * 坐标系反射变换\n   * @param dim 反射维度\n   * @return    返回坐标系对象\n   */\n  Coordinate.prototype.reflect = function (dim) {\n    if (dim === 'x') {\n      this.isReflectX = !this.isReflectX;\n    } else {\n      this.isReflectY = !this.isReflectY;\n    }\n    return this;\n  };\n  /**\n   * 坐标系比例变换\n   * @param s1 x 方向缩放比例\n   * @param s2 y 方向缩放比例\n   * @return     返回坐标系对象\n   */\n  Coordinate.prototype.scale = function (s1, s2) {\n    var matrix = this.matrix;\n    var center = this.center;\n    ext.leftTranslate(matrix, matrix, [-center.x, -center.y]);\n    ext.leftScale(matrix, matrix, [s1, s2]);\n    ext.leftTranslate(matrix, matrix, [center.x, center.y]);\n    return this;\n  };\n  /**\n   * 坐标系平移变换\n   * @param x x 方向平移像素\n   * @param y y 方向平移像素\n   * @return    返回坐标系对象\n   */\n  Coordinate.prototype.translate = function (x, y) {\n    var matrix = this.matrix;\n    ext.leftTranslate(matrix, matrix, [x, y]);\n    return this;\n  };\n  /**\n   * 将坐标系 x y 两个轴进行转置\n   * @return 返回坐标系对象\n   */\n  Coordinate.prototype.transpose = function () {\n    this.isTransposed = !this.isTransposed;\n    return this;\n  };\n  Coordinate.prototype.getCenter = function () {\n    return this.center;\n  };\n  Coordinate.prototype.getWidth = function () {\n    return this.width;\n  };\n  Coordinate.prototype.getHeight = function () {\n    return this.height;\n  };\n  Coordinate.prototype.getRadius = function () {\n    return this.radius;\n  };\n  /**\n   * whether has reflect\n   * @param dim\n   */\n  Coordinate.prototype.isReflect = function (dim) {\n    return dim === 'x' ? this.isReflectX : this.isReflectY;\n  };\n  /**\n   * 重置 matrix\n   * @param matrix 如果传入，则使用，否则使用构造函数中传入的默认 matrix\n   */\n  Coordinate.prototype.resetMatrix = function (matrix) {\n    // 去除引用关系\n    this.matrix = matrix ? matrix : __spreadArray([], this.originalMatrix);\n  };\n  return Coordinate;\n}();\nexport default Coordinate;","map":{"version":3,"names":["__spreadArray","ext","mat3","vec3","assign","Coordinate","cfg","type","isRect","isHelix","isPolar","isReflectX","isReflectY","start","end","_a","matrix","_b","isTransposed","originalMatrix","prototype","initial","center","x","y","width","Math","abs","height","update","convertDim","percent","dim","isReflect","invertDim","value","applyMatrix","tag","vector","transformMat3","invertMatrix","inverted","invert","convert","point","convertPoint","invertPoint","rotate","radian","leftTranslate","leftRotate","reflect","scale","s1","s2","leftScale","translate","transpose","getCenter","getWidth","getHeight","getRadius","radius","resetMatrix"],"sources":["/Users/obiechina/Documents/ridy-flutter-full-taxi-solution 2/node_modules/@antv/coord/esm/coord/base.js"],"sourcesContent":["import { __spreadArray } from \"tslib\";\nimport { ext, mat3, vec3 } from '@antv/matrix-util';\nimport { assign } from '@antv/util';\n/**\n * Coordinate Base Class\n */\nvar Coordinate = /** @class */ (function () {\n    function Coordinate(cfg) {\n        // 自身属性\n        this.type = 'coordinate';\n        this.isRect = false;\n        this.isHelix = false;\n        this.isPolar = false;\n        this.isReflectX = false;\n        this.isReflectY = false;\n        var start = cfg.start, end = cfg.end, _a = cfg.matrix, matrix = _a === void 0 ? [1, 0, 0, 0, 1, 0, 0, 0, 1] : _a, _b = cfg.isTransposed, isTransposed = _b === void 0 ? false : _b;\n        this.start = start;\n        this.end = end;\n        this.matrix = matrix;\n        this.originalMatrix = __spreadArray([], matrix); // 去除引用\n        this.isTransposed = isTransposed;\n    }\n    /**\n     * 初始化流程\n     */\n    Coordinate.prototype.initial = function () {\n        // center、width、height\n        this.center = {\n            x: (this.start.x + this.end.x) / 2,\n            y: (this.start.y + this.end.y) / 2,\n        };\n        this.width = Math.abs(this.end.x - this.start.x);\n        this.height = Math.abs(this.end.y - this.start.y);\n    };\n    /**\n     * 更新配置\n     * @param cfg\n     */\n    Coordinate.prototype.update = function (cfg) {\n        assign(this, cfg);\n        this.initial();\n    };\n    Coordinate.prototype.convertDim = function (percent, dim) {\n        var _a;\n        var _b = this[dim], start = _b.start, end = _b.end;\n        // 交换\n        if (this.isReflect(dim)) {\n            _a = [end, start], start = _a[0], end = _a[1];\n        }\n        return start + percent * (end - start);\n    };\n    Coordinate.prototype.invertDim = function (value, dim) {\n        var _a;\n        var _b = this[dim], start = _b.start, end = _b.end;\n        // 交换\n        if (this.isReflect(dim)) {\n            _a = [end, start], start = _a[0], end = _a[1];\n        }\n        return (value - start) / (end - start);\n    };\n    /**\n     * 将坐标点进行矩阵变换\n     * @param x   对应 x 轴画布坐标\n     * @param y   对应 y 轴画布坐标\n     * @param tag 默认为 0，可取值 0, 1\n     * @return    返回变换后的三阶向量 [x, y, z]\n     */\n    Coordinate.prototype.applyMatrix = function (x, y, tag) {\n        if (tag === void 0) { tag = 0; }\n        var matrix = this.matrix;\n        var vector = [x, y, tag];\n        vec3.transformMat3(vector, vector, matrix);\n        return vector;\n    };\n    /**\n     * 将坐标点进行矩阵逆变换\n     * @param x   对应 x 轴画布坐标\n     * @param y   对应 y 轴画布坐标\n     * @param tag 默认为 0，可取值 0, 1\n     * @return    返回矩阵逆变换后的三阶向量 [x, y, z]\n     */\n    Coordinate.prototype.invertMatrix = function (x, y, tag) {\n        if (tag === void 0) { tag = 0; }\n        var matrix = this.matrix;\n        var inverted = mat3.invert([0, 0, 0, 0, 0, 0, 0, 0, 0], matrix);\n        var vector = [x, y, tag];\n        if (inverted) {\n            // 如果为空则不进行矩阵变化，防止报错\n            vec3.transformMat3(vector, vector, inverted);\n        }\n        return vector;\n    };\n    /**\n     * 将归一化的坐标点数据转换为画布坐标，并根据坐标系当前矩阵进行变换\n     * @param point 归一化的坐标点\n     * @return      返回进行矩阵变换后的画布坐标\n     */\n    Coordinate.prototype.convert = function (point) {\n        var _a = this.convertPoint(point), x = _a.x, y = _a.y;\n        var vector = this.applyMatrix(x, y, 1);\n        return {\n            x: vector[0],\n            y: vector[1],\n        };\n    };\n    /**\n     * 将进行过矩阵变换画布坐标转换为归一化坐标\n     * @param point 画布坐标\n     * @return      返回归一化的坐标点\n     */\n    Coordinate.prototype.invert = function (point) {\n        var vector = this.invertMatrix(point.x, point.y, 1);\n        return this.invertPoint({\n            x: vector[0],\n            y: vector[1],\n        });\n    };\n    /**\n     * 坐标系旋转变换\n     * @param  radian 旋转弧度\n     * @return        返回坐标系对象\n     */\n    Coordinate.prototype.rotate = function (radian) {\n        var matrix = this.matrix;\n        var center = this.center;\n        ext.leftTranslate(matrix, matrix, [-center.x, -center.y]);\n        ext.leftRotate(matrix, matrix, radian);\n        ext.leftTranslate(matrix, matrix, [center.x, center.y]);\n        return this;\n    };\n    /**\n     * 坐标系反射变换\n     * @param dim 反射维度\n     * @return    返回坐标系对象\n     */\n    Coordinate.prototype.reflect = function (dim) {\n        if (dim === 'x') {\n            this.isReflectX = !this.isReflectX;\n        }\n        else {\n            this.isReflectY = !this.isReflectY;\n        }\n        return this;\n    };\n    /**\n     * 坐标系比例变换\n     * @param s1 x 方向缩放比例\n     * @param s2 y 方向缩放比例\n     * @return     返回坐标系对象\n     */\n    Coordinate.prototype.scale = function (s1, s2) {\n        var matrix = this.matrix;\n        var center = this.center;\n        ext.leftTranslate(matrix, matrix, [-center.x, -center.y]);\n        ext.leftScale(matrix, matrix, [s1, s2]);\n        ext.leftTranslate(matrix, matrix, [center.x, center.y]);\n        return this;\n    };\n    /**\n     * 坐标系平移变换\n     * @param x x 方向平移像素\n     * @param y y 方向平移像素\n     * @return    返回坐标系对象\n     */\n    Coordinate.prototype.translate = function (x, y) {\n        var matrix = this.matrix;\n        ext.leftTranslate(matrix, matrix, [x, y]);\n        return this;\n    };\n    /**\n     * 将坐标系 x y 两个轴进行转置\n     * @return 返回坐标系对象\n     */\n    Coordinate.prototype.transpose = function () {\n        this.isTransposed = !this.isTransposed;\n        return this;\n    };\n    Coordinate.prototype.getCenter = function () {\n        return this.center;\n    };\n    Coordinate.prototype.getWidth = function () {\n        return this.width;\n    };\n    Coordinate.prototype.getHeight = function () {\n        return this.height;\n    };\n    Coordinate.prototype.getRadius = function () {\n        return this.radius;\n    };\n    /**\n     * whether has reflect\n     * @param dim\n     */\n    Coordinate.prototype.isReflect = function (dim) {\n        return dim === 'x' ? this.isReflectX : this.isReflectY;\n    };\n    /**\n     * 重置 matrix\n     * @param matrix 如果传入，则使用，否则使用构造函数中传入的默认 matrix\n     */\n    Coordinate.prototype.resetMatrix = function (matrix) {\n        // 去除引用关系\n        this.matrix = matrix ? matrix : __spreadArray([], this.originalMatrix);\n    };\n    return Coordinate;\n}());\nexport default Coordinate;\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}