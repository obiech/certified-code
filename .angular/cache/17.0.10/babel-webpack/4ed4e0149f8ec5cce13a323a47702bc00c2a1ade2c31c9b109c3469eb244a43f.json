{"ast":null,"code":"import { max, min } from '@antv/util';\n/**\n * 两点之间的距离\n * @param {number} x1 起始点 x\n * @param {number} y1 起始点 y\n * @param {number} x2 结束点 x\n * @param {number} y2 结束点 y\n * @return {number} 距离\n */\nexport function distance(x1, y1, x2, y2) {\n  var dx = x1 - x2;\n  var dy = y1 - y2;\n  return Math.sqrt(dx * dx + dy * dy);\n}\nexport function isNumberEqual(v1, v2) {\n  return Math.abs(v1 - v2) < 0.001;\n}\nexport function getBBoxByArray(xArr, yArr) {\n  var minX = min(xArr);\n  var minY = min(yArr);\n  var maxX = max(xArr);\n  var maxY = max(yArr);\n  return {\n    x: minX,\n    y: minY,\n    width: maxX - minX,\n    height: maxY - minY\n  };\n}\nexport function getBBoxRange(x1, y1, x2, y2) {\n  return {\n    minX: min([x1, x2]),\n    maxX: max([x1, x2]),\n    minY: min([y1, y2]),\n    maxY: max([y1, y2])\n  };\n}\nexport function piMod(angle) {\n  return (angle + Math.PI * 2) % (Math.PI * 2);\n}","map":{"version":3,"names":["max","min","distance","x1","y1","x2","y2","dx","dy","Math","sqrt","isNumberEqual","v1","v2","abs","getBBoxByArray","xArr","yArr","minX","minY","maxX","maxY","x","y","width","height","getBBoxRange","piMod","angle","PI"],"sources":["/Users/obiechina/Documents/ridy-flutter-full-taxi-solution 2/node_modules/@antv/g-math/esm/util.js"],"sourcesContent":["import { max, min } from '@antv/util';\n/**\n * 两点之间的距离\n * @param {number} x1 起始点 x\n * @param {number} y1 起始点 y\n * @param {number} x2 结束点 x\n * @param {number} y2 结束点 y\n * @return {number} 距离\n */\nexport function distance(x1, y1, x2, y2) {\n    var dx = x1 - x2;\n    var dy = y1 - y2;\n    return Math.sqrt(dx * dx + dy * dy);\n}\nexport function isNumberEqual(v1, v2) {\n    return Math.abs(v1 - v2) < 0.001;\n}\nexport function getBBoxByArray(xArr, yArr) {\n    var minX = min(xArr);\n    var minY = min(yArr);\n    var maxX = max(xArr);\n    var maxY = max(yArr);\n    return {\n        x: minX,\n        y: minY,\n        width: maxX - minX,\n        height: maxY - minY,\n    };\n}\nexport function getBBoxRange(x1, y1, x2, y2) {\n    return {\n        minX: min([x1, x2]),\n        maxX: max([x1, x2]),\n        minY: min([y1, y2]),\n        maxY: max([y1, y2]),\n    };\n}\nexport function piMod(angle) {\n    return (angle + Math.PI * 2) % (Math.PI * 2);\n}\n"],"mappings":"AAAA,SAASA,GAAG,EAAEC,GAAG,QAAQ,YAAY;AACrC;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,OAAO,SAASC,QAAQA,CAACC,EAAE,EAAEC,EAAE,EAAEC,EAAE,EAAEC,EAAE,EAAE;EACrC,IAAIC,EAAE,GAAGJ,EAAE,GAAGE,EAAE;EAChB,IAAIG,EAAE,GAAGJ,EAAE,GAAGE,EAAE;EAChB,OAAOG,IAAI,CAACC,IAAI,CAACH,EAAE,GAAGA,EAAE,GAAGC,EAAE,GAAGA,EAAE,CAAC;AACvC;AACA,OAAO,SAASG,aAAaA,CAACC,EAAE,EAAEC,EAAE,EAAE;EAClC,OAAOJ,IAAI,CAACK,GAAG,CAACF,EAAE,GAAGC,EAAE,CAAC,GAAG,KAAK;AACpC;AACA,OAAO,SAASE,cAAcA,CAACC,IAAI,EAAEC,IAAI,EAAE;EACvC,IAAIC,IAAI,GAAGjB,GAAG,CAACe,IAAI,CAAC;EACpB,IAAIG,IAAI,GAAGlB,GAAG,CAACgB,IAAI,CAAC;EACpB,IAAIG,IAAI,GAAGpB,GAAG,CAACgB,IAAI,CAAC;EACpB,IAAIK,IAAI,GAAGrB,GAAG,CAACiB,IAAI,CAAC;EACpB,OAAO;IACHK,CAAC,EAAEJ,IAAI;IACPK,CAAC,EAAEJ,IAAI;IACPK,KAAK,EAAEJ,IAAI,GAAGF,IAAI;IAClBO,MAAM,EAAEJ,IAAI,GAAGF;EACnB,CAAC;AACL;AACA,OAAO,SAASO,YAAYA,CAACvB,EAAE,EAAEC,EAAE,EAAEC,EAAE,EAAEC,EAAE,EAAE;EACzC,OAAO;IACHY,IAAI,EAAEjB,GAAG,CAAC,CAACE,EAAE,EAAEE,EAAE,CAAC,CAAC;IACnBe,IAAI,EAAEpB,GAAG,CAAC,CAACG,EAAE,EAAEE,EAAE,CAAC,CAAC;IACnBc,IAAI,EAAElB,GAAG,CAAC,CAACG,EAAE,EAAEE,EAAE,CAAC,CAAC;IACnBe,IAAI,EAAErB,GAAG,CAAC,CAACI,EAAE,EAAEE,EAAE,CAAC;EACtB,CAAC;AACL;AACA,OAAO,SAASqB,KAAKA,CAACC,KAAK,EAAE;EACzB,OAAO,CAACA,KAAK,GAAGnB,IAAI,CAACoB,EAAE,GAAG,CAAC,KAAKpB,IAAI,CAACoB,EAAE,GAAG,CAAC,CAAC;AAChD","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}