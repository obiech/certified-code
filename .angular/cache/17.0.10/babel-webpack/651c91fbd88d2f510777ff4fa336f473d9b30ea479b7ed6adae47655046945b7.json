{"ast":null,"code":"/**\n * view 中缓存 scale 的类\n */\nimport { deepMix, each, get, isNumber, last } from '@antv/util';\nimport { createScaleByField, syncScale, getDefaultCategoryScaleRange } from '../../util/scale';\n/** @ignore */\nvar ScalePool = /** @class */function () {\n  function ScalePool() {\n    /** 所有的 scales */\n    this.scales = new Map();\n    /** 需要同步的 scale 分组， key: scaleKeyArray */\n    this.syncScales = new Map();\n  }\n  /**\n   * 创建 scale\n   * @param field\n   * @param data\n   * @param scaleDef\n   * @param key\n   */\n  ScalePool.prototype.createScale = function (field, data, scaleDef, key) {\n    var finalScaleDef = scaleDef;\n    var cacheScaleMeta = this.getScaleMeta(key);\n    if (data.length === 0 && cacheScaleMeta) {\n      // 在更新过程中数据变为空，同时 key 对应的 scale 已存在则保持 scale 同类型\n      var cacheScale = cacheScaleMeta.scale;\n      var cacheScaleDef = {\n        type: cacheScale.type\n      };\n      if (cacheScale.isCategory) {\n        // 如果是分类类型，保持 values\n        cacheScaleDef.values = cacheScale.values;\n      }\n      finalScaleDef = deepMix(cacheScaleDef, cacheScaleMeta.scaleDef, scaleDef);\n    }\n    var scale = createScaleByField(field, data, finalScaleDef);\n    // 缓存起来\n    this.cacheScale(scale, scaleDef, key);\n    return scale;\n  };\n  /**\n   * 同步 scale\n   */\n  ScalePool.prototype.sync = function (coordinate, theme) {\n    var _this = this;\n    // 对于 syncScales 中每一个 syncKey 下面的 scale 数组进行同步处理\n    this.syncScales.forEach(function (scaleKeys, syncKey) {\n      // min, max, values, ranges\n      var min = Number.MAX_SAFE_INTEGER;\n      var max = Number.MIN_SAFE_INTEGER;\n      var values = [];\n      // 1. 遍历求得最大最小值，values 等\n      each(scaleKeys, function (key) {\n        var scale = _this.getScale(key);\n        max = isNumber(scale.max) ? Math.max(max, scale.max) : max;\n        min = isNumber(scale.min) ? Math.min(min, scale.min) : min;\n        // 去重\n        each(scale.values, function (v) {\n          if (!values.includes(v)) {\n            values.push(v);\n          }\n        });\n      });\n      // 2. 同步\n      each(scaleKeys, function (key) {\n        var scale = _this.getScale(key);\n        if (scale.isContinuous) {\n          scale.change({\n            min: min,\n            max: max,\n            values: values\n          });\n        } else if (scale.isCategory) {\n          var range = scale.range;\n          var cacheScaleMeta = _this.getScaleMeta(key);\n          // 存在 value 值，且用户没有配置 range 配置 to fix https://github.com/antvis/G2/issues/2996\n          if (values && !get(cacheScaleMeta, ['scaleDef', 'range'])) {\n            // 更新 range\n            range = getDefaultCategoryScaleRange(deepMix({}, scale, {\n              values: values\n            }), coordinate, theme);\n          }\n          scale.change({\n            values: values,\n            range: range\n          });\n        }\n      });\n    });\n  };\n  /**\n   * 缓存一个 scale\n   * @param scale\n   * @param scaleDef\n   * @param key\n   */\n  ScalePool.prototype.cacheScale = function (scale, scaleDef, key) {\n    // 1. 缓存到 scales\n    var sm = this.getScaleMeta(key);\n    // 存在则更新，同时检测类型是否一致\n    if (sm && sm.scale.type === scale.type) {\n      syncScale(sm.scale, scale);\n      sm.scaleDef = scaleDef;\n      // 更新 scaleDef\n    } else {\n      sm = {\n        key: key,\n        scale: scale,\n        scaleDef: scaleDef\n      };\n      this.scales.set(key, sm);\n    }\n    // 2. 缓存到 syncScales，构造 Record<sync, string[]> 数据结构\n    var syncKey = this.getSyncKey(sm);\n    sm.syncKey = syncKey; // 设置 sync 同步的 key\n    // 因为存在更新 scale 机制，所以在缓存之前，先从原 syncScales 中去除 sync 的缓存引用\n    this.removeFromSyncScales(key);\n    // 存在 sync 标记才进行 sync\n    if (syncKey) {\n      // 不存在这个 syncKey，则创建一个空数组\n      var scaleKeys = this.syncScales.get(syncKey);\n      if (!scaleKeys) {\n        scaleKeys = [];\n        this.syncScales.set(syncKey, scaleKeys);\n      }\n      scaleKeys.push(key);\n    }\n  };\n  /**\n   * 通过 key 获取 scale\n   * @param key\n   */\n  ScalePool.prototype.getScale = function (key) {\n    var scaleMeta = this.getScaleMeta(key);\n    if (!scaleMeta) {\n      var field = last(key.split('-'));\n      var scaleKeys = this.syncScales.get(field);\n      if (scaleKeys && scaleKeys.length) {\n        scaleMeta = this.getScaleMeta(scaleKeys[0]);\n      }\n    }\n    return scaleMeta && scaleMeta.scale;\n  };\n  /**\n   * 在 view 销毁的时候，删除 scale 实例，防止内存泄露\n   * @param key\n   */\n  ScalePool.prototype.deleteScale = function (key) {\n    var scaleMeta = this.getScaleMeta(key);\n    if (scaleMeta) {\n      var syncKey = scaleMeta.syncKey;\n      var scaleKeys = this.syncScales.get(syncKey);\n      // 移除同步的关系\n      if (scaleKeys && scaleKeys.length) {\n        var idx = scaleKeys.indexOf(key);\n        if (idx !== -1) {\n          scaleKeys.splice(idx, 1);\n        }\n      }\n    }\n    // 删除 scale 实例\n    this.scales.delete(key);\n  };\n  /**\n   * 清空\n   */\n  ScalePool.prototype.clear = function () {\n    this.scales.clear();\n    this.syncScales.clear();\n  };\n  /**\n   * 删除 sync scale 引用\n   * @param key\n   */\n  ScalePool.prototype.removeFromSyncScales = function (key) {\n    var _this = this;\n    this.syncScales.forEach(function (scaleKeys, syncKey) {\n      var idx = scaleKeys.indexOf(key);\n      if (idx !== -1) {\n        scaleKeys.splice(idx, 1);\n        // 删除空数组值\n        if (scaleKeys.length === 0) {\n          _this.syncScales.delete(syncKey);\n        }\n        return false; // 跳出循环\n      }\n    });\n  };\n  /**\n   * get sync key\n   * @param sm\n   */\n  ScalePool.prototype.getSyncKey = function (sm) {\n    var scale = sm.scale,\n      scaleDef = sm.scaleDef;\n    var field = scale.field;\n    var sync = get(scaleDef, ['sync']);\n    // 如果 sync = true，则直接使用字段名作为 syncKey\n    return sync === true ? field : sync === false ? undefined : sync;\n  };\n  /**\n   * 通过 key 获取 scale\n   * @param key\n   */\n  ScalePool.prototype.getScaleMeta = function (key) {\n    return this.scales.get(key);\n  };\n  return ScalePool;\n}();\nexport { ScalePool };","map":{"version":3,"names":["deepMix","each","get","isNumber","last","createScaleByField","syncScale","getDefaultCategoryScaleRange","ScalePool","scales","Map","syncScales","prototype","createScale","field","data","scaleDef","key","finalScaleDef","cacheScaleMeta","getScaleMeta","length","cacheScale","scale","cacheScaleDef","type","isCategory","values","sync","coordinate","theme","_this","forEach","scaleKeys","syncKey","min","Number","MAX_SAFE_INTEGER","max","MIN_SAFE_INTEGER","getScale","Math","v","includes","push","isContinuous","change","range","sm","set","getSyncKey","removeFromSyncScales","scaleMeta","split","deleteScale","idx","indexOf","splice","delete","clear","undefined"],"sources":["/Users/obiechina/Documents/ridy-flutter-full-taxi-solution 2/node_modules/@antv/g2/esm/chart/util/scale-pool.js"],"sourcesContent":["/**\n * view 中缓存 scale 的类\n */\nimport { deepMix, each, get, isNumber, last } from '@antv/util';\nimport { createScaleByField, syncScale, getDefaultCategoryScaleRange } from '../../util/scale';\n/** @ignore */\nvar ScalePool = /** @class */ (function () {\n    function ScalePool() {\n        /** 所有的 scales */\n        this.scales = new Map();\n        /** 需要同步的 scale 分组， key: scaleKeyArray */\n        this.syncScales = new Map();\n    }\n    /**\n     * 创建 scale\n     * @param field\n     * @param data\n     * @param scaleDef\n     * @param key\n     */\n    ScalePool.prototype.createScale = function (field, data, scaleDef, key) {\n        var finalScaleDef = scaleDef;\n        var cacheScaleMeta = this.getScaleMeta(key);\n        if (data.length === 0 && cacheScaleMeta) {\n            // 在更新过程中数据变为空，同时 key 对应的 scale 已存在则保持 scale 同类型\n            var cacheScale = cacheScaleMeta.scale;\n            var cacheScaleDef = {\n                type: cacheScale.type,\n            };\n            if (cacheScale.isCategory) {\n                // 如果是分类类型，保持 values\n                cacheScaleDef.values = cacheScale.values;\n            }\n            finalScaleDef = deepMix(cacheScaleDef, cacheScaleMeta.scaleDef, scaleDef);\n        }\n        var scale = createScaleByField(field, data, finalScaleDef);\n        // 缓存起来\n        this.cacheScale(scale, scaleDef, key);\n        return scale;\n    };\n    /**\n     * 同步 scale\n     */\n    ScalePool.prototype.sync = function (coordinate, theme) {\n        var _this = this;\n        // 对于 syncScales 中每一个 syncKey 下面的 scale 数组进行同步处理\n        this.syncScales.forEach(function (scaleKeys, syncKey) {\n            // min, max, values, ranges\n            var min = Number.MAX_SAFE_INTEGER;\n            var max = Number.MIN_SAFE_INTEGER;\n            var values = [];\n            // 1. 遍历求得最大最小值，values 等\n            each(scaleKeys, function (key) {\n                var scale = _this.getScale(key);\n                max = isNumber(scale.max) ? Math.max(max, scale.max) : max;\n                min = isNumber(scale.min) ? Math.min(min, scale.min) : min;\n                // 去重\n                each(scale.values, function (v) {\n                    if (!values.includes(v)) {\n                        values.push(v);\n                    }\n                });\n            });\n            // 2. 同步\n            each(scaleKeys, function (key) {\n                var scale = _this.getScale(key);\n                if (scale.isContinuous) {\n                    scale.change({\n                        min: min,\n                        max: max,\n                        values: values,\n                    });\n                }\n                else if (scale.isCategory) {\n                    var range = scale.range;\n                    var cacheScaleMeta = _this.getScaleMeta(key);\n                    // 存在 value 值，且用户没有配置 range 配置 to fix https://github.com/antvis/G2/issues/2996\n                    if (values && !get(cacheScaleMeta, ['scaleDef', 'range'])) {\n                        // 更新 range\n                        range = getDefaultCategoryScaleRange(deepMix({}, scale, {\n                            values: values,\n                        }), coordinate, theme);\n                    }\n                    scale.change({\n                        values: values,\n                        range: range,\n                    });\n                }\n            });\n        });\n    };\n    /**\n     * 缓存一个 scale\n     * @param scale\n     * @param scaleDef\n     * @param key\n     */\n    ScalePool.prototype.cacheScale = function (scale, scaleDef, key) {\n        // 1. 缓存到 scales\n        var sm = this.getScaleMeta(key);\n        // 存在则更新，同时检测类型是否一致\n        if (sm && sm.scale.type === scale.type) {\n            syncScale(sm.scale, scale);\n            sm.scaleDef = scaleDef;\n            // 更新 scaleDef\n        }\n        else {\n            sm = {\n                key: key,\n                scale: scale,\n                scaleDef: scaleDef,\n            };\n            this.scales.set(key, sm);\n        }\n        // 2. 缓存到 syncScales，构造 Record<sync, string[]> 数据结构\n        var syncKey = this.getSyncKey(sm);\n        sm.syncKey = syncKey; // 设置 sync 同步的 key\n        // 因为存在更新 scale 机制，所以在缓存之前，先从原 syncScales 中去除 sync 的缓存引用\n        this.removeFromSyncScales(key);\n        // 存在 sync 标记才进行 sync\n        if (syncKey) {\n            // 不存在这个 syncKey，则创建一个空数组\n            var scaleKeys = this.syncScales.get(syncKey);\n            if (!scaleKeys) {\n                scaleKeys = [];\n                this.syncScales.set(syncKey, scaleKeys);\n            }\n            scaleKeys.push(key);\n        }\n    };\n    /**\n     * 通过 key 获取 scale\n     * @param key\n     */\n    ScalePool.prototype.getScale = function (key) {\n        var scaleMeta = this.getScaleMeta(key);\n        if (!scaleMeta) {\n            var field = last(key.split('-'));\n            var scaleKeys = this.syncScales.get(field);\n            if (scaleKeys && scaleKeys.length) {\n                scaleMeta = this.getScaleMeta(scaleKeys[0]);\n            }\n        }\n        return scaleMeta && scaleMeta.scale;\n    };\n    /**\n     * 在 view 销毁的时候，删除 scale 实例，防止内存泄露\n     * @param key\n     */\n    ScalePool.prototype.deleteScale = function (key) {\n        var scaleMeta = this.getScaleMeta(key);\n        if (scaleMeta) {\n            var syncKey = scaleMeta.syncKey;\n            var scaleKeys = this.syncScales.get(syncKey);\n            // 移除同步的关系\n            if (scaleKeys && scaleKeys.length) {\n                var idx = scaleKeys.indexOf(key);\n                if (idx !== -1) {\n                    scaleKeys.splice(idx, 1);\n                }\n            }\n        }\n        // 删除 scale 实例\n        this.scales.delete(key);\n    };\n    /**\n     * 清空\n     */\n    ScalePool.prototype.clear = function () {\n        this.scales.clear();\n        this.syncScales.clear();\n    };\n    /**\n     * 删除 sync scale 引用\n     * @param key\n     */\n    ScalePool.prototype.removeFromSyncScales = function (key) {\n        var _this = this;\n        this.syncScales.forEach(function (scaleKeys, syncKey) {\n            var idx = scaleKeys.indexOf(key);\n            if (idx !== -1) {\n                scaleKeys.splice(idx, 1);\n                // 删除空数组值\n                if (scaleKeys.length === 0) {\n                    _this.syncScales.delete(syncKey);\n                }\n                return false; // 跳出循环\n            }\n        });\n    };\n    /**\n     * get sync key\n     * @param sm\n     */\n    ScalePool.prototype.getSyncKey = function (sm) {\n        var scale = sm.scale, scaleDef = sm.scaleDef;\n        var field = scale.field;\n        var sync = get(scaleDef, ['sync']);\n        // 如果 sync = true，则直接使用字段名作为 syncKey\n        return sync === true ? field : sync === false ? undefined : sync;\n    };\n    /**\n     * 通过 key 获取 scale\n     * @param key\n     */\n    ScalePool.prototype.getScaleMeta = function (key) {\n        return this.scales.get(key);\n    };\n    return ScalePool;\n}());\nexport { ScalePool };\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}