{"ast":null,"code":"import { __assign, __awaiter, __extends, __generator, __read, __spreadArray, __values } from \"tslib\";\nimport { getAdjust as getAdjustClass } from '@antv/adjust';\nimport { getAttribute as getAttributeClass } from '@antv/attr';\nimport { clone, deepMix, each, flatten, get, isArray, isEmpty, isEqual, isFunction, isNil, isNumber, isObject, isPlainObject, isString, set } from '@antv/util';\nimport { doGroupAppearAnimate, getDefaultAnimateCfg } from '../animate';\nimport Base from '../base';\nimport { FIELD_ORIGIN, GEOMETRY_LIFE_CIRCLE, GROUP_ATTRS } from '../constant';\nimport { uniq } from '../util/helper';\nimport Element from './element';\nimport { getGeometryLabel } from './label';\nimport { getShapeFactory } from './shape/base';\nimport { group } from './util/group-data';\nimport { isModelChange } from './util/is-model-change';\nimport { parseFields } from './util/parse-fields';\nimport { diff } from './util/diff';\nimport { inferScaleType } from '../util/scale';\nimport { getXDimensionLength } from '../util/coordinate';\n/**\n * Geometry 几何标记基类，主要负责数据到图形属性的映射以及绘制逻辑。\n */\nvar Geometry = /** @class */function (_super) {\n  __extends(Geometry, _super);\n  /**\n   * 创建 Geometry 实例。\n   * @param cfg\n   */\n  function Geometry(cfg) {\n    var _this = _super.call(this, cfg) || this;\n    /** Geometry 几何标记类型。 */\n    _this.type = 'base';\n    // 内部产生的属性\n    /** Attribute map  */\n    _this.attributes = {};\n    /** Element map */\n    _this.elements = [];\n    /** 使用 key-value 结构存储 Element，key 为每个 Element 实例对应的唯一 ID */\n    _this.elementsMap = {};\n    /** animate 配置项 */\n    _this.animateOption = true;\n    /** 图形属性映射配置 */\n    _this.attributeOption = {};\n    /** 存储上一次渲染时的 element 映射表，用于更新逻辑 */\n    _this.lastElementsMap = {};\n    /** 是否生成多个点来绘制图形。 */\n    _this.generatePoints = false;\n    /** 存储发生图形属性映射前的数据 */\n    _this.beforeMappingData = null;\n    _this.adjusts = {};\n    _this.idFields = [];\n    _this.hasSorted = false;\n    _this.isCoordinateChanged = false;\n    var container = cfg.container,\n      labelsContainer = cfg.labelsContainer,\n      coordinate = cfg.coordinate,\n      data = cfg.data,\n      _a = cfg.sortable,\n      sortable = _a === void 0 ? false : _a,\n      _b = cfg.visible,\n      visible = _b === void 0 ? true : _b,\n      theme = cfg.theme,\n      _c = cfg.scales,\n      scales = _c === void 0 ? {} : _c,\n      _d = cfg.scaleDefs,\n      scaleDefs = _d === void 0 ? {} : _d,\n      // 柱状图间隔与宽度相关配置\n      intervalPadding = cfg.intervalPadding,\n      dodgePadding = cfg.dodgePadding,\n      maxColumnWidth = cfg.maxColumnWidth,\n      minColumnWidth = cfg.minColumnWidth,\n      columnWidthRatio = cfg.columnWidthRatio,\n      roseWidthRatio = cfg.roseWidthRatio,\n      multiplePieWidthRatio = cfg.multiplePieWidthRatio,\n      zIndexReversed = cfg.zIndexReversed,\n      sortZIndex = cfg.sortZIndex,\n      useDeferredLabel = cfg.useDeferredLabel;\n    _this.container = container;\n    _this.labelsContainer = labelsContainer;\n    _this.coordinate = coordinate;\n    _this.data = data;\n    _this.sortable = sortable;\n    _this.visible = visible;\n    _this.userTheme = theme;\n    _this.scales = scales;\n    _this.scaleDefs = scaleDefs;\n    // 柱状图间隔与宽度相关配置\n    _this.intervalPadding = intervalPadding;\n    _this.dodgePadding = dodgePadding;\n    _this.maxColumnWidth = maxColumnWidth;\n    _this.minColumnWidth = minColumnWidth;\n    _this.columnWidthRatio = columnWidthRatio;\n    _this.roseWidthRatio = roseWidthRatio;\n    _this.multiplePieWidthRatio = multiplePieWidthRatio;\n    _this.zIndexReversed = zIndexReversed;\n    _this.sortZIndex = sortZIndex;\n    _this.useDeferredLabel = useDeferredLabel ? typeof useDeferredLabel === 'number' ? useDeferredLabel : Infinity : null;\n    return _this;\n  }\n  /**\n   * 配置 position 通道映射规则。\n   *\n   * @example\n   * ```typescript\n   * // 数据结构: [{ x: 'A', y: 10, color: 'red' }]\n   * geometry.position('x*y');\n   * geometry.position([ 'x', 'y' ]);\n   * geometry.position({\n   *   fields: [ 'x', 'y' ],\n   * });\n   * ```\n   *\n   * @param cfg 映射规则\n   * @returns\n   */\n  Geometry.prototype.position = function (cfg) {\n    var positionCfg = cfg;\n    if (!isPlainObject(cfg)) {\n      // 字符串字段或者数组字段\n      positionCfg = {\n        fields: parseFields(cfg)\n      };\n    }\n    var fields = get(positionCfg, 'fields');\n    if (fields.length === 1) {\n      // 默认填充一维 1*xx\n      fields.unshift('1');\n      set(positionCfg, 'fields', fields);\n    }\n    set(this.attributeOption, 'position', positionCfg);\n    return this;\n  };\n  Geometry.prototype.color = function (field, cfg) {\n    this.createAttrOption('color', field, cfg);\n    return this;\n  };\n  Geometry.prototype.shape = function (field, cfg) {\n    this.createAttrOption('shape', field, cfg);\n    return this;\n  };\n  Geometry.prototype.size = function (field, cfg) {\n    this.createAttrOption('size', field, cfg);\n    return this;\n  };\n  /**\n   * 设置数据调整方式。G2 目前内置了四种类型：\n   * 1. dodge\n   * 2. stack\n   * 3. symmetric\n   * 4. jitter\n   *\n   *\n   * **Tip**\n   * + 对于 'dodge' 类型，可以额外进行如下属性的配置:\n   * ```typescript\n   * geometry.adjust('dodge', {\n   *   marginRatio: 0, // 取 0 到 1 范围的值（相对于每个柱子宽度），用于控制一个分组中柱子之间的间距\n   *   dodgeBy: 'x', // 该属性只对 'dodge' 类型生效，声明以哪个数据字段为分组依据\n   * });\n   * ```\n   *\n   * + 对于 'stack' 类型，可以额外进行如下属性的配置:\n   * ```typescript\n   * geometry.adjust('stack', {\n   *   reverseOrder: false, // 用于控制是否对数据进行反序操作\n   * });\n   * ```\n   *\n   * @example\n   * ```typescript\n   * geometry.adjust('stack');\n   *\n   * geometry.adjust({\n   *   type: 'stack',\n   *   reverseOrder: false,\n   * });\n   *\n   * // 组合使用 adjust\n   * geometry.adjust([ 'stack', 'dodge' ]);\n   *\n   * geometry.adjust([\n   *   { type: 'stack' },\n   *   { type: 'dodge', dodgeBy: 'x' },\n   * ]);\n   * ```\n   *\n   * @param adjustCfg 数据调整配置\n   * @returns\n   */\n  Geometry.prototype.adjust = function (adjustCfg) {\n    var adjusts = adjustCfg;\n    if (isString(adjustCfg) || isPlainObject(adjustCfg)) {\n      adjusts = [adjustCfg];\n    }\n    each(adjusts, function (adjust, index) {\n      if (!isObject(adjust)) {\n        adjusts[index] = {\n          type: adjust\n        };\n      }\n    });\n    this.adjustOption = adjusts;\n    return this;\n  };\n  Geometry.prototype.style = function (field, styleFunc) {\n    if (isString(field)) {\n      var fields = parseFields(field);\n      this.styleOption = {\n        fields: fields,\n        callback: styleFunc\n      };\n    } else {\n      var _a = field,\n        fields = _a.fields,\n        callback = _a.callback,\n        cfg = _a.cfg;\n      if (fields || callback || cfg) {\n        this.styleOption = field;\n      } else {\n        this.styleOption = {\n          cfg: field\n        };\n      }\n    }\n    return this;\n  };\n  Geometry.prototype.tooltip = function (field, cfg) {\n    if (isString(field)) {\n      var fields = parseFields(field);\n      this.tooltipOption = {\n        fields: fields,\n        callback: cfg\n      };\n    } else {\n      this.tooltipOption = field;\n    }\n    return this;\n  };\n  /**\n   * Geometry 动画配置。\n   *\n   * + `animate(false)` 关闭动画\n   * + `animate(true)` 开启动画，默认开启。\n   *\n   * 我们将动画分为四个场景：\n   * 1. appear: 图表第一次加载时的入场动画；\n   * 2. enter: 图表绘制完成，发生更新后，产生的新图形的进场动画；\n   * 3. update: 图表绘制完成，数据发生变更后，有状态变更的图形的更新动画；\n   * 4. leave: 图表绘制完成，数据发生变更后，被销毁图形的销毁动画。\n   *\n   * @example\n   * ```typescript\n   * animate({\n   *   enter: {\n   *     duration: 1000, // enter 动画执行时间\n   *   },\n   *   leave: false, // 关闭 leave 销毁动画\n   * });\n   * ```\n   *\n   * @param cfg 动画配置\n   * @returns\n   */\n  Geometry.prototype.animate = function (cfg) {\n    this.animateOption = cfg;\n    return this;\n  };\n  Geometry.prototype.label = function (field, secondParam, thirdParam) {\n    if (isString(field)) {\n      var labelOption = {};\n      var fields = parseFields(field);\n      labelOption.fields = fields;\n      if (isFunction(secondParam)) {\n        labelOption.callback = secondParam;\n      } else if (isPlainObject(secondParam)) {\n        labelOption.cfg = secondParam;\n      }\n      if (thirdParam) {\n        labelOption.cfg = thirdParam;\n      }\n      this.labelOption = labelOption;\n    } else {\n      this.labelOption = field;\n    }\n    return this;\n  };\n  /**\n   * 设置状态对应的样式。\n   *\n   * @example\n   * ```ts\n   * chart.interval().state({\n   *   selected: {\n   *     animate: { duration: 100, easing: 'easeLinear' },\n   *     style: {\n   *       lineWidth: 2,\n   *       stroke: '#000',\n   *     },\n   *   },\n   * });\n   * ```\n   *\n   * 如果图形 shape 是由多个 shape 组成，即为一个 G.Group 对象，那么针对 group 中的每个 shape，我们需要使用下列方式进行状态样式设置：\n   * 如果我们为 group 中的每个 shape 设置了 'name' 属性(shape.set('name', 'xx'))，则以 'name' 作为 key，否则默认以索引值（即 shape 的 添加顺序）为 key。\n   *\n   * ```ts\n   * chart.interval().shape('groupShape').state({\n   *   selected: {\n   *     style: {\n   *       0: { lineWidth: 2 },\n   *       1: { fillOpacity: 1 },\n   *     }\n   *   }\n   * });\n   * ```\n   *\n   * @param cfg 状态样式\n   */\n  Geometry.prototype.state = function (cfg) {\n    this.stateOption = cfg;\n    return this;\n  };\n  /**\n   * 用于向 shape 中传入自定义的数据。目前可能仅仅可能用于在自定义 shape 的时候，像自定义 shape 中传入自定义的数据，方便实现自定义 shape 的配置能力。\n   *\n   * @example\n   * ```ts\n   * chart.interval().customInfo({ yourData: 'hello, g2!' });\n   * ```\n   *\n   * 然后在自定义 shape 的时候，可以拿到这个信息。\n   *\n   * ```ts\n   * registerShape('interval', 'your-shape', {\n   *   draw(shapeInfo, container) {\n   *     const { customInfo } = shapeInfo;\n   *     console.log(customInfo); // will log { yourData: 'hello, g2!' }.\n   *   }\n   * });\n   * ```\n   *\n   * @param cfg\n   */\n  Geometry.prototype.customInfo = function (cfg) {\n    this.customOption = cfg;\n    return this;\n  };\n  /**\n   * 初始化 Geomtry 实例：\n   * 创建 [[Attribute]] and [[Scale]] 实例，进行数据处理，包括分组、数值化以及数据调整。\n   */\n  Geometry.prototype.init = function (cfg) {\n    if (cfg === void 0) {\n      cfg = {};\n    }\n    this.setCfg(cfg);\n    this.initAttributes(); // 创建图形属性\n    // 数据加工：分组 -> 数字化 -> adjust\n    this.processData(this.data);\n    // 调整 scale\n    this.adjustScale();\n  };\n  /**\n   * Geometry 更新。\n   * @param [cfg] 更新的配置\n   */\n  Geometry.prototype.update = function (cfg) {\n    if (cfg === void 0) {\n      cfg = {};\n    }\n    var data = cfg.data,\n      isDataChanged = cfg.isDataChanged,\n      isCoordinateChanged = cfg.isCoordinateChanged;\n    var _a = this,\n      attributeOption = _a.attributeOption,\n      lastAttributeOption = _a.lastAttributeOption;\n    if (!isEqual(attributeOption, lastAttributeOption)) {\n      // 映射发生改变，则重新创建图形属性\n      this.init(cfg);\n    } else if (data && (isDataChanged || !isEqual(data, this.data))) {\n      // 数据发生变化\n      this.setCfg(cfg);\n      this.initAttributes(); // 创建图形属性\n      this.processData(data); // 数据加工：分组 -> 数字化 -> adjust\n    } else {\n      // 有可能 coordinate 变化\n      this.setCfg(cfg);\n    }\n    // 调整 scale\n    this.adjustScale();\n    this.isCoordinateChanged = isCoordinateChanged;\n  };\n  /**\n   * 将原始数据映射至图形空间，同时创建图形对象。\n   */\n  Geometry.prototype.paint = function (isUpdate) {\n    var _this = this;\n    if (isUpdate === void 0) {\n      isUpdate = false;\n    }\n    if (this.animateOption) {\n      this.animateOption = deepMix({}, getDefaultAnimateCfg(this.type, this.coordinate), this.animateOption);\n    }\n    this.defaultSize = undefined;\n    this.elementsMap = {};\n    this.elements = [];\n    var offscreenGroup = this.getOffscreenGroup();\n    offscreenGroup.clear();\n    var beforeMappingData = this.beforeMappingData;\n    var dataArray = this.beforeMapping(beforeMappingData);\n    this.dataArray = new Array(dataArray.length);\n    for (var i = 0; i < dataArray.length; i++) {\n      var data = dataArray[i];\n      this.dataArray[i] = this.mapping(data);\n    }\n    this.updateElements(this.dataArray, isUpdate);\n    this.lastElementsMap = this.elementsMap;\n    if (this.canDoGroupAnimation(isUpdate)) {\n      // 如果用户没有配置 appear.animation，就默认走整体动画\n      var container = this.container;\n      var type = this.type;\n      var coordinate = this.coordinate;\n      var animateCfg = get(this.animateOption, 'appear');\n      var yScale = this.getYScale();\n      var yMinPoint = coordinate.convert({\n        x: 0,\n        y: yScale.scale(this.getYMinValue())\n      });\n      doGroupAppearAnimate(container, animateCfg, type, coordinate, yMinPoint);\n    }\n    // 添加 label\n    if (this.labelOption) {\n      var deferred = this.useDeferredLabel;\n      var callback = function () {\n        return _this.renderLabels(flatten(_this.dataArray), isUpdate);\n      }.bind(this);\n      if (typeof deferred === 'number') {\n        // Use `requestIdleCallback` to render labels in idle time (like react fiber)\n        var timeout = typeof deferred === 'number' && deferred !== Infinity ? deferred : 0;\n        if (!window.requestIdleCallback) {\n          setTimeout(callback, timeout);\n        } else {\n          var options = timeout && timeout !== Infinity ? {\n            timeout: timeout\n          } : undefined;\n          window.requestIdleCallback(callback, options);\n        }\n      } else {\n        callback();\n      }\n    }\n    // 缓存，用于更新\n    this.lastAttributeOption = __assign({}, this.attributeOption);\n    if (this.visible === false) {\n      // 用户在初始化的时候声明 visible: false\n      this.changeVisible(false);\n    }\n  };\n  /**\n   * 清空当前 Geometry，配置项仍保留，但是内部创建的对象全部清空。\n   * @override\n   */\n  Geometry.prototype.clear = function () {\n    var _a = this,\n      container = _a.container,\n      geometryLabel = _a.geometryLabel,\n      offscreenGroup = _a.offscreenGroup;\n    if (container) {\n      container.clear();\n    }\n    if (geometryLabel) {\n      geometryLabel.clear();\n    }\n    if (offscreenGroup) {\n      offscreenGroup.clear();\n    }\n    // 属性恢复至出厂状态\n    this.scaleDefs = undefined;\n    this.attributes = {};\n    this.scales = {};\n    this.elementsMap = {};\n    this.lastElementsMap = {};\n    this.elements = [];\n    this.adjusts = {};\n    this.dataArray = null;\n    this.beforeMappingData = null;\n    this.lastAttributeOption = undefined;\n    this.defaultSize = undefined;\n    this.idFields = [];\n    this.groupScales = undefined;\n    this.hasSorted = false;\n    this.isCoordinateChanged = false;\n  };\n  /**\n   * 销毁 Geometry 实例。\n   */\n  Geometry.prototype.destroy = function () {\n    this.clear();\n    var container = this.container;\n    container.remove(true);\n    if (this.offscreenGroup) {\n      this.offscreenGroup.remove(true);\n      this.offscreenGroup = null;\n    }\n    if (this.geometryLabel) {\n      this.geometryLabel.destroy();\n      this.geometryLabel = null;\n    }\n    this.theme = undefined;\n    this.shapeFactory = undefined;\n    _super.prototype.destroy.call(this);\n  };\n  /**\n   * 获取决定分组的图形属性对应的 scale 实例。\n   * @returns\n   */\n  Geometry.prototype.getGroupScales = function () {\n    return this.groupScales;\n  };\n  /**\n   * 根据名字获取图形属性实例。\n   */\n  Geometry.prototype.getAttribute = function (name) {\n    return this.attributes[name];\n  };\n  /** 获取 x 轴对应的 scale 实例。 */\n  Geometry.prototype.getXScale = function () {\n    return this.getAttribute('position').scales[0];\n  };\n  /** 获取 y 轴对应的 scale 实例。 */\n  Geometry.prototype.getYScale = function () {\n    return this.getAttribute('position').scales[1];\n  };\n  /**\n   * 获取决定分组的图形属性实例。\n   */\n  Geometry.prototype.getGroupAttributes = function () {\n    var rst = [];\n    each(this.attributes, function (attr) {\n      if (GROUP_ATTRS.includes(attr.type)) {\n        rst.push(attr);\n      }\n    });\n    return rst;\n  };\n  /** 获取图形属性默认的映射值。 */\n  Geometry.prototype.getDefaultValue = function (attrName) {\n    var value;\n    var attr = this.getAttribute(attrName);\n    if (attr && isEmpty(attr.scales)) {\n      // 获取映射至常量的值\n      value = attr.values[0];\n    }\n    return value;\n  };\n  /**\n   * 获取该数据发生图形映射后对应的 Attribute 图形空间数据。\n   * @param attr Attribute 图形属性实例。\n   * @param obj 需要进行映射的原始数据。\n   * @returns\n   */\n  Geometry.prototype.getAttributeValues = function (attr, obj) {\n    var params = [];\n    var scales = attr.scales;\n    for (var index = 0, length_1 = scales.length; index < length_1; index++) {\n      var scale = scales[index];\n      var field = scale.field;\n      if (scale.isIdentity) {\n        params.push(scale.values);\n      } else {\n        params.push(obj[field]);\n      }\n    }\n    return attr.mapping.apply(attr, __spreadArray([], __read(params), false));\n  };\n  /**\n   * 获取对应的 adjust 实例\n   * @param adjustType\n   * @returns\n   */\n  Geometry.prototype.getAdjust = function (adjustType) {\n    return this.adjusts[adjustType];\n  };\n  /**\n   * 获得 coordinate 实例\n   * @returns\n   */\n  Geometry.prototype.getCoordinate = function () {\n    return this.coordinate;\n  };\n  Geometry.prototype.getData = function () {\n    return this.data;\n  };\n  /**\n   * 获取 shape 对应的 marker 样式。\n   * @param shapeName shape 具体名字\n   * @param cfg marker 信息\n   * @returns\n   */\n  Geometry.prototype.getShapeMarker = function (shapeName, cfg) {\n    var shapeFactory = this.getShapeFactory();\n    return shapeFactory.getMarker(shapeName, cfg);\n  };\n  /**\n   * 根据一定的规则查找 Geometry 的 Elements。\n   *\n   * ```typescript\n   * getElementsBy((element) => {\n   *   const data = element.getData();\n   *\n   *   return data.a === 'a';\n   * });\n   * ```\n   *\n   * @param condition 定义查找规则的回调函数。\n   * @returns\n   */\n  Geometry.prototype.getElementsBy = function (condition) {\n    return this.elements.filter(function (element) {\n      return condition(element);\n    });\n  };\n  /**\n   * 获取 Geometry 的所有 Elements。\n   *\n   * ```typescript\n   * getElements();\n   * ```\n   */\n  Geometry.prototype.getElements = function () {\n    return this.elements;\n  };\n  /**\n   * 获取数据对应的唯一 id。\n   * @param data Element 对应的绘制数据\n   * @returns\n   */\n  Geometry.prototype.getElementId = function (data) {\n    data = isArray(data) ? data[0] : data;\n    var originData = data[FIELD_ORIGIN];\n    // 如果用户声明了使用哪些字段作为 id 值\n    if (this.idFields.length) {\n      var elementId = originData[this.idFields[0]];\n      for (var index = 1; index < this.idFields.length; index++) {\n        elementId += '-' + originData[this.idFields[index]];\n      }\n      return elementId;\n    }\n    var type = this.type;\n    var xScale = this.getXScale();\n    var yScale = this.getYScale();\n    var xField = xScale.field || 'x';\n    var yField = yScale.field || 'y';\n    var yVal = originData[yField];\n    var xVal;\n    if (xScale.type === 'identity') {\n      xVal = xScale.values[0];\n    } else {\n      xVal = originData[xField];\n    }\n    var id;\n    if (type === 'interval' || type === 'schema') {\n      id = \"\".concat(xVal);\n    } else if (type === 'line' || type === 'area' || type === 'path') {\n      id = type;\n    } else {\n      id = \"\".concat(xVal, \"-\").concat(yVal);\n    }\n    var groupScales = this.groupScales;\n    for (var index = 0, length_2 = groupScales.length; index < length_2; index++) {\n      var groupScale = groupScales[index];\n      var field = groupScale.field;\n      id = \"\".concat(id, \"-\").concat(originData[field]);\n    }\n    // 用户在进行 dodge 类型的 adjust 调整的时候设置了 dodgeBy 属性\n    var dodgeAdjust = this.getAdjust('dodge');\n    if (dodgeAdjust) {\n      var dodgeBy = dodgeAdjust.dodgeBy;\n      if (dodgeBy) {\n        id = \"\".concat(id, \"-\").concat(originData[dodgeBy]);\n      }\n    }\n    if (this.getAdjust('jitter')) {\n      id = \"\".concat(id, \"-\").concat(data.x, \"-\").concat(data.y);\n    }\n    return id;\n  };\n  /**\n   * 获取所有需要创建 scale 的字段名称。\n   */\n  Geometry.prototype.getScaleFields = function () {\n    var fields = [];\n    var tmpMap = new Map();\n    var _a = this,\n      attributeOption = _a.attributeOption,\n      labelOption = _a.labelOption,\n      tooltipOption = _a.tooltipOption;\n    // 获取图形属性上的 fields\n    for (var attributeType in attributeOption) {\n      if (attributeOption.hasOwnProperty(attributeType)) {\n        var eachOpt = attributeOption[attributeType];\n        if (eachOpt.fields) {\n          uniq(eachOpt.fields, fields, tmpMap);\n        } else if (eachOpt.values) {\n          // 考虑 size(10), shape('circle') 等场景\n          uniq(eachOpt.values, fields, tmpMap);\n        }\n      }\n    }\n    // 获取 label 上的字段\n    if (labelOption && labelOption.fields) {\n      uniq(labelOption.fields, fields, tmpMap);\n    }\n    // 获取 tooltip 上的字段\n    if (isObject(tooltipOption) && tooltipOption.fields) {\n      uniq(tooltipOption.fields, fields, tmpMap);\n    }\n    return fields;\n  };\n  /**\n   * 显示或者隐藏 geometry。\n   * @param visible\n   */\n  Geometry.prototype.changeVisible = function (visible) {\n    _super.prototype.changeVisible.call(this, visible);\n    var elements = this.elements;\n    for (var index = 0, length_3 = elements.length; index < length_3; index++) {\n      var element = elements[index];\n      element.changeVisible(visible);\n    }\n    if (visible) {\n      if (this.container) {\n        this.container.show();\n      }\n      if (this.labelsContainer) {\n        this.labelsContainer.show();\n      }\n    } else {\n      if (this.container) {\n        this.container.hide();\n      }\n      if (this.labelsContainer) {\n        this.labelsContainer.hide();\n      }\n    }\n  };\n  /**\n   * 获得所有的字段\n   */\n  Geometry.prototype.getFields = function () {\n    var uniqMap = new Map();\n    var fields = [];\n    Object.values(this.attributeOption).forEach(function (cfg) {\n      var fs = (cfg === null || cfg === void 0 ? void 0 : cfg.fields) || [];\n      fs.forEach(function (f) {\n        if (!uniqMap.has(f)) {\n          fields.push(f);\n        }\n        uniqMap.set(f, true);\n      });\n    }, []);\n    return fields;\n  };\n  /**\n   * 获取当前配置中的所有分组 & 分类的字段。\n   * @return fields string[]\n   */\n  Geometry.prototype.getGroupFields = function () {\n    var groupFields = [];\n    var tmpMap = new Map(); // 用于去重过滤\n    for (var index = 0, length_4 = GROUP_ATTRS.length; index < length_4; index++) {\n      var attributeName = GROUP_ATTRS[index];\n      var cfg = this.attributeOption[attributeName];\n      if (cfg && cfg.fields) {\n        uniq(cfg.fields, groupFields, tmpMap);\n      }\n    }\n    return groupFields;\n  };\n  /**\n   * 获得图形的 x y 字段。\n   */\n  Geometry.prototype.getXYFields = function () {\n    var _a = __read(this.attributeOption.position.fields, 2),\n      x = _a[0],\n      y = _a[1];\n    return [x, y];\n  };\n  /**\n   * x 字段\n   * @returns\n   */\n  Geometry.prototype.getXField = function () {\n    return get(this.getXYFields(), [0]);\n  };\n  /**\n   * y 字段\n   * @returns\n   */\n  Geometry.prototype.getYField = function () {\n    return get(this.getXYFields(), [1]);\n  };\n  /**\n   * 获取该 Geometry 下所有生成的 shapes。\n   * @returns shapes\n   */\n  Geometry.prototype.getShapes = function () {\n    return this.elements.map(function (element) {\n      return element.shape;\n    });\n  };\n  /**\n   * 获取虚拟 Group。\n   * @returns\n   */\n  Geometry.prototype.getOffscreenGroup = function () {\n    if (!this.offscreenGroup) {\n      var GroupCtor = this.container.getGroupBase(); // 获取分组的构造函数\n      this.offscreenGroup = new GroupCtor({});\n    }\n    return this.offscreenGroup;\n  };\n  // 对数据进行排序\n  Geometry.prototype.sort = function (mappingArray) {\n    if (!this.hasSorted) {\n      // 未发生过排序\n      var xScale_1 = this.getXScale();\n      var xField_1 = xScale_1.field;\n      for (var index = 0; index < mappingArray.length; index++) {\n        var itemArr = mappingArray[index];\n        itemArr.sort(function (obj1, obj2) {\n          return xScale_1.translate(obj1[FIELD_ORIGIN][xField_1]) - xScale_1.translate(obj2[FIELD_ORIGIN][xField_1]);\n        });\n      }\n    }\n    this.hasSorted = true;\n  };\n  /**\n   * 调整度量范围。主要针对发生层叠以及一些特殊需求的 Geometry，比如 Interval 下的柱状图 Y 轴默认从 0 开始。\n   */\n  Geometry.prototype.adjustScale = function () {\n    var yScale = this.getYScale();\n    // 如果数据发生过 stack adjust，需要调整下 yScale 的数据范围\n    if (yScale && this.getAdjust('stack')) {\n      this.updateStackRange(yScale, this.beforeMappingData);\n    }\n  };\n  /**\n   * 获取当前 Geometry 对应的 Shape 工厂实例。\n   */\n  Geometry.prototype.getShapeFactory = function () {\n    var shapeType = this.shapeType;\n    if (!getShapeFactory(shapeType)) {\n      return;\n    }\n    if (!this.shapeFactory) {\n      this.shapeFactory = clone(getShapeFactory(shapeType)); // 防止多个 view 共享一个 shapeFactory 实例，导致 coordinate 被篡改\n    }\n    // 因为这里缓存了 shapeFactory，但是外部可能会变更 coordinate，导致无法重新设置到 shapeFactory 中\n    this.shapeFactory.coordinate = this.coordinate;\n    // theme 原因同上\n    this.shapeFactory.theme = this.theme.geometries[shapeType] || {};\n    return this.shapeFactory;\n  };\n  /**\n   * 获取每个 Shape 对应的关键点数据。\n   * @param obj 经过分组 -> 数字化 -> adjust 调整后的数据记录\n   * @returns\n   */\n  Geometry.prototype.createShapePointsCfg = function (obj) {\n    var xScale = this.getXScale();\n    var yScale = this.getYScale();\n    var x = this.normalizeValues(obj[xScale.field], xScale);\n    var y; // 存在没有 y 的情况\n    if (yScale) {\n      y = this.normalizeValues(obj[yScale.field], yScale);\n    } else {\n      y = obj.y ? obj.y : 0.1;\n    }\n    return {\n      x: x,\n      y: y,\n      y0: yScale ? yScale.scale(this.getYMinValue()) : undefined\n    };\n  };\n  /**\n   * 创建 Element 实例。\n   * @param mappingDatum Element 对应的绘制数据\n   * @param [isUpdate] 是否处于更新阶段\n   * @returns element 返回创建的 Element 实例\n   */\n  Geometry.prototype.createElement = function (mappingDatum, index, isUpdate) {\n    if (isUpdate === void 0) {\n      isUpdate = false;\n    }\n    var container = this.container;\n    var shapeCfg = this.getDrawCfg(mappingDatum); // 获取绘制图形的配置信息\n    var shapeFactory = this.getShapeFactory();\n    var element = new Element({\n      shapeFactory: shapeFactory,\n      container: container,\n      offscreenGroup: this.getOffscreenGroup(),\n      elementIndex: index\n    });\n    element.animate = this.animateOption;\n    element.geometry = this;\n    element.draw(shapeCfg, isUpdate); // 绘制\n    return element;\n  };\n  /**\n   * 获取每条数据对应的图形绘制数据。\n   * @param mappingDatum 映射后的数据\n   * @returns draw cfg\n   */\n  Geometry.prototype.getDrawCfg = function (mappingDatum) {\n    var originData = mappingDatum[FIELD_ORIGIN]; // 原始数据\n    var cfg = {\n      mappingData: mappingDatum,\n      data: originData,\n      x: mappingDatum.x,\n      y: mappingDatum.y,\n      color: mappingDatum.color,\n      size: mappingDatum.size,\n      isInCircle: this.coordinate.isPolar,\n      customInfo: this.customOption\n    };\n    var shapeName = mappingDatum.shape;\n    if (!shapeName && this.getShapeFactory()) {\n      shapeName = this.getShapeFactory().defaultShapeType;\n    }\n    cfg.shape = shapeName;\n    // 获取默认样式\n    var theme = this.theme.geometries[this.shapeType];\n    cfg.defaultStyle = get(theme, [shapeName, 'default'], {}).style;\n    if (!cfg.defaultStyle && this.getShapeFactory()) {\n      cfg.defaultStyle = this.getShapeFactory().getDefaultStyle(theme);\n    }\n    var styleOption = this.styleOption;\n    if (styleOption) {\n      cfg.style = this.getStyleCfg(styleOption, originData);\n    }\n    if (this.generatePoints) {\n      cfg.points = mappingDatum.points;\n      cfg.nextPoints = mappingDatum.nextPoints;\n    }\n    return cfg;\n  };\n  Geometry.prototype.updateElements = function (mappingDataArray, isUpdate) {\n    var e_1, _a, e_2, _b, e_3, _c;\n    if (isUpdate === void 0) {\n      isUpdate = false;\n    }\n    var keyDatum = new Map();\n    var keys = [];\n    // 用来保持 diff 元素之后 added, updated 的相对顺序\n    var keyIndex = new Map();\n    var index = 0;\n    // 获得更新数据所有的 keys\n    // 将更新的数据用 key 索引\n    for (var i = 0; i < mappingDataArray.length; i++) {\n      var mappingData = mappingDataArray[i];\n      for (var j = 0; j < mappingData.length; j++) {\n        var mappingDatum = mappingData[j];\n        var key = this.getElementId(mappingDatum);\n        var finalKey = keyDatum.has(key) ? \"\".concat(key, \"-\").concat(i, \"-\").concat(j) : key;\n        keys.push(finalKey);\n        keyDatum.set(finalKey, mappingDatum);\n        keyIndex.set(finalKey, index);\n        index++;\n      }\n    }\n    this.elements = new Array(index);\n    var _d = diff(this.lastElementsMap, keys),\n      added = _d.added,\n      updated = _d.updated,\n      removed = _d.removed;\n    try {\n      // 新建 element\n      for (var added_1 = __values(added), added_1_1 = added_1.next(); !added_1_1.done; added_1_1 = added_1.next()) {\n        var key = added_1_1.value;\n        var mappingDatum = keyDatum.get(key);\n        var i = keyIndex.get(key);\n        var element = this.createElement(mappingDatum, i, isUpdate);\n        this.elements[i] = element;\n        this.elementsMap[key] = element;\n        if (element.shape) {\n          element.shape.set('zIndex', this.zIndexReversed ? this.elements.length - i : i);\n        }\n      }\n    } catch (e_1_1) {\n      e_1 = {\n        error: e_1_1\n      };\n    } finally {\n      try {\n        if (added_1_1 && !added_1_1.done && (_a = added_1.return)) _a.call(added_1);\n      } finally {\n        if (e_1) throw e_1.error;\n      }\n    }\n    try {\n      // 更新 element\n      for (var updated_1 = __values(updated), updated_1_1 = updated_1.next(); !updated_1_1.done; updated_1_1 = updated_1.next()) {\n        var key = updated_1_1.value;\n        var element = this.lastElementsMap[key];\n        var mappingDatum = keyDatum.get(key);\n        var currentShapeCfg = this.getDrawCfg(mappingDatum);\n        var preShapeCfg = element.getModel();\n        var i = keyIndex.get(key);\n        if (this.isCoordinateChanged || isModelChange(currentShapeCfg, preShapeCfg)) {\n          element.animate = this.animateOption;\n          // 通过绘制数据的变更来判断是否需要更新，因为用户有可能会修改图形属性映射\n          element.update(currentShapeCfg); // 更新对应的 element\n        }\n\n        this.elements[i] = element;\n        this.elementsMap[key] = element;\n        if (element.shape) {\n          element.shape.set('zIndex', this.zIndexReversed ? this.elements.length - i : i);\n        }\n      }\n    } catch (e_2_1) {\n      e_2 = {\n        error: e_2_1\n      };\n    } finally {\n      try {\n        if (updated_1_1 && !updated_1_1.done && (_b = updated_1.return)) _b.call(updated_1);\n      } finally {\n        if (e_2) throw e_2.error;\n      }\n    }\n    // 全部 setZIndex 之后，再执行 sort\n    if (this.container) {\n      this.container.sort();\n    }\n    try {\n      // 销毁被删除的 elements\n      for (var removed_1 = __values(removed), removed_1_1 = removed_1.next(); !removed_1_1.done; removed_1_1 = removed_1.next()) {\n        var key = removed_1_1.value;\n        var element = this.lastElementsMap[key];\n        // 更新动画配置，用户有可能在更新之前有对动画进行配置操作\n        element.animate = this.animateOption;\n        element.destroy();\n      }\n    } catch (e_3_1) {\n      e_3 = {\n        error: e_3_1\n      };\n    } finally {\n      try {\n        if (removed_1_1 && !removed_1_1.done && (_c = removed_1.return)) _c.call(removed_1);\n      } finally {\n        if (e_3) throw e_3.error;\n      }\n    }\n  };\n  /**\n   * 获取渲染的 label 类型。\n   */\n  Geometry.prototype.getLabelType = function () {\n    var _a = this,\n      labelOption = _a.labelOption,\n      coordinate = _a.coordinate,\n      type = _a.type;\n    var coordinateType = coordinate.type,\n      isTransposed = coordinate.isTransposed;\n    var labelType = get(labelOption, ['cfg', 'type']);\n    if (!labelType) {\n      // 用户未定义，则进行默认的逻辑\n      if (coordinateType === 'polar') {\n        // 极坐标下使用通用的极坐标文本，转置则使用饼图\n        labelType = isTransposed ? 'pie' : 'polar';\n      } else if (coordinateType === 'theta') {\n        // theta 坐标系下使用饼图文本\n        labelType = 'pie';\n      } else if (type === 'interval' || type === 'polygon') {\n        labelType = 'interval';\n      } else {\n        labelType = 'base';\n      }\n    }\n    return labelType;\n  };\n  /**\n   * 获取 Y 轴上的最小值。\n   */\n  Geometry.prototype.getYMinValue = function () {\n    var yScale = this.getYScale();\n    var min = yScale.min,\n      max = yScale.max;\n    var value;\n    if (min >= 0) {\n      value = min;\n    } else if (max <= 0) {\n      // 当值全位于负区间时，需要保证 ymin 在区域内，不可为 0\n      value = max;\n    } else {\n      value = 0;\n    }\n    return value;\n  };\n  // 创建图形属性相关的配置项\n  Geometry.prototype.createAttrOption = function (attrName, field, cfg) {\n    if (isNil(field) || isObject(field)) {\n      if (isObject(field) && isEqual(Object.keys(field), ['values'])) {\n        // shape({ values: [ 'funnel' ] })\n        set(this.attributeOption, attrName, {\n          fields: field.values\n        });\n      } else {\n        set(this.attributeOption, attrName, field);\n      }\n    } else {\n      var attrCfg = {};\n      if (isNumber(field)) {\n        // size(3)\n        attrCfg.values = [field];\n      } else {\n        attrCfg.fields = parseFields(field);\n      }\n      if (cfg) {\n        if (isFunction(cfg)) {\n          attrCfg.callback = cfg;\n        } else {\n          attrCfg.values = cfg;\n        }\n      }\n      set(this.attributeOption, attrName, attrCfg);\n    }\n  };\n  Geometry.prototype.initAttributes = function () {\n    var _this = this;\n    var _a = this,\n      attributes = _a.attributes,\n      attributeOption = _a.attributeOption,\n      theme = _a.theme,\n      shapeType = _a.shapeType;\n    this.groupScales = [];\n    var tmpMap = {};\n    var _loop_1 = function (attrType) {\n      if (attributeOption.hasOwnProperty(attrType)) {\n        var option = attributeOption[attrType];\n        if (!option) {\n          return {\n            value: void 0\n          };\n        }\n        var attrCfg = __assign({}, option);\n        var callback = attrCfg.callback,\n          values = attrCfg.values,\n          _b = attrCfg.fields,\n          fields = _b === void 0 ? [] : _b;\n        // 获取每一个字段对应的 scale\n        var scales = fields.map(function (field) {\n          var scale = _this.scales[field];\n          if (!tmpMap[field] && GROUP_ATTRS.includes(attrType)) {\n            var inferedScaleType = inferScaleType(scale, get(_this.scaleDefs, field), attrType, _this.type);\n            if (inferedScaleType === 'cat') {\n              _this.groupScales.push(scale);\n              tmpMap[field] = true;\n            }\n          }\n          return scale;\n        });\n        attrCfg.scales = scales;\n        if (attrType !== 'position' && scales.length === 1 && scales[0].type === 'identity') {\n          // 用户在图形通道上声明了常量字段 color('red'), size(5)\n          attrCfg.values = scales[0].values;\n        } else if (!callback && !values) {\n          // 用户没有指定任何规则，则使用默认的映射规则\n          if (attrType === 'size') {\n            attrCfg.values = theme.sizes;\n          } else if (attrType === 'shape') {\n            attrCfg.values = theme.shapes[shapeType] || [];\n          } else if (attrType === 'color') {\n            if (scales.length) {\n              // 根据数值个数使用对应的色板\n              attrCfg.values = scales[0].values.length <= 10 ? theme.colors10 : theme.colors20;\n            } else {\n              attrCfg.values = theme.colors10;\n            }\n          }\n        }\n        var AttributeCtor = getAttributeClass(attrType);\n        attributes[attrType] = new AttributeCtor(attrCfg);\n      }\n    };\n    // 遍历每一个 attrOption，各自创建 Attribute 实例\n    for (var attrType in attributeOption) {\n      var state_1 = _loop_1(attrType);\n      if (typeof state_1 === \"object\") return state_1.value;\n    }\n  };\n  // 处理数据：分组 -> 数字化 -> adjust 调整\n  Geometry.prototype.processData = function (data) {\n    var e_4, _a;\n    this.hasSorted = false;\n    var scales = this.getAttribute('position').scales;\n    var categoryScales = scales.filter(function (scale) {\n      return scale.isCategory;\n    });\n    var groupedArray = this.groupData(data); // 数据分组\n    var beforeAdjust = [];\n    for (var i = 0, len = groupedArray.length; i < len; i++) {\n      var subData = groupedArray[i];\n      var arr = [];\n      for (var j = 0, subLen = subData.length; j < subLen; j++) {\n        var originData = subData[j];\n        var item = {};\n        // tslint:disable-next-line: forin\n        for (var k in originData) {\n          item[k] = originData[k];\n        }\n        item[FIELD_ORIGIN] = originData;\n        try {\n          // 将分类数据翻译成数据, 仅对位置相关的度量进行数字化处理\n          for (var categoryScales_1 = (e_4 = void 0, __values(categoryScales)), categoryScales_1_1 = categoryScales_1.next(); !categoryScales_1_1.done; categoryScales_1_1 = categoryScales_1.next()) {\n            var scale = categoryScales_1_1.value;\n            var field = scale.field;\n            item[field] = scale.translate(item[field]);\n          }\n        } catch (e_4_1) {\n          e_4 = {\n            error: e_4_1\n          };\n        } finally {\n          try {\n            if (categoryScales_1_1 && !categoryScales_1_1.done && (_a = categoryScales_1.return)) _a.call(categoryScales_1);\n          } finally {\n            if (e_4) throw e_4.error;\n          }\n        }\n        arr.push(item);\n      }\n      beforeAdjust.push(arr);\n    }\n    var dataArray = this.adjustData(beforeAdjust); // 进行 adjust 数据调整\n    this.beforeMappingData = dataArray;\n    return dataArray;\n  };\n  // 调整数据\n  Geometry.prototype.adjustData = function (dataArray) {\n    var adjustOption = this.adjustOption;\n    var _a = this,\n      intervalPadding = _a.intervalPadding,\n      dodgePadding = _a.dodgePadding,\n      theme = _a.theme;\n    // 兼容theme配置\n    var maxColumnWidth = this.maxColumnWidth || theme.maxColumnWidth;\n    var minColumnWidth = this.minColumnWidth || theme.minColumnWidth;\n    var columnWidthRatio = this.columnWidthRatio || theme.columnWidthRatio;\n    var result = dataArray;\n    if (adjustOption) {\n      var xScale_2 = this.getXScale();\n      var yScale = this.getYScale();\n      var xField = xScale_2.field;\n      var yField = yScale ? yScale.field : null;\n      var xDimensionLength = getXDimensionLength(this.coordinate);\n      var groupNum = xScale_2.values.length;\n      // 传入size计算相关参数，默认宽度、最大最小宽度约束\n      var sizeAttr = this.getAttribute('size');\n      var defaultSize = void 0;\n      if (sizeAttr) {\n        defaultSize = sizeAttr.values[0];\n      }\n      for (var i = 0, len = adjustOption.length; i < len; i++) {\n        var adjust = adjustOption[i];\n        var adjustCfg = __assign({\n          xField: xField,\n          yField: yField,\n          intervalPadding: intervalPadding,\n          dodgePadding: dodgePadding,\n          xDimensionLength: xDimensionLength,\n          groupNum: groupNum,\n          defaultSize: defaultSize,\n          maxColumnWidth: maxColumnWidth,\n          minColumnWidth: minColumnWidth,\n          columnWidthRatio: columnWidthRatio\n        }, adjust);\n        var type = adjust.type;\n        if (type === 'dodge') {\n          var adjustNames = [];\n          if (xScale_2.isCategory || xScale_2.type === 'identity') {\n            adjustNames.push('x');\n          } else if (!yScale) {\n            adjustNames.push('y');\n          } else {\n            throw new Error('dodge is not support linear attribute, please use category attribute!');\n          }\n          adjustCfg.adjustNames = adjustNames;\n          // 每个分组内每条柱子的宽度占比，用户不可指定，用户需要通过 columnWidthRatio 指定\n          // 兼容theme配置\n          adjustCfg.dodgeRatio = columnWidthRatio;\n        } else if (type === 'stack') {\n          var coordinate = this.coordinate;\n          if (!yScale) {\n            // 一维的情况下获取高度和默认size\n            adjustCfg.height = coordinate.getHeight();\n            var size = this.getDefaultValue('size') || 3;\n            adjustCfg.size = size;\n          }\n          // 不进行 transpose 时，用户又没有设置这个参数时，默认从上向下\n          if (!coordinate.isTransposed && isNil(adjustCfg.reverseOrder)) {\n            adjustCfg.reverseOrder = true;\n          }\n        }\n        var adjustCtor = getAdjustClass(type);\n        adjustCfg.dimValuesMap = {};\n        //生成dimValuesMap\n        if (xScale_2 && xScale_2.values) {\n          adjustCfg.dimValuesMap[xScale_2.field] = xScale_2.values.map(function (v) {\n            return xScale_2.translate(v);\n          });\n        }\n        var adjustInstance = new adjustCtor(adjustCfg);\n        result = adjustInstance.process(result);\n        this.adjusts[type] = adjustInstance;\n      }\n    }\n    return result;\n  };\n  // 对数据进行分组\n  Geometry.prototype.groupData = function (data) {\n    var groupScales = this.getGroupScales();\n    var scaleDefs = this.scaleDefs;\n    var appendConditions = {};\n    var groupFields = [];\n    for (var index = 0; index < groupScales.length; index++) {\n      var scale = groupScales[index];\n      var field = scale.field;\n      groupFields.push(field);\n      if (get(scaleDefs, [field, 'values'])) {\n        // 用户通过 view.scale() 接口指定了 values 属性\n        appendConditions[field] = scaleDefs[field].values;\n      }\n    }\n    return group(data, groupFields, appendConditions);\n  };\n  // 更新发生层叠后的数据对应的度量范围\n  Geometry.prototype.updateStackRange = function (scale, dataArray) {\n    var mergeArray = flatten(dataArray);\n    var field = scale.field;\n    var min = scale.min;\n    var max = scale.max;\n    for (var index = 0; index < mergeArray.length; index++) {\n      var obj = mergeArray[index];\n      var tmpMin = Math.min.apply(null, obj[field]);\n      var tmpMax = Math.max.apply(null, obj[field]);\n      if (tmpMin < min) {\n        min = tmpMin;\n      }\n      if (tmpMax > max) {\n        max = tmpMax;\n      }\n    }\n    var scaleDefs = this.scaleDefs;\n    var cfg = {};\n    if (min < scale.min && !get(scaleDefs, [field, 'min'])) {\n      // 用户如果在列定义中定义了 min，则以用户定义的为准\n      cfg.min = min;\n    }\n    if (max > scale.max && !get(scaleDefs, [field, 'max'])) {\n      // 用户如果在列定义中定义了 max\n      cfg.max = max;\n    }\n    scale.change(cfg);\n  };\n  // 将数据映射至图形空间前的操作：排序以及关键点的生成\n  Geometry.prototype.beforeMapping = function (beforeMappingData) {\n    // 当初加 clone 是因为 points 的引用关系，导致更新失败，可是现在貌似复现不出来了，所以暂时不进行 clone\n    // const source = clone(beforeMappingData);\n    var source = beforeMappingData;\n    if (this.sortable) {\n      this.sort(source);\n    }\n    if (this.generatePoints) {\n      // 需要生成关键点\n      for (var index = 0, length_5 = source.length; index < length_5; index++) {\n        var currentData = source[index];\n        this.generateShapePoints(currentData);\n        var nextData = source[index + 1];\n        if (nextData) {\n          this.generateShapePoints(nextData);\n          currentData[0].nextPoints = nextData[0].points;\n        }\n      }\n    }\n    return source;\n  };\n  // 生成 shape 的关键点\n  Geometry.prototype.generateShapePoints = function (data) {\n    var shapeFactory = this.getShapeFactory();\n    var shapeAttr = this.getAttribute('shape');\n    for (var index = 0; index < data.length; index++) {\n      var obj = data[index];\n      var cfg = this.createShapePointsCfg(obj);\n      var shape = shapeAttr ? this.getAttributeValues(shapeAttr, obj) : null;\n      var points = shapeFactory.getShapePoints(shape, cfg);\n      obj.points = points;\n    }\n  };\n  // 将数据归一化\n  Geometry.prototype.normalizeValues = function (values, scale) {\n    var rst = [];\n    if (isArray(values)) {\n      for (var index = 0; index < values.length; index++) {\n        var value = values[index];\n        rst.push(scale.scale(value));\n      }\n    } else {\n      rst = scale.scale(values);\n    }\n    return rst;\n  };\n  // 将数据映射至图形空间\n  Geometry.prototype.mapping = function (data) {\n    var attributes = this.attributes;\n    var mappingData = [];\n    for (var index = 0; index < data.length; index++) {\n      var record = data[index];\n      var newRecord = {\n        _origin: record[FIELD_ORIGIN],\n        points: record.points,\n        nextPoints: record.nextPoints\n      };\n      for (var k in attributes) {\n        if (attributes.hasOwnProperty(k)) {\n          var attr = attributes[k];\n          var names = attr.names;\n          var values = this.getAttributeValues(attr, record);\n          if (names.length > 1) {\n            // position 之类的生成多个字段的属性\n            for (var j = 0; j < values.length; j += 1) {\n              var val = values[j];\n              var name_1 = names[j];\n              newRecord[name_1] = isArray(val) && val.length === 1 ? val[0] : val; // 只有一个值时返回第一个属性值\n            }\n          } else {\n            // values.length === 1 的判断是以下情况，获取用户设置的图形属性值\n            // shape('a', ['dot', 'dash']), color('a', ['red', 'yellow'])\n            newRecord[names[0]] = values.length === 1 ? values[0] : values;\n          }\n        }\n      }\n      this.convertPoint(newRecord); // 将 x、y 转换成画布坐标\n      mappingData.push(newRecord);\n    }\n    return mappingData;\n  };\n  // 将归一化的坐标值转换成画布坐标\n  Geometry.prototype.convertPoint = function (mappingRecord) {\n    var x = mappingRecord.x,\n      y = mappingRecord.y;\n    var rstX;\n    var rstY;\n    var obj;\n    var coordinate = this.coordinate;\n    if (isArray(x) && isArray(y)) {\n      rstX = [];\n      rstY = [];\n      for (var i = 0, j = 0, xLen = x.length, yLen = y.length; i < xLen && j < yLen; i += 1, j += 1) {\n        obj = coordinate.convert({\n          x: x[i],\n          y: y[j]\n        });\n        rstX.push(obj.x);\n        rstY.push(obj.y);\n      }\n    } else if (isArray(y)) {\n      rstY = [];\n      for (var index = 0; index < y.length; index++) {\n        var yVal = y[index];\n        obj = coordinate.convert({\n          x: x,\n          y: yVal\n        });\n        if (rstX && rstX !== obj.x) {\n          if (!isArray(rstX)) {\n            rstX = [rstX];\n          }\n          rstX.push(obj.x);\n        } else {\n          rstX = obj.x;\n        }\n        rstY.push(obj.y);\n      }\n    } else if (isArray(x)) {\n      rstX = [];\n      for (var index = 0; index < x.length; index++) {\n        var xVal = x[index];\n        obj = coordinate.convert({\n          x: xVal,\n          y: y\n        });\n        if (rstY && rstY !== obj.y) {\n          if (!isArray(rstY)) {\n            rstY = [rstY];\n          }\n          rstY.push(obj.y);\n        } else {\n          rstY = obj.y;\n        }\n        rstX.push(obj.x);\n      }\n    } else {\n      var point = coordinate.convert({\n        x: x,\n        y: y\n      });\n      rstX = point.x;\n      rstY = point.y;\n    }\n    mappingRecord.x = rstX;\n    mappingRecord.y = rstY;\n  };\n  // 获取 style 配置\n  Geometry.prototype.getStyleCfg = function (styleOption, originData) {\n    var _a = styleOption.fields,\n      fields = _a === void 0 ? [] : _a,\n      callback = styleOption.callback,\n      cfg = styleOption.cfg;\n    if (cfg) {\n      // 用户直接配置样式属性\n      return cfg;\n    }\n    var params = fields.map(function (field) {\n      return originData[field];\n    });\n    return callback.apply(void 0, __spreadArray([], __read(params), false));\n  };\n  Geometry.prototype.setCfg = function (cfg) {\n    var _this = this;\n    var coordinate = cfg.coordinate,\n      data = cfg.data,\n      theme = cfg.theme,\n      scaleDefs = cfg.scaleDefs;\n    if (coordinate) {\n      this.coordinate = coordinate;\n    }\n    if (data) {\n      this.data = data;\n    }\n    if (scaleDefs) {\n      this.scaleDefs = scaleDefs;\n      this.idFields = [];\n      each(scaleDefs, function (scaleDef, field) {\n        if (scaleDef && scaleDef.key) {\n          _this.idFields.push(field);\n        }\n      });\n    }\n    if (theme) {\n      this.theme = this.userTheme ? deepMix({}, theme, this.userTheme) : theme; // 支持 geometry 层级的主题设置\n    }\n  };\n\n  Geometry.prototype.renderLabels = function (mappingArray, isUpdate) {\n    if (isUpdate === void 0) {\n      isUpdate = false;\n    }\n    return __awaiter(this, void 0, void 0, function () {\n      var geometryLabel, labelType, GeometryLabelsCtor, labelsMap, elementLabels, _a, _b, _c, element, labels;\n      var e_5, _d;\n      var _this = this;\n      return __generator(this, function (_e) {\n        switch (_e.label) {\n          case 0:\n            geometryLabel = this.geometryLabel;\n            this.emit(GEOMETRY_LIFE_CIRCLE.BEFORE_RENDER_LABEL);\n            if (!geometryLabel) {\n              labelType = this.getLabelType();\n              GeometryLabelsCtor = getGeometryLabel(labelType);\n              geometryLabel = new GeometryLabelsCtor(this);\n              this.geometryLabel = geometryLabel;\n            }\n            return [4 /*yield*/, geometryLabel.render(mappingArray, isUpdate)];\n          case 1:\n            _e.sent();\n            labelsMap = geometryLabel.labelsRenderer.shapesMap;\n            elementLabels = new Map();\n            each(labelsMap, function (labelGroup, labelGroupId) {\n              var labelChildren = labelGroup.getChildren() || [];\n              for (var j = 0; j < labelChildren.length; j++) {\n                var labelShape = labelChildren[j];\n                var element = _this.elementsMap[labelShape.get('elementId') || labelGroupId.split(' ')[0]];\n                if (element) {\n                  labelShape.cfg.name = ['element', 'label'];\n                  labelShape.cfg.element = element;\n                  var labels = elementLabels.get(element) || new Set();\n                  labels.add(labelGroup);\n                  elementLabels.set(element, labels);\n                }\n              }\n            });\n            try {\n              for (_a = __values(elementLabels.entries()), _b = _a.next(); !_b.done; _b = _a.next()) {\n                _c = __read(_b.value, 2), element = _c[0], labels = _c[1];\n                element.labelShape = __spreadArray([], __read(labels), false);\n              }\n            } catch (e_5_1) {\n              e_5 = {\n                error: e_5_1\n              };\n            } finally {\n              try {\n                if (_b && !_b.done && (_d = _a.return)) _d.call(_a);\n              } finally {\n                if (e_5) throw e_5.error;\n              }\n            }\n            this.emit(GEOMETRY_LIFE_CIRCLE.AFTER_RENDER_LABEL);\n            return [2 /*return*/];\n        }\n      });\n    });\n  };\n  /**\n   * 是否需要进行群组入场动画\n   * 规则：\n   * 1. 如果发生更新，则不进行\n   * 2. 如果用户关闭 geometry 动画，则不进行\n   * 3. 如果用户关闭了 appear 动画，则不进行\n   * 4. 如果用户配置了 appear.animation，则不进行\n   */\n  Geometry.prototype.canDoGroupAnimation = function (isUpdate) {\n    return !isUpdate && this.animateOption && (get(this.animateOption, 'appear') === undefined || get(this.animateOption, 'appear') && get(this.animateOption, ['appear', 'animation']) === undefined);\n  };\n  return Geometry;\n}(Base);\nexport default Geometry;","map":{"version":3,"names":["__assign","__awaiter","__extends","__generator","__read","__spreadArray","__values","getAdjust","getAdjustClass","getAttribute","getAttributeClass","clone","deepMix","each","flatten","get","isArray","isEmpty","isEqual","isFunction","isNil","isNumber","isObject","isPlainObject","isString","set","doGroupAppearAnimate","getDefaultAnimateCfg","Base","FIELD_ORIGIN","GEOMETRY_LIFE_CIRCLE","GROUP_ATTRS","uniq","Element","getGeometryLabel","getShapeFactory","group","isModelChange","parseFields","diff","inferScaleType","getXDimensionLength","Geometry","_super","cfg","_this","call","type","attributes","elements","elementsMap","animateOption","attributeOption","lastElementsMap","generatePoints","beforeMappingData","adjusts","idFields","hasSorted","isCoordinateChanged","container","labelsContainer","coordinate","data","_a","sortable","_b","visible","theme","_c","scales","_d","scaleDefs","intervalPadding","dodgePadding","maxColumnWidth","minColumnWidth","columnWidthRatio","roseWidthRatio","multiplePieWidthRatio","zIndexReversed","sortZIndex","useDeferredLabel","userTheme","Infinity","prototype","position","positionCfg","fields","length","unshift","color","field","createAttrOption","shape","size","adjust","adjustCfg","index","adjustOption","style","styleFunc","styleOption","callback","tooltip","tooltipOption","animate","label","secondParam","thirdParam","labelOption","state","stateOption","customInfo","customOption","init","setCfg","initAttributes","processData","adjustScale","update","isDataChanged","lastAttributeOption","paint","isUpdate","defaultSize","undefined","offscreenGroup","getOffscreenGroup","clear","dataArray","beforeMapping","Array","i","mapping","updateElements","canDoGroupAnimation","animateCfg","yScale","getYScale","yMinPoint","convert","x","y","scale","getYMinValue","deferred","renderLabels","bind","timeout","window","requestIdleCallback","setTimeout","options","changeVisible","geometryLabel","groupScales","destroy","remove","shapeFactory","getGroupScales","name","getXScale","getGroupAttributes","rst","attr","includes","push","getDefaultValue","attrName","value","values","getAttributeValues","obj","params","length_1","isIdentity","apply","adjustType","getCoordinate","getData","getShapeMarker","shapeName","getMarker","getElementsBy","condition","filter","element","getElements","getElementId","originData","elementId","xScale","xField","yField","yVal","xVal","id","concat","length_2","groupScale","dodgeAdjust","dodgeBy","getScaleFields","tmpMap","Map","attributeType","hasOwnProperty","eachOpt","length_3","show","hide","getFields","uniqMap","Object","forEach","fs","f","has","getGroupFields","groupFields","length_4","attributeName","getXYFields","getXField","getYField","getShapes","map","GroupCtor","getGroupBase","sort","mappingArray","xScale_1","xField_1","itemArr","obj1","obj2","translate","updateStackRange","shapeType","geometries","createShapePointsCfg","normalizeValues","y0","createElement","mappingDatum","shapeCfg","getDrawCfg","elementIndex","geometry","draw","mappingData","isInCircle","isPolar","defaultShapeType","defaultStyle","getDefaultStyle","getStyleCfg","points","nextPoints","mappingDataArray","e_1","e_2","e_3","keyDatum","keys","keyIndex","j","key","finalKey","added","updated","removed","added_1","added_1_1","next","done","e_1_1","error","return","updated_1","updated_1_1","currentShapeCfg","preShapeCfg","getModel","e_2_1","removed_1","removed_1_1","e_3_1","getLabelType","coordinateType","isTransposed","labelType","min","max","attrCfg","_loop_1","attrType","option","inferedScaleType","sizes","shapes","colors10","colors20","AttributeCtor","state_1","e_4","categoryScales","isCategory","groupedArray","groupData","beforeAdjust","len","subData","arr","subLen","item","k","categoryScales_1","categoryScales_1_1","e_4_1","adjustData","result","xScale_2","xDimensionLength","groupNum","sizeAttr","adjustNames","Error","dodgeRatio","height","getHeight","reverseOrder","adjustCtor","dimValuesMap","v","adjustInstance","process","appendConditions","mergeArray","tmpMin","Math","tmpMax","change","source","length_5","currentData","generateShapePoints","nextData","shapeAttr","getShapePoints","record","newRecord","_origin","names","val","name_1","convertPoint","mappingRecord","rstX","rstY","xLen","yLen","point","scaleDef","GeometryLabelsCtor","labelsMap","elementLabels","labels","e_5","_e","emit","BEFORE_RENDER_LABEL","render","sent","labelsRenderer","shapesMap","labelGroup","labelGroupId","labelChildren","getChildren","labelShape","split","Set","add","entries","e_5_1","AFTER_RENDER_LABEL"],"sources":["/Users/obiechina/Documents/ridy-flutter-full-taxi-solution 2/node_modules/@antv/g2/esm/geometry/base.js"],"sourcesContent":["import { __assign, __awaiter, __extends, __generator, __read, __spreadArray, __values } from \"tslib\";\nimport { getAdjust as getAdjustClass } from '@antv/adjust';\nimport { getAttribute as getAttributeClass } from '@antv/attr';\nimport { clone, deepMix, each, flatten, get, isArray, isEmpty, isEqual, isFunction, isNil, isNumber, isObject, isPlainObject, isString, set, } from '@antv/util';\nimport { doGroupAppearAnimate, getDefaultAnimateCfg } from '../animate';\nimport Base from '../base';\nimport { FIELD_ORIGIN, GEOMETRY_LIFE_CIRCLE, GROUP_ATTRS } from '../constant';\nimport { uniq } from '../util/helper';\nimport Element from './element';\nimport { getGeometryLabel } from './label';\nimport { getShapeFactory } from './shape/base';\nimport { group } from './util/group-data';\nimport { isModelChange } from './util/is-model-change';\nimport { parseFields } from './util/parse-fields';\nimport { diff } from './util/diff';\nimport { inferScaleType } from '../util/scale';\nimport { getXDimensionLength } from '../util/coordinate';\n/**\n * Geometry 几何标记基类，主要负责数据到图形属性的映射以及绘制逻辑。\n */\nvar Geometry = /** @class */ (function (_super) {\n    __extends(Geometry, _super);\n    /**\n     * 创建 Geometry 实例。\n     * @param cfg\n     */\n    function Geometry(cfg) {\n        var _this = _super.call(this, cfg) || this;\n        /** Geometry 几何标记类型。 */\n        _this.type = 'base';\n        // 内部产生的属性\n        /** Attribute map  */\n        _this.attributes = {};\n        /** Element map */\n        _this.elements = [];\n        /** 使用 key-value 结构存储 Element，key 为每个 Element 实例对应的唯一 ID */\n        _this.elementsMap = {};\n        /** animate 配置项 */\n        _this.animateOption = true;\n        /** 图形属性映射配置 */\n        _this.attributeOption = {};\n        /** 存储上一次渲染时的 element 映射表，用于更新逻辑 */\n        _this.lastElementsMap = {};\n        /** 是否生成多个点来绘制图形。 */\n        _this.generatePoints = false;\n        /** 存储发生图形属性映射前的数据 */\n        _this.beforeMappingData = null;\n        _this.adjusts = {};\n        _this.idFields = [];\n        _this.hasSorted = false;\n        _this.isCoordinateChanged = false;\n        var container = cfg.container, labelsContainer = cfg.labelsContainer, coordinate = cfg.coordinate, data = cfg.data, _a = cfg.sortable, sortable = _a === void 0 ? false : _a, _b = cfg.visible, visible = _b === void 0 ? true : _b, theme = cfg.theme, _c = cfg.scales, scales = _c === void 0 ? {} : _c, _d = cfg.scaleDefs, scaleDefs = _d === void 0 ? {} : _d, \n        // 柱状图间隔与宽度相关配置\n        intervalPadding = cfg.intervalPadding, dodgePadding = cfg.dodgePadding, maxColumnWidth = cfg.maxColumnWidth, minColumnWidth = cfg.minColumnWidth, columnWidthRatio = cfg.columnWidthRatio, roseWidthRatio = cfg.roseWidthRatio, multiplePieWidthRatio = cfg.multiplePieWidthRatio, zIndexReversed = cfg.zIndexReversed, sortZIndex = cfg.sortZIndex, useDeferredLabel = cfg.useDeferredLabel;\n        _this.container = container;\n        _this.labelsContainer = labelsContainer;\n        _this.coordinate = coordinate;\n        _this.data = data;\n        _this.sortable = sortable;\n        _this.visible = visible;\n        _this.userTheme = theme;\n        _this.scales = scales;\n        _this.scaleDefs = scaleDefs;\n        // 柱状图间隔与宽度相关配置\n        _this.intervalPadding = intervalPadding;\n        _this.dodgePadding = dodgePadding;\n        _this.maxColumnWidth = maxColumnWidth;\n        _this.minColumnWidth = minColumnWidth;\n        _this.columnWidthRatio = columnWidthRatio;\n        _this.roseWidthRatio = roseWidthRatio;\n        _this.multiplePieWidthRatio = multiplePieWidthRatio;\n        _this.zIndexReversed = zIndexReversed;\n        _this.sortZIndex = sortZIndex;\n        _this.useDeferredLabel = useDeferredLabel ? (typeof useDeferredLabel === 'number' ? useDeferredLabel : Infinity) : null;\n        return _this;\n    }\n    /**\n     * 配置 position 通道映射规则。\n     *\n     * @example\n     * ```typescript\n     * // 数据结构: [{ x: 'A', y: 10, color: 'red' }]\n     * geometry.position('x*y');\n     * geometry.position([ 'x', 'y' ]);\n     * geometry.position({\n     *   fields: [ 'x', 'y' ],\n     * });\n     * ```\n     *\n     * @param cfg 映射规则\n     * @returns\n     */\n    Geometry.prototype.position = function (cfg) {\n        var positionCfg = cfg;\n        if (!isPlainObject(cfg)) {\n            // 字符串字段或者数组字段\n            positionCfg = {\n                fields: parseFields(cfg),\n            };\n        }\n        var fields = get(positionCfg, 'fields');\n        if (fields.length === 1) {\n            // 默认填充一维 1*xx\n            fields.unshift('1');\n            set(positionCfg, 'fields', fields);\n        }\n        set(this.attributeOption, 'position', positionCfg);\n        return this;\n    };\n    Geometry.prototype.color = function (field, cfg) {\n        this.createAttrOption('color', field, cfg);\n        return this;\n    };\n    Geometry.prototype.shape = function (field, cfg) {\n        this.createAttrOption('shape', field, cfg);\n        return this;\n    };\n    Geometry.prototype.size = function (field, cfg) {\n        this.createAttrOption('size', field, cfg);\n        return this;\n    };\n    /**\n     * 设置数据调整方式。G2 目前内置了四种类型：\n     * 1. dodge\n     * 2. stack\n     * 3. symmetric\n     * 4. jitter\n     *\n     *\n     * **Tip**\n     * + 对于 'dodge' 类型，可以额外进行如下属性的配置:\n     * ```typescript\n     * geometry.adjust('dodge', {\n     *   marginRatio: 0, // 取 0 到 1 范围的值（相对于每个柱子宽度），用于控制一个分组中柱子之间的间距\n     *   dodgeBy: 'x', // 该属性只对 'dodge' 类型生效，声明以哪个数据字段为分组依据\n     * });\n     * ```\n     *\n     * + 对于 'stack' 类型，可以额外进行如下属性的配置:\n     * ```typescript\n     * geometry.adjust('stack', {\n     *   reverseOrder: false, // 用于控制是否对数据进行反序操作\n     * });\n     * ```\n     *\n     * @example\n     * ```typescript\n     * geometry.adjust('stack');\n     *\n     * geometry.adjust({\n     *   type: 'stack',\n     *   reverseOrder: false,\n     * });\n     *\n     * // 组合使用 adjust\n     * geometry.adjust([ 'stack', 'dodge' ]);\n     *\n     * geometry.adjust([\n     *   { type: 'stack' },\n     *   { type: 'dodge', dodgeBy: 'x' },\n     * ]);\n     * ```\n     *\n     * @param adjustCfg 数据调整配置\n     * @returns\n     */\n    Geometry.prototype.adjust = function (adjustCfg) {\n        var adjusts = adjustCfg;\n        if (isString(adjustCfg) || isPlainObject(adjustCfg)) {\n            adjusts = [adjustCfg];\n        }\n        each(adjusts, function (adjust, index) {\n            if (!isObject(adjust)) {\n                adjusts[index] = { type: adjust };\n            }\n        });\n        this.adjustOption = adjusts;\n        return this;\n    };\n    Geometry.prototype.style = function (field, styleFunc) {\n        if (isString(field)) {\n            var fields = parseFields(field);\n            this.styleOption = {\n                fields: fields,\n                callback: styleFunc,\n            };\n        }\n        else {\n            var _a = field, fields = _a.fields, callback = _a.callback, cfg = _a.cfg;\n            if (fields || callback || cfg) {\n                this.styleOption = field;\n            }\n            else {\n                this.styleOption = {\n                    cfg: field,\n                };\n            }\n        }\n        return this;\n    };\n    Geometry.prototype.tooltip = function (field, cfg) {\n        if (isString(field)) {\n            var fields = parseFields(field);\n            this.tooltipOption = {\n                fields: fields,\n                callback: cfg,\n            };\n        }\n        else {\n            this.tooltipOption = field;\n        }\n        return this;\n    };\n    /**\n     * Geometry 动画配置。\n     *\n     * + `animate(false)` 关闭动画\n     * + `animate(true)` 开启动画，默认开启。\n     *\n     * 我们将动画分为四个场景：\n     * 1. appear: 图表第一次加载时的入场动画；\n     * 2. enter: 图表绘制完成，发生更新后，产生的新图形的进场动画；\n     * 3. update: 图表绘制完成，数据发生变更后，有状态变更的图形的更新动画；\n     * 4. leave: 图表绘制完成，数据发生变更后，被销毁图形的销毁动画。\n     *\n     * @example\n     * ```typescript\n     * animate({\n     *   enter: {\n     *     duration: 1000, // enter 动画执行时间\n     *   },\n     *   leave: false, // 关闭 leave 销毁动画\n     * });\n     * ```\n     *\n     * @param cfg 动画配置\n     * @returns\n     */\n    Geometry.prototype.animate = function (cfg) {\n        this.animateOption = cfg;\n        return this;\n    };\n    Geometry.prototype.label = function (field, secondParam, thirdParam) {\n        if (isString(field)) {\n            var labelOption = {};\n            var fields = parseFields(field);\n            labelOption.fields = fields;\n            if (isFunction(secondParam)) {\n                labelOption.callback = secondParam;\n            }\n            else if (isPlainObject(secondParam)) {\n                labelOption.cfg = secondParam;\n            }\n            if (thirdParam) {\n                labelOption.cfg = thirdParam;\n            }\n            this.labelOption = labelOption;\n        }\n        else {\n            this.labelOption = field;\n        }\n        return this;\n    };\n    /**\n     * 设置状态对应的样式。\n     *\n     * @example\n     * ```ts\n     * chart.interval().state({\n     *   selected: {\n     *     animate: { duration: 100, easing: 'easeLinear' },\n     *     style: {\n     *       lineWidth: 2,\n     *       stroke: '#000',\n     *     },\n     *   },\n     * });\n     * ```\n     *\n     * 如果图形 shape 是由多个 shape 组成，即为一个 G.Group 对象，那么针对 group 中的每个 shape，我们需要使用下列方式进行状态样式设置：\n     * 如果我们为 group 中的每个 shape 设置了 'name' 属性(shape.set('name', 'xx'))，则以 'name' 作为 key，否则默认以索引值（即 shape 的 添加顺序）为 key。\n     *\n     * ```ts\n     * chart.interval().shape('groupShape').state({\n     *   selected: {\n     *     style: {\n     *       0: { lineWidth: 2 },\n     *       1: { fillOpacity: 1 },\n     *     }\n     *   }\n     * });\n     * ```\n     *\n     * @param cfg 状态样式\n     */\n    Geometry.prototype.state = function (cfg) {\n        this.stateOption = cfg;\n        return this;\n    };\n    /**\n     * 用于向 shape 中传入自定义的数据。目前可能仅仅可能用于在自定义 shape 的时候，像自定义 shape 中传入自定义的数据，方便实现自定义 shape 的配置能力。\n     *\n     * @example\n     * ```ts\n     * chart.interval().customInfo({ yourData: 'hello, g2!' });\n     * ```\n     *\n     * 然后在自定义 shape 的时候，可以拿到这个信息。\n     *\n     * ```ts\n     * registerShape('interval', 'your-shape', {\n     *   draw(shapeInfo, container) {\n     *     const { customInfo } = shapeInfo;\n     *     console.log(customInfo); // will log { yourData: 'hello, g2!' }.\n     *   }\n     * });\n     * ```\n     *\n     * @param cfg\n     */\n    Geometry.prototype.customInfo = function (cfg) {\n        this.customOption = cfg;\n        return this;\n    };\n    /**\n     * 初始化 Geomtry 实例：\n     * 创建 [[Attribute]] and [[Scale]] 实例，进行数据处理，包括分组、数值化以及数据调整。\n     */\n    Geometry.prototype.init = function (cfg) {\n        if (cfg === void 0) { cfg = {}; }\n        this.setCfg(cfg);\n        this.initAttributes(); // 创建图形属性\n        // 数据加工：分组 -> 数字化 -> adjust\n        this.processData(this.data);\n        // 调整 scale\n        this.adjustScale();\n    };\n    /**\n     * Geometry 更新。\n     * @param [cfg] 更新的配置\n     */\n    Geometry.prototype.update = function (cfg) {\n        if (cfg === void 0) { cfg = {}; }\n        var data = cfg.data, isDataChanged = cfg.isDataChanged, isCoordinateChanged = cfg.isCoordinateChanged;\n        var _a = this, attributeOption = _a.attributeOption, lastAttributeOption = _a.lastAttributeOption;\n        if (!isEqual(attributeOption, lastAttributeOption)) {\n            // 映射发生改变，则重新创建图形属性\n            this.init(cfg);\n        }\n        else if (data && (isDataChanged || !isEqual(data, this.data))) {\n            // 数据发生变化\n            this.setCfg(cfg);\n            this.initAttributes(); // 创建图形属性\n            this.processData(data); // 数据加工：分组 -> 数字化 -> adjust\n        }\n        else {\n            // 有可能 coordinate 变化\n            this.setCfg(cfg);\n        }\n        // 调整 scale\n        this.adjustScale();\n        this.isCoordinateChanged = isCoordinateChanged;\n    };\n    /**\n     * 将原始数据映射至图形空间，同时创建图形对象。\n     */\n    Geometry.prototype.paint = function (isUpdate) {\n        var _this = this;\n        if (isUpdate === void 0) { isUpdate = false; }\n        if (this.animateOption) {\n            this.animateOption = deepMix({}, getDefaultAnimateCfg(this.type, this.coordinate), this.animateOption);\n        }\n        this.defaultSize = undefined;\n        this.elementsMap = {};\n        this.elements = [];\n        var offscreenGroup = this.getOffscreenGroup();\n        offscreenGroup.clear();\n        var beforeMappingData = this.beforeMappingData;\n        var dataArray = this.beforeMapping(beforeMappingData);\n        this.dataArray = new Array(dataArray.length);\n        for (var i = 0; i < dataArray.length; i++) {\n            var data = dataArray[i];\n            this.dataArray[i] = this.mapping(data);\n        }\n        this.updateElements(this.dataArray, isUpdate);\n        this.lastElementsMap = this.elementsMap;\n        if (this.canDoGroupAnimation(isUpdate)) {\n            // 如果用户没有配置 appear.animation，就默认走整体动画\n            var container = this.container;\n            var type = this.type;\n            var coordinate = this.coordinate;\n            var animateCfg = get(this.animateOption, 'appear');\n            var yScale = this.getYScale();\n            var yMinPoint = coordinate.convert({\n                x: 0,\n                y: yScale.scale(this.getYMinValue()),\n            });\n            doGroupAppearAnimate(container, animateCfg, type, coordinate, yMinPoint);\n        }\n        // 添加 label\n        if (this.labelOption) {\n            var deferred = this.useDeferredLabel;\n            var callback = (function () { return _this.renderLabels(flatten(_this.dataArray), isUpdate); }).bind(this);\n            if (typeof deferred === 'number') {\n                // Use `requestIdleCallback` to render labels in idle time (like react fiber)\n                var timeout = (typeof deferred === 'number' && deferred !== Infinity) ? deferred : 0;\n                if (!window.requestIdleCallback) {\n                    setTimeout(callback, timeout);\n                }\n                else {\n                    var options = timeout && timeout !== Infinity ? { timeout: timeout } : undefined;\n                    window.requestIdleCallback(callback, options);\n                }\n            }\n            else {\n                callback();\n            }\n        }\n        // 缓存，用于更新\n        this.lastAttributeOption = __assign({}, this.attributeOption);\n        if (this.visible === false) {\n            // 用户在初始化的时候声明 visible: false\n            this.changeVisible(false);\n        }\n    };\n    /**\n     * 清空当前 Geometry，配置项仍保留，但是内部创建的对象全部清空。\n     * @override\n     */\n    Geometry.prototype.clear = function () {\n        var _a = this, container = _a.container, geometryLabel = _a.geometryLabel, offscreenGroup = _a.offscreenGroup;\n        if (container) {\n            container.clear();\n        }\n        if (geometryLabel) {\n            geometryLabel.clear();\n        }\n        if (offscreenGroup) {\n            offscreenGroup.clear();\n        }\n        // 属性恢复至出厂状态\n        this.scaleDefs = undefined;\n        this.attributes = {};\n        this.scales = {};\n        this.elementsMap = {};\n        this.lastElementsMap = {};\n        this.elements = [];\n        this.adjusts = {};\n        this.dataArray = null;\n        this.beforeMappingData = null;\n        this.lastAttributeOption = undefined;\n        this.defaultSize = undefined;\n        this.idFields = [];\n        this.groupScales = undefined;\n        this.hasSorted = false;\n        this.isCoordinateChanged = false;\n    };\n    /**\n     * 销毁 Geometry 实例。\n     */\n    Geometry.prototype.destroy = function () {\n        this.clear();\n        var container = this.container;\n        container.remove(true);\n        if (this.offscreenGroup) {\n            this.offscreenGroup.remove(true);\n            this.offscreenGroup = null;\n        }\n        if (this.geometryLabel) {\n            this.geometryLabel.destroy();\n            this.geometryLabel = null;\n        }\n        this.theme = undefined;\n        this.shapeFactory = undefined;\n        _super.prototype.destroy.call(this);\n    };\n    /**\n     * 获取决定分组的图形属性对应的 scale 实例。\n     * @returns\n     */\n    Geometry.prototype.getGroupScales = function () {\n        return this.groupScales;\n    };\n    /**\n     * 根据名字获取图形属性实例。\n     */\n    Geometry.prototype.getAttribute = function (name) {\n        return this.attributes[name];\n    };\n    /** 获取 x 轴对应的 scale 实例。 */\n    Geometry.prototype.getXScale = function () {\n        return this.getAttribute('position').scales[0];\n    };\n    /** 获取 y 轴对应的 scale 实例。 */\n    Geometry.prototype.getYScale = function () {\n        return this.getAttribute('position').scales[1];\n    };\n    /**\n     * 获取决定分组的图形属性实例。\n     */\n    Geometry.prototype.getGroupAttributes = function () {\n        var rst = [];\n        each(this.attributes, function (attr) {\n            if (GROUP_ATTRS.includes(attr.type)) {\n                rst.push(attr);\n            }\n        });\n        return rst;\n    };\n    /** 获取图形属性默认的映射值。 */\n    Geometry.prototype.getDefaultValue = function (attrName) {\n        var value;\n        var attr = this.getAttribute(attrName);\n        if (attr && isEmpty(attr.scales)) {\n            // 获取映射至常量的值\n            value = attr.values[0];\n        }\n        return value;\n    };\n    /**\n     * 获取该数据发生图形映射后对应的 Attribute 图形空间数据。\n     * @param attr Attribute 图形属性实例。\n     * @param obj 需要进行映射的原始数据。\n     * @returns\n     */\n    Geometry.prototype.getAttributeValues = function (attr, obj) {\n        var params = [];\n        var scales = attr.scales;\n        for (var index = 0, length_1 = scales.length; index < length_1; index++) {\n            var scale = scales[index];\n            var field = scale.field;\n            if (scale.isIdentity) {\n                params.push(scale.values);\n            }\n            else {\n                params.push(obj[field]);\n            }\n        }\n        return attr.mapping.apply(attr, __spreadArray([], __read(params), false));\n    };\n    /**\n     * 获取对应的 adjust 实例\n     * @param adjustType\n     * @returns\n     */\n    Geometry.prototype.getAdjust = function (adjustType) {\n        return this.adjusts[adjustType];\n    };\n    /**\n     * 获得 coordinate 实例\n     * @returns\n     */\n    Geometry.prototype.getCoordinate = function () {\n        return this.coordinate;\n    };\n    Geometry.prototype.getData = function () {\n        return this.data;\n    };\n    /**\n     * 获取 shape 对应的 marker 样式。\n     * @param shapeName shape 具体名字\n     * @param cfg marker 信息\n     * @returns\n     */\n    Geometry.prototype.getShapeMarker = function (shapeName, cfg) {\n        var shapeFactory = this.getShapeFactory();\n        return shapeFactory.getMarker(shapeName, cfg);\n    };\n    /**\n     * 根据一定的规则查找 Geometry 的 Elements。\n     *\n     * ```typescript\n     * getElementsBy((element) => {\n     *   const data = element.getData();\n     *\n     *   return data.a === 'a';\n     * });\n     * ```\n     *\n     * @param condition 定义查找规则的回调函数。\n     * @returns\n     */\n    Geometry.prototype.getElementsBy = function (condition) {\n        return this.elements.filter(function (element) { return condition(element); });\n    };\n    /**\n     * 获取 Geometry 的所有 Elements。\n     *\n     * ```typescript\n     * getElements();\n     * ```\n     */\n    Geometry.prototype.getElements = function () {\n        return this.elements;\n    };\n    /**\n     * 获取数据对应的唯一 id。\n     * @param data Element 对应的绘制数据\n     * @returns\n     */\n    Geometry.prototype.getElementId = function (data) {\n        data = isArray(data) ? data[0] : data;\n        var originData = data[FIELD_ORIGIN];\n        // 如果用户声明了使用哪些字段作为 id 值\n        if (this.idFields.length) {\n            var elementId = originData[this.idFields[0]];\n            for (var index = 1; index < this.idFields.length; index++) {\n                elementId += '-' + originData[this.idFields[index]];\n            }\n            return elementId;\n        }\n        var type = this.type;\n        var xScale = this.getXScale();\n        var yScale = this.getYScale();\n        var xField = xScale.field || 'x';\n        var yField = yScale.field || 'y';\n        var yVal = originData[yField];\n        var xVal;\n        if (xScale.type === 'identity') {\n            xVal = xScale.values[0];\n        }\n        else {\n            xVal = originData[xField];\n        }\n        var id;\n        if (type === 'interval' || type === 'schema') {\n            id = \"\".concat(xVal);\n        }\n        else if (type === 'line' || type === 'area' || type === 'path') {\n            id = type;\n        }\n        else {\n            id = \"\".concat(xVal, \"-\").concat(yVal);\n        }\n        var groupScales = this.groupScales;\n        for (var index = 0, length_2 = groupScales.length; index < length_2; index++) {\n            var groupScale = groupScales[index];\n            var field = groupScale.field;\n            id = \"\".concat(id, \"-\").concat(originData[field]);\n        }\n        // 用户在进行 dodge 类型的 adjust 调整的时候设置了 dodgeBy 属性\n        var dodgeAdjust = this.getAdjust('dodge');\n        if (dodgeAdjust) {\n            var dodgeBy = dodgeAdjust.dodgeBy;\n            if (dodgeBy) {\n                id = \"\".concat(id, \"-\").concat(originData[dodgeBy]);\n            }\n        }\n        if (this.getAdjust('jitter')) {\n            id = \"\".concat(id, \"-\").concat(data.x, \"-\").concat(data.y);\n        }\n        return id;\n    };\n    /**\n     * 获取所有需要创建 scale 的字段名称。\n     */\n    Geometry.prototype.getScaleFields = function () {\n        var fields = [];\n        var tmpMap = new Map();\n        var _a = this, attributeOption = _a.attributeOption, labelOption = _a.labelOption, tooltipOption = _a.tooltipOption;\n        // 获取图形属性上的 fields\n        for (var attributeType in attributeOption) {\n            if (attributeOption.hasOwnProperty(attributeType)) {\n                var eachOpt = attributeOption[attributeType];\n                if (eachOpt.fields) {\n                    uniq(eachOpt.fields, fields, tmpMap);\n                }\n                else if (eachOpt.values) {\n                    // 考虑 size(10), shape('circle') 等场景\n                    uniq(eachOpt.values, fields, tmpMap);\n                }\n            }\n        }\n        // 获取 label 上的字段\n        if (labelOption && labelOption.fields) {\n            uniq(labelOption.fields, fields, tmpMap);\n        }\n        // 获取 tooltip 上的字段\n        if (isObject(tooltipOption) && tooltipOption.fields) {\n            uniq(tooltipOption.fields, fields, tmpMap);\n        }\n        return fields;\n    };\n    /**\n     * 显示或者隐藏 geometry。\n     * @param visible\n     */\n    Geometry.prototype.changeVisible = function (visible) {\n        _super.prototype.changeVisible.call(this, visible);\n        var elements = this.elements;\n        for (var index = 0, length_3 = elements.length; index < length_3; index++) {\n            var element = elements[index];\n            element.changeVisible(visible);\n        }\n        if (visible) {\n            if (this.container) {\n                this.container.show();\n            }\n            if (this.labelsContainer) {\n                this.labelsContainer.show();\n            }\n        }\n        else {\n            if (this.container) {\n                this.container.hide();\n            }\n            if (this.labelsContainer) {\n                this.labelsContainer.hide();\n            }\n        }\n    };\n    /**\n     * 获得所有的字段\n     */\n    Geometry.prototype.getFields = function () {\n        var uniqMap = new Map();\n        var fields = [];\n        Object.values(this.attributeOption).forEach(function (cfg) {\n            var fs = (cfg === null || cfg === void 0 ? void 0 : cfg.fields) || [];\n            fs.forEach(function (f) {\n                if (!uniqMap.has(f)) {\n                    fields.push(f);\n                }\n                uniqMap.set(f, true);\n            });\n        }, []);\n        return fields;\n    };\n    /**\n     * 获取当前配置中的所有分组 & 分类的字段。\n     * @return fields string[]\n     */\n    Geometry.prototype.getGroupFields = function () {\n        var groupFields = [];\n        var tmpMap = new Map(); // 用于去重过滤\n        for (var index = 0, length_4 = GROUP_ATTRS.length; index < length_4; index++) {\n            var attributeName = GROUP_ATTRS[index];\n            var cfg = this.attributeOption[attributeName];\n            if (cfg && cfg.fields) {\n                uniq(cfg.fields, groupFields, tmpMap);\n            }\n        }\n        return groupFields;\n    };\n    /**\n     * 获得图形的 x y 字段。\n     */\n    Geometry.prototype.getXYFields = function () {\n        var _a = __read(this.attributeOption.position.fields, 2), x = _a[0], y = _a[1];\n        return [x, y];\n    };\n    /**\n     * x 字段\n     * @returns\n     */\n    Geometry.prototype.getXField = function () {\n        return get(this.getXYFields(), [0]);\n    };\n    /**\n     * y 字段\n     * @returns\n     */\n    Geometry.prototype.getYField = function () {\n        return get(this.getXYFields(), [1]);\n    };\n    /**\n     * 获取该 Geometry 下所有生成的 shapes。\n     * @returns shapes\n     */\n    Geometry.prototype.getShapes = function () {\n        return this.elements.map(function (element) { return element.shape; });\n    };\n    /**\n     * 获取虚拟 Group。\n     * @returns\n     */\n    Geometry.prototype.getOffscreenGroup = function () {\n        if (!this.offscreenGroup) {\n            var GroupCtor = this.container.getGroupBase(); // 获取分组的构造函数\n            this.offscreenGroup = new GroupCtor({});\n        }\n        return this.offscreenGroup;\n    };\n    // 对数据进行排序\n    Geometry.prototype.sort = function (mappingArray) {\n        if (!this.hasSorted) {\n            // 未发生过排序\n            var xScale_1 = this.getXScale();\n            var xField_1 = xScale_1.field;\n            for (var index = 0; index < mappingArray.length; index++) {\n                var itemArr = mappingArray[index];\n                itemArr.sort(function (obj1, obj2) {\n                    return xScale_1.translate(obj1[FIELD_ORIGIN][xField_1]) - xScale_1.translate(obj2[FIELD_ORIGIN][xField_1]);\n                });\n            }\n        }\n        this.hasSorted = true;\n    };\n    /**\n     * 调整度量范围。主要针对发生层叠以及一些特殊需求的 Geometry，比如 Interval 下的柱状图 Y 轴默认从 0 开始。\n     */\n    Geometry.prototype.adjustScale = function () {\n        var yScale = this.getYScale();\n        // 如果数据发生过 stack adjust，需要调整下 yScale 的数据范围\n        if (yScale && this.getAdjust('stack')) {\n            this.updateStackRange(yScale, this.beforeMappingData);\n        }\n    };\n    /**\n     * 获取当前 Geometry 对应的 Shape 工厂实例。\n     */\n    Geometry.prototype.getShapeFactory = function () {\n        var shapeType = this.shapeType;\n        if (!getShapeFactory(shapeType)) {\n            return;\n        }\n        if (!this.shapeFactory) {\n            this.shapeFactory = clone(getShapeFactory(shapeType)); // 防止多个 view 共享一个 shapeFactory 实例，导致 coordinate 被篡改\n        }\n        // 因为这里缓存了 shapeFactory，但是外部可能会变更 coordinate，导致无法重新设置到 shapeFactory 中\n        this.shapeFactory.coordinate = this.coordinate;\n        // theme 原因同上\n        this.shapeFactory.theme = this.theme.geometries[shapeType] || {};\n        return this.shapeFactory;\n    };\n    /**\n     * 获取每个 Shape 对应的关键点数据。\n     * @param obj 经过分组 -> 数字化 -> adjust 调整后的数据记录\n     * @returns\n     */\n    Geometry.prototype.createShapePointsCfg = function (obj) {\n        var xScale = this.getXScale();\n        var yScale = this.getYScale();\n        var x = this.normalizeValues(obj[xScale.field], xScale);\n        var y; // 存在没有 y 的情况\n        if (yScale) {\n            y = this.normalizeValues(obj[yScale.field], yScale);\n        }\n        else {\n            y = obj.y ? obj.y : 0.1;\n        }\n        return {\n            x: x,\n            y: y,\n            y0: yScale ? yScale.scale(this.getYMinValue()) : undefined,\n        };\n    };\n    /**\n     * 创建 Element 实例。\n     * @param mappingDatum Element 对应的绘制数据\n     * @param [isUpdate] 是否处于更新阶段\n     * @returns element 返回创建的 Element 实例\n     */\n    Geometry.prototype.createElement = function (mappingDatum, index, isUpdate) {\n        if (isUpdate === void 0) { isUpdate = false; }\n        var container = this.container;\n        var shapeCfg = this.getDrawCfg(mappingDatum); // 获取绘制图形的配置信息\n        var shapeFactory = this.getShapeFactory();\n        var element = new Element({\n            shapeFactory: shapeFactory,\n            container: container,\n            offscreenGroup: this.getOffscreenGroup(),\n            elementIndex: index,\n        });\n        element.animate = this.animateOption;\n        element.geometry = this;\n        element.draw(shapeCfg, isUpdate); // 绘制\n        return element;\n    };\n    /**\n     * 获取每条数据对应的图形绘制数据。\n     * @param mappingDatum 映射后的数据\n     * @returns draw cfg\n     */\n    Geometry.prototype.getDrawCfg = function (mappingDatum) {\n        var originData = mappingDatum[FIELD_ORIGIN]; // 原始数据\n        var cfg = {\n            mappingData: mappingDatum,\n            data: originData,\n            x: mappingDatum.x,\n            y: mappingDatum.y,\n            color: mappingDatum.color,\n            size: mappingDatum.size,\n            isInCircle: this.coordinate.isPolar,\n            customInfo: this.customOption,\n        };\n        var shapeName = mappingDatum.shape;\n        if (!shapeName && this.getShapeFactory()) {\n            shapeName = this.getShapeFactory().defaultShapeType;\n        }\n        cfg.shape = shapeName;\n        // 获取默认样式\n        var theme = this.theme.geometries[this.shapeType];\n        cfg.defaultStyle = get(theme, [shapeName, 'default'], {}).style;\n        if (!cfg.defaultStyle && this.getShapeFactory()) {\n            cfg.defaultStyle = this.getShapeFactory().getDefaultStyle(theme);\n        }\n        var styleOption = this.styleOption;\n        if (styleOption) {\n            cfg.style = this.getStyleCfg(styleOption, originData);\n        }\n        if (this.generatePoints) {\n            cfg.points = mappingDatum.points;\n            cfg.nextPoints = mappingDatum.nextPoints;\n        }\n        return cfg;\n    };\n    Geometry.prototype.updateElements = function (mappingDataArray, isUpdate) {\n        var e_1, _a, e_2, _b, e_3, _c;\n        if (isUpdate === void 0) { isUpdate = false; }\n        var keyDatum = new Map();\n        var keys = [];\n        // 用来保持 diff 元素之后 added, updated 的相对顺序\n        var keyIndex = new Map();\n        var index = 0;\n        // 获得更新数据所有的 keys\n        // 将更新的数据用 key 索引\n        for (var i = 0; i < mappingDataArray.length; i++) {\n            var mappingData = mappingDataArray[i];\n            for (var j = 0; j < mappingData.length; j++) {\n                var mappingDatum = mappingData[j];\n                var key = this.getElementId(mappingDatum);\n                var finalKey = keyDatum.has(key) ? \"\".concat(key, \"-\").concat(i, \"-\").concat(j) : key;\n                keys.push(finalKey);\n                keyDatum.set(finalKey, mappingDatum);\n                keyIndex.set(finalKey, index);\n                index++;\n            }\n        }\n        this.elements = new Array(index);\n        var _d = diff(this.lastElementsMap, keys), added = _d.added, updated = _d.updated, removed = _d.removed;\n        try {\n            // 新建 element\n            for (var added_1 = __values(added), added_1_1 = added_1.next(); !added_1_1.done; added_1_1 = added_1.next()) {\n                var key = added_1_1.value;\n                var mappingDatum = keyDatum.get(key);\n                var i = keyIndex.get(key);\n                var element = this.createElement(mappingDatum, i, isUpdate);\n                this.elements[i] = element;\n                this.elementsMap[key] = element;\n                if (element.shape) {\n                    element.shape.set('zIndex', this.zIndexReversed ? this.elements.length - i : i);\n                }\n            }\n        }\n        catch (e_1_1) { e_1 = { error: e_1_1 }; }\n        finally {\n            try {\n                if (added_1_1 && !added_1_1.done && (_a = added_1.return)) _a.call(added_1);\n            }\n            finally { if (e_1) throw e_1.error; }\n        }\n        try {\n            // 更新 element\n            for (var updated_1 = __values(updated), updated_1_1 = updated_1.next(); !updated_1_1.done; updated_1_1 = updated_1.next()) {\n                var key = updated_1_1.value;\n                var element = this.lastElementsMap[key];\n                var mappingDatum = keyDatum.get(key);\n                var currentShapeCfg = this.getDrawCfg(mappingDatum);\n                var preShapeCfg = element.getModel();\n                var i = keyIndex.get(key);\n                if (this.isCoordinateChanged || isModelChange(currentShapeCfg, preShapeCfg)) {\n                    element.animate = this.animateOption;\n                    // 通过绘制数据的变更来判断是否需要更新，因为用户有可能会修改图形属性映射\n                    element.update(currentShapeCfg); // 更新对应的 element\n                }\n                this.elements[i] = element;\n                this.elementsMap[key] = element;\n                if (element.shape) {\n                    element.shape.set('zIndex', this.zIndexReversed ? this.elements.length - i : i);\n                }\n            }\n        }\n        catch (e_2_1) { e_2 = { error: e_2_1 }; }\n        finally {\n            try {\n                if (updated_1_1 && !updated_1_1.done && (_b = updated_1.return)) _b.call(updated_1);\n            }\n            finally { if (e_2) throw e_2.error; }\n        }\n        // 全部 setZIndex 之后，再执行 sort\n        if (this.container) {\n            this.container.sort();\n        }\n        try {\n            // 销毁被删除的 elements\n            for (var removed_1 = __values(removed), removed_1_1 = removed_1.next(); !removed_1_1.done; removed_1_1 = removed_1.next()) {\n                var key = removed_1_1.value;\n                var element = this.lastElementsMap[key];\n                // 更新动画配置，用户有可能在更新之前有对动画进行配置操作\n                element.animate = this.animateOption;\n                element.destroy();\n            }\n        }\n        catch (e_3_1) { e_3 = { error: e_3_1 }; }\n        finally {\n            try {\n                if (removed_1_1 && !removed_1_1.done && (_c = removed_1.return)) _c.call(removed_1);\n            }\n            finally { if (e_3) throw e_3.error; }\n        }\n    };\n    /**\n     * 获取渲染的 label 类型。\n     */\n    Geometry.prototype.getLabelType = function () {\n        var _a = this, labelOption = _a.labelOption, coordinate = _a.coordinate, type = _a.type;\n        var coordinateType = coordinate.type, isTransposed = coordinate.isTransposed;\n        var labelType = get(labelOption, ['cfg', 'type']);\n        if (!labelType) {\n            // 用户未定义，则进行默认的逻辑\n            if (coordinateType === 'polar') {\n                // 极坐标下使用通用的极坐标文本，转置则使用饼图\n                labelType = isTransposed ? 'pie' : 'polar';\n            }\n            else if (coordinateType === 'theta') {\n                // theta 坐标系下使用饼图文本\n                labelType = 'pie';\n            }\n            else if (type === 'interval' || type === 'polygon') {\n                labelType = 'interval';\n            }\n            else {\n                labelType = 'base';\n            }\n        }\n        return labelType;\n    };\n    /**\n     * 获取 Y 轴上的最小值。\n     */\n    Geometry.prototype.getYMinValue = function () {\n        var yScale = this.getYScale();\n        var min = yScale.min, max = yScale.max;\n        var value;\n        if (min >= 0) {\n            value = min;\n        }\n        else if (max <= 0) {\n            // 当值全位于负区间时，需要保证 ymin 在区域内，不可为 0\n            value = max;\n        }\n        else {\n            value = 0;\n        }\n        return value;\n    };\n    // 创建图形属性相关的配置项\n    Geometry.prototype.createAttrOption = function (attrName, field, cfg) {\n        if (isNil(field) || isObject(field)) {\n            if (isObject(field) && isEqual(Object.keys(field), ['values'])) {\n                // shape({ values: [ 'funnel' ] })\n                set(this.attributeOption, attrName, {\n                    fields: field.values,\n                });\n            }\n            else {\n                set(this.attributeOption, attrName, field);\n            }\n        }\n        else {\n            var attrCfg = {};\n            if (isNumber(field)) {\n                // size(3)\n                attrCfg.values = [field];\n            }\n            else {\n                attrCfg.fields = parseFields(field);\n            }\n            if (cfg) {\n                if (isFunction(cfg)) {\n                    attrCfg.callback = cfg;\n                }\n                else {\n                    attrCfg.values = cfg;\n                }\n            }\n            set(this.attributeOption, attrName, attrCfg);\n        }\n    };\n    Geometry.prototype.initAttributes = function () {\n        var _this = this;\n        var _a = this, attributes = _a.attributes, attributeOption = _a.attributeOption, theme = _a.theme, shapeType = _a.shapeType;\n        this.groupScales = [];\n        var tmpMap = {};\n        var _loop_1 = function (attrType) {\n            if (attributeOption.hasOwnProperty(attrType)) {\n                var option = attributeOption[attrType];\n                if (!option) {\n                    return { value: void 0 };\n                }\n                var attrCfg = __assign({}, option);\n                var callback = attrCfg.callback, values = attrCfg.values, _b = attrCfg.fields, fields = _b === void 0 ? [] : _b;\n                // 获取每一个字段对应的 scale\n                var scales = fields.map(function (field) {\n                    var scale = _this.scales[field];\n                    if (!tmpMap[field] && GROUP_ATTRS.includes(attrType)) {\n                        var inferedScaleType = inferScaleType(scale, get(_this.scaleDefs, field), attrType, _this.type);\n                        if (inferedScaleType === 'cat') {\n                            _this.groupScales.push(scale);\n                            tmpMap[field] = true;\n                        }\n                    }\n                    return scale;\n                });\n                attrCfg.scales = scales;\n                if (attrType !== 'position' && scales.length === 1 && scales[0].type === 'identity') {\n                    // 用户在图形通道上声明了常量字段 color('red'), size(5)\n                    attrCfg.values = scales[0].values;\n                }\n                else if (!callback && !values) {\n                    // 用户没有指定任何规则，则使用默认的映射规则\n                    if (attrType === 'size') {\n                        attrCfg.values = theme.sizes;\n                    }\n                    else if (attrType === 'shape') {\n                        attrCfg.values = theme.shapes[shapeType] || [];\n                    }\n                    else if (attrType === 'color') {\n                        if (scales.length) {\n                            // 根据数值个数使用对应的色板\n                            attrCfg.values = scales[0].values.length <= 10 ? theme.colors10 : theme.colors20;\n                        }\n                        else {\n                            attrCfg.values = theme.colors10;\n                        }\n                    }\n                }\n                var AttributeCtor = getAttributeClass(attrType);\n                attributes[attrType] = new AttributeCtor(attrCfg);\n            }\n        };\n        // 遍历每一个 attrOption，各自创建 Attribute 实例\n        for (var attrType in attributeOption) {\n            var state_1 = _loop_1(attrType);\n            if (typeof state_1 === \"object\")\n                return state_1.value;\n        }\n    };\n    // 处理数据：分组 -> 数字化 -> adjust 调整\n    Geometry.prototype.processData = function (data) {\n        var e_4, _a;\n        this.hasSorted = false;\n        var scales = this.getAttribute('position').scales;\n        var categoryScales = scales.filter(function (scale) { return scale.isCategory; });\n        var groupedArray = this.groupData(data); // 数据分组\n        var beforeAdjust = [];\n        for (var i = 0, len = groupedArray.length; i < len; i++) {\n            var subData = groupedArray[i];\n            var arr = [];\n            for (var j = 0, subLen = subData.length; j < subLen; j++) {\n                var originData = subData[j];\n                var item = {};\n                // tslint:disable-next-line: forin\n                for (var k in originData) {\n                    item[k] = originData[k];\n                }\n                item[FIELD_ORIGIN] = originData;\n                try {\n                    // 将分类数据翻译成数据, 仅对位置相关的度量进行数字化处理\n                    for (var categoryScales_1 = (e_4 = void 0, __values(categoryScales)), categoryScales_1_1 = categoryScales_1.next(); !categoryScales_1_1.done; categoryScales_1_1 = categoryScales_1.next()) {\n                        var scale = categoryScales_1_1.value;\n                        var field = scale.field;\n                        item[field] = scale.translate(item[field]);\n                    }\n                }\n                catch (e_4_1) { e_4 = { error: e_4_1 }; }\n                finally {\n                    try {\n                        if (categoryScales_1_1 && !categoryScales_1_1.done && (_a = categoryScales_1.return)) _a.call(categoryScales_1);\n                    }\n                    finally { if (e_4) throw e_4.error; }\n                }\n                arr.push(item);\n            }\n            beforeAdjust.push(arr);\n        }\n        var dataArray = this.adjustData(beforeAdjust); // 进行 adjust 数据调整\n        this.beforeMappingData = dataArray;\n        return dataArray;\n    };\n    // 调整数据\n    Geometry.prototype.adjustData = function (dataArray) {\n        var adjustOption = this.adjustOption;\n        var _a = this, intervalPadding = _a.intervalPadding, dodgePadding = _a.dodgePadding, theme = _a.theme;\n        // 兼容theme配置\n        var maxColumnWidth = this.maxColumnWidth || theme.maxColumnWidth;\n        var minColumnWidth = this.minColumnWidth || theme.minColumnWidth;\n        var columnWidthRatio = this.columnWidthRatio || theme.columnWidthRatio;\n        var result = dataArray;\n        if (adjustOption) {\n            var xScale_2 = this.getXScale();\n            var yScale = this.getYScale();\n            var xField = xScale_2.field;\n            var yField = yScale ? yScale.field : null;\n            var xDimensionLength = getXDimensionLength(this.coordinate);\n            var groupNum = xScale_2.values.length;\n            // 传入size计算相关参数，默认宽度、最大最小宽度约束\n            var sizeAttr = this.getAttribute('size');\n            var defaultSize = void 0;\n            if (sizeAttr) {\n                defaultSize = sizeAttr.values[0];\n            }\n            for (var i = 0, len = adjustOption.length; i < len; i++) {\n                var adjust = adjustOption[i];\n                var adjustCfg = __assign({ xField: xField, yField: yField, intervalPadding: intervalPadding, dodgePadding: dodgePadding, xDimensionLength: xDimensionLength, groupNum: groupNum, defaultSize: defaultSize, maxColumnWidth: maxColumnWidth, minColumnWidth: minColumnWidth, columnWidthRatio: columnWidthRatio }, adjust);\n                var type = adjust.type;\n                if (type === 'dodge') {\n                    var adjustNames = [];\n                    if (xScale_2.isCategory || xScale_2.type === 'identity') {\n                        adjustNames.push('x');\n                    }\n                    else if (!yScale) {\n                        adjustNames.push('y');\n                    }\n                    else {\n                        throw new Error('dodge is not support linear attribute, please use category attribute!');\n                    }\n                    adjustCfg.adjustNames = adjustNames;\n                    // 每个分组内每条柱子的宽度占比，用户不可指定，用户需要通过 columnWidthRatio 指定\n                    // 兼容theme配置\n                    adjustCfg.dodgeRatio = columnWidthRatio;\n                }\n                else if (type === 'stack') {\n                    var coordinate = this.coordinate;\n                    if (!yScale) {\n                        // 一维的情况下获取高度和默认size\n                        adjustCfg.height = coordinate.getHeight();\n                        var size = this.getDefaultValue('size') || 3;\n                        adjustCfg.size = size;\n                    }\n                    // 不进行 transpose 时，用户又没有设置这个参数时，默认从上向下\n                    if (!coordinate.isTransposed && isNil(adjustCfg.reverseOrder)) {\n                        adjustCfg.reverseOrder = true;\n                    }\n                }\n                var adjustCtor = getAdjustClass(type);\n                adjustCfg.dimValuesMap = {};\n                //生成dimValuesMap\n                if (xScale_2 && xScale_2.values) {\n                    adjustCfg.dimValuesMap[xScale_2.field] = xScale_2.values.map(function (v) { return xScale_2.translate(v); });\n                }\n                var adjustInstance = new adjustCtor(adjustCfg);\n                result = adjustInstance.process(result);\n                this.adjusts[type] = adjustInstance;\n            }\n        }\n        return result;\n    };\n    // 对数据进行分组\n    Geometry.prototype.groupData = function (data) {\n        var groupScales = this.getGroupScales();\n        var scaleDefs = this.scaleDefs;\n        var appendConditions = {};\n        var groupFields = [];\n        for (var index = 0; index < groupScales.length; index++) {\n            var scale = groupScales[index];\n            var field = scale.field;\n            groupFields.push(field);\n            if (get(scaleDefs, [field, 'values'])) {\n                // 用户通过 view.scale() 接口指定了 values 属性\n                appendConditions[field] = scaleDefs[field].values;\n            }\n        }\n        return group(data, groupFields, appendConditions);\n    };\n    // 更新发生层叠后的数据对应的度量范围\n    Geometry.prototype.updateStackRange = function (scale, dataArray) {\n        var mergeArray = flatten(dataArray);\n        var field = scale.field;\n        var min = scale.min;\n        var max = scale.max;\n        for (var index = 0; index < mergeArray.length; index++) {\n            var obj = mergeArray[index];\n            var tmpMin = Math.min.apply(null, obj[field]);\n            var tmpMax = Math.max.apply(null, obj[field]);\n            if (tmpMin < min) {\n                min = tmpMin;\n            }\n            if (tmpMax > max) {\n                max = tmpMax;\n            }\n        }\n        var scaleDefs = this.scaleDefs;\n        var cfg = {};\n        if (min < scale.min && !get(scaleDefs, [field, 'min'])) {\n            // 用户如果在列定义中定义了 min，则以用户定义的为准\n            cfg.min = min;\n        }\n        if (max > scale.max && !get(scaleDefs, [field, 'max'])) {\n            // 用户如果在列定义中定义了 max\n            cfg.max = max;\n        }\n        scale.change(cfg);\n    };\n    // 将数据映射至图形空间前的操作：排序以及关键点的生成\n    Geometry.prototype.beforeMapping = function (beforeMappingData) {\n        // 当初加 clone 是因为 points 的引用关系，导致更新失败，可是现在貌似复现不出来了，所以暂时不进行 clone\n        // const source = clone(beforeMappingData);\n        var source = beforeMappingData;\n        if (this.sortable) {\n            this.sort(source);\n        }\n        if (this.generatePoints) {\n            // 需要生成关键点\n            for (var index = 0, length_5 = source.length; index < length_5; index++) {\n                var currentData = source[index];\n                this.generateShapePoints(currentData);\n                var nextData = source[index + 1];\n                if (nextData) {\n                    this.generateShapePoints(nextData);\n                    currentData[0].nextPoints = nextData[0].points;\n                }\n            }\n        }\n        return source;\n    };\n    // 生成 shape 的关键点\n    Geometry.prototype.generateShapePoints = function (data) {\n        var shapeFactory = this.getShapeFactory();\n        var shapeAttr = this.getAttribute('shape');\n        for (var index = 0; index < data.length; index++) {\n            var obj = data[index];\n            var cfg = this.createShapePointsCfg(obj);\n            var shape = shapeAttr ? this.getAttributeValues(shapeAttr, obj) : null;\n            var points = shapeFactory.getShapePoints(shape, cfg);\n            obj.points = points;\n        }\n    };\n    // 将数据归一化\n    Geometry.prototype.normalizeValues = function (values, scale) {\n        var rst = [];\n        if (isArray(values)) {\n            for (var index = 0; index < values.length; index++) {\n                var value = values[index];\n                rst.push(scale.scale(value));\n            }\n        }\n        else {\n            rst = scale.scale(values);\n        }\n        return rst;\n    };\n    // 将数据映射至图形空间\n    Geometry.prototype.mapping = function (data) {\n        var attributes = this.attributes;\n        var mappingData = [];\n        for (var index = 0; index < data.length; index++) {\n            var record = data[index];\n            var newRecord = {\n                _origin: record[FIELD_ORIGIN],\n                points: record.points,\n                nextPoints: record.nextPoints,\n            };\n            for (var k in attributes) {\n                if (attributes.hasOwnProperty(k)) {\n                    var attr = attributes[k];\n                    var names = attr.names;\n                    var values = this.getAttributeValues(attr, record);\n                    if (names.length > 1) {\n                        // position 之类的生成多个字段的属性\n                        for (var j = 0; j < values.length; j += 1) {\n                            var val = values[j];\n                            var name_1 = names[j];\n                            newRecord[name_1] = isArray(val) && val.length === 1 ? val[0] : val; // 只有一个值时返回第一个属性值\n                        }\n                    }\n                    else {\n                        // values.length === 1 的判断是以下情况，获取用户设置的图形属性值\n                        // shape('a', ['dot', 'dash']), color('a', ['red', 'yellow'])\n                        newRecord[names[0]] = values.length === 1 ? values[0] : values;\n                    }\n                }\n            }\n            this.convertPoint(newRecord); // 将 x、y 转换成画布坐标\n            mappingData.push(newRecord);\n        }\n        return mappingData;\n    };\n    // 将归一化的坐标值转换成画布坐标\n    Geometry.prototype.convertPoint = function (mappingRecord) {\n        var x = mappingRecord.x, y = mappingRecord.y;\n        var rstX;\n        var rstY;\n        var obj;\n        var coordinate = this.coordinate;\n        if (isArray(x) && isArray(y)) {\n            rstX = [];\n            rstY = [];\n            for (var i = 0, j = 0, xLen = x.length, yLen = y.length; i < xLen && j < yLen; i += 1, j += 1) {\n                obj = coordinate.convert({\n                    x: x[i],\n                    y: y[j],\n                });\n                rstX.push(obj.x);\n                rstY.push(obj.y);\n            }\n        }\n        else if (isArray(y)) {\n            rstY = [];\n            for (var index = 0; index < y.length; index++) {\n                var yVal = y[index];\n                obj = coordinate.convert({\n                    x: x,\n                    y: yVal,\n                });\n                if (rstX && rstX !== obj.x) {\n                    if (!isArray(rstX)) {\n                        rstX = [rstX];\n                    }\n                    rstX.push(obj.x);\n                }\n                else {\n                    rstX = obj.x;\n                }\n                rstY.push(obj.y);\n            }\n        }\n        else if (isArray(x)) {\n            rstX = [];\n            for (var index = 0; index < x.length; index++) {\n                var xVal = x[index];\n                obj = coordinate.convert({\n                    x: xVal,\n                    y: y,\n                });\n                if (rstY && rstY !== obj.y) {\n                    if (!isArray(rstY)) {\n                        rstY = [rstY];\n                    }\n                    rstY.push(obj.y);\n                }\n                else {\n                    rstY = obj.y;\n                }\n                rstX.push(obj.x);\n            }\n        }\n        else {\n            var point = coordinate.convert({\n                x: x,\n                y: y,\n            });\n            rstX = point.x;\n            rstY = point.y;\n        }\n        mappingRecord.x = rstX;\n        mappingRecord.y = rstY;\n    };\n    // 获取 style 配置\n    Geometry.prototype.getStyleCfg = function (styleOption, originData) {\n        var _a = styleOption.fields, fields = _a === void 0 ? [] : _a, callback = styleOption.callback, cfg = styleOption.cfg;\n        if (cfg) {\n            // 用户直接配置样式属性\n            return cfg;\n        }\n        var params = fields.map(function (field) {\n            return originData[field];\n        });\n        return callback.apply(void 0, __spreadArray([], __read(params), false));\n    };\n    Geometry.prototype.setCfg = function (cfg) {\n        var _this = this;\n        var coordinate = cfg.coordinate, data = cfg.data, theme = cfg.theme, scaleDefs = cfg.scaleDefs;\n        if (coordinate) {\n            this.coordinate = coordinate;\n        }\n        if (data) {\n            this.data = data;\n        }\n        if (scaleDefs) {\n            this.scaleDefs = scaleDefs;\n            this.idFields = [];\n            each(scaleDefs, function (scaleDef, field) {\n                if (scaleDef && scaleDef.key) {\n                    _this.idFields.push(field);\n                }\n            });\n        }\n        if (theme) {\n            this.theme = this.userTheme ? deepMix({}, theme, this.userTheme) : theme; // 支持 geometry 层级的主题设置\n        }\n    };\n    Geometry.prototype.renderLabels = function (mappingArray, isUpdate) {\n        if (isUpdate === void 0) { isUpdate = false; }\n        return __awaiter(this, void 0, void 0, function () {\n            var geometryLabel, labelType, GeometryLabelsCtor, labelsMap, elementLabels, _a, _b, _c, element, labels;\n            var e_5, _d;\n            var _this = this;\n            return __generator(this, function (_e) {\n                switch (_e.label) {\n                    case 0:\n                        geometryLabel = this.geometryLabel;\n                        this.emit(GEOMETRY_LIFE_CIRCLE.BEFORE_RENDER_LABEL);\n                        if (!geometryLabel) {\n                            labelType = this.getLabelType();\n                            GeometryLabelsCtor = getGeometryLabel(labelType);\n                            geometryLabel = new GeometryLabelsCtor(this);\n                            this.geometryLabel = geometryLabel;\n                        }\n                        return [4 /*yield*/, geometryLabel.render(mappingArray, isUpdate)];\n                    case 1:\n                        _e.sent();\n                        labelsMap = geometryLabel.labelsRenderer.shapesMap;\n                        elementLabels = new Map();\n                        each(labelsMap, function (labelGroup, labelGroupId) {\n                            var labelChildren = labelGroup.getChildren() || [];\n                            for (var j = 0; j < labelChildren.length; j++) {\n                                var labelShape = labelChildren[j];\n                                var element = _this.elementsMap[labelShape.get('elementId') || labelGroupId.split(' ')[0]];\n                                if (element) {\n                                    labelShape.cfg.name = ['element', 'label'];\n                                    labelShape.cfg.element = element;\n                                    var labels = elementLabels.get(element) || new Set();\n                                    labels.add(labelGroup);\n                                    elementLabels.set(element, labels);\n                                }\n                            }\n                        });\n                        try {\n                            for (_a = __values(elementLabels.entries()), _b = _a.next(); !_b.done; _b = _a.next()) {\n                                _c = __read(_b.value, 2), element = _c[0], labels = _c[1];\n                                element.labelShape = __spreadArray([], __read(labels), false);\n                            }\n                        }\n                        catch (e_5_1) { e_5 = { error: e_5_1 }; }\n                        finally {\n                            try {\n                                if (_b && !_b.done && (_d = _a.return)) _d.call(_a);\n                            }\n                            finally { if (e_5) throw e_5.error; }\n                        }\n                        this.emit(GEOMETRY_LIFE_CIRCLE.AFTER_RENDER_LABEL);\n                        return [2 /*return*/];\n                }\n            });\n        });\n    };\n    /**\n     * 是否需要进行群组入场动画\n     * 规则：\n     * 1. 如果发生更新，则不进行\n     * 2. 如果用户关闭 geometry 动画，则不进行\n     * 3. 如果用户关闭了 appear 动画，则不进行\n     * 4. 如果用户配置了 appear.animation，则不进行\n     */\n    Geometry.prototype.canDoGroupAnimation = function (isUpdate) {\n        return (!isUpdate &&\n            this.animateOption &&\n            (get(this.animateOption, 'appear') === undefined ||\n                (get(this.animateOption, 'appear') && get(this.animateOption, ['appear', 'animation']) === undefined)));\n    };\n    return Geometry;\n}(Base));\nexport default Geometry;\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}