{"ast":null,"code":"import { __extends, __read } from \"tslib\";\nimport { deepMix, each, find, get, head, isBoolean, last } from '@antv/util';\nimport { COMPONENT_MAX_VIEW_PERCENTAGE, COMPONENT_TYPE, DIRECTION, LAYER } from '../../constant';\nimport { CategoryLegend, ContinuousLegend } from '../../dependents';\nimport { DEFAULT_ANIMATE_CFG } from '../../animate';\nimport { BBox } from '../../util/bbox';\nimport { directionToPosition } from '../../util/direction';\nimport { omit } from '../../util/helper';\nimport { getCustomLegendItems, getLegendItems, getLegendLayout, getLegendThemeCfg } from '../../util/legend';\nimport { getName } from '../../util/scale';\nimport { Controller } from './base';\n/**\n * 从配置中获取单个字段的 legend 配置\n * @param legends\n * @param field\n * @returns the option of one legend field\n */\nfunction getLegendOption(legends, field) {\n  if (isBoolean(legends)) {\n    return legends === false ? false : {};\n  }\n  return get(legends, [field], legends);\n}\nfunction getDirection(legendOption) {\n  return get(legendOption, 'position', DIRECTION.BOTTOM);\n}\n/**\n * @ignore\n * legend Controller\n */\nvar Legend = /** @class */function (_super) {\n  __extends(Legend, _super);\n  function Legend(view) {\n    var _this = _super.call(this, view) || this;\n    _this.container = _this.view.getLayer(LAYER.FORE).addGroup();\n    return _this;\n  }\n  Object.defineProperty(Legend.prototype, \"name\", {\n    get: function () {\n      return 'legend';\n    },\n    enumerable: false,\n    configurable: true\n  });\n  Legend.prototype.init = function () {};\n  /**\n   * render the legend component by legend options\n   */\n  Legend.prototype.render = function () {\n    // 和 update 逻辑保持一致\n    this.update();\n  };\n  /**\n   * layout legend\n   * 计算出 legend 的 direction 位置 x, y\n   */\n  Legend.prototype.layout = function () {\n    var _this = this;\n    this.layoutBBox = this.view.viewBBox;\n    each(this.components, function (co) {\n      var component = co.component,\n        direction = co.direction;\n      var layout = getLegendLayout(direction);\n      var maxWidthRatio = component.get('maxWidthRatio');\n      var maxHeightRatio = component.get('maxHeightRatio');\n      var maxSize = _this.getCategoryLegendSizeCfg(layout, maxWidthRatio, maxHeightRatio);\n      var maxWidth = component.get('maxWidth');\n      var maxHeight = component.get('maxHeight');\n      // 先更新 maxSize，更新 layoutBBox，以便计算正确的 x y\n      component.update({\n        maxWidth: Math.min(maxSize.maxWidth, maxWidth || 0),\n        maxHeight: Math.min(maxSize.maxHeight, maxHeight || 0)\n      });\n      var padding = component.get('padding');\n      var bboxObject = component.getLayoutBBox(); // 这里只需要他的 width、height 信息做位置调整\n      var bbox = new BBox(bboxObject.x, bboxObject.y, bboxObject.width, bboxObject.height).expand(padding);\n      var _a = __read(directionToPosition(_this.view.viewBBox, bbox, direction), 2),\n        x1 = _a[0],\n        y1 = _a[1];\n      var _b = __read(directionToPosition(_this.layoutBBox, bbox, direction), 2),\n        x2 = _b[0],\n        y2 = _b[1];\n      var x = 0;\n      var y = 0;\n      // 因为 legend x y 要和 coordinateBBox 对齐，所以要做一个简单的判断\n      if (direction.startsWith('top') || direction.startsWith('bottom')) {\n        x = x1;\n        y = y2;\n      } else {\n        x = x2;\n        y = y1;\n      }\n      // 更新位置\n      component.setLocation({\n        x: x + padding[3],\n        y: y + padding[0]\n      });\n      _this.layoutBBox = _this.layoutBBox.cut(bbox, direction);\n    });\n  };\n  /**\n   * legend 的更新逻辑\n   */\n  Legend.prototype.update = function () {\n    var _this = this;\n    this.option = this.view.getOptions().legends;\n    // 已经处理过的 legend\n    var updated = {};\n    var eachLegend = function (geometry, attr, scale) {\n      var id = _this.getId(scale.field);\n      var existCo = _this.getComponentById(id);\n      // 存在则 update\n      if (existCo) {\n        var cfg = void 0;\n        var legendOption = getLegendOption(_this.option, scale.field);\n        // if the legend option is not false, means legend should be created.\n        if (legendOption !== false) {\n          if (get(legendOption, 'custom')) {\n            cfg = _this.getCategoryCfg(geometry, attr, scale, legendOption, true);\n          } else {\n            if (scale.isLinear) {\n              // linear field, create continuous legend\n              cfg = _this.getContinuousCfg(geometry, attr, scale, legendOption);\n            } else if (scale.isCategory) {\n              // category field, create category legend\n              cfg = _this.getCategoryCfg(geometry, attr, scale, legendOption);\n            }\n          }\n        }\n        // 如果 cfg 为空，则不在 updated 标记，那么会在后面逻辑中删除\n        if (cfg) {\n          // omit 掉一些属性，比如 container 等\n          omit(cfg, ['container']);\n          existCo.direction = getDirection(legendOption);\n          existCo.component.update(cfg);\n          // 标记为新的\n          updated[id] = true;\n        }\n      } else {\n        // 不存在则 create\n        var legend = _this.createFieldLegend(geometry, attr, scale);\n        if (legend) {\n          legend.component.init();\n          _this.components.push(legend);\n          // 标记为新的\n          updated[id] = true;\n        }\n      }\n    };\n    // 全局自定义图例\n    if (get(this.option, 'custom')) {\n      var id = 'global-custom';\n      var existCo = this.getComponentById(id);\n      if (existCo) {\n        var customCfg = this.getCategoryCfg(undefined, undefined, undefined, this.option, true);\n        omit(customCfg, ['container']);\n        existCo.component.update(customCfg);\n        updated[id] = true;\n      } else {\n        var component = this.createCustomLegend(undefined, undefined, undefined, this.option);\n        if (component) {\n          component.init();\n          var layer = LAYER.FORE;\n          var direction = getDirection(this.option);\n          this.components.push({\n            id: id,\n            component: component,\n            layer: layer,\n            direction: direction,\n            type: COMPONENT_TYPE.LEGEND,\n            extra: undefined\n          });\n          // 标记为更新\n          updated[id] = true;\n        }\n      }\n    } else {\n      // 遍历处理每一个创建逻辑\n      this.loopLegends(eachLegend);\n    }\n    // 处理完成之后，销毁删除的\n    // 不在处理中的\n    var components = [];\n    each(this.getComponents(), function (co) {\n      if (updated[co.id]) {\n        components.push(co);\n      } else {\n        co.component.destroy();\n      }\n    });\n    // 更新当前已有的 components\n    this.components = components;\n  };\n  Legend.prototype.clear = function () {\n    _super.prototype.clear.call(this);\n    this.container.clear();\n  };\n  Legend.prototype.destroy = function () {\n    _super.prototype.destroy.call(this);\n    this.container.remove(true);\n  };\n  /**\n   * 递归获取所有的 Geometry\n   */\n  Legend.prototype.getGeometries = function (view) {\n    var _this = this;\n    var geometries = view.geometries;\n    each(view.views, function (v) {\n      geometries = geometries.concat(_this.getGeometries(v));\n    });\n    return geometries;\n  };\n  /**\n   * 遍历 Geometry，处理 legend 逻辑\n   * @param doEach 每个 loop 中的处理方法\n   */\n  Legend.prototype.loopLegends = function (doEach) {\n    var isRootView = this.view.getRootView() === this.view;\n    // 非根 view，不处理 legend\n    if (!isRootView) {\n      return;\n    }\n    // 递归 view 中所有的 Geometry，进行创建 legend\n    var geometries = this.getGeometries(this.view);\n    var looped = {}; // 防止一个字段创建两个 legend\n    each(geometries, function (geometry) {\n      var attributes = geometry.getGroupAttributes();\n      each(attributes, function (attr) {\n        var scale = attr.getScale(attr.type);\n        // 如果在视觉通道上映射常量值，如 size(2) shape('circle') 不创建 legend\n        if (!scale || scale.type === 'identity' || looped[scale.field]) {\n          return;\n        }\n        doEach(geometry, attr, scale);\n        looped[scale.field] = true;\n      });\n    });\n  };\n  /**\n   * 创建一个 legend\n   * @param geometry\n   * @param attr\n   * @param scale\n   */\n  Legend.prototype.createFieldLegend = function (geometry, attr, scale) {\n    var component;\n    var legendOption = getLegendOption(this.option, scale.field);\n    var layer = LAYER.FORE;\n    var direction = getDirection(legendOption);\n    // if the legend option is not false, means legend should be created.\n    if (legendOption !== false) {\n      if (get(legendOption, 'custom')) {\n        component = this.createCustomLegend(geometry, attr, scale, legendOption);\n      } else {\n        if (scale.isLinear) {\n          // linear field, create continuous legend\n          component = this.createContinuousLegend(geometry, attr, scale, legendOption);\n        } else if (scale.isCategory) {\n          // category field, create category legend\n          component = this.createCategoryLegend(geometry, attr, scale, legendOption);\n        }\n      }\n    }\n    if (component) {\n      component.set('field', scale.field);\n      return {\n        id: this.getId(scale.field),\n        component: component,\n        layer: layer,\n        direction: direction,\n        type: COMPONENT_TYPE.LEGEND,\n        extra: {\n          scale: scale\n        }\n      };\n    }\n  };\n  /**\n   * 自定义图例使用 category 图例去渲染\n   * @param geometry\n   * @param attr\n   * @param scale\n   * @param legendOption\n   */\n  Legend.prototype.createCustomLegend = function (geometry, attr, scale, legendOption) {\n    // 直接使用 分类图例渲染\n    var cfg = this.getCategoryCfg(geometry, attr, scale, legendOption, true);\n    return new CategoryLegend(cfg);\n  };\n  /**\n   * 创建连续图例\n   * @param geometry\n   * @param attr\n   * @param scale\n   * @param legendOption\n   */\n  Legend.prototype.createContinuousLegend = function (geometry, attr, scale, legendOption) {\n    var cfg = this.getContinuousCfg(geometry, attr, scale, omit(legendOption, ['value']));\n    return new ContinuousLegend(cfg);\n  };\n  /**\n   * 创建分类图例\n   * @param geometry\n   * @param attr\n   * @param scale\n   * @param legendOption\n   */\n  Legend.prototype.createCategoryLegend = function (geometry, attr, scale, legendOption) {\n    var cfg = this.getCategoryCfg(geometry, attr, scale, legendOption);\n    return new CategoryLegend(cfg);\n  };\n  /**\n   * 获得连续图例的配置\n   * @param geometry\n   * @param attr\n   * @param scale\n   * @param legendOption\n   */\n  Legend.prototype.getContinuousCfg = function (geometry, attr, scale, legendOption) {\n    var ticks = scale.getTicks();\n    var containMin = find(ticks, function (tick) {\n      return tick.value === 0;\n    });\n    var containMax = find(ticks, function (tick) {\n      return tick.value === 1;\n    });\n    var items = ticks.map(function (tick) {\n      var value = tick.value,\n        tickValue = tick.tickValue;\n      var attrValue = attr.mapping(scale.invert(value)).join('');\n      return {\n        value: tickValue,\n        attrValue: attrValue,\n        color: attrValue,\n        scaleValue: value\n      };\n    });\n    if (!containMin) {\n      items.push({\n        value: scale.min,\n        attrValue: attr.mapping(scale.invert(0)).join(''),\n        color: attr.mapping(scale.invert(0)).join(''),\n        scaleValue: 0\n      });\n    }\n    if (!containMax) {\n      items.push({\n        value: scale.max,\n        attrValue: attr.mapping(scale.invert(1)).join(''),\n        color: attr.mapping(scale.invert(1)).join(''),\n        scaleValue: 1\n      });\n    }\n    // 排序\n    items.sort(function (a, b) {\n      return a.value - b.value;\n    });\n    // 跟 attr 相关的配置\n    // size color 区别的配置\n    var attrLegendCfg = {\n      min: head(items).value,\n      max: last(items).value,\n      colors: [],\n      rail: {\n        type: attr.type\n      },\n      track: {}\n    };\n    if (attr.type === 'size') {\n      attrLegendCfg.track = {\n        style: {\n          // size 的选中前景色，对于 color，则直接使用 color 标识\n          // @ts-ignore\n          fill: attr.type === 'size' ? this.view.getTheme().defaultColor : undefined\n        }\n      };\n    }\n    if (attr.type === 'color') {\n      attrLegendCfg.colors = items.map(function (item) {\n        return item.attrValue;\n      });\n    }\n    var container = this.container;\n    // if position is not set, use top as default\n    var direction = getDirection(legendOption);\n    var layout = getLegendLayout(direction);\n    var title = get(legendOption, 'title');\n    if (title) {\n      title = deepMix({\n        text: getName(scale)\n      }, title);\n    }\n    // 基础配置，从当前数据中读到的配置\n    attrLegendCfg.container = container;\n    attrLegendCfg.layout = layout;\n    attrLegendCfg.title = title;\n    attrLegendCfg.animateOption = DEFAULT_ANIMATE_CFG;\n    // @ts-ignore\n    return this.mergeLegendCfg(attrLegendCfg, legendOption, 'continuous');\n  };\n  /**\n   * 获取分类图例的配置项\n   * @param geometry\n   * @param attr\n   * @param scale\n   * @param custom\n   * @param legendOption\n   */\n  Legend.prototype.getCategoryCfg = function (geometry, attr, scale, legendOption, custom) {\n    var container = this.container;\n    // if position is not set, use top as default\n    var direction = get(legendOption, 'position', DIRECTION.BOTTOM);\n    var legendTheme = getLegendThemeCfg(this.view.getTheme(), direction);\n    // the default marker style\n    var themeMarker = get(legendTheme, ['marker']);\n    var userMarker = get(legendOption, 'marker');\n    var layout = getLegendLayout(direction);\n    var themePageNavigator = get(legendTheme, ['pageNavigator']);\n    var userPageNavigator = get(legendOption, 'pageNavigator');\n    var items = custom ? getCustomLegendItems(themeMarker, userMarker, legendOption.items) : getLegendItems(this.view, geometry, attr, themeMarker, userMarker);\n    var title = get(legendOption, 'title');\n    if (title) {\n      title = deepMix({\n        text: scale ? getName(scale) : ''\n      }, title);\n    }\n    var maxWidthRatio = get(legendOption, 'maxWidthRatio');\n    var maxHeightRatio = get(legendOption, 'maxHeightRatio');\n    var baseCfg = this.getCategoryLegendSizeCfg(layout, maxWidthRatio, maxHeightRatio);\n    baseCfg.container = container;\n    baseCfg.layout = layout;\n    baseCfg.items = items;\n    baseCfg.title = title;\n    baseCfg.animateOption = DEFAULT_ANIMATE_CFG;\n    baseCfg.pageNavigator = deepMix({}, themePageNavigator, userPageNavigator);\n    var categoryCfg = this.mergeLegendCfg(baseCfg, legendOption, direction);\n    if (categoryCfg.reversed) {\n      // 图例项需要逆序\n      categoryCfg.items.reverse();\n    }\n    var maxItemWidth = get(categoryCfg, 'maxItemWidth');\n    if (maxItemWidth && maxItemWidth <= 1) {\n      // 转换成像素值\n      categoryCfg.maxItemWidth = this.view.viewBBox.width * maxItemWidth;\n    }\n    return categoryCfg;\n  };\n  /**\n   * get legend config, use option > suggestion > theme\n   * @param baseCfg\n   * @param legendOption\n   * @param direction\n   */\n  Legend.prototype.mergeLegendCfg = function (baseCfg, legendOption, direction) {\n    var position = direction.split('-')[0];\n    var themeObject = getLegendThemeCfg(this.view.getTheme(), position);\n    return deepMix({}, themeObject, baseCfg, legendOption);\n  };\n  /**\n   * 生成 id\n   * @param key\n   */\n  Legend.prototype.getId = function (key) {\n    return \"\".concat(this.name, \"-\").concat(key);\n  };\n  /**\n   * 根据 id 来获取组件\n   * @param id\n   */\n  Legend.prototype.getComponentById = function (id) {\n    return find(this.components, function (co) {\n      return co.id === id;\n    });\n  };\n  Legend.prototype.getCategoryLegendSizeCfg = function (layout, maxWidthRatio, maxHeightRatio) {\n    if (maxWidthRatio === void 0) {\n      maxWidthRatio = COMPONENT_MAX_VIEW_PERCENTAGE;\n    }\n    if (maxHeightRatio === void 0) {\n      maxHeightRatio = COMPONENT_MAX_VIEW_PERCENTAGE;\n    }\n    var _a = this.view.viewBBox,\n      vw = _a.width,\n      vh = _a.height;\n    // 目前 legend 的布局是以 viewBBox 为参照\n    // const { width: cw, height: ch } = this.view.coordinateBBox;\n    return layout === 'vertical' ? {\n      maxWidth: vw * maxWidthRatio,\n      maxHeight: vh\n    } : {\n      maxWidth: vw,\n      maxHeight: vh * maxHeightRatio\n    };\n  };\n  return Legend;\n}(Controller);\nexport default Legend;","map":{"version":3,"names":["__extends","__read","deepMix","each","find","get","head","isBoolean","last","COMPONENT_MAX_VIEW_PERCENTAGE","COMPONENT_TYPE","DIRECTION","LAYER","CategoryLegend","ContinuousLegend","DEFAULT_ANIMATE_CFG","BBox","directionToPosition","omit","getCustomLegendItems","getLegendItems","getLegendLayout","getLegendThemeCfg","getName","Controller","getLegendOption","legends","field","getDirection","legendOption","BOTTOM","Legend","_super","view","_this","call","container","getLayer","FORE","addGroup","Object","defineProperty","prototype","enumerable","configurable","init","render","update","layout","layoutBBox","viewBBox","components","co","component","direction","maxWidthRatio","maxHeightRatio","maxSize","getCategoryLegendSizeCfg","maxWidth","maxHeight","Math","min","padding","bboxObject","getLayoutBBox","bbox","x","y","width","height","expand","_a","x1","y1","_b","x2","y2","startsWith","setLocation","cut","option","getOptions","updated","eachLegend","geometry","attr","scale","id","getId","existCo","getComponentById","cfg","getCategoryCfg","isLinear","getContinuousCfg","isCategory","legend","createFieldLegend","push","customCfg","undefined","createCustomLegend","layer","type","LEGEND","extra","loopLegends","getComponents","destroy","clear","remove","getGeometries","geometries","views","v","concat","doEach","isRootView","getRootView","looped","attributes","getGroupAttributes","getScale","createContinuousLegend","createCategoryLegend","set","ticks","getTicks","containMin","tick","value","containMax","items","map","tickValue","attrValue","mapping","invert","join","color","scaleValue","max","sort","a","b","attrLegendCfg","colors","rail","track","style","fill","getTheme","defaultColor","item","title","text","animateOption","mergeLegendCfg","custom","legendTheme","themeMarker","userMarker","themePageNavigator","userPageNavigator","baseCfg","pageNavigator","categoryCfg","reversed","reverse","maxItemWidth","position","split","themeObject","key","name","vw","vh"],"sources":["/Users/obiechina/Documents/ridy-flutter-full-taxi-solution 2/node_modules/@antv/g2/esm/chart/controller/legend.js"],"sourcesContent":["import { __extends, __read } from \"tslib\";\nimport { deepMix, each, find, get, head, isBoolean, last } from '@antv/util';\nimport { COMPONENT_MAX_VIEW_PERCENTAGE, COMPONENT_TYPE, DIRECTION, LAYER } from '../../constant';\nimport { CategoryLegend, ContinuousLegend } from '../../dependents';\nimport { DEFAULT_ANIMATE_CFG } from '../../animate';\nimport { BBox } from '../../util/bbox';\nimport { directionToPosition } from '../../util/direction';\nimport { omit } from '../../util/helper';\nimport { getCustomLegendItems, getLegendItems, getLegendLayout, getLegendThemeCfg } from '../../util/legend';\nimport { getName } from '../../util/scale';\nimport { Controller } from './base';\n/**\n * 从配置中获取单个字段的 legend 配置\n * @param legends\n * @param field\n * @returns the option of one legend field\n */\nfunction getLegendOption(legends, field) {\n    if (isBoolean(legends)) {\n        return legends === false ? false : {};\n    }\n    return get(legends, [field], legends);\n}\nfunction getDirection(legendOption) {\n    return get(legendOption, 'position', DIRECTION.BOTTOM);\n}\n/**\n * @ignore\n * legend Controller\n */\nvar Legend = /** @class */ (function (_super) {\n    __extends(Legend, _super);\n    function Legend(view) {\n        var _this = _super.call(this, view) || this;\n        _this.container = _this.view.getLayer(LAYER.FORE).addGroup();\n        return _this;\n    }\n    Object.defineProperty(Legend.prototype, \"name\", {\n        get: function () {\n            return 'legend';\n        },\n        enumerable: false,\n        configurable: true\n    });\n    Legend.prototype.init = function () { };\n    /**\n     * render the legend component by legend options\n     */\n    Legend.prototype.render = function () {\n        // 和 update 逻辑保持一致\n        this.update();\n    };\n    /**\n     * layout legend\n     * 计算出 legend 的 direction 位置 x, y\n     */\n    Legend.prototype.layout = function () {\n        var _this = this;\n        this.layoutBBox = this.view.viewBBox;\n        each(this.components, function (co) {\n            var component = co.component, direction = co.direction;\n            var layout = getLegendLayout(direction);\n            var maxWidthRatio = component.get('maxWidthRatio');\n            var maxHeightRatio = component.get('maxHeightRatio');\n            var maxSize = _this.getCategoryLegendSizeCfg(layout, maxWidthRatio, maxHeightRatio);\n            var maxWidth = component.get('maxWidth');\n            var maxHeight = component.get('maxHeight');\n            // 先更新 maxSize，更新 layoutBBox，以便计算正确的 x y\n            component.update({\n                maxWidth: Math.min(maxSize.maxWidth, maxWidth || 0),\n                maxHeight: Math.min(maxSize.maxHeight, maxHeight || 0),\n            });\n            var padding = component.get('padding');\n            var bboxObject = component.getLayoutBBox(); // 这里只需要他的 width、height 信息做位置调整\n            var bbox = new BBox(bboxObject.x, bboxObject.y, bboxObject.width, bboxObject.height).expand(padding);\n            var _a = __read(directionToPosition(_this.view.viewBBox, bbox, direction), 2), x1 = _a[0], y1 = _a[1];\n            var _b = __read(directionToPosition(_this.layoutBBox, bbox, direction), 2), x2 = _b[0], y2 = _b[1];\n            var x = 0;\n            var y = 0;\n            // 因为 legend x y 要和 coordinateBBox 对齐，所以要做一个简单的判断\n            if (direction.startsWith('top') || direction.startsWith('bottom')) {\n                x = x1;\n                y = y2;\n            }\n            else {\n                x = x2;\n                y = y1;\n            }\n            // 更新位置\n            component.setLocation({ x: x + padding[3], y: y + padding[0] });\n            _this.layoutBBox = _this.layoutBBox.cut(bbox, direction);\n        });\n    };\n    /**\n     * legend 的更新逻辑\n     */\n    Legend.prototype.update = function () {\n        var _this = this;\n        this.option = this.view.getOptions().legends;\n        // 已经处理过的 legend\n        var updated = {};\n        var eachLegend = function (geometry, attr, scale) {\n            var id = _this.getId(scale.field);\n            var existCo = _this.getComponentById(id);\n            // 存在则 update\n            if (existCo) {\n                var cfg = void 0;\n                var legendOption = getLegendOption(_this.option, scale.field);\n                // if the legend option is not false, means legend should be created.\n                if (legendOption !== false) {\n                    if (get(legendOption, 'custom')) {\n                        cfg = _this.getCategoryCfg(geometry, attr, scale, legendOption, true);\n                    }\n                    else {\n                        if (scale.isLinear) {\n                            // linear field, create continuous legend\n                            cfg = _this.getContinuousCfg(geometry, attr, scale, legendOption);\n                        }\n                        else if (scale.isCategory) {\n                            // category field, create category legend\n                            cfg = _this.getCategoryCfg(geometry, attr, scale, legendOption);\n                        }\n                    }\n                }\n                // 如果 cfg 为空，则不在 updated 标记，那么会在后面逻辑中删除\n                if (cfg) {\n                    // omit 掉一些属性，比如 container 等\n                    omit(cfg, ['container']);\n                    existCo.direction = getDirection(legendOption);\n                    existCo.component.update(cfg);\n                    // 标记为新的\n                    updated[id] = true;\n                }\n            }\n            else {\n                // 不存在则 create\n                var legend = _this.createFieldLegend(geometry, attr, scale);\n                if (legend) {\n                    legend.component.init();\n                    _this.components.push(legend);\n                    // 标记为新的\n                    updated[id] = true;\n                }\n            }\n        };\n        // 全局自定义图例\n        if (get(this.option, 'custom')) {\n            var id = 'global-custom';\n            var existCo = this.getComponentById(id);\n            if (existCo) {\n                var customCfg = this.getCategoryCfg(undefined, undefined, undefined, this.option, true);\n                omit(customCfg, ['container']);\n                existCo.component.update(customCfg);\n                updated[id] = true;\n            }\n            else {\n                var component = this.createCustomLegend(undefined, undefined, undefined, this.option);\n                if (component) {\n                    component.init();\n                    var layer = LAYER.FORE;\n                    var direction = getDirection(this.option);\n                    this.components.push({\n                        id: id,\n                        component: component,\n                        layer: layer,\n                        direction: direction,\n                        type: COMPONENT_TYPE.LEGEND,\n                        extra: undefined,\n                    });\n                    // 标记为更新\n                    updated[id] = true;\n                }\n            }\n        }\n        else {\n            // 遍历处理每一个创建逻辑\n            this.loopLegends(eachLegend);\n        }\n        // 处理完成之后，销毁删除的\n        // 不在处理中的\n        var components = [];\n        each(this.getComponents(), function (co) {\n            if (updated[co.id]) {\n                components.push(co);\n            }\n            else {\n                co.component.destroy();\n            }\n        });\n        // 更新当前已有的 components\n        this.components = components;\n    };\n    Legend.prototype.clear = function () {\n        _super.prototype.clear.call(this);\n        this.container.clear();\n    };\n    Legend.prototype.destroy = function () {\n        _super.prototype.destroy.call(this);\n        this.container.remove(true);\n    };\n    /**\n     * 递归获取所有的 Geometry\n     */\n    Legend.prototype.getGeometries = function (view) {\n        var _this = this;\n        var geometries = view.geometries;\n        each(view.views, function (v) {\n            geometries = geometries.concat(_this.getGeometries(v));\n        });\n        return geometries;\n    };\n    /**\n     * 遍历 Geometry，处理 legend 逻辑\n     * @param doEach 每个 loop 中的处理方法\n     */\n    Legend.prototype.loopLegends = function (doEach) {\n        var isRootView = this.view.getRootView() === this.view;\n        // 非根 view，不处理 legend\n        if (!isRootView) {\n            return;\n        }\n        // 递归 view 中所有的 Geometry，进行创建 legend\n        var geometries = this.getGeometries(this.view);\n        var looped = {}; // 防止一个字段创建两个 legend\n        each(geometries, function (geometry) {\n            var attributes = geometry.getGroupAttributes();\n            each(attributes, function (attr) {\n                var scale = attr.getScale(attr.type);\n                // 如果在视觉通道上映射常量值，如 size(2) shape('circle') 不创建 legend\n                if (!scale || scale.type === 'identity' || looped[scale.field]) {\n                    return;\n                }\n                doEach(geometry, attr, scale);\n                looped[scale.field] = true;\n            });\n        });\n    };\n    /**\n     * 创建一个 legend\n     * @param geometry\n     * @param attr\n     * @param scale\n     */\n    Legend.prototype.createFieldLegend = function (geometry, attr, scale) {\n        var component;\n        var legendOption = getLegendOption(this.option, scale.field);\n        var layer = LAYER.FORE;\n        var direction = getDirection(legendOption);\n        // if the legend option is not false, means legend should be created.\n        if (legendOption !== false) {\n            if (get(legendOption, 'custom')) {\n                component = this.createCustomLegend(geometry, attr, scale, legendOption);\n            }\n            else {\n                if (scale.isLinear) {\n                    // linear field, create continuous legend\n                    component = this.createContinuousLegend(geometry, attr, scale, legendOption);\n                }\n                else if (scale.isCategory) {\n                    // category field, create category legend\n                    component = this.createCategoryLegend(geometry, attr, scale, legendOption);\n                }\n            }\n        }\n        if (component) {\n            component.set('field', scale.field);\n            return {\n                id: this.getId(scale.field),\n                component: component,\n                layer: layer,\n                direction: direction,\n                type: COMPONENT_TYPE.LEGEND,\n                extra: { scale: scale },\n            };\n        }\n    };\n    /**\n     * 自定义图例使用 category 图例去渲染\n     * @param geometry\n     * @param attr\n     * @param scale\n     * @param legendOption\n     */\n    Legend.prototype.createCustomLegend = function (geometry, attr, scale, legendOption) {\n        // 直接使用 分类图例渲染\n        var cfg = this.getCategoryCfg(geometry, attr, scale, legendOption, true);\n        return new CategoryLegend(cfg);\n    };\n    /**\n     * 创建连续图例\n     * @param geometry\n     * @param attr\n     * @param scale\n     * @param legendOption\n     */\n    Legend.prototype.createContinuousLegend = function (geometry, attr, scale, legendOption) {\n        var cfg = this.getContinuousCfg(geometry, attr, scale, omit(legendOption, ['value']));\n        return new ContinuousLegend(cfg);\n    };\n    /**\n     * 创建分类图例\n     * @param geometry\n     * @param attr\n     * @param scale\n     * @param legendOption\n     */\n    Legend.prototype.createCategoryLegend = function (geometry, attr, scale, legendOption) {\n        var cfg = this.getCategoryCfg(geometry, attr, scale, legendOption);\n        return new CategoryLegend(cfg);\n    };\n    /**\n     * 获得连续图例的配置\n     * @param geometry\n     * @param attr\n     * @param scale\n     * @param legendOption\n     */\n    Legend.prototype.getContinuousCfg = function (geometry, attr, scale, legendOption) {\n        var ticks = scale.getTicks();\n        var containMin = find(ticks, function (tick) { return tick.value === 0; });\n        var containMax = find(ticks, function (tick) { return tick.value === 1; });\n        var items = ticks.map(function (tick) {\n            var value = tick.value, tickValue = tick.tickValue;\n            var attrValue = attr.mapping(scale.invert(value)).join('');\n            return {\n                value: tickValue,\n                attrValue: attrValue,\n                color: attrValue,\n                scaleValue: value,\n            };\n        });\n        if (!containMin) {\n            items.push({\n                value: scale.min,\n                attrValue: attr.mapping(scale.invert(0)).join(''),\n                color: attr.mapping(scale.invert(0)).join(''),\n                scaleValue: 0,\n            });\n        }\n        if (!containMax) {\n            items.push({\n                value: scale.max,\n                attrValue: attr.mapping(scale.invert(1)).join(''),\n                color: attr.mapping(scale.invert(1)).join(''),\n                scaleValue: 1,\n            });\n        }\n        // 排序\n        items.sort(function (a, b) { return a.value - b.value; });\n        // 跟 attr 相关的配置\n        // size color 区别的配置\n        var attrLegendCfg = {\n            min: head(items).value,\n            max: last(items).value,\n            colors: [],\n            rail: {\n                type: attr.type,\n            },\n            track: {},\n        };\n        if (attr.type === 'size') {\n            attrLegendCfg.track = {\n                style: {\n                    // size 的选中前景色，对于 color，则直接使用 color 标识\n                    // @ts-ignore\n                    fill: attr.type === 'size' ? this.view.getTheme().defaultColor : undefined,\n                },\n            };\n        }\n        if (attr.type === 'color') {\n            attrLegendCfg.colors = items.map(function (item) { return item.attrValue; });\n        }\n        var container = this.container;\n        // if position is not set, use top as default\n        var direction = getDirection(legendOption);\n        var layout = getLegendLayout(direction);\n        var title = get(legendOption, 'title');\n        if (title) {\n            title = deepMix({\n                text: getName(scale),\n            }, title);\n        }\n        // 基础配置，从当前数据中读到的配置\n        attrLegendCfg.container = container;\n        attrLegendCfg.layout = layout;\n        attrLegendCfg.title = title;\n        attrLegendCfg.animateOption = DEFAULT_ANIMATE_CFG;\n        // @ts-ignore\n        return this.mergeLegendCfg(attrLegendCfg, legendOption, 'continuous');\n    };\n    /**\n     * 获取分类图例的配置项\n     * @param geometry\n     * @param attr\n     * @param scale\n     * @param custom\n     * @param legendOption\n     */\n    Legend.prototype.getCategoryCfg = function (geometry, attr, scale, legendOption, custom) {\n        var container = this.container;\n        // if position is not set, use top as default\n        var direction = get(legendOption, 'position', DIRECTION.BOTTOM);\n        var legendTheme = getLegendThemeCfg(this.view.getTheme(), direction);\n        // the default marker style\n        var themeMarker = get(legendTheme, ['marker']);\n        var userMarker = get(legendOption, 'marker');\n        var layout = getLegendLayout(direction);\n        var themePageNavigator = get(legendTheme, ['pageNavigator']);\n        var userPageNavigator = get(legendOption, 'pageNavigator');\n        var items = custom\n            ? getCustomLegendItems(themeMarker, userMarker, legendOption.items)\n            : getLegendItems(this.view, geometry, attr, themeMarker, userMarker);\n        var title = get(legendOption, 'title');\n        if (title) {\n            title = deepMix({\n                text: scale ? getName(scale) : '',\n            }, title);\n        }\n        var maxWidthRatio = get(legendOption, 'maxWidthRatio');\n        var maxHeightRatio = get(legendOption, 'maxHeightRatio');\n        var baseCfg = this.getCategoryLegendSizeCfg(layout, maxWidthRatio, maxHeightRatio);\n        baseCfg.container = container;\n        baseCfg.layout = layout;\n        baseCfg.items = items;\n        baseCfg.title = title;\n        baseCfg.animateOption = DEFAULT_ANIMATE_CFG;\n        baseCfg.pageNavigator = deepMix({}, themePageNavigator, userPageNavigator);\n        var categoryCfg = this.mergeLegendCfg(baseCfg, legendOption, direction);\n        if (categoryCfg.reversed) {\n            // 图例项需要逆序\n            categoryCfg.items.reverse();\n        }\n        var maxItemWidth = get(categoryCfg, 'maxItemWidth');\n        if (maxItemWidth && maxItemWidth <= 1) {\n            // 转换成像素值\n            categoryCfg.maxItemWidth = this.view.viewBBox.width * maxItemWidth;\n        }\n        return categoryCfg;\n    };\n    /**\n     * get legend config, use option > suggestion > theme\n     * @param baseCfg\n     * @param legendOption\n     * @param direction\n     */\n    Legend.prototype.mergeLegendCfg = function (baseCfg, legendOption, direction) {\n        var position = direction.split('-')[0];\n        var themeObject = getLegendThemeCfg(this.view.getTheme(), position);\n        return deepMix({}, themeObject, baseCfg, legendOption);\n    };\n    /**\n     * 生成 id\n     * @param key\n     */\n    Legend.prototype.getId = function (key) {\n        return \"\".concat(this.name, \"-\").concat(key);\n    };\n    /**\n     * 根据 id 来获取组件\n     * @param id\n     */\n    Legend.prototype.getComponentById = function (id) {\n        return find(this.components, function (co) { return co.id === id; });\n    };\n    Legend.prototype.getCategoryLegendSizeCfg = function (layout, maxWidthRatio, maxHeightRatio) {\n        if (maxWidthRatio === void 0) { maxWidthRatio = COMPONENT_MAX_VIEW_PERCENTAGE; }\n        if (maxHeightRatio === void 0) { maxHeightRatio = COMPONENT_MAX_VIEW_PERCENTAGE; }\n        var _a = this.view.viewBBox, vw = _a.width, vh = _a.height;\n        // 目前 legend 的布局是以 viewBBox 为参照\n        // const { width: cw, height: ch } = this.view.coordinateBBox;\n        return layout === 'vertical'\n            ? {\n                maxWidth: vw * maxWidthRatio,\n                maxHeight: vh,\n            }\n            : {\n                maxWidth: vw,\n                maxHeight: vh * maxHeightRatio,\n            };\n    };\n    return Legend;\n}(Controller));\nexport default Legend;\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}