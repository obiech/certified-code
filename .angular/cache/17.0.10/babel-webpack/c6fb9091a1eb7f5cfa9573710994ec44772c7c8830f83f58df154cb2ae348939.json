{"ast":null,"code":"import { __assign, __extends } from \"tslib\";\nimport { AbstractShape } from '@antv/g-base';\nimport { isNil, intersectRect } from '../util/util';\nimport { applyAttrsToContext, refreshElement } from '../util/draw';\nimport { getBBoxMethod } from '@antv/g-base';\nimport * as Shape from './index';\nimport Group from '../group';\nvar ShapeBase = /** @class */function (_super) {\n  __extends(ShapeBase, _super);\n  function ShapeBase() {\n    return _super !== null && _super.apply(this, arguments) || this;\n  }\n  ShapeBase.prototype.getDefaultAttrs = function () {\n    var attrs = _super.prototype.getDefaultAttrs.call(this);\n    // 设置默认值\n    return __assign(__assign({}, attrs), {\n      lineWidth: 1,\n      lineAppendWidth: 0,\n      strokeOpacity: 1,\n      fillOpacity: 1\n    });\n  };\n  ShapeBase.prototype.getShapeBase = function () {\n    return Shape;\n  };\n  ShapeBase.prototype.getGroupBase = function () {\n    return Group;\n  };\n  /**\n   * 一些方法调用会引起画布变化\n   * @param {ChangeType} changeType 改变的类型\n   */\n  ShapeBase.prototype.onCanvasChange = function (changeType) {\n    refreshElement(this, changeType);\n  };\n  ShapeBase.prototype.calculateBBox = function () {\n    var type = this.get('type');\n    var lineWidth = this.getHitLineWidth();\n    // const attrs = this.attr();\n    var bboxMethod = getBBoxMethod(type);\n    var box = bboxMethod(this);\n    var halfLineWidth = lineWidth / 2;\n    var minX = box.x - halfLineWidth;\n    var minY = box.y - halfLineWidth;\n    var maxX = box.x + box.width + halfLineWidth;\n    var maxY = box.y + box.height + halfLineWidth;\n    return {\n      x: minX,\n      minX: minX,\n      y: minY,\n      minY: minY,\n      width: box.width + lineWidth,\n      height: box.height + lineWidth,\n      maxX: maxX,\n      maxY: maxY\n    };\n  };\n  ShapeBase.prototype.isFill = function () {\n    return !!this.attrs['fill'] || this.isClipShape();\n  };\n  ShapeBase.prototype.isStroke = function () {\n    return !!this.attrs['stroke'];\n  };\n  // 同 shape 中的方法重复了\n  ShapeBase.prototype._applyClip = function (context, clip) {\n    if (clip) {\n      context.save();\n      // 将 clip 的属性挂载到 context 上\n      applyAttrsToContext(context, clip);\n      // 绘制 clip 路径\n      clip.createPath(context);\n      context.restore();\n      // 裁剪\n      context.clip();\n      clip._afterDraw();\n    }\n  };\n  // 绘制图形时需要考虑 region 限制\n  ShapeBase.prototype.draw = function (context, region) {\n    var clip = this.cfg.clipShape;\n    // 如果指定了 region，同时不允许刷新时，直接返回\n    if (region) {\n      if (this.cfg.refresh === false) {\n        // this._afterDraw();\n        this.set('hasChanged', false);\n        return;\n      }\n      // 是否相交需要考虑 clip 的包围盒\n      var bbox = this.getCanvasBBox();\n      if (!intersectRect(region, bbox)) {\n        // 图形的包围盒与重绘区域不相交时，也需要清除标记\n        this.set('hasChanged', false);\n        // 存在多种情形需要更新 cacheCanvasBBox 和 isInview 的判定\n        // 1. 之前图形在视窗内，但是现在不再视窗内\n        // 2. 如果当前的图形以及父元素都没有发生过变化，refresh = false 不会走到这里，所以这里的图形都是父元素发生变化，但是没有在视图内的元素\n        if (this.cfg.isInView) {\n          this._afterDraw();\n        }\n        return;\n      }\n    }\n    context.save();\n    // 先将 attrs 应用到上下文中，再设置 clip。因为 clip 应该被当前元素的 matrix 所影响\n    applyAttrsToContext(context, this);\n    this._applyClip(context, clip);\n    this.drawPath(context);\n    context.restore();\n    this._afterDraw();\n  };\n  ShapeBase.prototype.getCanvasViewBox = function () {\n    var canvas = this.cfg.canvas;\n    if (canvas) {\n      // @ts-ignore\n      return canvas.getViewRange();\n    }\n    return null;\n  };\n  ShapeBase.prototype.cacheCanvasBBox = function () {\n    var canvasBBox = this.getCanvasViewBox();\n    // 绘制的时候缓存包围盒\n    if (canvasBBox) {\n      var bbox = this.getCanvasBBox();\n      var isInView = intersectRect(bbox, canvasBBox);\n      this.set('isInView', isInView);\n      // 不再视窗内 cacheCanvasBBox 设置成 null，会提升局部渲染的性能，\n      // 因为在局部渲染影响的包围盒计算时不考虑这个图形的包围盒\n      // 父元素 cacheCanvasBBox 计算的时候也不计算\n      if (isInView) {\n        this.set('cacheCanvasBBox', bbox);\n      } else {\n        this.set('cacheCanvasBBox', null);\n      }\n    }\n  };\n  ShapeBase.prototype._afterDraw = function () {\n    this.cacheCanvasBBox();\n    // 绘制后消除标记\n    this.set('hasChanged', false);\n    this.set('refresh', null);\n  };\n  ShapeBase.prototype.skipDraw = function () {\n    this.set('cacheCanvasBBox', null);\n    this.set('isInView', null);\n    this.set('hasChanged', false);\n  };\n  /**\n   * 绘制图形的路径\n   * @param {CanvasRenderingContext2D} context 上下文\n   */\n  ShapeBase.prototype.drawPath = function (context) {\n    this.createPath(context);\n    this.strokeAndFill(context);\n    this.afterDrawPath(context);\n  };\n  /**\n   * @protected\n   * 填充图形\n   * @param {CanvasRenderingContext2D} context context 上下文\n   */\n  ShapeBase.prototype.fill = function (context) {\n    context.fill();\n  };\n  /**\n   * @protected\n   * 绘制图形边框\n   * @param {CanvasRenderingContext2D} context context 上下文\n   */\n  ShapeBase.prototype.stroke = function (context) {\n    context.stroke();\n  };\n  // 绘制或者填充\n  ShapeBase.prototype.strokeAndFill = function (context) {\n    var _a = this.attrs,\n      lineWidth = _a.lineWidth,\n      opacity = _a.opacity,\n      strokeOpacity = _a.strokeOpacity,\n      fillOpacity = _a.fillOpacity;\n    if (this.isFill()) {\n      if (!isNil(fillOpacity) && fillOpacity !== 1) {\n        context.globalAlpha = fillOpacity;\n        this.fill(context);\n        context.globalAlpha = opacity;\n      } else {\n        this.fill(context);\n      }\n    }\n    if (this.isStroke()) {\n      if (lineWidth > 0) {\n        if (!isNil(strokeOpacity) && strokeOpacity !== 1) {\n          context.globalAlpha = strokeOpacity;\n        }\n        this.stroke(context);\n      }\n    }\n    this.afterDrawPath(context);\n  };\n  /**\n   * @protected\n   * 绘制图形的路径\n   * @param {CanvasRenderingContext2D} context 上下文\n   */\n  ShapeBase.prototype.createPath = function (context) {};\n  /**\n   * 绘制完成 path 后的操作\n   * @param {CanvasRenderingContext2D} context 上下文\n   */\n  ShapeBase.prototype.afterDrawPath = function (context) {};\n  ShapeBase.prototype.isInShape = function (refX, refY) {\n    // return HitUtil.isHitShape(this, refX, refY);\n    var isStroke = this.isStroke();\n    var isFill = this.isFill();\n    var lineWidth = this.getHitLineWidth();\n    return this.isInStrokeOrPath(refX, refY, isStroke, isFill, lineWidth);\n  };\n  // 之所以不拆成 isInStroke 和 isInPath 在于两者存在一些共同的计算\n  ShapeBase.prototype.isInStrokeOrPath = function (x, y, isStroke, isFill, lineWidth) {\n    return false;\n  };\n  /**\n   * 获取线拾取的宽度\n   * @returns {number} 线的拾取宽度\n   */\n  ShapeBase.prototype.getHitLineWidth = function () {\n    if (!this.isStroke()) {\n      return 0;\n    }\n    var attrs = this.attrs;\n    return attrs['lineWidth'] + attrs['lineAppendWidth'];\n  };\n  return ShapeBase;\n}(AbstractShape);\nexport default ShapeBase;","map":{"version":3,"names":["__assign","__extends","AbstractShape","isNil","intersectRect","applyAttrsToContext","refreshElement","getBBoxMethod","Shape","Group","ShapeBase","_super","apply","arguments","prototype","getDefaultAttrs","attrs","call","lineWidth","lineAppendWidth","strokeOpacity","fillOpacity","getShapeBase","getGroupBase","onCanvasChange","changeType","calculateBBox","type","get","getHitLineWidth","bboxMethod","box","halfLineWidth","minX","x","minY","y","maxX","width","maxY","height","isFill","isClipShape","isStroke","_applyClip","context","clip","save","createPath","restore","_afterDraw","draw","region","cfg","clipShape","refresh","set","bbox","getCanvasBBox","isInView","drawPath","getCanvasViewBox","canvas","getViewRange","cacheCanvasBBox","canvasBBox","skipDraw","strokeAndFill","afterDrawPath","fill","stroke","_a","opacity","globalAlpha","isInShape","refX","refY","isInStrokeOrPath"],"sources":["/Users/obiechina/Documents/ridy-flutter-full-taxi-solution 2/node_modules/@antv/g-canvas/esm/shape/base.js"],"sourcesContent":["import { __assign, __extends } from \"tslib\";\nimport { AbstractShape } from '@antv/g-base';\nimport { isNil, intersectRect } from '../util/util';\nimport { applyAttrsToContext, refreshElement } from '../util/draw';\nimport { getBBoxMethod } from '@antv/g-base';\nimport * as Shape from './index';\nimport Group from '../group';\nvar ShapeBase = /** @class */ (function (_super) {\n    __extends(ShapeBase, _super);\n    function ShapeBase() {\n        return _super !== null && _super.apply(this, arguments) || this;\n    }\n    ShapeBase.prototype.getDefaultAttrs = function () {\n        var attrs = _super.prototype.getDefaultAttrs.call(this);\n        // 设置默认值\n        return __assign(__assign({}, attrs), { lineWidth: 1, lineAppendWidth: 0, strokeOpacity: 1, fillOpacity: 1 });\n    };\n    ShapeBase.prototype.getShapeBase = function () {\n        return Shape;\n    };\n    ShapeBase.prototype.getGroupBase = function () {\n        return Group;\n    };\n    /**\n     * 一些方法调用会引起画布变化\n     * @param {ChangeType} changeType 改变的类型\n     */\n    ShapeBase.prototype.onCanvasChange = function (changeType) {\n        refreshElement(this, changeType);\n    };\n    ShapeBase.prototype.calculateBBox = function () {\n        var type = this.get('type');\n        var lineWidth = this.getHitLineWidth();\n        // const attrs = this.attr();\n        var bboxMethod = getBBoxMethod(type);\n        var box = bboxMethod(this);\n        var halfLineWidth = lineWidth / 2;\n        var minX = box.x - halfLineWidth;\n        var minY = box.y - halfLineWidth;\n        var maxX = box.x + box.width + halfLineWidth;\n        var maxY = box.y + box.height + halfLineWidth;\n        return {\n            x: minX,\n            minX: minX,\n            y: minY,\n            minY: minY,\n            width: box.width + lineWidth,\n            height: box.height + lineWidth,\n            maxX: maxX,\n            maxY: maxY,\n        };\n    };\n    ShapeBase.prototype.isFill = function () {\n        return !!this.attrs['fill'] || this.isClipShape();\n    };\n    ShapeBase.prototype.isStroke = function () {\n        return !!this.attrs['stroke'];\n    };\n    // 同 shape 中的方法重复了\n    ShapeBase.prototype._applyClip = function (context, clip) {\n        if (clip) {\n            context.save();\n            // 将 clip 的属性挂载到 context 上\n            applyAttrsToContext(context, clip);\n            // 绘制 clip 路径\n            clip.createPath(context);\n            context.restore();\n            // 裁剪\n            context.clip();\n            clip._afterDraw();\n        }\n    };\n    // 绘制图形时需要考虑 region 限制\n    ShapeBase.prototype.draw = function (context, region) {\n        var clip = this.cfg.clipShape;\n        // 如果指定了 region，同时不允许刷新时，直接返回\n        if (region) {\n            if (this.cfg.refresh === false) {\n                // this._afterDraw();\n                this.set('hasChanged', false);\n                return;\n            }\n            // 是否相交需要考虑 clip 的包围盒\n            var bbox = this.getCanvasBBox();\n            if (!intersectRect(region, bbox)) {\n                // 图形的包围盒与重绘区域不相交时，也需要清除标记\n                this.set('hasChanged', false);\n                // 存在多种情形需要更新 cacheCanvasBBox 和 isInview 的判定\n                // 1. 之前图形在视窗内，但是现在不再视窗内\n                // 2. 如果当前的图形以及父元素都没有发生过变化，refresh = false 不会走到这里，所以这里的图形都是父元素发生变化，但是没有在视图内的元素\n                if (this.cfg.isInView) {\n                    this._afterDraw();\n                }\n                return;\n            }\n        }\n        context.save();\n        // 先将 attrs 应用到上下文中，再设置 clip。因为 clip 应该被当前元素的 matrix 所影响\n        applyAttrsToContext(context, this);\n        this._applyClip(context, clip);\n        this.drawPath(context);\n        context.restore();\n        this._afterDraw();\n    };\n    ShapeBase.prototype.getCanvasViewBox = function () {\n        var canvas = this.cfg.canvas;\n        if (canvas) {\n            // @ts-ignore\n            return canvas.getViewRange();\n        }\n        return null;\n    };\n    ShapeBase.prototype.cacheCanvasBBox = function () {\n        var canvasBBox = this.getCanvasViewBox();\n        // 绘制的时候缓存包围盒\n        if (canvasBBox) {\n            var bbox = this.getCanvasBBox();\n            var isInView = intersectRect(bbox, canvasBBox);\n            this.set('isInView', isInView);\n            // 不再视窗内 cacheCanvasBBox 设置成 null，会提升局部渲染的性能，\n            // 因为在局部渲染影响的包围盒计算时不考虑这个图形的包围盒\n            // 父元素 cacheCanvasBBox 计算的时候也不计算\n            if (isInView) {\n                this.set('cacheCanvasBBox', bbox);\n            }\n            else {\n                this.set('cacheCanvasBBox', null);\n            }\n        }\n    };\n    ShapeBase.prototype._afterDraw = function () {\n        this.cacheCanvasBBox();\n        // 绘制后消除标记\n        this.set('hasChanged', false);\n        this.set('refresh', null);\n    };\n    ShapeBase.prototype.skipDraw = function () {\n        this.set('cacheCanvasBBox', null);\n        this.set('isInView', null);\n        this.set('hasChanged', false);\n    };\n    /**\n     * 绘制图形的路径\n     * @param {CanvasRenderingContext2D} context 上下文\n     */\n    ShapeBase.prototype.drawPath = function (context) {\n        this.createPath(context);\n        this.strokeAndFill(context);\n        this.afterDrawPath(context);\n    };\n    /**\n     * @protected\n     * 填充图形\n     * @param {CanvasRenderingContext2D} context context 上下文\n     */\n    ShapeBase.prototype.fill = function (context) {\n        context.fill();\n    };\n    /**\n     * @protected\n     * 绘制图形边框\n     * @param {CanvasRenderingContext2D} context context 上下文\n     */\n    ShapeBase.prototype.stroke = function (context) {\n        context.stroke();\n    };\n    // 绘制或者填充\n    ShapeBase.prototype.strokeAndFill = function (context) {\n        var _a = this.attrs, lineWidth = _a.lineWidth, opacity = _a.opacity, strokeOpacity = _a.strokeOpacity, fillOpacity = _a.fillOpacity;\n        if (this.isFill()) {\n            if (!isNil(fillOpacity) && fillOpacity !== 1) {\n                context.globalAlpha = fillOpacity;\n                this.fill(context);\n                context.globalAlpha = opacity;\n            }\n            else {\n                this.fill(context);\n            }\n        }\n        if (this.isStroke()) {\n            if (lineWidth > 0) {\n                if (!isNil(strokeOpacity) && strokeOpacity !== 1) {\n                    context.globalAlpha = strokeOpacity;\n                }\n                this.stroke(context);\n            }\n        }\n        this.afterDrawPath(context);\n    };\n    /**\n     * @protected\n     * 绘制图形的路径\n     * @param {CanvasRenderingContext2D} context 上下文\n     */\n    ShapeBase.prototype.createPath = function (context) { };\n    /**\n     * 绘制完成 path 后的操作\n     * @param {CanvasRenderingContext2D} context 上下文\n     */\n    ShapeBase.prototype.afterDrawPath = function (context) { };\n    ShapeBase.prototype.isInShape = function (refX, refY) {\n        // return HitUtil.isHitShape(this, refX, refY);\n        var isStroke = this.isStroke();\n        var isFill = this.isFill();\n        var lineWidth = this.getHitLineWidth();\n        return this.isInStrokeOrPath(refX, refY, isStroke, isFill, lineWidth);\n    };\n    // 之所以不拆成 isInStroke 和 isInPath 在于两者存在一些共同的计算\n    ShapeBase.prototype.isInStrokeOrPath = function (x, y, isStroke, isFill, lineWidth) {\n        return false;\n    };\n    /**\n     * 获取线拾取的宽度\n     * @returns {number} 线的拾取宽度\n     */\n    ShapeBase.prototype.getHitLineWidth = function () {\n        if (!this.isStroke()) {\n            return 0;\n        }\n        var attrs = this.attrs;\n        return attrs['lineWidth'] + attrs['lineAppendWidth'];\n    };\n    return ShapeBase;\n}(AbstractShape));\nexport default ShapeBase;\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}