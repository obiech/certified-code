{"ast":null,"code":"import { RegionViewGQL, RegionViewQuery } from '@ridy/admin-panel/generated/graphql';\nimport * as i0 from \"@angular/core\";\nimport * as i1 from \"@ridy/admin-panel/generated/graphql\";\nexport class RegionViewResolver {\n  constructor(gql) {\n    this.gql = gql;\n  }\n  resolve(route, state) {\n    return this.gql.fetch({\n      id: route.params.id\n    });\n  }\n  static {\n    this.ɵfac = function RegionViewResolver_Factory(t) {\n      return new (t || RegionViewResolver)(i0.ɵɵinject(i1.RegionViewGQL));\n    };\n  }\n  static {\n    this.ɵprov = /*@__PURE__*/i0.ɵɵdefineInjectable({\n      token: RegionViewResolver,\n      factory: RegionViewResolver.ɵfac\n    });\n  }\n}","map":{"version":3,"names":["RegionViewGQL","RegionViewQuery","RegionViewResolver","constructor","gql","resolve","route","state","fetch","id","params","i0","ɵɵinject","i1","factory","ɵfac"],"sources":["/Users/obiechina/Documents/ridy-flutter-full-taxi-solution 2/apps/admin-panel/src/app/cms/management/management-region/region-view/region-view.resolver.ts"],"sourcesContent":["import { Injectable } from '@angular/core';\nimport { ActivatedRouteSnapshot, RouterStateSnapshot } from '@angular/router';\nimport { ApolloQueryResult } from '@apollo/client/core';\nimport {\n  RegionViewGQL,\n  RegionViewQuery,\n  ViewRiderQuery,\n} from '@ridy/admin-panel/generated/graphql';\nimport { Observable } from 'rxjs';\n\n@Injectable()\nexport class RegionViewResolver\n  \n{\n  constructor(private gql: RegionViewGQL) {}\n\n  resolve(\n    route: ActivatedRouteSnapshot,\n    state: RouterStateSnapshot,\n  ): Observable<ApolloQueryResult<RegionViewQuery>> {\n    return this.gql.fetch({ id: route.params.id });\n  }\n}\n"],"mappings":"AAGA,SACEA,aAAa,EACbC,eAAe,QAEV,qCAAqC;;;AAI5C,OAAM,MAAOC,kBAAkB;EAG7BC,YAAoBC,GAAkB;IAAlB,KAAAA,GAAG,GAAHA,GAAG;EAAkB;EAEzCC,OAAOA,CACLC,KAA6B,EAC7BC,KAA0B;IAE1B,OAAO,IAAI,CAACH,GAAG,CAACI,KAAK,CAAC;MAAEC,EAAE,EAAEH,KAAK,CAACI,MAAM,CAACD;IAAE,CAAE,CAAC;EAChD;;;uBAVWP,kBAAkB,EAAAS,EAAA,CAAAC,QAAA,CAAAC,EAAA,CAAAb,aAAA;IAAA;EAAA;;;aAAlBE,kBAAkB;MAAAY,OAAA,EAAlBZ,kBAAkB,CAAAa;IAAA;EAAA","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}