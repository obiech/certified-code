{"ast":null,"code":"import { __extends } from \"tslib\";\nimport { each, isEqual, isFunction, isNumber, isObject, isArray, noop, mix, upperFirst, uniqueId } from '@antv/util';\nimport { ext } from '@antv/matrix-util';\nimport { removeFromArray, isParent } from '../util/util';\nimport { multiplyMatrix, multiplyVec2, invert } from '../util/matrix';\nimport Base from './base';\nvar transform = ext.transform;\nvar MATRIX = 'matrix';\nvar CLONE_CFGS = ['zIndex', 'capture', 'visible', 'type'];\n// 可以在 toAttrs 中设置，但不属于绘图属性的字段\nvar RESERVED_PORPS = ['repeat'];\nvar DELEGATION_SPLIT = ':';\nvar WILDCARD = '*';\n// 需要考虑数组嵌套数组的场景\n// 数组嵌套对象的场景不考虑\nfunction _cloneArrayAttr(arr) {\n  var result = [];\n  for (var i = 0; i < arr.length; i++) {\n    if (isArray(arr[i])) {\n      result.push([].concat(arr[i]));\n    } else {\n      result.push(arr[i]);\n    }\n  }\n  return result;\n}\nfunction getFormatFromAttrs(toAttrs, shape) {\n  var fromAttrs = {};\n  var attrs = shape.attrs;\n  for (var k in toAttrs) {\n    fromAttrs[k] = attrs[k];\n  }\n  return fromAttrs;\n}\nfunction getFormatToAttrs(props, shape) {\n  var toAttrs = {};\n  var attrs = shape.attr();\n  each(props, function (v, k) {\n    if (RESERVED_PORPS.indexOf(k) === -1 && !isEqual(attrs[k], v)) {\n      toAttrs[k] = v;\n    }\n  });\n  return toAttrs;\n}\nfunction checkExistedAttrs(animations, animation) {\n  if (animation.onFrame) {\n    return animations;\n  }\n  var startTime = animation.startTime,\n    delay = animation.delay,\n    duration = animation.duration;\n  var hasOwnProperty = Object.prototype.hasOwnProperty;\n  each(animations, function (item) {\n    // 后一个动画开始执行的时间 < 前一个动画的结束时间 && 后一个动画的执行时间 > 前一个动画的延迟\n    if (startTime + delay < item.startTime + item.delay + item.duration && duration > item.delay) {\n      each(animation.toAttrs, function (v, k) {\n        if (hasOwnProperty.call(item.toAttrs, k)) {\n          delete item.toAttrs[k];\n          delete item.fromAttrs[k];\n        }\n      });\n    }\n  });\n  return animations;\n}\nvar Element = /** @class */function (_super) {\n  __extends(Element, _super);\n  function Element(cfg) {\n    var _this = _super.call(this, cfg) || this;\n    /**\n     * @protected\n     * 图形属性\n     * @type {ShapeAttrs}\n     */\n    _this.attrs = {};\n    var attrs = _this.getDefaultAttrs();\n    mix(attrs, cfg.attrs);\n    _this.attrs = attrs;\n    _this.initAttrs(attrs);\n    _this.initAnimate(); // 初始化动画\n    return _this;\n  }\n  // override\n  Element.prototype.getDefaultCfg = function () {\n    return {\n      visible: true,\n      capture: true,\n      zIndex: 0\n    };\n  };\n  /**\n   * @protected\n   * 获取默认的属相\n   */\n  Element.prototype.getDefaultAttrs = function () {\n    return {\n      matrix: this.getDefaultMatrix(),\n      opacity: 1\n    };\n  };\n  /**\n   * @protected\n   * 一些方法调用会引起画布变化\n   * @param {ChangeType} changeType 改变的类型\n   */\n  Element.prototype.onCanvasChange = function (changeType) {};\n  /**\n   * @protected\n   * 初始化属性，有些属性需要加工\n   * @param {object} attrs 属性值\n   */\n  Element.prototype.initAttrs = function (attrs) {};\n  /**\n   * @protected\n   * 初始化动画\n   */\n  Element.prototype.initAnimate = function () {\n    this.set('animable', true);\n    this.set('animating', false);\n  };\n  Element.prototype.isGroup = function () {\n    return false;\n  };\n  Element.prototype.getParent = function () {\n    return this.get('parent');\n  };\n  Element.prototype.getCanvas = function () {\n    return this.get('canvas');\n  };\n  Element.prototype.attr = function () {\n    var _a;\n    var args = [];\n    for (var _i = 0; _i < arguments.length; _i++) {\n      args[_i] = arguments[_i];\n    }\n    var name = args[0],\n      value = args[1];\n    if (!name) return this.attrs;\n    if (isObject(name)) {\n      for (var k in name) {\n        this.setAttr(k, name[k]);\n      }\n      this.afterAttrsChange(name);\n      return this;\n    }\n    if (args.length === 2) {\n      this.setAttr(name, value);\n      this.afterAttrsChange((_a = {}, _a[name] = value, _a));\n      return this;\n    }\n    return this.attrs[name];\n  };\n  // 是否被裁剪，被裁剪则不显示，不参与拾取\n  Element.prototype.isClipped = function (refX, refY) {\n    var clip = this.getClip();\n    return clip && !clip.isHit(refX, refY);\n  };\n  /**\n   * 内部设置属性值的接口\n   * @param {string} name 属性名\n   * @param {any} value 属性值\n   */\n  Element.prototype.setAttr = function (name, value) {\n    var originValue = this.attrs[name];\n    if (originValue !== value) {\n      this.attrs[name] = value;\n      this.onAttrChange(name, value, originValue);\n    }\n  };\n  /**\n   * @protected\n   * 属性值发生改变\n   * @param {string} name 属性名\n   * @param {any} value 属性值\n   * @param {any} originValue 属性值\n   */\n  Element.prototype.onAttrChange = function (name, value, originValue) {\n    if (name === 'matrix') {\n      this.set('totalMatrix', null);\n    }\n  };\n  /**\n   * 属性更改后需要做的事情\n   * @protected\n   */\n  Element.prototype.afterAttrsChange = function (targetAttrs) {\n    if (this.cfg.isClipShape) {\n      var applyTo = this.cfg.applyTo;\n      if (applyTo) {\n        applyTo.onCanvasChange('clip');\n      }\n    } else {\n      this.onCanvasChange('attr');\n    }\n  };\n  Element.prototype.show = function () {\n    // 不是高频操作直接使用 set\n    this.set('visible', true);\n    this.onCanvasChange('show');\n    return this;\n  };\n  Element.prototype.hide = function () {\n    // 不是高频操作直接使用 set\n    this.set('visible', false);\n    this.onCanvasChange('hide');\n    return this;\n  };\n  Element.prototype.setZIndex = function (zIndex) {\n    this.set('zIndex', zIndex);\n    var parent = this.getParent();\n    if (parent) {\n      // 改变 zIndex 不应该立即触发渲染 (调用 onCanvasChange('zIndex'))，需要经过 sort 再触发\n      parent.sort();\n    }\n    return this;\n  };\n  Element.prototype.toFront = function () {\n    var parent = this.getParent();\n    if (!parent) {\n      return;\n    }\n    var children = parent.getChildren();\n    var el = this.get('el');\n    var index = children.indexOf(this);\n    children.splice(index, 1);\n    children.push(this);\n    this.onCanvasChange('zIndex');\n  };\n  Element.prototype.toBack = function () {\n    var parent = this.getParent();\n    if (!parent) {\n      return;\n    }\n    var children = parent.getChildren();\n    var el = this.get('el');\n    var index = children.indexOf(this);\n    children.splice(index, 1);\n    children.unshift(this);\n    this.onCanvasChange('zIndex');\n  };\n  Element.prototype.remove = function (destroy) {\n    if (destroy === void 0) {\n      destroy = true;\n    }\n    var parent = this.getParent();\n    if (parent) {\n      removeFromArray(parent.getChildren(), this);\n      if (!parent.get('clearing')) {\n        // 如果父元素正在清理，当前元素不触发 remove\n        this.onCanvasChange('remove');\n      }\n    } else {\n      this.onCanvasChange('remove');\n    }\n    if (destroy) {\n      this.destroy();\n    }\n  };\n  Element.prototype.resetMatrix = function () {\n    this.attr(MATRIX, this.getDefaultMatrix());\n    this.onCanvasChange('matrix');\n  };\n  Element.prototype.getMatrix = function () {\n    return this.attr(MATRIX);\n  };\n  Element.prototype.setMatrix = function (m) {\n    this.attr(MATRIX, m);\n    this.onCanvasChange('matrix');\n  };\n  // 获取总的 matrix\n  Element.prototype.getTotalMatrix = function () {\n    var totalMatrix = this.cfg.totalMatrix;\n    if (!totalMatrix) {\n      var currentMatrix = this.attr('matrix');\n      var parentMatrix = this.cfg.parentMatrix;\n      if (parentMatrix && currentMatrix) {\n        totalMatrix = multiplyMatrix(parentMatrix, currentMatrix);\n      } else {\n        totalMatrix = currentMatrix || parentMatrix;\n      }\n      this.set('totalMatrix', totalMatrix);\n    }\n    return totalMatrix;\n  };\n  // 上层分组设置 matrix\n  Element.prototype.applyMatrix = function (matrix) {\n    var currentMatrix = this.attr('matrix');\n    var totalMatrix = null;\n    if (matrix && currentMatrix) {\n      totalMatrix = multiplyMatrix(matrix, currentMatrix);\n    } else {\n      totalMatrix = currentMatrix || matrix;\n    }\n    this.set('totalMatrix', totalMatrix);\n    this.set('parentMatrix', matrix);\n  };\n  /**\n   * @protected\n   * 获取默认的矩阵\n   * @returns {number[]|null} 默认的矩阵\n   */\n  Element.prototype.getDefaultMatrix = function () {\n    return null;\n  };\n  // 将向量应用设置的矩阵\n  Element.prototype.applyToMatrix = function (v) {\n    var matrix = this.attr('matrix');\n    if (matrix) {\n      return multiplyVec2(matrix, v);\n    }\n    return v;\n  };\n  // 根据设置的矩阵，将向量转换相对于图形/分组的位置\n  Element.prototype.invertFromMatrix = function (v) {\n    var matrix = this.attr('matrix');\n    if (matrix) {\n      var invertMatrix = invert(matrix);\n      if (invertMatrix) {\n        return multiplyVec2(invertMatrix, v);\n      }\n    }\n    return v;\n  };\n  // 设置 clip\n  Element.prototype.setClip = function (clipCfg) {\n    var canvas = this.getCanvas();\n    // 应该只设置当前元素的 clip，不应该去修改 clip 本身，方便 clip 被复用\n    // TODO: setClip 的传参既 shape 配置，也支持 shape 对象\n    // const preShape = this.get('clipShape');\n    // if (preShape) {\n    //   // 将之前的 clipShape 销毁\n    //   preShape.destroy();\n    // }\n    var clipShape = null;\n    // 如果配置项为 null，则不移除 clipShape\n    if (clipCfg) {\n      var ShapeBase = this.getShapeBase();\n      var shapeType = upperFirst(clipCfg.type);\n      var Cons = ShapeBase[shapeType];\n      if (Cons) {\n        clipShape = new Cons({\n          type: clipCfg.type,\n          isClipShape: true,\n          applyTo: this,\n          attrs: clipCfg.attrs,\n          canvas: canvas\n        });\n      }\n    }\n    this.set('clipShape', clipShape);\n    this.onCanvasChange('clip');\n    return clipShape;\n  };\n  Element.prototype.getClip = function () {\n    // 高频率调用的地方直接使用 this.cfg.xxx\n    var clipShape = this.cfg.clipShape;\n    // 未设置时返回 Null，保证一致性\n    if (!clipShape) {\n      return null;\n    }\n    return clipShape;\n  };\n  Element.prototype.clone = function () {\n    var _this = this;\n    var originAttrs = this.attrs;\n    var attrs = {};\n    each(originAttrs, function (i, k) {\n      if (isArray(originAttrs[k])) {\n        attrs[k] = _cloneArrayAttr(originAttrs[k]);\n      } else {\n        attrs[k] = originAttrs[k];\n      }\n    });\n    var cons = this.constructor;\n    // @ts-ignore\n    var clone = new cons({\n      attrs: attrs\n    });\n    each(CLONE_CFGS, function (cfgName) {\n      clone.set(cfgName, _this.get(cfgName));\n    });\n    return clone;\n  };\n  Element.prototype.destroy = function () {\n    var destroyed = this.destroyed;\n    if (destroyed) {\n      return;\n    }\n    this.attrs = {};\n    _super.prototype.destroy.call(this);\n    // this.onCanvasChange('destroy');\n  };\n  /**\n   * 是否处于动画暂停状态\n   * @return {boolean} 是否处于动画暂停状态\n   */\n  Element.prototype.isAnimatePaused = function () {\n    return this.get('_pause').isPaused;\n  };\n  /**\n   * 执行动画，支持多种函数签名\n   * 1. animate(toAttrs: ElementAttrs, duration: number, easing?: string, callback?: () => void, delay?: number)\n   * 2. animate(onFrame: OnFrame, duration: number, easing?: string, callback?: () => void, delay?: number)\n   * 3. animate(toAttrs: ElementAttrs, cfg: AnimateCfg)\n   * 4. animate(onFrame: OnFrame, cfg: AnimateCfg)\n   * 各个参数的含义为:\n   *   toAttrs  动画最终状态\n   *   onFrame  自定义帧动画函数\n   *   duration 动画执行时间\n   *   easing   动画缓动效果\n   *   callback 动画执行后的回调\n   *   delay    动画延迟时间\n   */\n  Element.prototype.animate = function () {\n    var args = [];\n    for (var _i = 0; _i < arguments.length; _i++) {\n      args[_i] = arguments[_i];\n    }\n    if (!this.get('timeline') && !this.get('canvas')) {\n      return;\n    }\n    this.set('animating', true);\n    var timeline = this.get('timeline');\n    if (!timeline) {\n      timeline = this.get('canvas').get('timeline');\n      this.set('timeline', timeline);\n    }\n    var animations = this.get('animations') || [];\n    // 初始化 tick\n    if (!timeline.timer) {\n      timeline.initTimer();\n    }\n    var toAttrs = args[0],\n      duration = args[1],\n      _a = args[2],\n      easing = _a === void 0 ? 'easeLinear' : _a,\n      _b = args[3],\n      callback = _b === void 0 ? noop : _b,\n      _c = args[4],\n      delay = _c === void 0 ? 0 : _c;\n    var onFrame;\n    var repeat;\n    var pauseCallback;\n    var resumeCallback;\n    var animateCfg;\n    // 第二个参数，既可以是动画最终状态 toAttrs，也可以是自定义帧动画函数 onFrame\n    if (isFunction(toAttrs)) {\n      onFrame = toAttrs;\n      toAttrs = {};\n    } else if (isObject(toAttrs) && toAttrs.onFrame) {\n      // 兼容 3.0 中的写法，onFrame 和 repeat 可在 toAttrs 中设置\n      onFrame = toAttrs.onFrame;\n      repeat = toAttrs.repeat;\n    }\n    // 第二个参数，既可以是执行时间 duration，也可以是动画参数 animateCfg\n    if (isObject(duration)) {\n      animateCfg = duration;\n      duration = animateCfg.duration;\n      easing = animateCfg.easing || 'easeLinear';\n      delay = animateCfg.delay || 0;\n      // animateCfg 中的设置优先级更高\n      repeat = animateCfg.repeat || repeat || false;\n      callback = animateCfg.callback || noop;\n      pauseCallback = animateCfg.pauseCallback || noop;\n      resumeCallback = animateCfg.resumeCallback || noop;\n    } else {\n      // 第四个参数，既可以是回调函数 callback，也可以是延迟时间 delay\n      if (isNumber(callback)) {\n        delay = callback;\n        callback = null;\n      }\n      // 第三个参数，既可以是缓动参数 easing，也可以是回调函数 callback\n      if (isFunction(easing)) {\n        callback = easing;\n        easing = 'easeLinear';\n      } else {\n        easing = easing || 'easeLinear';\n      }\n    }\n    var formatToAttrs = getFormatToAttrs(toAttrs, this);\n    var animation = {\n      fromAttrs: getFormatFromAttrs(formatToAttrs, this),\n      toAttrs: formatToAttrs,\n      duration: duration,\n      easing: easing,\n      repeat: repeat,\n      callback: callback,\n      pauseCallback: pauseCallback,\n      resumeCallback: resumeCallback,\n      delay: delay,\n      startTime: timeline.getTime(),\n      id: uniqueId(),\n      onFrame: onFrame,\n      pathFormatted: false\n    };\n    // 如果动画元素队列中已经有这个图形了\n    if (animations.length > 0) {\n      // 先检查是否需要合并属性。若有相同的动画，将该属性从前一个动画中删除,直接用后一个动画中\n      animations = checkExistedAttrs(animations, animation);\n    } else {\n      // 否则将图形添加到动画元素队列\n      timeline.addAnimator(this);\n    }\n    animations.push(animation);\n    this.set('animations', animations);\n    this.set('_pause', {\n      isPaused: false\n    });\n  };\n  /**\n   * 停止动画\n   * @param {boolean} toEnd 是否到动画的最终状态\n   */\n  Element.prototype.stopAnimate = function (toEnd) {\n    var _this = this;\n    if (toEnd === void 0) {\n      toEnd = true;\n    }\n    var animations = this.get('animations');\n    each(animations, function (animation) {\n      // 将动画执行到最后一帧\n      if (toEnd) {\n        if (animation.onFrame) {\n          _this.attr(animation.onFrame(1));\n        } else {\n          _this.attr(animation.toAttrs);\n        }\n      }\n      if (animation.callback) {\n        // 动画停止时的回调\n        animation.callback();\n      }\n    });\n    this.set('animating', false);\n    this.set('animations', []);\n  };\n  /**\n   * 暂停动画\n   */\n  Element.prototype.pauseAnimate = function () {\n    var timeline = this.get('timeline');\n    var animations = this.get('animations');\n    var pauseTime = timeline.getTime();\n    each(animations, function (animation) {\n      animation._paused = true;\n      animation._pauseTime = pauseTime;\n      if (animation.pauseCallback) {\n        // 动画暂停时的回调\n        animation.pauseCallback();\n      }\n    });\n    // 记录下是在什么时候暂停的\n    this.set('_pause', {\n      isPaused: true,\n      pauseTime: pauseTime\n    });\n    return this;\n  };\n  /**\n   * 恢复动画\n   */\n  Element.prototype.resumeAnimate = function () {\n    var timeline = this.get('timeline');\n    var current = timeline.getTime();\n    var animations = this.get('animations');\n    var pauseTime = this.get('_pause').pauseTime;\n    // 之后更新属性需要计算动画已经执行的时长，如果暂停了，就把初始时间调后\n    each(animations, function (animation) {\n      animation.startTime = animation.startTime + (current - pauseTime);\n      animation._paused = false;\n      animation._pauseTime = null;\n      if (animation.resumeCallback) {\n        animation.resumeCallback();\n      }\n    });\n    this.set('_pause', {\n      isPaused: false\n    });\n    this.set('animations', animations);\n    return this;\n  };\n  /**\n   * 触发委托事件\n   * @param  {string}     type 事件类型\n   * @param  {GraphEvent} eventObj 事件对象\n   */\n  Element.prototype.emitDelegation = function (type, eventObj) {\n    var _this = this;\n    var paths = eventObj.propagationPath;\n    var events = this.getEvents();\n    var relativeShape;\n    if (type === 'mouseenter') {\n      relativeShape = eventObj.fromShape;\n    } else if (type === 'mouseleave') {\n      relativeShape = eventObj.toShape;\n    }\n    var _loop_1 = function (i) {\n      var element = paths[i];\n      // 暂定跟 name 绑定\n      var name_1 = element.get('name');\n      if (name_1) {\n        // 第一个 mouseenter 和 mouseleave 的停止即可，因为后面的都是前面的 Parent\n        if (\n        // 只有 element 是 Group 或者 Canvas 的时候，才需要判断 isParent\n        (element.isGroup() || element.isCanvas && element.isCanvas()) && relativeShape && isParent(element, relativeShape)) {\n          return \"break\";\n        }\n        if (isArray(name_1)) {\n          each(name_1, function (subName) {\n            _this.emitDelegateEvent(element, subName, eventObj);\n          });\n        } else {\n          this_1.emitDelegateEvent(element, name_1, eventObj);\n        }\n      }\n    };\n    var this_1 = this;\n    // 至少有一个对象，且第一个对象为 shape\n    for (var i = 0; i < paths.length; i++) {\n      var state_1 = _loop_1(i);\n      if (state_1 === \"break\") break;\n    }\n  };\n  Element.prototype.emitDelegateEvent = function (element, name, eventObj) {\n    var events = this.getEvents();\n    // 事件委托的形式 name:type\n    var eventName = name + DELEGATION_SPLIT + eventObj.type;\n    if (events[eventName] || events[WILDCARD]) {\n      // 对于通配符 *，事件名称 = 委托事件名称\n      eventObj.name = eventName;\n      eventObj.currentTarget = element;\n      eventObj.delegateTarget = this;\n      // 将委托事件的监听对象 delegateObject 挂载到事件对象上\n      eventObj.delegateObject = element.get('delegateObject');\n      this.emit(eventName, eventObj);\n    }\n  };\n  /**\n   * 移动元素\n   * @param {number} translateX 水平移动距离\n   * @param {number} translateY 垂直移动距离\n   * @return {IElement} 元素\n   */\n  Element.prototype.translate = function (translateX, translateY) {\n    if (translateX === void 0) {\n      translateX = 0;\n    }\n    if (translateY === void 0) {\n      translateY = 0;\n    }\n    var matrix = this.getMatrix();\n    var newMatrix = transform(matrix, [['t', translateX, translateY]]);\n    this.setMatrix(newMatrix);\n    return this;\n  };\n  /**\n   * 移动元素到目标位置\n   * @param {number} targetX 目标位置的水平坐标\n   * @param {number} targetX 目标位置的垂直坐标\n   * @return {IElement} 元素\n   */\n  Element.prototype.move = function (targetX, targetY) {\n    var x = this.attr('x') || 0;\n    var y = this.attr('y') || 0;\n    this.translate(targetX - x, targetY - y);\n    return this;\n  };\n  /**\n   * 移动元素到目标位置，等价于 move 方法。由于 moveTo 的语义性更强，因此在文档中推荐使用 moveTo 方法\n   * @param {number} targetX 目标位置的 x 轴坐标\n   * @param {number} targetY 目标位置的 y 轴坐标\n   * @return {IElement} 元素\n   */\n  Element.prototype.moveTo = function (targetX, targetY) {\n    return this.move(targetX, targetY);\n  };\n  /**\n   * 缩放元素\n   * @param {number} ratioX 水平缩放比例\n   * @param {number} ratioY 垂直缩放比例\n   * @return {IElement} 元素\n   */\n  Element.prototype.scale = function (ratioX, ratioY) {\n    var matrix = this.getMatrix();\n    var newMatrix = transform(matrix, [['s', ratioX, ratioY || ratioX]]);\n    this.setMatrix(newMatrix);\n    return this;\n  };\n  /**\n   * 以画布左上角 (0, 0) 为中心旋转元素\n   * @param {number} radian 旋转角度(弧度值)\n   * @return {IElement} 元素\n   */\n  Element.prototype.rotate = function (radian) {\n    var matrix = this.getMatrix();\n    var newMatrix = transform(matrix, [['r', radian]]);\n    this.setMatrix(newMatrix);\n    return this;\n  };\n  /**\n   * 以起始点为中心旋转元素\n   * @param {number} radian 旋转角度(弧度值)\n   * @return {IElement} 元素\n   */\n  Element.prototype.rotateAtStart = function (rotate) {\n    var _a = this.attr(),\n      x = _a.x,\n      y = _a.y;\n    var matrix = this.getMatrix();\n    var newMatrix = transform(matrix, [['t', -x, -y], ['r', rotate], ['t', x, y]]);\n    this.setMatrix(newMatrix);\n    return this;\n  };\n  /**\n   * 以任意点 (x, y) 为中心旋转元素\n   * @param {number} radian 旋转角度(弧度值)\n   * @return {IElement} 元素\n   */\n  Element.prototype.rotateAtPoint = function (x, y, rotate) {\n    var matrix = this.getMatrix();\n    var newMatrix = transform(matrix, [['t', -x, -y], ['r', rotate], ['t', x, y]]);\n    this.setMatrix(newMatrix);\n    return this;\n  };\n  return Element;\n}(Base);\nexport default Element;","map":{"version":3,"names":["__extends","each","isEqual","isFunction","isNumber","isObject","isArray","noop","mix","upperFirst","uniqueId","ext","removeFromArray","isParent","multiplyMatrix","multiplyVec2","invert","Base","transform","MATRIX","CLONE_CFGS","RESERVED_PORPS","DELEGATION_SPLIT","WILDCARD","_cloneArrayAttr","arr","result","i","length","push","concat","getFormatFromAttrs","toAttrs","shape","fromAttrs","attrs","k","getFormatToAttrs","props","attr","v","indexOf","checkExistedAttrs","animations","animation","onFrame","startTime","delay","duration","hasOwnProperty","Object","prototype","item","call","Element","_super","cfg","_this","getDefaultAttrs","initAttrs","initAnimate","getDefaultCfg","visible","capture","zIndex","matrix","getDefaultMatrix","opacity","onCanvasChange","changeType","set","isGroup","getParent","get","getCanvas","_a","args","_i","arguments","name","value","setAttr","afterAttrsChange","isClipped","refX","refY","clip","getClip","isHit","originValue","onAttrChange","targetAttrs","isClipShape","applyTo","show","hide","setZIndex","parent","sort","toFront","children","getChildren","el","index","splice","toBack","unshift","remove","destroy","resetMatrix","getMatrix","setMatrix","m","getTotalMatrix","totalMatrix","currentMatrix","parentMatrix","applyMatrix","applyToMatrix","invertFromMatrix","invertMatrix","setClip","clipCfg","canvas","clipShape","ShapeBase","getShapeBase","shapeType","type","Cons","clone","originAttrs","cons","constructor","cfgName","destroyed","isAnimatePaused","isPaused","animate","timeline","timer","initTimer","easing","_b","callback","_c","repeat","pauseCallback","resumeCallback","animateCfg","formatToAttrs","getTime","id","pathFormatted","addAnimator","stopAnimate","toEnd","pauseAnimate","pauseTime","_paused","_pauseTime","resumeAnimate","current","emitDelegation","eventObj","paths","propagationPath","events","getEvents","relativeShape","fromShape","toShape","_loop_1","element","name_1","isCanvas","subName","emitDelegateEvent","this_1","state_1","eventName","currentTarget","delegateTarget","delegateObject","emit","translate","translateX","translateY","newMatrix","move","targetX","targetY","x","y","moveTo","scale","ratioX","ratioY","rotate","radian","rotateAtStart","rotateAtPoint"],"sources":["/Users/obiechina/Documents/ridy-flutter-full-taxi-solution 2/node_modules/@antv/g-base/esm/abstract/element.js"],"sourcesContent":["import { __extends } from \"tslib\";\nimport { each, isEqual, isFunction, isNumber, isObject, isArray, noop, mix, upperFirst, uniqueId } from '@antv/util';\nimport { ext } from '@antv/matrix-util';\nimport { removeFromArray, isParent } from '../util/util';\nimport { multiplyMatrix, multiplyVec2, invert } from '../util/matrix';\nimport Base from './base';\nvar transform = ext.transform;\nvar MATRIX = 'matrix';\nvar CLONE_CFGS = ['zIndex', 'capture', 'visible', 'type'];\n// 可以在 toAttrs 中设置，但不属于绘图属性的字段\nvar RESERVED_PORPS = ['repeat'];\nvar DELEGATION_SPLIT = ':';\nvar WILDCARD = '*';\n// 需要考虑数组嵌套数组的场景\n// 数组嵌套对象的场景不考虑\nfunction _cloneArrayAttr(arr) {\n    var result = [];\n    for (var i = 0; i < arr.length; i++) {\n        if (isArray(arr[i])) {\n            result.push([].concat(arr[i]));\n        }\n        else {\n            result.push(arr[i]);\n        }\n    }\n    return result;\n}\nfunction getFormatFromAttrs(toAttrs, shape) {\n    var fromAttrs = {};\n    var attrs = shape.attrs;\n    for (var k in toAttrs) {\n        fromAttrs[k] = attrs[k];\n    }\n    return fromAttrs;\n}\nfunction getFormatToAttrs(props, shape) {\n    var toAttrs = {};\n    var attrs = shape.attr();\n    each(props, function (v, k) {\n        if (RESERVED_PORPS.indexOf(k) === -1 && !isEqual(attrs[k], v)) {\n            toAttrs[k] = v;\n        }\n    });\n    return toAttrs;\n}\nfunction checkExistedAttrs(animations, animation) {\n    if (animation.onFrame) {\n        return animations;\n    }\n    var startTime = animation.startTime, delay = animation.delay, duration = animation.duration;\n    var hasOwnProperty = Object.prototype.hasOwnProperty;\n    each(animations, function (item) {\n        // 后一个动画开始执行的时间 < 前一个动画的结束时间 && 后一个动画的执行时间 > 前一个动画的延迟\n        if (startTime + delay < item.startTime + item.delay + item.duration && duration > item.delay) {\n            each(animation.toAttrs, function (v, k) {\n                if (hasOwnProperty.call(item.toAttrs, k)) {\n                    delete item.toAttrs[k];\n                    delete item.fromAttrs[k];\n                }\n            });\n        }\n    });\n    return animations;\n}\nvar Element = /** @class */ (function (_super) {\n    __extends(Element, _super);\n    function Element(cfg) {\n        var _this = _super.call(this, cfg) || this;\n        /**\n         * @protected\n         * 图形属性\n         * @type {ShapeAttrs}\n         */\n        _this.attrs = {};\n        var attrs = _this.getDefaultAttrs();\n        mix(attrs, cfg.attrs);\n        _this.attrs = attrs;\n        _this.initAttrs(attrs);\n        _this.initAnimate(); // 初始化动画\n        return _this;\n    }\n    // override\n    Element.prototype.getDefaultCfg = function () {\n        return {\n            visible: true,\n            capture: true,\n            zIndex: 0,\n        };\n    };\n    /**\n     * @protected\n     * 获取默认的属相\n     */\n    Element.prototype.getDefaultAttrs = function () {\n        return {\n            matrix: this.getDefaultMatrix(),\n            opacity: 1,\n        };\n    };\n    /**\n     * @protected\n     * 一些方法调用会引起画布变化\n     * @param {ChangeType} changeType 改变的类型\n     */\n    Element.prototype.onCanvasChange = function (changeType) { };\n    /**\n     * @protected\n     * 初始化属性，有些属性需要加工\n     * @param {object} attrs 属性值\n     */\n    Element.prototype.initAttrs = function (attrs) { };\n    /**\n     * @protected\n     * 初始化动画\n     */\n    Element.prototype.initAnimate = function () {\n        this.set('animable', true);\n        this.set('animating', false);\n    };\n    Element.prototype.isGroup = function () {\n        return false;\n    };\n    Element.prototype.getParent = function () {\n        return this.get('parent');\n    };\n    Element.prototype.getCanvas = function () {\n        return this.get('canvas');\n    };\n    Element.prototype.attr = function () {\n        var _a;\n        var args = [];\n        for (var _i = 0; _i < arguments.length; _i++) {\n            args[_i] = arguments[_i];\n        }\n        var name = args[0], value = args[1];\n        if (!name)\n            return this.attrs;\n        if (isObject(name)) {\n            for (var k in name) {\n                this.setAttr(k, name[k]);\n            }\n            this.afterAttrsChange(name);\n            return this;\n        }\n        if (args.length === 2) {\n            this.setAttr(name, value);\n            this.afterAttrsChange((_a = {},\n                _a[name] = value,\n                _a));\n            return this;\n        }\n        return this.attrs[name];\n    };\n    // 是否被裁剪，被裁剪则不显示，不参与拾取\n    Element.prototype.isClipped = function (refX, refY) {\n        var clip = this.getClip();\n        return clip && !clip.isHit(refX, refY);\n    };\n    /**\n     * 内部设置属性值的接口\n     * @param {string} name 属性名\n     * @param {any} value 属性值\n     */\n    Element.prototype.setAttr = function (name, value) {\n        var originValue = this.attrs[name];\n        if (originValue !== value) {\n            this.attrs[name] = value;\n            this.onAttrChange(name, value, originValue);\n        }\n    };\n    /**\n     * @protected\n     * 属性值发生改变\n     * @param {string} name 属性名\n     * @param {any} value 属性值\n     * @param {any} originValue 属性值\n     */\n    Element.prototype.onAttrChange = function (name, value, originValue) {\n        if (name === 'matrix') {\n            this.set('totalMatrix', null);\n        }\n    };\n    /**\n     * 属性更改后需要做的事情\n     * @protected\n     */\n    Element.prototype.afterAttrsChange = function (targetAttrs) {\n        if (this.cfg.isClipShape) {\n            var applyTo = this.cfg.applyTo;\n            if (applyTo) {\n                applyTo.onCanvasChange('clip');\n            }\n        }\n        else {\n            this.onCanvasChange('attr');\n        }\n    };\n    Element.prototype.show = function () {\n        // 不是高频操作直接使用 set\n        this.set('visible', true);\n        this.onCanvasChange('show');\n        return this;\n    };\n    Element.prototype.hide = function () {\n        // 不是高频操作直接使用 set\n        this.set('visible', false);\n        this.onCanvasChange('hide');\n        return this;\n    };\n    Element.prototype.setZIndex = function (zIndex) {\n        this.set('zIndex', zIndex);\n        var parent = this.getParent();\n        if (parent) {\n            // 改变 zIndex 不应该立即触发渲染 (调用 onCanvasChange('zIndex'))，需要经过 sort 再触发\n            parent.sort();\n        }\n        return this;\n    };\n    Element.prototype.toFront = function () {\n        var parent = this.getParent();\n        if (!parent) {\n            return;\n        }\n        var children = parent.getChildren();\n        var el = this.get('el');\n        var index = children.indexOf(this);\n        children.splice(index, 1);\n        children.push(this);\n        this.onCanvasChange('zIndex');\n    };\n    Element.prototype.toBack = function () {\n        var parent = this.getParent();\n        if (!parent) {\n            return;\n        }\n        var children = parent.getChildren();\n        var el = this.get('el');\n        var index = children.indexOf(this);\n        children.splice(index, 1);\n        children.unshift(this);\n        this.onCanvasChange('zIndex');\n    };\n    Element.prototype.remove = function (destroy) {\n        if (destroy === void 0) { destroy = true; }\n        var parent = this.getParent();\n        if (parent) {\n            removeFromArray(parent.getChildren(), this);\n            if (!parent.get('clearing')) {\n                // 如果父元素正在清理，当前元素不触发 remove\n                this.onCanvasChange('remove');\n            }\n        }\n        else {\n            this.onCanvasChange('remove');\n        }\n        if (destroy) {\n            this.destroy();\n        }\n    };\n    Element.prototype.resetMatrix = function () {\n        this.attr(MATRIX, this.getDefaultMatrix());\n        this.onCanvasChange('matrix');\n    };\n    Element.prototype.getMatrix = function () {\n        return this.attr(MATRIX);\n    };\n    Element.prototype.setMatrix = function (m) {\n        this.attr(MATRIX, m);\n        this.onCanvasChange('matrix');\n    };\n    // 获取总的 matrix\n    Element.prototype.getTotalMatrix = function () {\n        var totalMatrix = this.cfg.totalMatrix;\n        if (!totalMatrix) {\n            var currentMatrix = this.attr('matrix');\n            var parentMatrix = this.cfg.parentMatrix;\n            if (parentMatrix && currentMatrix) {\n                totalMatrix = multiplyMatrix(parentMatrix, currentMatrix);\n            }\n            else {\n                totalMatrix = currentMatrix || parentMatrix;\n            }\n            this.set('totalMatrix', totalMatrix);\n        }\n        return totalMatrix;\n    };\n    // 上层分组设置 matrix\n    Element.prototype.applyMatrix = function (matrix) {\n        var currentMatrix = this.attr('matrix');\n        var totalMatrix = null;\n        if (matrix && currentMatrix) {\n            totalMatrix = multiplyMatrix(matrix, currentMatrix);\n        }\n        else {\n            totalMatrix = currentMatrix || matrix;\n        }\n        this.set('totalMatrix', totalMatrix);\n        this.set('parentMatrix', matrix);\n    };\n    /**\n     * @protected\n     * 获取默认的矩阵\n     * @returns {number[]|null} 默认的矩阵\n     */\n    Element.prototype.getDefaultMatrix = function () {\n        return null;\n    };\n    // 将向量应用设置的矩阵\n    Element.prototype.applyToMatrix = function (v) {\n        var matrix = this.attr('matrix');\n        if (matrix) {\n            return multiplyVec2(matrix, v);\n        }\n        return v;\n    };\n    // 根据设置的矩阵，将向量转换相对于图形/分组的位置\n    Element.prototype.invertFromMatrix = function (v) {\n        var matrix = this.attr('matrix');\n        if (matrix) {\n            var invertMatrix = invert(matrix);\n            if (invertMatrix) {\n                return multiplyVec2(invertMatrix, v);\n            }\n        }\n        return v;\n    };\n    // 设置 clip\n    Element.prototype.setClip = function (clipCfg) {\n        var canvas = this.getCanvas();\n        // 应该只设置当前元素的 clip，不应该去修改 clip 本身，方便 clip 被复用\n        // TODO: setClip 的传参既 shape 配置，也支持 shape 对象\n        // const preShape = this.get('clipShape');\n        // if (preShape) {\n        //   // 将之前的 clipShape 销毁\n        //   preShape.destroy();\n        // }\n        var clipShape = null;\n        // 如果配置项为 null，则不移除 clipShape\n        if (clipCfg) {\n            var ShapeBase = this.getShapeBase();\n            var shapeType = upperFirst(clipCfg.type);\n            var Cons = ShapeBase[shapeType];\n            if (Cons) {\n                clipShape = new Cons({\n                    type: clipCfg.type,\n                    isClipShape: true,\n                    applyTo: this,\n                    attrs: clipCfg.attrs,\n                    canvas: canvas,\n                });\n            }\n        }\n        this.set('clipShape', clipShape);\n        this.onCanvasChange('clip');\n        return clipShape;\n    };\n    Element.prototype.getClip = function () {\n        // 高频率调用的地方直接使用 this.cfg.xxx\n        var clipShape = this.cfg.clipShape;\n        // 未设置时返回 Null，保证一致性\n        if (!clipShape) {\n            return null;\n        }\n        return clipShape;\n    };\n    Element.prototype.clone = function () {\n        var _this = this;\n        var originAttrs = this.attrs;\n        var attrs = {};\n        each(originAttrs, function (i, k) {\n            if (isArray(originAttrs[k])) {\n                attrs[k] = _cloneArrayAttr(originAttrs[k]);\n            }\n            else {\n                attrs[k] = originAttrs[k];\n            }\n        });\n        var cons = this.constructor;\n        // @ts-ignore\n        var clone = new cons({ attrs: attrs });\n        each(CLONE_CFGS, function (cfgName) {\n            clone.set(cfgName, _this.get(cfgName));\n        });\n        return clone;\n    };\n    Element.prototype.destroy = function () {\n        var destroyed = this.destroyed;\n        if (destroyed) {\n            return;\n        }\n        this.attrs = {};\n        _super.prototype.destroy.call(this);\n        // this.onCanvasChange('destroy');\n    };\n    /**\n     * 是否处于动画暂停状态\n     * @return {boolean} 是否处于动画暂停状态\n     */\n    Element.prototype.isAnimatePaused = function () {\n        return this.get('_pause').isPaused;\n    };\n    /**\n     * 执行动画，支持多种函数签名\n     * 1. animate(toAttrs: ElementAttrs, duration: number, easing?: string, callback?: () => void, delay?: number)\n     * 2. animate(onFrame: OnFrame, duration: number, easing?: string, callback?: () => void, delay?: number)\n     * 3. animate(toAttrs: ElementAttrs, cfg: AnimateCfg)\n     * 4. animate(onFrame: OnFrame, cfg: AnimateCfg)\n     * 各个参数的含义为:\n     *   toAttrs  动画最终状态\n     *   onFrame  自定义帧动画函数\n     *   duration 动画执行时间\n     *   easing   动画缓动效果\n     *   callback 动画执行后的回调\n     *   delay    动画延迟时间\n     */\n    Element.prototype.animate = function () {\n        var args = [];\n        for (var _i = 0; _i < arguments.length; _i++) {\n            args[_i] = arguments[_i];\n        }\n        if (!this.get('timeline') && !this.get('canvas')) {\n            return;\n        }\n        this.set('animating', true);\n        var timeline = this.get('timeline');\n        if (!timeline) {\n            timeline = this.get('canvas').get('timeline');\n            this.set('timeline', timeline);\n        }\n        var animations = this.get('animations') || [];\n        // 初始化 tick\n        if (!timeline.timer) {\n            timeline.initTimer();\n        }\n        var toAttrs = args[0], duration = args[1], _a = args[2], easing = _a === void 0 ? 'easeLinear' : _a, _b = args[3], callback = _b === void 0 ? noop : _b, _c = args[4], delay = _c === void 0 ? 0 : _c;\n        var onFrame;\n        var repeat;\n        var pauseCallback;\n        var resumeCallback;\n        var animateCfg;\n        // 第二个参数，既可以是动画最终状态 toAttrs，也可以是自定义帧动画函数 onFrame\n        if (isFunction(toAttrs)) {\n            onFrame = toAttrs;\n            toAttrs = {};\n        }\n        else if (isObject(toAttrs) && toAttrs.onFrame) {\n            // 兼容 3.0 中的写法，onFrame 和 repeat 可在 toAttrs 中设置\n            onFrame = toAttrs.onFrame;\n            repeat = toAttrs.repeat;\n        }\n        // 第二个参数，既可以是执行时间 duration，也可以是动画参数 animateCfg\n        if (isObject(duration)) {\n            animateCfg = duration;\n            duration = animateCfg.duration;\n            easing = animateCfg.easing || 'easeLinear';\n            delay = animateCfg.delay || 0;\n            // animateCfg 中的设置优先级更高\n            repeat = animateCfg.repeat || repeat || false;\n            callback = animateCfg.callback || noop;\n            pauseCallback = animateCfg.pauseCallback || noop;\n            resumeCallback = animateCfg.resumeCallback || noop;\n        }\n        else {\n            // 第四个参数，既可以是回调函数 callback，也可以是延迟时间 delay\n            if (isNumber(callback)) {\n                delay = callback;\n                callback = null;\n            }\n            // 第三个参数，既可以是缓动参数 easing，也可以是回调函数 callback\n            if (isFunction(easing)) {\n                callback = easing;\n                easing = 'easeLinear';\n            }\n            else {\n                easing = easing || 'easeLinear';\n            }\n        }\n        var formatToAttrs = getFormatToAttrs(toAttrs, this);\n        var animation = {\n            fromAttrs: getFormatFromAttrs(formatToAttrs, this),\n            toAttrs: formatToAttrs,\n            duration: duration,\n            easing: easing,\n            repeat: repeat,\n            callback: callback,\n            pauseCallback: pauseCallback,\n            resumeCallback: resumeCallback,\n            delay: delay,\n            startTime: timeline.getTime(),\n            id: uniqueId(),\n            onFrame: onFrame,\n            pathFormatted: false,\n        };\n        // 如果动画元素队列中已经有这个图形了\n        if (animations.length > 0) {\n            // 先检查是否需要合并属性。若有相同的动画，将该属性从前一个动画中删除,直接用后一个动画中\n            animations = checkExistedAttrs(animations, animation);\n        }\n        else {\n            // 否则将图形添加到动画元素队列\n            timeline.addAnimator(this);\n        }\n        animations.push(animation);\n        this.set('animations', animations);\n        this.set('_pause', { isPaused: false });\n    };\n    /**\n     * 停止动画\n     * @param {boolean} toEnd 是否到动画的最终状态\n     */\n    Element.prototype.stopAnimate = function (toEnd) {\n        var _this = this;\n        if (toEnd === void 0) { toEnd = true; }\n        var animations = this.get('animations');\n        each(animations, function (animation) {\n            // 将动画执行到最后一帧\n            if (toEnd) {\n                if (animation.onFrame) {\n                    _this.attr(animation.onFrame(1));\n                }\n                else {\n                    _this.attr(animation.toAttrs);\n                }\n            }\n            if (animation.callback) {\n                // 动画停止时的回调\n                animation.callback();\n            }\n        });\n        this.set('animating', false);\n        this.set('animations', []);\n    };\n    /**\n     * 暂停动画\n     */\n    Element.prototype.pauseAnimate = function () {\n        var timeline = this.get('timeline');\n        var animations = this.get('animations');\n        var pauseTime = timeline.getTime();\n        each(animations, function (animation) {\n            animation._paused = true;\n            animation._pauseTime = pauseTime;\n            if (animation.pauseCallback) {\n                // 动画暂停时的回调\n                animation.pauseCallback();\n            }\n        });\n        // 记录下是在什么时候暂停的\n        this.set('_pause', {\n            isPaused: true,\n            pauseTime: pauseTime,\n        });\n        return this;\n    };\n    /**\n     * 恢复动画\n     */\n    Element.prototype.resumeAnimate = function () {\n        var timeline = this.get('timeline');\n        var current = timeline.getTime();\n        var animations = this.get('animations');\n        var pauseTime = this.get('_pause').pauseTime;\n        // 之后更新属性需要计算动画已经执行的时长，如果暂停了，就把初始时间调后\n        each(animations, function (animation) {\n            animation.startTime = animation.startTime + (current - pauseTime);\n            animation._paused = false;\n            animation._pauseTime = null;\n            if (animation.resumeCallback) {\n                animation.resumeCallback();\n            }\n        });\n        this.set('_pause', {\n            isPaused: false,\n        });\n        this.set('animations', animations);\n        return this;\n    };\n    /**\n     * 触发委托事件\n     * @param  {string}     type 事件类型\n     * @param  {GraphEvent} eventObj 事件对象\n     */\n    Element.prototype.emitDelegation = function (type, eventObj) {\n        var _this = this;\n        var paths = eventObj.propagationPath;\n        var events = this.getEvents();\n        var relativeShape;\n        if (type === 'mouseenter') {\n            relativeShape = eventObj.fromShape;\n        }\n        else if (type === 'mouseleave') {\n            relativeShape = eventObj.toShape;\n        }\n        var _loop_1 = function (i) {\n            var element = paths[i];\n            // 暂定跟 name 绑定\n            var name_1 = element.get('name');\n            if (name_1) {\n                // 第一个 mouseenter 和 mouseleave 的停止即可，因为后面的都是前面的 Parent\n                if (\n                // 只有 element 是 Group 或者 Canvas 的时候，才需要判断 isParent\n                (element.isGroup() || (element.isCanvas && element.isCanvas())) &&\n                    relativeShape &&\n                    isParent(element, relativeShape)) {\n                    return \"break\";\n                }\n                if (isArray(name_1)) {\n                    each(name_1, function (subName) {\n                        _this.emitDelegateEvent(element, subName, eventObj);\n                    });\n                }\n                else {\n                    this_1.emitDelegateEvent(element, name_1, eventObj);\n                }\n            }\n        };\n        var this_1 = this;\n        // 至少有一个对象，且第一个对象为 shape\n        for (var i = 0; i < paths.length; i++) {\n            var state_1 = _loop_1(i);\n            if (state_1 === \"break\")\n                break;\n        }\n    };\n    Element.prototype.emitDelegateEvent = function (element, name, eventObj) {\n        var events = this.getEvents();\n        // 事件委托的形式 name:type\n        var eventName = name + DELEGATION_SPLIT + eventObj.type;\n        if (events[eventName] || events[WILDCARD]) {\n            // 对于通配符 *，事件名称 = 委托事件名称\n            eventObj.name = eventName;\n            eventObj.currentTarget = element;\n            eventObj.delegateTarget = this;\n            // 将委托事件的监听对象 delegateObject 挂载到事件对象上\n            eventObj.delegateObject = element.get('delegateObject');\n            this.emit(eventName, eventObj);\n        }\n    };\n    /**\n     * 移动元素\n     * @param {number} translateX 水平移动距离\n     * @param {number} translateY 垂直移动距离\n     * @return {IElement} 元素\n     */\n    Element.prototype.translate = function (translateX, translateY) {\n        if (translateX === void 0) { translateX = 0; }\n        if (translateY === void 0) { translateY = 0; }\n        var matrix = this.getMatrix();\n        var newMatrix = transform(matrix, [['t', translateX, translateY]]);\n        this.setMatrix(newMatrix);\n        return this;\n    };\n    /**\n     * 移动元素到目标位置\n     * @param {number} targetX 目标位置的水平坐标\n     * @param {number} targetX 目标位置的垂直坐标\n     * @return {IElement} 元素\n     */\n    Element.prototype.move = function (targetX, targetY) {\n        var x = this.attr('x') || 0;\n        var y = this.attr('y') || 0;\n        this.translate(targetX - x, targetY - y);\n        return this;\n    };\n    /**\n     * 移动元素到目标位置，等价于 move 方法。由于 moveTo 的语义性更强，因此在文档中推荐使用 moveTo 方法\n     * @param {number} targetX 目标位置的 x 轴坐标\n     * @param {number} targetY 目标位置的 y 轴坐标\n     * @return {IElement} 元素\n     */\n    Element.prototype.moveTo = function (targetX, targetY) {\n        return this.move(targetX, targetY);\n    };\n    /**\n     * 缩放元素\n     * @param {number} ratioX 水平缩放比例\n     * @param {number} ratioY 垂直缩放比例\n     * @return {IElement} 元素\n     */\n    Element.prototype.scale = function (ratioX, ratioY) {\n        var matrix = this.getMatrix();\n        var newMatrix = transform(matrix, [['s', ratioX, ratioY || ratioX]]);\n        this.setMatrix(newMatrix);\n        return this;\n    };\n    /**\n     * 以画布左上角 (0, 0) 为中心旋转元素\n     * @param {number} radian 旋转角度(弧度值)\n     * @return {IElement} 元素\n     */\n    Element.prototype.rotate = function (radian) {\n        var matrix = this.getMatrix();\n        var newMatrix = transform(matrix, [['r', radian]]);\n        this.setMatrix(newMatrix);\n        return this;\n    };\n    /**\n     * 以起始点为中心旋转元素\n     * @param {number} radian 旋转角度(弧度值)\n     * @return {IElement} 元素\n     */\n    Element.prototype.rotateAtStart = function (rotate) {\n        var _a = this.attr(), x = _a.x, y = _a.y;\n        var matrix = this.getMatrix();\n        var newMatrix = transform(matrix, [\n            ['t', -x, -y],\n            ['r', rotate],\n            ['t', x, y],\n        ]);\n        this.setMatrix(newMatrix);\n        return this;\n    };\n    /**\n     * 以任意点 (x, y) 为中心旋转元素\n     * @param {number} radian 旋转角度(弧度值)\n     * @return {IElement} 元素\n     */\n    Element.prototype.rotateAtPoint = function (x, y, rotate) {\n        var matrix = this.getMatrix();\n        var newMatrix = transform(matrix, [\n            ['t', -x, -y],\n            ['r', rotate],\n            ['t', x, y],\n        ]);\n        this.setMatrix(newMatrix);\n        return this;\n    };\n    return Element;\n}(Base));\nexport default Element;\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}