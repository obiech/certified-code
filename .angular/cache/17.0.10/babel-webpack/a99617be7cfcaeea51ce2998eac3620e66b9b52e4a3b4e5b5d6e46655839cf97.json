{"ast":null,"code":"import { isArray, isNil, isString } from '@antv/util';\n// todo 这个到底目的是什么？\nvar toScaleString = function (scale, value) {\n  if (isString(value)) {\n    return value;\n  }\n  return scale.invert(scale.scale(value));\n};\n/**\n * 所有视觉通道属性的基类\n * @class Base\n */\nvar Attribute = /** @class */function () {\n  function Attribute(cfg) {\n    this.names = [];\n    this.scales = [];\n    this.linear = false;\n    this.values = [];\n    this.callback = function () {\n      return [];\n    };\n    // 解析配置\n    this._parseCfg(cfg);\n  }\n  /**\n   * 映射的值组成的数组\n   * @param params 对应 scale 顺序的值传入\n   */\n  Attribute.prototype.mapping = function () {\n    var _this = this;\n    var params = [];\n    for (var _i = 0; _i < arguments.length; _i++) {\n      params[_i] = arguments[_i];\n    }\n    var values = params.map(function (param, idx) {\n      return _this._toOriginParam(param, _this.scales[idx]);\n    });\n    return this.callback.apply(this, values);\n  };\n  /**\n   * 如果进行线性映射，返回对应的映射值\n   * @param percent\n   */\n  Attribute.prototype.getLinearValue = function (percent) {\n    // 分段数量\n    var steps = this.values.length - 1;\n    var step = Math.floor(steps * percent);\n    var leftPercent = steps * percent - step;\n    // todo 不懂这个逻辑\n    var start = this.values[step];\n    var end = step === steps ? start : this.values[step + 1];\n    // 线性方程\n    return start + (end - start) * leftPercent;\n  };\n  /**\n   * 根据度量获取属性名\n   */\n  Attribute.prototype.getNames = function () {\n    var scales = this.scales;\n    var names = this.names;\n    var length = Math.min(scales.length, names.length);\n    var rst = [];\n    for (var i = 0; i < length; i += 1) {\n      rst.push(names[i]);\n    }\n    return rst;\n  };\n  /**\n   * 获取所有的维度名\n   */\n  Attribute.prototype.getFields = function () {\n    return this.scales.map(function (scale) {\n      return scale.field;\n    });\n  };\n  /**\n   * 根据名称获取度量\n   * @param name\n   */\n  Attribute.prototype.getScale = function (name) {\n    return this.scales[this.names.indexOf(name)];\n  };\n  /**\n   * 默认的回调函数（用户没有自定义 callback，或者用户自定义 callback 返回空的时候，使用 values 映射）\n   * @param params\n   */\n  Attribute.prototype.defaultCallback = function () {\n    var _this = this;\n    var params = [];\n    for (var _i = 0; _i < arguments.length; _i++) {\n      params[_i] = arguments[_i];\n    }\n    // 没有 params 的情况，是指没有指定 fields，直接返回配置的 values 常量\n    if (params.length === 0) {\n      return this.values;\n    }\n    return params.map(function (param, idx) {\n      var scale = _this.scales[idx];\n      return scale.type === 'identity' ? scale.values[0] : _this._getAttributeValue(scale, param);\n    });\n  };\n  // 解析配置\n  Attribute.prototype._parseCfg = function (cfg) {\n    var _this = this;\n    var _a = cfg.type,\n      type = _a === void 0 ? 'base' : _a,\n      _b = cfg.names,\n      names = _b === void 0 ? [] : _b,\n      _c = cfg.scales,\n      scales = _c === void 0 ? [] : _c,\n      _d = cfg.values,\n      values = _d === void 0 ? [] : _d,\n      callback = cfg.callback;\n    this.type = type;\n    this.scales = scales;\n    this.values = values;\n    this.names = names;\n    // 构造 callback 方法\n    this.callback = function () {\n      var params = [];\n      for (var _i = 0; _i < arguments.length; _i++) {\n        params[_i] = arguments[_i];\n      }\n      /**\n       * 当用户设置的 callback 返回 null 时, 应该返回默认 callback 中的值\n       */\n      if (callback) {\n        // 使用用户返回的值处理\n        var ret = callback.apply(void 0, params);\n        if (!isNil(ret)) {\n          return [ret];\n        }\n      }\n      // 没有 callback 或者用户 callback 返回值为空，则使用默认的逻辑处理\n      return _this.defaultCallback.apply(_this, params);\n    };\n  };\n  // 获取属性值，将值映射到视觉通道\n  Attribute.prototype._getAttributeValue = function (scale, value) {\n    // 如果是非线性的字段，直接从 values 中取值即可\n    if (scale.isCategory && !this.linear) {\n      // 离散 scale 变换成索引\n      var idx = scale.translate(value);\n      return this.values[idx % this.values.length];\n    }\n    // 线性则使用线性值\n    var percent = scale.scale(value);\n    return this.getLinearValue(percent);\n  };\n  /**\n   * 通过 scale 拿到数据对应的原始的参数\n   * @param param\n   * @param scale\n   * @private\n   */\n  Attribute.prototype._toOriginParam = function (param, scale) {\n    // 是线性，直接返回\n    // 非线性，使用 scale 变换\n    return !scale.isLinear ? isArray(param) ? param.map(function (p) {\n      return toScaleString(scale, p);\n    }) : toScaleString(scale, param) : param;\n  };\n  return Attribute;\n}();\nexport default Attribute;","map":{"version":3,"names":["isArray","isNil","isString","toScaleString","scale","value","invert","Attribute","cfg","names","scales","linear","values","callback","_parseCfg","prototype","mapping","_this","params","_i","arguments","length","map","param","idx","_toOriginParam","apply","getLinearValue","percent","steps","step","Math","floor","leftPercent","start","end","getNames","min","rst","i","push","getFields","field","getScale","name","indexOf","defaultCallback","type","_getAttributeValue","_a","_b","_c","_d","ret","isCategory","translate","isLinear","p"],"sources":["/Users/obiechina/Documents/ridy-flutter-full-taxi-solution 2/node_modules/@antv/attr/esm/attributes/base.js"],"sourcesContent":["import { isArray, isNil, isString } from '@antv/util';\n// todo 这个到底目的是什么？\nvar toScaleString = function (scale, value) {\n    if (isString(value)) {\n        return value;\n    }\n    return scale.invert(scale.scale(value));\n};\n/**\n * 所有视觉通道属性的基类\n * @class Base\n */\nvar Attribute = /** @class */ (function () {\n    function Attribute(cfg) {\n        this.names = [];\n        this.scales = [];\n        this.linear = false;\n        this.values = [];\n        this.callback = function () { return []; };\n        // 解析配置\n        this._parseCfg(cfg);\n    }\n    /**\n     * 映射的值组成的数组\n     * @param params 对应 scale 顺序的值传入\n     */\n    Attribute.prototype.mapping = function () {\n        var _this = this;\n        var params = [];\n        for (var _i = 0; _i < arguments.length; _i++) {\n            params[_i] = arguments[_i];\n        }\n        var values = params.map(function (param, idx) {\n            return _this._toOriginParam(param, _this.scales[idx]);\n        });\n        return this.callback.apply(this, values);\n    };\n    /**\n     * 如果进行线性映射，返回对应的映射值\n     * @param percent\n     */\n    Attribute.prototype.getLinearValue = function (percent) {\n        // 分段数量\n        var steps = this.values.length - 1;\n        var step = Math.floor(steps * percent);\n        var leftPercent = steps * percent - step;\n        // todo 不懂这个逻辑\n        var start = this.values[step];\n        var end = step === steps ? start : this.values[step + 1];\n        // 线性方程\n        return start + (end - start) * leftPercent;\n    };\n    /**\n     * 根据度量获取属性名\n     */\n    Attribute.prototype.getNames = function () {\n        var scales = this.scales;\n        var names = this.names;\n        var length = Math.min(scales.length, names.length);\n        var rst = [];\n        for (var i = 0; i < length; i += 1) {\n            rst.push(names[i]);\n        }\n        return rst;\n    };\n    /**\n     * 获取所有的维度名\n     */\n    Attribute.prototype.getFields = function () {\n        return this.scales.map(function (scale) { return scale.field; });\n    };\n    /**\n     * 根据名称获取度量\n     * @param name\n     */\n    Attribute.prototype.getScale = function (name) {\n        return this.scales[this.names.indexOf(name)];\n    };\n    /**\n     * 默认的回调函数（用户没有自定义 callback，或者用户自定义 callback 返回空的时候，使用 values 映射）\n     * @param params\n     */\n    Attribute.prototype.defaultCallback = function () {\n        var _this = this;\n        var params = [];\n        for (var _i = 0; _i < arguments.length; _i++) {\n            params[_i] = arguments[_i];\n        }\n        // 没有 params 的情况，是指没有指定 fields，直接返回配置的 values 常量\n        if (params.length === 0) {\n            return this.values;\n        }\n        return params.map(function (param, idx) {\n            var scale = _this.scales[idx];\n            return scale.type === 'identity' ? scale.values[0] : _this._getAttributeValue(scale, param);\n        });\n    };\n    // 解析配置\n    Attribute.prototype._parseCfg = function (cfg) {\n        var _this = this;\n        var _a = cfg.type, type = _a === void 0 ? 'base' : _a, _b = cfg.names, names = _b === void 0 ? [] : _b, _c = cfg.scales, scales = _c === void 0 ? [] : _c, _d = cfg.values, values = _d === void 0 ? [] : _d, callback = cfg.callback;\n        this.type = type;\n        this.scales = scales;\n        this.values = values;\n        this.names = names;\n        // 构造 callback 方法\n        this.callback = function () {\n            var params = [];\n            for (var _i = 0; _i < arguments.length; _i++) {\n                params[_i] = arguments[_i];\n            }\n            /**\n             * 当用户设置的 callback 返回 null 时, 应该返回默认 callback 中的值\n             */\n            if (callback) {\n                // 使用用户返回的值处理\n                var ret = callback.apply(void 0, params);\n                if (!isNil(ret)) {\n                    return [ret];\n                }\n            }\n            // 没有 callback 或者用户 callback 返回值为空，则使用默认的逻辑处理\n            return _this.defaultCallback.apply(_this, params);\n        };\n    };\n    // 获取属性值，将值映射到视觉通道\n    Attribute.prototype._getAttributeValue = function (scale, value) {\n        // 如果是非线性的字段，直接从 values 中取值即可\n        if (scale.isCategory && !this.linear) {\n            // 离散 scale 变换成索引\n            var idx = scale.translate(value);\n            return this.values[idx % this.values.length];\n        }\n        // 线性则使用线性值\n        var percent = scale.scale(value);\n        return this.getLinearValue(percent);\n    };\n    /**\n     * 通过 scale 拿到数据对应的原始的参数\n     * @param param\n     * @param scale\n     * @private\n     */\n    Attribute.prototype._toOriginParam = function (param, scale) {\n        // 是线性，直接返回\n        // 非线性，使用 scale 变换\n        return !scale.isLinear\n            ? isArray(param)\n                ? param.map(function (p) { return toScaleString(scale, p); })\n                : toScaleString(scale, param)\n            : param;\n    };\n    return Attribute;\n}());\nexport default Attribute;\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}