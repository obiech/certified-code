{"ast":null,"code":"import { lowerCase } from \"lower-case\";\n// Support camel case (\"camelCase\" -> \"camel Case\" and \"CAMELCase\" -> \"CAMEL Case\").\nvar DEFAULT_SPLIT_REGEXP = [/([a-z0-9])([A-Z])/g, /([A-Z])([A-Z][a-z])/g];\n// Remove all non-word characters.\nvar DEFAULT_STRIP_REGEXP = /[^A-Z0-9]+/gi;\n/**\n * Normalize the string into something other libraries can manipulate easier.\n */\nexport function noCase(input, options) {\n  if (options === void 0) {\n    options = {};\n  }\n  var _a = options.splitRegexp,\n    splitRegexp = _a === void 0 ? DEFAULT_SPLIT_REGEXP : _a,\n    _b = options.stripRegexp,\n    stripRegexp = _b === void 0 ? DEFAULT_STRIP_REGEXP : _b,\n    _c = options.transform,\n    transform = _c === void 0 ? lowerCase : _c,\n    _d = options.delimiter,\n    delimiter = _d === void 0 ? \" \" : _d;\n  var result = replace(replace(input, splitRegexp, \"$1\\0$2\"), stripRegexp, \"\\0\");\n  var start = 0;\n  var end = result.length;\n  // Trim the delimiter from around the output string.\n  while (result.charAt(start) === \"\\0\") start++;\n  while (result.charAt(end - 1) === \"\\0\") end--;\n  // Transform each token independently.\n  return result.slice(start, end).split(\"\\0\").map(transform).join(delimiter);\n}\n/**\n * Replace `re` in the input string with the replacement value.\n */\nfunction replace(input, re, value) {\n  if (re instanceof RegExp) return input.replace(re, value);\n  return re.reduce(function (input, re) {\n    return input.replace(re, value);\n  }, input);\n}","map":{"version":3,"names":["lowerCase","DEFAULT_SPLIT_REGEXP","DEFAULT_STRIP_REGEXP","noCase","input","options","_a","splitRegexp","_b","stripRegexp","_c","transform","_d","delimiter","result","replace","start","end","length","charAt","slice","split","map","join","re","value","RegExp","reduce"],"sources":["/Users/obiechina/Documents/ridy-flutter-full-taxi-solution 2/node_modules/no-case/dist.es2015/index.js"],"sourcesContent":["import { lowerCase } from \"lower-case\";\n// Support camel case (\"camelCase\" -> \"camel Case\" and \"CAMELCase\" -> \"CAMEL Case\").\nvar DEFAULT_SPLIT_REGEXP = [/([a-z0-9])([A-Z])/g, /([A-Z])([A-Z][a-z])/g];\n// Remove all non-word characters.\nvar DEFAULT_STRIP_REGEXP = /[^A-Z0-9]+/gi;\n/**\n * Normalize the string into something other libraries can manipulate easier.\n */\nexport function noCase(input, options) {\n    if (options === void 0) { options = {}; }\n    var _a = options.splitRegexp, splitRegexp = _a === void 0 ? DEFAULT_SPLIT_REGEXP : _a, _b = options.stripRegexp, stripRegexp = _b === void 0 ? DEFAULT_STRIP_REGEXP : _b, _c = options.transform, transform = _c === void 0 ? lowerCase : _c, _d = options.delimiter, delimiter = _d === void 0 ? \" \" : _d;\n    var result = replace(replace(input, splitRegexp, \"$1\\0$2\"), stripRegexp, \"\\0\");\n    var start = 0;\n    var end = result.length;\n    // Trim the delimiter from around the output string.\n    while (result.charAt(start) === \"\\0\")\n        start++;\n    while (result.charAt(end - 1) === \"\\0\")\n        end--;\n    // Transform each token independently.\n    return result.slice(start, end).split(\"\\0\").map(transform).join(delimiter);\n}\n/**\n * Replace `re` in the input string with the replacement value.\n */\nfunction replace(input, re, value) {\n    if (re instanceof RegExp)\n        return input.replace(re, value);\n    return re.reduce(function (input, re) { return input.replace(re, value); }, input);\n}\n"],"mappings":"AAAA,SAASA,SAAS,QAAQ,YAAY;AACtC;AACA,IAAIC,oBAAoB,GAAG,CAAC,oBAAoB,EAAE,sBAAsB,CAAC;AACzE;AACA,IAAIC,oBAAoB,GAAG,cAAc;AACzC;AACA;AACA;AACA,OAAO,SAASC,MAAMA,CAACC,KAAK,EAAEC,OAAO,EAAE;EACnC,IAAIA,OAAO,KAAK,KAAK,CAAC,EAAE;IAAEA,OAAO,GAAG,CAAC,CAAC;EAAE;EACxC,IAAIC,EAAE,GAAGD,OAAO,CAACE,WAAW;IAAEA,WAAW,GAAGD,EAAE,KAAK,KAAK,CAAC,GAAGL,oBAAoB,GAAGK,EAAE;IAAEE,EAAE,GAAGH,OAAO,CAACI,WAAW;IAAEA,WAAW,GAAGD,EAAE,KAAK,KAAK,CAAC,GAAGN,oBAAoB,GAAGM,EAAE;IAAEE,EAAE,GAAGL,OAAO,CAACM,SAAS;IAAEA,SAAS,GAAGD,EAAE,KAAK,KAAK,CAAC,GAAGV,SAAS,GAAGU,EAAE;IAAEE,EAAE,GAAGP,OAAO,CAACQ,SAAS;IAAEA,SAAS,GAAGD,EAAE,KAAK,KAAK,CAAC,GAAG,GAAG,GAAGA,EAAE;EAC1S,IAAIE,MAAM,GAAGC,OAAO,CAACA,OAAO,CAACX,KAAK,EAAEG,WAAW,EAAE,QAAQ,CAAC,EAAEE,WAAW,EAAE,IAAI,CAAC;EAC9E,IAAIO,KAAK,GAAG,CAAC;EACb,IAAIC,GAAG,GAAGH,MAAM,CAACI,MAAM;EACvB;EACA,OAAOJ,MAAM,CAACK,MAAM,CAACH,KAAK,CAAC,KAAK,IAAI,EAChCA,KAAK,EAAE;EACX,OAAOF,MAAM,CAACK,MAAM,CAACF,GAAG,GAAG,CAAC,CAAC,KAAK,IAAI,EAClCA,GAAG,EAAE;EACT;EACA,OAAOH,MAAM,CAACM,KAAK,CAACJ,KAAK,EAAEC,GAAG,CAAC,CAACI,KAAK,CAAC,IAAI,CAAC,CAACC,GAAG,CAACX,SAAS,CAAC,CAACY,IAAI,CAACV,SAAS,CAAC;AAC9E;AACA;AACA;AACA;AACA,SAASE,OAAOA,CAACX,KAAK,EAAEoB,EAAE,EAAEC,KAAK,EAAE;EAC/B,IAAID,EAAE,YAAYE,MAAM,EACpB,OAAOtB,KAAK,CAACW,OAAO,CAACS,EAAE,EAAEC,KAAK,CAAC;EACnC,OAAOD,EAAE,CAACG,MAAM,CAAC,UAAUvB,KAAK,EAAEoB,EAAE,EAAE;IAAE,OAAOpB,KAAK,CAACW,OAAO,CAACS,EAAE,EAAEC,KAAK,CAAC;EAAE,CAAC,EAAErB,KAAK,CAAC;AACtF","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}