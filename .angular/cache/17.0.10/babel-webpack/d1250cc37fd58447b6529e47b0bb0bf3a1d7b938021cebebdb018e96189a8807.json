{"ast":null,"code":"import { __read, __spreadArray } from \"tslib\";\nimport { isArray, isNil, get } from '@antv/util';\nimport { getAngle, getSectorPath } from '../../../util/graphics';\n/**\n * @ignore\n * 根据数据点生成矩形的四个关键点\n * @param pointInfo 数据点信息\n * @param [isPyramid] 是否为尖底漏斗图\n * @returns rect points 返回矩形四个顶点信息\n */\nexport function getRectPoints(pointInfo) {\n  var _a, _b;\n  var x = pointInfo.x,\n    y = pointInfo.y,\n    y0 = pointInfo.y0,\n    size = pointInfo.size;\n  // 有 4 种情况，\n  // 1. x, y 都不是数组\n  // 2. y是数组，x不是\n  // 3. x是数组，y不是\n  // 4. x, y 都是数组\n  var yMin;\n  var yMax;\n  if (isArray(y)) {\n    _a = __read(y, 2), yMin = _a[0], yMax = _a[1];\n  } else {\n    yMin = y0;\n    yMax = y;\n  }\n  var xMin;\n  var xMax;\n  if (isArray(x)) {\n    _b = __read(x, 2), xMin = _b[0], xMax = _b[1];\n  } else {\n    xMin = x - size / 2;\n    xMax = x + size / 2;\n  }\n  var points = [{\n    x: xMin,\n    y: yMin\n  }, {\n    x: xMin,\n    y: yMax\n  }];\n  // 矩形的四个关键点，结构如下（左下角顺时针连接）\n  // 1 ---- 2\n  // |      |\n  // 0 ---- 3\n  points.push({\n    x: xMax,\n    y: yMax\n  }, {\n    x: xMax,\n    y: yMin\n  });\n  return points;\n}\n/**\n * @ignore\n * 根据矩形关键点绘制 path\n * @param points 关键点数组\n * @param isClosed path 是否需要闭合\n * @returns 返回矩形的 path\n */\nexport function getRectPath(points, isClosed) {\n  if (isClosed === void 0) {\n    isClosed = true;\n  }\n  var path = [];\n  var firstPoint = points[0];\n  path.push(['M', firstPoint.x, firstPoint.y]);\n  for (var i = 1, len = points.length; i < len; i++) {\n    path.push(['L', points[i].x, points[i].y]);\n  }\n  // 对于 shape=\"line\" path 不应该闭合，否则会造成 lineCap 绘图属性失效\n  if (isClosed) {\n    path.push(['L', firstPoint.x, firstPoint.y]); // 需要闭合\n    path.push(['z']);\n  }\n  return path;\n}\n/**\n * 处理 rect path 的 radius\n * @returns 返回矩形 path 的四个角的 arc 半径\n */\nexport function parseRadius(radius, minLength) {\n  var r1 = 0;\n  var r2 = 0;\n  var r3 = 0;\n  var r4 = 0;\n  if (isArray(radius)) {\n    if (radius.length === 1) {\n      r1 = r2 = r3 = r4 = radius[0];\n    } else if (radius.length === 2) {\n      r1 = r3 = radius[0];\n      r2 = r4 = radius[1];\n    } else if (radius.length === 3) {\n      r1 = radius[0];\n      r2 = r4 = radius[1];\n      r3 = radius[2];\n    } else {\n      r1 = radius[0];\n      r2 = radius[1];\n      r3 = radius[2];\n      r4 = radius[3];\n    }\n  } else {\n    r1 = r2 = r3 = r4 = radius;\n  }\n  // 处理 边界值\n  if (r1 + r2 > minLength) {\n    r1 = r1 ? minLength / (1 + r2 / r1) : 0;\n    r2 = minLength - r1;\n  }\n  if (r3 + r4 > minLength) {\n    r3 = r3 ? minLength / (1 + r4 / r3) : 0;\n    r4 = minLength - r3;\n  }\n  return [r1 || 0, r2 || 0, r3 || 0, r4 || 0];\n}\n/**\n * 获取 interval 矩形背景的 path\n * @param cfg 关键点的信息\n * @param points 已转化为画布坐标的 4 个关键点\n * @param coordinate 坐标系\n * @returns 返回矩形背景的 path\n */\nexport function getBackgroundRectPath(cfg, points, coordinate) {\n  var path = [];\n  if (coordinate.isRect) {\n    var p0 = coordinate.isTransposed ? {\n      x: coordinate.start.x,\n      y: points[0].y\n    } : {\n      x: points[0].x,\n      y: coordinate.start.y\n    };\n    var p1 = coordinate.isTransposed ? {\n      x: coordinate.end.x,\n      y: points[2].y\n    } : {\n      x: points[3].x,\n      y: coordinate.end.y\n    };\n    // corner radius of background shape works only in 笛卡尔坐标系\n    var radius = get(cfg, ['background', 'style', 'radius']);\n    if (radius) {\n      var width = coordinate.isTransposed ? Math.abs(points[0].y - points[2].y) : points[2].x - points[1].x;\n      var height = coordinate.isTransposed ? coordinate.getWidth() : coordinate.getHeight();\n      var _a = __read(parseRadius(radius, Math.min(width, height)), 4),\n        r1 = _a[0],\n        r2 = _a[1],\n        r3 = _a[2],\n        r4 = _a[3];\n      // 同时存在 坐标系是否发生转置 和 y 镜像的时候\n      var isReflectYTransposed_1 = coordinate.isTransposed && coordinate.isReflect('y');\n      var bump = isReflectYTransposed_1 ? 0 : 1;\n      var opposite = function (r) {\n        return isReflectYTransposed_1 ? -r : r;\n      };\n      path.push(['M', p0.x, p1.y + opposite(r1)]);\n      r1 !== 0 && path.push(['A', r1, r1, 0, 0, bump, p0.x + r1, p1.y]);\n      path.push(['L', p1.x - r2, p1.y]);\n      r2 !== 0 && path.push(['A', r2, r2, 0, 0, bump, p1.x, p1.y + opposite(r2)]);\n      path.push(['L', p1.x, p0.y - opposite(r3)]);\n      r3 !== 0 && path.push(['A', r3, r3, 0, 0, bump, p1.x - r3, p0.y]);\n      path.push(['L', p0.x + r4, p0.y]);\n      r4 !== 0 && path.push(['A', r4, r4, 0, 0, bump, p0.x, p0.y - opposite(r4)]);\n    } else {\n      path.push(['M', p0.x, p0.y]);\n      path.push(['L', p1.x, p0.y]);\n      path.push(['L', p1.x, p1.y]);\n      path.push(['L', p0.x, p1.y]);\n      path.push(['L', p0.x, p0.y]);\n    }\n    path.push(['z']);\n  }\n  if (coordinate.isPolar) {\n    var center = coordinate.getCenter();\n    var _b = getAngle(cfg, coordinate),\n      startAngle = _b.startAngle,\n      endAngle = _b.endAngle;\n    if (coordinate.type !== 'theta' && !coordinate.isTransposed) {\n      // 获取扇形 path\n      path = getSectorPath(center.x, center.y, coordinate.getRadius(), startAngle, endAngle);\n    } else {\n      var pow = function (v) {\n        return Math.pow(v, 2);\n      };\n      var r1 = Math.sqrt(pow(center.x - points[0].x) + pow(center.y - points[0].y));\n      var r2 = Math.sqrt(pow(center.x - points[2].x) + pow(center.y - points[2].y));\n      // 获取扇形 path（其实是一个圆环，从 coordinate 的起始角度到结束角度）\n      path = getSectorPath(center.x, center.y, r1, coordinate.startAngle, coordinate.endAngle, r2);\n    }\n  }\n  return path;\n}\n/**\n * @ignore\n * 根据矩形关键点绘制 path\n * @param points 关键点数组\n * @param lineCap 'round'圆角样式\n * @param coor 坐标\n * @returns 返回矩形的 path\n */\nexport function getIntervalRectPath(points, lineCap, coor) {\n  var width = coor.getWidth();\n  var height = coor.getHeight();\n  var isRect = coor.type === 'rect';\n  var path = [];\n  var r = (points[2].x - points[1].x) / 2;\n  var ry = coor.isTransposed ? r * height / width : r * width / height;\n  if (lineCap === 'round') {\n    if (isRect) {\n      path.push(['M', points[0].x, points[0].y + ry]);\n      path.push(['L', points[1].x, points[1].y - ry]);\n      path.push(['A', r, r, 0, 0, 1, points[2].x, points[2].y - ry]);\n      path.push(['L', points[3].x, points[3].y + ry]);\n      path.push(['A', r, r, 0, 0, 1, points[0].x, points[0].y + ry]);\n    } else {\n      path.push(['M', points[0].x, points[0].y]);\n      path.push(['L', points[1].x, points[1].y]);\n      path.push(['A', r, r, 0, 0, 1, points[2].x, points[2].y]);\n      path.push(['L', points[3].x, points[3].y]);\n      path.push(['A', r, r, 0, 0, 1, points[0].x, points[0].y]);\n    }\n    path.push(['z']);\n  } else {\n    path = getRectPath(points);\n  }\n  return path;\n}\n/**\n * @ignore\n * 根据 funnel 关键点绘制漏斗图的 path\n * @param points 图形关键点信息\n * @param nextPoints 下一个数据的图形关键点信息\n * @param isPyramid 是否为尖底漏斗图\n * @returns 返回漏斗图的图形 path\n */\nexport function getFunnelPath(points, nextPoints, isPyramid) {\n  var path = [];\n  if (!isNil(nextPoints)) {\n    path.push(['M', points[0].x, points[0].y], ['L', points[1].x, points[1].y], ['L', nextPoints[1].x, nextPoints[1].y], ['L', nextPoints[0].x, nextPoints[0].y], ['Z']);\n  } else if (isPyramid) {\n    // 金字塔最底部\n    path.push(['M', points[0].x, points[0].y], ['L', points[1].x, points[1].y], ['L', (points[2].x + points[3].x) / 2, (points[2].y + points[3].y) / 2], ['Z']);\n  } else {\n    // 漏斗图最底部\n    path.push(['M', points[0].x, points[0].y], ['L', points[1].x, points[1].y], ['L', points[2].x, points[2].y], ['L', points[3].x, points[3].y], ['Z']);\n  }\n  return path;\n}\n/**\n * 交换两个对象\n */\nfunction swap(p0, p1) {\n  return [p1, p0];\n}\n/**\n * 获取 倒角 矩形\n * - 目前只适用于笛卡尔坐标系下\n */\nexport function getRectWithCornerRadius(points, coordinate, radius) {\n  var _a, _b, _c, _d, _e, _f, _g;\n  // 获取 四个关键点\n  var _h = __read(__spreadArray([], __read(points), false), 4),\n    p0 = _h[0],\n    p1 = _h[1],\n    p2 = _h[2],\n    p3 = _h[3];\n  var _j = __read(typeof radius === 'number' ? Array(4).fill(radius) : radius, 4),\n    r1 = _j[0],\n    r2 = _j[1],\n    r3 = _j[2],\n    r4 = _j[3];\n  if (coordinate.isTransposed) {\n    _a = __read(swap(p1, p3), 2), p1 = _a[0], p3 = _a[1];\n  }\n  /**\n   * 存在镜像\n   */\n  if (coordinate.isReflect('y')) {\n    _b = __read(swap(p0, p1), 2), p0 = _b[0], p1 = _b[1];\n    _c = __read(swap(p2, p3), 2), p2 = _c[0], p3 = _c[1];\n  }\n  if (coordinate.isReflect('x')) {\n    _d = __read(swap(p0, p3), 2), p0 = _d[0], p3 = _d[1];\n    _e = __read(swap(p1, p2), 2), p1 = _e[0], p2 = _e[1];\n  }\n  var path = [];\n  /**\n   *  p1 → p2\n   *  ↑    ↓\n   *  p0 ← p3\n   *\n   *  负数的情况，关键点会变成下面的形式\n   *\n   *  p0 ← p3               p2 ← p1\n   *  ↓    ↑                ↓     ↑\n   *  p1 → p2  --> (转置下)  p3 → p0\n   */\n  var abs = function (v) {\n    return Math.abs(v);\n  };\n  _f = __read(parseRadius([r1, r2, r3, r4], Math.min(abs(p3.x - p0.x), abs(p1.y - p0.y))).map(function (d) {\n    return abs(d);\n  }), 4), r1 = _f[0], r2 = _f[1], r3 = _f[2], r4 = _f[3];\n  if (coordinate.isTransposed) {\n    _g = __read([r4, r1, r2, r3], 4), r1 = _g[0], r2 = _g[1], r3 = _g[2], r4 = _g[3];\n  }\n  if (p0.y < p1.y /** 负数情况 */) {\n    path.push(['M', p3.x, p3.y + r3]);\n    r3 !== 0 && path.push(['A', r3, r3, 0, 0, 0, p3.x - r3, p3.y]);\n    path.push(['L', p0.x + r4, p0.y]);\n    r4 !== 0 && path.push(['A', r4, r4, 0, 0, 0, p0.x, p0.y + r4]);\n    path.push(['L', p1.x, p1.y - r1]);\n    r1 !== 0 && path.push(['A', r1, r1, 0, 0, 0 /** 逆时针 */, p1.x + r1, p1.y]);\n    path.push(['L', p2.x - r2, p2.y]);\n    r2 !== 0 && path.push(['A', r2, r2, 0, 0, 0, p2.x, p2.y - r2]);\n    path.push(['L', p3.x, p3.y + r3]);\n    path.push(['z']);\n  } else if (p3.x < p0.x) {\n    path.push(['M', p2.x + r2, p2.y]);\n    r2 !== 0 && path.push(['A', r2, r2, 0, 0, 0, p2.x, p2.y + r2]);\n    path.push(['L', p3.x, p3.y - r3]);\n    r3 !== 0 && path.push(['A', r3, r3, 0, 0, 0, p3.x + r3, p3.y]);\n    path.push(['L', p0.x - r4, p0.y]);\n    r4 !== 0 && path.push(['A', r4, r4, 0, 0, 0, p0.x, p0.y - r4]);\n    path.push(['L', p1.x, p1.y + r1]);\n    r1 !== 0 && path.push(['A', r1, r1, 0, 0, 0, p1.x - r1, p1.y]);\n    path.push(['L', p2.x + r2, p2.y]);\n    path.push(['z']);\n  } else {\n    path.push(['M', p1.x, p1.y + r1]);\n    r1 !== 0 && path.push(['A', r1, r1, 0, 0, 1, p1.x + r1, p1.y]);\n    path.push(['L', p2.x - r2, p2.y]);\n    r2 !== 0 && path.push(['A', r2, r2, 0, 0, 1, p2.x, p2.y + r2]);\n    path.push(['L', p3.x, p3.y - r3]);\n    r3 !== 0 && path.push(['A', r3, r3, 0, 0, 1, p3.x - r3, p3.y]);\n    path.push(['L', p0.x + r4, p0.y]);\n    r4 !== 0 && path.push(['A', r4, r4, 0, 0, 1, p0.x, p0.y - r4]);\n    path.push(['L', p1.x, p1.y + r1]);\n    path.push(['z']);\n  }\n  return path;\n}","map":{"version":3,"names":["__read","__spreadArray","isArray","isNil","get","getAngle","getSectorPath","getRectPoints","pointInfo","_a","_b","x","y","y0","size","yMin","yMax","xMin","xMax","points","push","getRectPath","isClosed","path","firstPoint","i","len","length","parseRadius","radius","minLength","r1","r2","r3","r4","getBackgroundRectPath","cfg","coordinate","isRect","p0","isTransposed","start","p1","end","width","Math","abs","height","getWidth","getHeight","min","isReflectYTransposed_1","isReflect","bump","opposite","r","isPolar","center","getCenter","startAngle","endAngle","type","getRadius","pow","v","sqrt","getIntervalRectPath","lineCap","coor","ry","getFunnelPath","nextPoints","isPyramid","swap","getRectWithCornerRadius","_c","_d","_e","_f","_g","_h","p2","p3","_j","Array","fill","map","d"],"sources":["/Users/obiechina/Documents/ridy-flutter-full-taxi-solution 2/node_modules/@antv/g2/esm/geometry/shape/interval/util.js"],"sourcesContent":["import { __read, __spreadArray } from \"tslib\";\nimport { isArray, isNil, get } from '@antv/util';\nimport { getAngle, getSectorPath } from '../../../util/graphics';\n/**\n * @ignore\n * 根据数据点生成矩形的四个关键点\n * @param pointInfo 数据点信息\n * @param [isPyramid] 是否为尖底漏斗图\n * @returns rect points 返回矩形四个顶点信息\n */\nexport function getRectPoints(pointInfo) {\n    var _a, _b;\n    var x = pointInfo.x, y = pointInfo.y, y0 = pointInfo.y0, size = pointInfo.size;\n    // 有 4 种情况，\n    // 1. x, y 都不是数组\n    // 2. y是数组，x不是\n    // 3. x是数组，y不是\n    // 4. x, y 都是数组\n    var yMin;\n    var yMax;\n    if (isArray(y)) {\n        _a = __read(y, 2), yMin = _a[0], yMax = _a[1];\n    }\n    else {\n        yMin = y0;\n        yMax = y;\n    }\n    var xMin;\n    var xMax;\n    if (isArray(x)) {\n        _b = __read(x, 2), xMin = _b[0], xMax = _b[1];\n    }\n    else {\n        xMin = x - size / 2;\n        xMax = x + size / 2;\n    }\n    var points = [\n        { x: xMin, y: yMin },\n        { x: xMin, y: yMax },\n    ];\n    // 矩形的四个关键点，结构如下（左下角顺时针连接）\n    // 1 ---- 2\n    // |      |\n    // 0 ---- 3\n    points.push({ x: xMax, y: yMax }, { x: xMax, y: yMin });\n    return points;\n}\n/**\n * @ignore\n * 根据矩形关键点绘制 path\n * @param points 关键点数组\n * @param isClosed path 是否需要闭合\n * @returns 返回矩形的 path\n */\nexport function getRectPath(points, isClosed) {\n    if (isClosed === void 0) { isClosed = true; }\n    var path = [];\n    var firstPoint = points[0];\n    path.push(['M', firstPoint.x, firstPoint.y]);\n    for (var i = 1, len = points.length; i < len; i++) {\n        path.push(['L', points[i].x, points[i].y]);\n    }\n    // 对于 shape=\"line\" path 不应该闭合，否则会造成 lineCap 绘图属性失效\n    if (isClosed) {\n        path.push(['L', firstPoint.x, firstPoint.y]); // 需要闭合\n        path.push(['z']);\n    }\n    return path;\n}\n/**\n * 处理 rect path 的 radius\n * @returns 返回矩形 path 的四个角的 arc 半径\n */\nexport function parseRadius(radius, minLength) {\n    var r1 = 0;\n    var r2 = 0;\n    var r3 = 0;\n    var r4 = 0;\n    if (isArray(radius)) {\n        if (radius.length === 1) {\n            r1 = r2 = r3 = r4 = radius[0];\n        }\n        else if (radius.length === 2) {\n            r1 = r3 = radius[0];\n            r2 = r4 = radius[1];\n        }\n        else if (radius.length === 3) {\n            r1 = radius[0];\n            r2 = r4 = radius[1];\n            r3 = radius[2];\n        }\n        else {\n            r1 = radius[0];\n            r2 = radius[1];\n            r3 = radius[2];\n            r4 = radius[3];\n        }\n    }\n    else {\n        r1 = r2 = r3 = r4 = radius;\n    }\n    // 处理 边界值\n    if (r1 + r2 > minLength) {\n        r1 = r1 ? minLength / (1 + r2 / r1) : 0;\n        r2 = minLength - r1;\n    }\n    if (r3 + r4 > minLength) {\n        r3 = r3 ? minLength / (1 + r4 / r3) : 0;\n        r4 = minLength - r3;\n    }\n    return [r1 || 0, r2 || 0, r3 || 0, r4 || 0];\n}\n/**\n * 获取 interval 矩形背景的 path\n * @param cfg 关键点的信息\n * @param points 已转化为画布坐标的 4 个关键点\n * @param coordinate 坐标系\n * @returns 返回矩形背景的 path\n */\nexport function getBackgroundRectPath(cfg, points, coordinate) {\n    var path = [];\n    if (coordinate.isRect) {\n        var p0 = coordinate.isTransposed\n            ? { x: coordinate.start.x, y: points[0].y }\n            : { x: points[0].x, y: coordinate.start.y };\n        var p1 = coordinate.isTransposed\n            ? { x: coordinate.end.x, y: points[2].y }\n            : { x: points[3].x, y: coordinate.end.y };\n        // corner radius of background shape works only in 笛卡尔坐标系\n        var radius = get(cfg, ['background', 'style', 'radius']);\n        if (radius) {\n            var width = coordinate.isTransposed ? Math.abs(points[0].y - points[2].y) : points[2].x - points[1].x;\n            var height = coordinate.isTransposed ? coordinate.getWidth() : coordinate.getHeight();\n            var _a = __read(parseRadius(radius, Math.min(width, height)), 4), r1 = _a[0], r2 = _a[1], r3 = _a[2], r4 = _a[3];\n            // 同时存在 坐标系是否发生转置 和 y 镜像的时候\n            var isReflectYTransposed_1 = (coordinate.isTransposed && coordinate.isReflect('y'));\n            var bump = isReflectYTransposed_1 ? 0 : 1;\n            var opposite = function (r) { return isReflectYTransposed_1 ? -r : r; };\n            path.push(['M', p0.x, p1.y + opposite(r1)]);\n            r1 !== 0 && path.push(['A', r1, r1, 0, 0, bump, p0.x + r1, p1.y]);\n            path.push(['L', p1.x - r2, p1.y]);\n            r2 !== 0 && path.push(['A', r2, r2, 0, 0, bump, p1.x, p1.y + opposite(r2)]);\n            path.push(['L', p1.x, p0.y - opposite(r3)]);\n            r3 !== 0 && path.push(['A', r3, r3, 0, 0, bump, p1.x - r3, p0.y]);\n            path.push(['L', p0.x + r4, p0.y]);\n            r4 !== 0 && path.push(['A', r4, r4, 0, 0, bump, p0.x, p0.y - opposite(r4)]);\n        }\n        else {\n            path.push(['M', p0.x, p0.y]);\n            path.push(['L', p1.x, p0.y]);\n            path.push(['L', p1.x, p1.y]);\n            path.push(['L', p0.x, p1.y]);\n            path.push(['L', p0.x, p0.y]);\n        }\n        path.push(['z']);\n    }\n    if (coordinate.isPolar) {\n        var center = coordinate.getCenter();\n        var _b = getAngle(cfg, coordinate), startAngle = _b.startAngle, endAngle = _b.endAngle;\n        if (coordinate.type !== 'theta' && !coordinate.isTransposed) {\n            // 获取扇形 path\n            path = getSectorPath(center.x, center.y, coordinate.getRadius(), startAngle, endAngle);\n        }\n        else {\n            var pow = function (v) { return Math.pow(v, 2); };\n            var r1 = Math.sqrt(pow(center.x - points[0].x) + pow(center.y - points[0].y));\n            var r2 = Math.sqrt(pow(center.x - points[2].x) + pow(center.y - points[2].y));\n            // 获取扇形 path（其实是一个圆环，从 coordinate 的起始角度到结束角度）\n            path = getSectorPath(center.x, center.y, r1, coordinate.startAngle, coordinate.endAngle, r2);\n        }\n    }\n    return path;\n}\n/**\n * @ignore\n * 根据矩形关键点绘制 path\n * @param points 关键点数组\n * @param lineCap 'round'圆角样式\n * @param coor 坐标\n * @returns 返回矩形的 path\n */\nexport function getIntervalRectPath(points, lineCap, coor) {\n    var width = coor.getWidth();\n    var height = coor.getHeight();\n    var isRect = coor.type === 'rect';\n    var path = [];\n    var r = (points[2].x - points[1].x) / 2;\n    var ry = coor.isTransposed ? (r * height) / width : (r * width) / height;\n    if (lineCap === 'round') {\n        if (isRect) {\n            path.push(['M', points[0].x, points[0].y + ry]);\n            path.push(['L', points[1].x, points[1].y - ry]);\n            path.push(['A', r, r, 0, 0, 1, points[2].x, points[2].y - ry]);\n            path.push(['L', points[3].x, points[3].y + ry]);\n            path.push(['A', r, r, 0, 0, 1, points[0].x, points[0].y + ry]);\n        }\n        else {\n            path.push(['M', points[0].x, points[0].y]);\n            path.push(['L', points[1].x, points[1].y]);\n            path.push(['A', r, r, 0, 0, 1, points[2].x, points[2].y]);\n            path.push(['L', points[3].x, points[3].y]);\n            path.push(['A', r, r, 0, 0, 1, points[0].x, points[0].y]);\n        }\n        path.push(['z']);\n    }\n    else {\n        path = getRectPath(points);\n    }\n    return path;\n}\n/**\n * @ignore\n * 根据 funnel 关键点绘制漏斗图的 path\n * @param points 图形关键点信息\n * @param nextPoints 下一个数据的图形关键点信息\n * @param isPyramid 是否为尖底漏斗图\n * @returns 返回漏斗图的图形 path\n */\nexport function getFunnelPath(points, nextPoints, isPyramid) {\n    var path = [];\n    if (!isNil(nextPoints)) {\n        path.push(['M', points[0].x, points[0].y], ['L', points[1].x, points[1].y], ['L', nextPoints[1].x, nextPoints[1].y], ['L', nextPoints[0].x, nextPoints[0].y], ['Z']);\n    }\n    else if (isPyramid) {\n        // 金字塔最底部\n        path.push(['M', points[0].x, points[0].y], ['L', points[1].x, points[1].y], ['L', (points[2].x + points[3].x) / 2, (points[2].y + points[3].y) / 2], ['Z']);\n    }\n    else {\n        // 漏斗图最底部\n        path.push(['M', points[0].x, points[0].y], ['L', points[1].x, points[1].y], ['L', points[2].x, points[2].y], ['L', points[3].x, points[3].y], ['Z']);\n    }\n    return path;\n}\n/**\n * 交换两个对象\n */\nfunction swap(p0, p1) {\n    return [p1, p0];\n}\n/**\n * 获取 倒角 矩形\n * - 目前只适用于笛卡尔坐标系下\n */\nexport function getRectWithCornerRadius(points, coordinate, radius) {\n    var _a, _b, _c, _d, _e, _f, _g;\n    // 获取 四个关键点\n    var _h = __read(__spreadArray([], __read(points), false), 4), p0 = _h[0], p1 = _h[1], p2 = _h[2], p3 = _h[3];\n    var _j = __read(typeof radius === 'number' ? Array(4).fill(radius) : radius, 4), r1 = _j[0], r2 = _j[1], r3 = _j[2], r4 = _j[3];\n    if (coordinate.isTransposed) {\n        _a = __read(swap(p1, p3), 2), p1 = _a[0], p3 = _a[1];\n    }\n    /**\n     * 存在镜像\n     */\n    if (coordinate.isReflect('y')) {\n        _b = __read(swap(p0, p1), 2), p0 = _b[0], p1 = _b[1];\n        _c = __read(swap(p2, p3), 2), p2 = _c[0], p3 = _c[1];\n    }\n    if (coordinate.isReflect('x')) {\n        _d = __read(swap(p0, p3), 2), p0 = _d[0], p3 = _d[1];\n        _e = __read(swap(p1, p2), 2), p1 = _e[0], p2 = _e[1];\n    }\n    var path = [];\n    /**\n     *  p1 → p2\n     *  ↑    ↓\n     *  p0 ← p3\n     *\n     *  负数的情况，关键点会变成下面的形式\n     *\n     *  p0 ← p3               p2 ← p1\n     *  ↓    ↑                ↓     ↑\n     *  p1 → p2  --> (转置下)  p3 → p0\n     */\n    var abs = function (v) { return Math.abs(v); };\n    _f = __read(parseRadius([r1, r2, r3, r4], Math.min(abs(p3.x - p0.x), abs(p1.y - p0.y))).map(function (d) { return abs(d); }), 4), r1 = _f[0], r2 = _f[1], r3 = _f[2], r4 = _f[3];\n    if (coordinate.isTransposed) {\n        _g = __read([r4, r1, r2, r3], 4), r1 = _g[0], r2 = _g[1], r3 = _g[2], r4 = _g[3];\n    }\n    if (p0.y < p1.y /** 负数情况 */) {\n        path.push(['M', p3.x, p3.y + r3]);\n        r3 !== 0 && path.push(['A', r3, r3, 0, 0, 0, p3.x - r3, p3.y]);\n        path.push(['L', p0.x + r4, p0.y]);\n        r4 !== 0 && path.push(['A', r4, r4, 0, 0, 0, p0.x, p0.y + r4]);\n        path.push(['L', p1.x, p1.y - r1]);\n        r1 !== 0 && path.push(['A', r1, r1, 0, 0, 0 /** 逆时针 */, p1.x + r1, p1.y]);\n        path.push(['L', p2.x - r2, p2.y]);\n        r2 !== 0 && path.push(['A', r2, r2, 0, 0, 0, p2.x, p2.y - r2]);\n        path.push(['L', p3.x, p3.y + r3]);\n        path.push(['z']);\n    }\n    else if (p3.x < p0.x) {\n        path.push(['M', p2.x + r2, p2.y]);\n        r2 !== 0 && path.push(['A', r2, r2, 0, 0, 0, p2.x, p2.y + r2]);\n        path.push(['L', p3.x, p3.y - r3]);\n        r3 !== 0 && path.push(['A', r3, r3, 0, 0, 0, p3.x + r3, p3.y]);\n        path.push(['L', p0.x - r4, p0.y]);\n        r4 !== 0 && path.push(['A', r4, r4, 0, 0, 0, p0.x, p0.y - r4]);\n        path.push(['L', p1.x, p1.y + r1]);\n        r1 !== 0 && path.push(['A', r1, r1, 0, 0, 0, p1.x - r1, p1.y]);\n        path.push(['L', p2.x + r2, p2.y]);\n        path.push(['z']);\n    }\n    else {\n        path.push(['M', p1.x, p1.y + r1]);\n        r1 !== 0 && path.push(['A', r1, r1, 0, 0, 1, p1.x + r1, p1.y]);\n        path.push(['L', p2.x - r2, p2.y]);\n        r2 !== 0 && path.push(['A', r2, r2, 0, 0, 1, p2.x, p2.y + r2]);\n        path.push(['L', p3.x, p3.y - r3]);\n        r3 !== 0 && path.push(['A', r3, r3, 0, 0, 1, p3.x - r3, p3.y]);\n        path.push(['L', p0.x + r4, p0.y]);\n        r4 !== 0 && path.push(['A', r4, r4, 0, 0, 1, p0.x, p0.y - r4]);\n        path.push(['L', p1.x, p1.y + r1]);\n        path.push(['z']);\n    }\n    return path;\n}\n"],"mappings":"AAAA,SAASA,MAAM,EAAEC,aAAa,QAAQ,OAAO;AAC7C,SAASC,OAAO,EAAEC,KAAK,EAAEC,GAAG,QAAQ,YAAY;AAChD,SAASC,QAAQ,EAAEC,aAAa,QAAQ,wBAAwB;AAChE;AACA;AACA;AACA;AACA;AACA;AACA;AACA,OAAO,SAASC,aAAaA,CAACC,SAAS,EAAE;EACrC,IAAIC,EAAE,EAAEC,EAAE;EACV,IAAIC,CAAC,GAAGH,SAAS,CAACG,CAAC;IAAEC,CAAC,GAAGJ,SAAS,CAACI,CAAC;IAAEC,EAAE,GAAGL,SAAS,CAACK,EAAE;IAAEC,IAAI,GAAGN,SAAS,CAACM,IAAI;EAC9E;EACA;EACA;EACA;EACA;EACA,IAAIC,IAAI;EACR,IAAIC,IAAI;EACR,IAAId,OAAO,CAACU,CAAC,CAAC,EAAE;IACZH,EAAE,GAAGT,MAAM,CAACY,CAAC,EAAE,CAAC,CAAC,EAAEG,IAAI,GAAGN,EAAE,CAAC,CAAC,CAAC,EAAEO,IAAI,GAAGP,EAAE,CAAC,CAAC,CAAC;EACjD,CAAC,MACI;IACDM,IAAI,GAAGF,EAAE;IACTG,IAAI,GAAGJ,CAAC;EACZ;EACA,IAAIK,IAAI;EACR,IAAIC,IAAI;EACR,IAAIhB,OAAO,CAACS,CAAC,CAAC,EAAE;IACZD,EAAE,GAAGV,MAAM,CAACW,CAAC,EAAE,CAAC,CAAC,EAAEM,IAAI,GAAGP,EAAE,CAAC,CAAC,CAAC,EAAEQ,IAAI,GAAGR,EAAE,CAAC,CAAC,CAAC;EACjD,CAAC,MACI;IACDO,IAAI,GAAGN,CAAC,GAAGG,IAAI,GAAG,CAAC;IACnBI,IAAI,GAAGP,CAAC,GAAGG,IAAI,GAAG,CAAC;EACvB;EACA,IAAIK,MAAM,GAAG,CACT;IAAER,CAAC,EAAEM,IAAI;IAAEL,CAAC,EAAEG;EAAK,CAAC,EACpB;IAAEJ,CAAC,EAAEM,IAAI;IAAEL,CAAC,EAAEI;EAAK,CAAC,CACvB;EACD;EACA;EACA;EACA;EACAG,MAAM,CAACC,IAAI,CAAC;IAAET,CAAC,EAAEO,IAAI;IAAEN,CAAC,EAAEI;EAAK,CAAC,EAAE;IAAEL,CAAC,EAAEO,IAAI;IAAEN,CAAC,EAAEG;EAAK,CAAC,CAAC;EACvD,OAAOI,MAAM;AACjB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,OAAO,SAASE,WAAWA,CAACF,MAAM,EAAEG,QAAQ,EAAE;EAC1C,IAAIA,QAAQ,KAAK,KAAK,CAAC,EAAE;IAAEA,QAAQ,GAAG,IAAI;EAAE;EAC5C,IAAIC,IAAI,GAAG,EAAE;EACb,IAAIC,UAAU,GAAGL,MAAM,CAAC,CAAC,CAAC;EAC1BI,IAAI,CAACH,IAAI,CAAC,CAAC,GAAG,EAAEI,UAAU,CAACb,CAAC,EAAEa,UAAU,CAACZ,CAAC,CAAC,CAAC;EAC5C,KAAK,IAAIa,CAAC,GAAG,CAAC,EAAEC,GAAG,GAAGP,MAAM,CAACQ,MAAM,EAAEF,CAAC,GAAGC,GAAG,EAAED,CAAC,EAAE,EAAE;IAC/CF,IAAI,CAACH,IAAI,CAAC,CAAC,GAAG,EAAED,MAAM,CAACM,CAAC,CAAC,CAACd,CAAC,EAAEQ,MAAM,CAACM,CAAC,CAAC,CAACb,CAAC,CAAC,CAAC;EAC9C;EACA;EACA,IAAIU,QAAQ,EAAE;IACVC,IAAI,CAACH,IAAI,CAAC,CAAC,GAAG,EAAEI,UAAU,CAACb,CAAC,EAAEa,UAAU,CAACZ,CAAC,CAAC,CAAC,CAAC,CAAC;IAC9CW,IAAI,CAACH,IAAI,CAAC,CAAC,GAAG,CAAC,CAAC;EACpB;EACA,OAAOG,IAAI;AACf;AACA;AACA;AACA;AACA;AACA,OAAO,SAASK,WAAWA,CAACC,MAAM,EAAEC,SAAS,EAAE;EAC3C,IAAIC,EAAE,GAAG,CAAC;EACV,IAAIC,EAAE,GAAG,CAAC;EACV,IAAIC,EAAE,GAAG,CAAC;EACV,IAAIC,EAAE,GAAG,CAAC;EACV,IAAIhC,OAAO,CAAC2B,MAAM,CAAC,EAAE;IACjB,IAAIA,MAAM,CAACF,MAAM,KAAK,CAAC,EAAE;MACrBI,EAAE,GAAGC,EAAE,GAAGC,EAAE,GAAGC,EAAE,GAAGL,MAAM,CAAC,CAAC,CAAC;IACjC,CAAC,MACI,IAAIA,MAAM,CAACF,MAAM,KAAK,CAAC,EAAE;MAC1BI,EAAE,GAAGE,EAAE,GAAGJ,MAAM,CAAC,CAAC,CAAC;MACnBG,EAAE,GAAGE,EAAE,GAAGL,MAAM,CAAC,CAAC,CAAC;IACvB,CAAC,MACI,IAAIA,MAAM,CAACF,MAAM,KAAK,CAAC,EAAE;MAC1BI,EAAE,GAAGF,MAAM,CAAC,CAAC,CAAC;MACdG,EAAE,GAAGE,EAAE,GAAGL,MAAM,CAAC,CAAC,CAAC;MACnBI,EAAE,GAAGJ,MAAM,CAAC,CAAC,CAAC;IAClB,CAAC,MACI;MACDE,EAAE,GAAGF,MAAM,CAAC,CAAC,CAAC;MACdG,EAAE,GAAGH,MAAM,CAAC,CAAC,CAAC;MACdI,EAAE,GAAGJ,MAAM,CAAC,CAAC,CAAC;MACdK,EAAE,GAAGL,MAAM,CAAC,CAAC,CAAC;IAClB;EACJ,CAAC,MACI;IACDE,EAAE,GAAGC,EAAE,GAAGC,EAAE,GAAGC,EAAE,GAAGL,MAAM;EAC9B;EACA;EACA,IAAIE,EAAE,GAAGC,EAAE,GAAGF,SAAS,EAAE;IACrBC,EAAE,GAAGA,EAAE,GAAGD,SAAS,IAAI,CAAC,GAAGE,EAAE,GAAGD,EAAE,CAAC,GAAG,CAAC;IACvCC,EAAE,GAAGF,SAAS,GAAGC,EAAE;EACvB;EACA,IAAIE,EAAE,GAAGC,EAAE,GAAGJ,SAAS,EAAE;IACrBG,EAAE,GAAGA,EAAE,GAAGH,SAAS,IAAI,CAAC,GAAGI,EAAE,GAAGD,EAAE,CAAC,GAAG,CAAC;IACvCC,EAAE,GAAGJ,SAAS,GAAGG,EAAE;EACvB;EACA,OAAO,CAACF,EAAE,IAAI,CAAC,EAAEC,EAAE,IAAI,CAAC,EAAEC,EAAE,IAAI,CAAC,EAAEC,EAAE,IAAI,CAAC,CAAC;AAC/C;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,OAAO,SAASC,qBAAqBA,CAACC,GAAG,EAAEjB,MAAM,EAAEkB,UAAU,EAAE;EAC3D,IAAId,IAAI,GAAG,EAAE;EACb,IAAIc,UAAU,CAACC,MAAM,EAAE;IACnB,IAAIC,EAAE,GAAGF,UAAU,CAACG,YAAY,GAC1B;MAAE7B,CAAC,EAAE0B,UAAU,CAACI,KAAK,CAAC9B,CAAC;MAAEC,CAAC,EAAEO,MAAM,CAAC,CAAC,CAAC,CAACP;IAAE,CAAC,GACzC;MAAED,CAAC,EAAEQ,MAAM,CAAC,CAAC,CAAC,CAACR,CAAC;MAAEC,CAAC,EAAEyB,UAAU,CAACI,KAAK,CAAC7B;IAAE,CAAC;IAC/C,IAAI8B,EAAE,GAAGL,UAAU,CAACG,YAAY,GAC1B;MAAE7B,CAAC,EAAE0B,UAAU,CAACM,GAAG,CAAChC,CAAC;MAAEC,CAAC,EAAEO,MAAM,CAAC,CAAC,CAAC,CAACP;IAAE,CAAC,GACvC;MAAED,CAAC,EAAEQ,MAAM,CAAC,CAAC,CAAC,CAACR,CAAC;MAAEC,CAAC,EAAEyB,UAAU,CAACM,GAAG,CAAC/B;IAAE,CAAC;IAC7C;IACA,IAAIiB,MAAM,GAAGzB,GAAG,CAACgC,GAAG,EAAE,CAAC,YAAY,EAAE,OAAO,EAAE,QAAQ,CAAC,CAAC;IACxD,IAAIP,MAAM,EAAE;MACR,IAAIe,KAAK,GAAGP,UAAU,CAACG,YAAY,GAAGK,IAAI,CAACC,GAAG,CAAC3B,MAAM,CAAC,CAAC,CAAC,CAACP,CAAC,GAAGO,MAAM,CAAC,CAAC,CAAC,CAACP,CAAC,CAAC,GAAGO,MAAM,CAAC,CAAC,CAAC,CAACR,CAAC,GAAGQ,MAAM,CAAC,CAAC,CAAC,CAACR,CAAC;MACrG,IAAIoC,MAAM,GAAGV,UAAU,CAACG,YAAY,GAAGH,UAAU,CAACW,QAAQ,CAAC,CAAC,GAAGX,UAAU,CAACY,SAAS,CAAC,CAAC;MACrF,IAAIxC,EAAE,GAAGT,MAAM,CAAC4B,WAAW,CAACC,MAAM,EAAEgB,IAAI,CAACK,GAAG,CAACN,KAAK,EAAEG,MAAM,CAAC,CAAC,EAAE,CAAC,CAAC;QAAEhB,EAAE,GAAGtB,EAAE,CAAC,CAAC,CAAC;QAAEuB,EAAE,GAAGvB,EAAE,CAAC,CAAC,CAAC;QAAEwB,EAAE,GAAGxB,EAAE,CAAC,CAAC,CAAC;QAAEyB,EAAE,GAAGzB,EAAE,CAAC,CAAC,CAAC;MAChH;MACA,IAAI0C,sBAAsB,GAAId,UAAU,CAACG,YAAY,IAAIH,UAAU,CAACe,SAAS,CAAC,GAAG,CAAE;MACnF,IAAIC,IAAI,GAAGF,sBAAsB,GAAG,CAAC,GAAG,CAAC;MACzC,IAAIG,QAAQ,GAAG,SAAAA,CAAUC,CAAC,EAAE;QAAE,OAAOJ,sBAAsB,GAAG,CAACI,CAAC,GAAGA,CAAC;MAAE,CAAC;MACvEhC,IAAI,CAACH,IAAI,CAAC,CAAC,GAAG,EAAEmB,EAAE,CAAC5B,CAAC,EAAE+B,EAAE,CAAC9B,CAAC,GAAG0C,QAAQ,CAACvB,EAAE,CAAC,CAAC,CAAC;MAC3CA,EAAE,KAAK,CAAC,IAAIR,IAAI,CAACH,IAAI,CAAC,CAAC,GAAG,EAAEW,EAAE,EAAEA,EAAE,EAAE,CAAC,EAAE,CAAC,EAAEsB,IAAI,EAAEd,EAAE,CAAC5B,CAAC,GAAGoB,EAAE,EAAEW,EAAE,CAAC9B,CAAC,CAAC,CAAC;MACjEW,IAAI,CAACH,IAAI,CAAC,CAAC,GAAG,EAAEsB,EAAE,CAAC/B,CAAC,GAAGqB,EAAE,EAAEU,EAAE,CAAC9B,CAAC,CAAC,CAAC;MACjCoB,EAAE,KAAK,CAAC,IAAIT,IAAI,CAACH,IAAI,CAAC,CAAC,GAAG,EAAEY,EAAE,EAAEA,EAAE,EAAE,CAAC,EAAE,CAAC,EAAEqB,IAAI,EAAEX,EAAE,CAAC/B,CAAC,EAAE+B,EAAE,CAAC9B,CAAC,GAAG0C,QAAQ,CAACtB,EAAE,CAAC,CAAC,CAAC;MAC3ET,IAAI,CAACH,IAAI,CAAC,CAAC,GAAG,EAAEsB,EAAE,CAAC/B,CAAC,EAAE4B,EAAE,CAAC3B,CAAC,GAAG0C,QAAQ,CAACrB,EAAE,CAAC,CAAC,CAAC;MAC3CA,EAAE,KAAK,CAAC,IAAIV,IAAI,CAACH,IAAI,CAAC,CAAC,GAAG,EAAEa,EAAE,EAAEA,EAAE,EAAE,CAAC,EAAE,CAAC,EAAEoB,IAAI,EAAEX,EAAE,CAAC/B,CAAC,GAAGsB,EAAE,EAAEM,EAAE,CAAC3B,CAAC,CAAC,CAAC;MACjEW,IAAI,CAACH,IAAI,CAAC,CAAC,GAAG,EAAEmB,EAAE,CAAC5B,CAAC,GAAGuB,EAAE,EAAEK,EAAE,CAAC3B,CAAC,CAAC,CAAC;MACjCsB,EAAE,KAAK,CAAC,IAAIX,IAAI,CAACH,IAAI,CAAC,CAAC,GAAG,EAAEc,EAAE,EAAEA,EAAE,EAAE,CAAC,EAAE,CAAC,EAAEmB,IAAI,EAAEd,EAAE,CAAC5B,CAAC,EAAE4B,EAAE,CAAC3B,CAAC,GAAG0C,QAAQ,CAACpB,EAAE,CAAC,CAAC,CAAC;IAC/E,CAAC,MACI;MACDX,IAAI,CAACH,IAAI,CAAC,CAAC,GAAG,EAAEmB,EAAE,CAAC5B,CAAC,EAAE4B,EAAE,CAAC3B,CAAC,CAAC,CAAC;MAC5BW,IAAI,CAACH,IAAI,CAAC,CAAC,GAAG,EAAEsB,EAAE,CAAC/B,CAAC,EAAE4B,EAAE,CAAC3B,CAAC,CAAC,CAAC;MAC5BW,IAAI,CAACH,IAAI,CAAC,CAAC,GAAG,EAAEsB,EAAE,CAAC/B,CAAC,EAAE+B,EAAE,CAAC9B,CAAC,CAAC,CAAC;MAC5BW,IAAI,CAACH,IAAI,CAAC,CAAC,GAAG,EAAEmB,EAAE,CAAC5B,CAAC,EAAE+B,EAAE,CAAC9B,CAAC,CAAC,CAAC;MAC5BW,IAAI,CAACH,IAAI,CAAC,CAAC,GAAG,EAAEmB,EAAE,CAAC5B,CAAC,EAAE4B,EAAE,CAAC3B,CAAC,CAAC,CAAC;IAChC;IACAW,IAAI,CAACH,IAAI,CAAC,CAAC,GAAG,CAAC,CAAC;EACpB;EACA,IAAIiB,UAAU,CAACmB,OAAO,EAAE;IACpB,IAAIC,MAAM,GAAGpB,UAAU,CAACqB,SAAS,CAAC,CAAC;IACnC,IAAIhD,EAAE,GAAGL,QAAQ,CAAC+B,GAAG,EAAEC,UAAU,CAAC;MAAEsB,UAAU,GAAGjD,EAAE,CAACiD,UAAU;MAAEC,QAAQ,GAAGlD,EAAE,CAACkD,QAAQ;IACtF,IAAIvB,UAAU,CAACwB,IAAI,KAAK,OAAO,IAAI,CAACxB,UAAU,CAACG,YAAY,EAAE;MACzD;MACAjB,IAAI,GAAGjB,aAAa,CAACmD,MAAM,CAAC9C,CAAC,EAAE8C,MAAM,CAAC7C,CAAC,EAAEyB,UAAU,CAACyB,SAAS,CAAC,CAAC,EAAEH,UAAU,EAAEC,QAAQ,CAAC;IAC1F,CAAC,MACI;MACD,IAAIG,GAAG,GAAG,SAAAA,CAAUC,CAAC,EAAE;QAAE,OAAOnB,IAAI,CAACkB,GAAG,CAACC,CAAC,EAAE,CAAC,CAAC;MAAE,CAAC;MACjD,IAAIjC,EAAE,GAAGc,IAAI,CAACoB,IAAI,CAACF,GAAG,CAACN,MAAM,CAAC9C,CAAC,GAAGQ,MAAM,CAAC,CAAC,CAAC,CAACR,CAAC,CAAC,GAAGoD,GAAG,CAACN,MAAM,CAAC7C,CAAC,GAAGO,MAAM,CAAC,CAAC,CAAC,CAACP,CAAC,CAAC,CAAC;MAC7E,IAAIoB,EAAE,GAAGa,IAAI,CAACoB,IAAI,CAACF,GAAG,CAACN,MAAM,CAAC9C,CAAC,GAAGQ,MAAM,CAAC,CAAC,CAAC,CAACR,CAAC,CAAC,GAAGoD,GAAG,CAACN,MAAM,CAAC7C,CAAC,GAAGO,MAAM,CAAC,CAAC,CAAC,CAACP,CAAC,CAAC,CAAC;MAC7E;MACAW,IAAI,GAAGjB,aAAa,CAACmD,MAAM,CAAC9C,CAAC,EAAE8C,MAAM,CAAC7C,CAAC,EAAEmB,EAAE,EAAEM,UAAU,CAACsB,UAAU,EAAEtB,UAAU,CAACuB,QAAQ,EAAE5B,EAAE,CAAC;IAChG;EACJ;EACA,OAAOT,IAAI;AACf;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,OAAO,SAAS2C,mBAAmBA,CAAC/C,MAAM,EAAEgD,OAAO,EAAEC,IAAI,EAAE;EACvD,IAAIxB,KAAK,GAAGwB,IAAI,CAACpB,QAAQ,CAAC,CAAC;EAC3B,IAAID,MAAM,GAAGqB,IAAI,CAACnB,SAAS,CAAC,CAAC;EAC7B,IAAIX,MAAM,GAAG8B,IAAI,CAACP,IAAI,KAAK,MAAM;EACjC,IAAItC,IAAI,GAAG,EAAE;EACb,IAAIgC,CAAC,GAAG,CAACpC,MAAM,CAAC,CAAC,CAAC,CAACR,CAAC,GAAGQ,MAAM,CAAC,CAAC,CAAC,CAACR,CAAC,IAAI,CAAC;EACvC,IAAI0D,EAAE,GAAGD,IAAI,CAAC5B,YAAY,GAAIe,CAAC,GAAGR,MAAM,GAAIH,KAAK,GAAIW,CAAC,GAAGX,KAAK,GAAIG,MAAM;EACxE,IAAIoB,OAAO,KAAK,OAAO,EAAE;IACrB,IAAI7B,MAAM,EAAE;MACRf,IAAI,CAACH,IAAI,CAAC,CAAC,GAAG,EAAED,MAAM,CAAC,CAAC,CAAC,CAACR,CAAC,EAAEQ,MAAM,CAAC,CAAC,CAAC,CAACP,CAAC,GAAGyD,EAAE,CAAC,CAAC;MAC/C9C,IAAI,CAACH,IAAI,CAAC,CAAC,GAAG,EAAED,MAAM,CAAC,CAAC,CAAC,CAACR,CAAC,EAAEQ,MAAM,CAAC,CAAC,CAAC,CAACP,CAAC,GAAGyD,EAAE,CAAC,CAAC;MAC/C9C,IAAI,CAACH,IAAI,CAAC,CAAC,GAAG,EAAEmC,CAAC,EAAEA,CAAC,EAAE,CAAC,EAAE,CAAC,EAAE,CAAC,EAAEpC,MAAM,CAAC,CAAC,CAAC,CAACR,CAAC,EAAEQ,MAAM,CAAC,CAAC,CAAC,CAACP,CAAC,GAAGyD,EAAE,CAAC,CAAC;MAC9D9C,IAAI,CAACH,IAAI,CAAC,CAAC,GAAG,EAAED,MAAM,CAAC,CAAC,CAAC,CAACR,CAAC,EAAEQ,MAAM,CAAC,CAAC,CAAC,CAACP,CAAC,GAAGyD,EAAE,CAAC,CAAC;MAC/C9C,IAAI,CAACH,IAAI,CAAC,CAAC,GAAG,EAAEmC,CAAC,EAAEA,CAAC,EAAE,CAAC,EAAE,CAAC,EAAE,CAAC,EAAEpC,MAAM,CAAC,CAAC,CAAC,CAACR,CAAC,EAAEQ,MAAM,CAAC,CAAC,CAAC,CAACP,CAAC,GAAGyD,EAAE,CAAC,CAAC;IAClE,CAAC,MACI;MACD9C,IAAI,CAACH,IAAI,CAAC,CAAC,GAAG,EAAED,MAAM,CAAC,CAAC,CAAC,CAACR,CAAC,EAAEQ,MAAM,CAAC,CAAC,CAAC,CAACP,CAAC,CAAC,CAAC;MAC1CW,IAAI,CAACH,IAAI,CAAC,CAAC,GAAG,EAAED,MAAM,CAAC,CAAC,CAAC,CAACR,CAAC,EAAEQ,MAAM,CAAC,CAAC,CAAC,CAACP,CAAC,CAAC,CAAC;MAC1CW,IAAI,CAACH,IAAI,CAAC,CAAC,GAAG,EAAEmC,CAAC,EAAEA,CAAC,EAAE,CAAC,EAAE,CAAC,EAAE,CAAC,EAAEpC,MAAM,CAAC,CAAC,CAAC,CAACR,CAAC,EAAEQ,MAAM,CAAC,CAAC,CAAC,CAACP,CAAC,CAAC,CAAC;MACzDW,IAAI,CAACH,IAAI,CAAC,CAAC,GAAG,EAAED,MAAM,CAAC,CAAC,CAAC,CAACR,CAAC,EAAEQ,MAAM,CAAC,CAAC,CAAC,CAACP,CAAC,CAAC,CAAC;MAC1CW,IAAI,CAACH,IAAI,CAAC,CAAC,GAAG,EAAEmC,CAAC,EAAEA,CAAC,EAAE,CAAC,EAAE,CAAC,EAAE,CAAC,EAAEpC,MAAM,CAAC,CAAC,CAAC,CAACR,CAAC,EAAEQ,MAAM,CAAC,CAAC,CAAC,CAACP,CAAC,CAAC,CAAC;IAC7D;IACAW,IAAI,CAACH,IAAI,CAAC,CAAC,GAAG,CAAC,CAAC;EACpB,CAAC,MACI;IACDG,IAAI,GAAGF,WAAW,CAACF,MAAM,CAAC;EAC9B;EACA,OAAOI,IAAI;AACf;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,OAAO,SAAS+C,aAAaA,CAACnD,MAAM,EAAEoD,UAAU,EAAEC,SAAS,EAAE;EACzD,IAAIjD,IAAI,GAAG,EAAE;EACb,IAAI,CAACpB,KAAK,CAACoE,UAAU,CAAC,EAAE;IACpBhD,IAAI,CAACH,IAAI,CAAC,CAAC,GAAG,EAAED,MAAM,CAAC,CAAC,CAAC,CAACR,CAAC,EAAEQ,MAAM,CAAC,CAAC,CAAC,CAACP,CAAC,CAAC,EAAE,CAAC,GAAG,EAAEO,MAAM,CAAC,CAAC,CAAC,CAACR,CAAC,EAAEQ,MAAM,CAAC,CAAC,CAAC,CAACP,CAAC,CAAC,EAAE,CAAC,GAAG,EAAE2D,UAAU,CAAC,CAAC,CAAC,CAAC5D,CAAC,EAAE4D,UAAU,CAAC,CAAC,CAAC,CAAC3D,CAAC,CAAC,EAAE,CAAC,GAAG,EAAE2D,UAAU,CAAC,CAAC,CAAC,CAAC5D,CAAC,EAAE4D,UAAU,CAAC,CAAC,CAAC,CAAC3D,CAAC,CAAC,EAAE,CAAC,GAAG,CAAC,CAAC;EACxK,CAAC,MACI,IAAI4D,SAAS,EAAE;IAChB;IACAjD,IAAI,CAACH,IAAI,CAAC,CAAC,GAAG,EAAED,MAAM,CAAC,CAAC,CAAC,CAACR,CAAC,EAAEQ,MAAM,CAAC,CAAC,CAAC,CAACP,CAAC,CAAC,EAAE,CAAC,GAAG,EAAEO,MAAM,CAAC,CAAC,CAAC,CAACR,CAAC,EAAEQ,MAAM,CAAC,CAAC,CAAC,CAACP,CAAC,CAAC,EAAE,CAAC,GAAG,EAAE,CAACO,MAAM,CAAC,CAAC,CAAC,CAACR,CAAC,GAAGQ,MAAM,CAAC,CAAC,CAAC,CAACR,CAAC,IAAI,CAAC,EAAE,CAACQ,MAAM,CAAC,CAAC,CAAC,CAACP,CAAC,GAAGO,MAAM,CAAC,CAAC,CAAC,CAACP,CAAC,IAAI,CAAC,CAAC,EAAE,CAAC,GAAG,CAAC,CAAC;EAC/J,CAAC,MACI;IACD;IACAW,IAAI,CAACH,IAAI,CAAC,CAAC,GAAG,EAAED,MAAM,CAAC,CAAC,CAAC,CAACR,CAAC,EAAEQ,MAAM,CAAC,CAAC,CAAC,CAACP,CAAC,CAAC,EAAE,CAAC,GAAG,EAAEO,MAAM,CAAC,CAAC,CAAC,CAACR,CAAC,EAAEQ,MAAM,CAAC,CAAC,CAAC,CAACP,CAAC,CAAC,EAAE,CAAC,GAAG,EAAEO,MAAM,CAAC,CAAC,CAAC,CAACR,CAAC,EAAEQ,MAAM,CAAC,CAAC,CAAC,CAACP,CAAC,CAAC,EAAE,CAAC,GAAG,EAAEO,MAAM,CAAC,CAAC,CAAC,CAACR,CAAC,EAAEQ,MAAM,CAAC,CAAC,CAAC,CAACP,CAAC,CAAC,EAAE,CAAC,GAAG,CAAC,CAAC;EACxJ;EACA,OAAOW,IAAI;AACf;AACA;AACA;AACA;AACA,SAASkD,IAAIA,CAAClC,EAAE,EAAEG,EAAE,EAAE;EAClB,OAAO,CAACA,EAAE,EAAEH,EAAE,CAAC;AACnB;AACA;AACA;AACA;AACA;AACA,OAAO,SAASmC,uBAAuBA,CAACvD,MAAM,EAAEkB,UAAU,EAAER,MAAM,EAAE;EAChE,IAAIpB,EAAE,EAAEC,EAAE,EAAEiE,EAAE,EAAEC,EAAE,EAAEC,EAAE,EAAEC,EAAE,EAAEC,EAAE;EAC9B;EACA,IAAIC,EAAE,GAAGhF,MAAM,CAACC,aAAa,CAAC,EAAE,EAAED,MAAM,CAACmB,MAAM,CAAC,EAAE,KAAK,CAAC,EAAE,CAAC,CAAC;IAAEoB,EAAE,GAAGyC,EAAE,CAAC,CAAC,CAAC;IAAEtC,EAAE,GAAGsC,EAAE,CAAC,CAAC,CAAC;IAAEC,EAAE,GAAGD,EAAE,CAAC,CAAC,CAAC;IAAEE,EAAE,GAAGF,EAAE,CAAC,CAAC,CAAC;EAC5G,IAAIG,EAAE,GAAGnF,MAAM,CAAC,OAAO6B,MAAM,KAAK,QAAQ,GAAGuD,KAAK,CAAC,CAAC,CAAC,CAACC,IAAI,CAACxD,MAAM,CAAC,GAAGA,MAAM,EAAE,CAAC,CAAC;IAAEE,EAAE,GAAGoD,EAAE,CAAC,CAAC,CAAC;IAAEnD,EAAE,GAAGmD,EAAE,CAAC,CAAC,CAAC;IAAElD,EAAE,GAAGkD,EAAE,CAAC,CAAC,CAAC;IAAEjD,EAAE,GAAGiD,EAAE,CAAC,CAAC,CAAC;EAC/H,IAAI9C,UAAU,CAACG,YAAY,EAAE;IACzB/B,EAAE,GAAGT,MAAM,CAACyE,IAAI,CAAC/B,EAAE,EAAEwC,EAAE,CAAC,EAAE,CAAC,CAAC,EAAExC,EAAE,GAAGjC,EAAE,CAAC,CAAC,CAAC,EAAEyE,EAAE,GAAGzE,EAAE,CAAC,CAAC,CAAC;EACxD;EACA;AACJ;AACA;EACI,IAAI4B,UAAU,CAACe,SAAS,CAAC,GAAG,CAAC,EAAE;IAC3B1C,EAAE,GAAGV,MAAM,CAACyE,IAAI,CAAClC,EAAE,EAAEG,EAAE,CAAC,EAAE,CAAC,CAAC,EAAEH,EAAE,GAAG7B,EAAE,CAAC,CAAC,CAAC,EAAEgC,EAAE,GAAGhC,EAAE,CAAC,CAAC,CAAC;IACpDiE,EAAE,GAAG3E,MAAM,CAACyE,IAAI,CAACQ,EAAE,EAAEC,EAAE,CAAC,EAAE,CAAC,CAAC,EAAED,EAAE,GAAGN,EAAE,CAAC,CAAC,CAAC,EAAEO,EAAE,GAAGP,EAAE,CAAC,CAAC,CAAC;EACxD;EACA,IAAItC,UAAU,CAACe,SAAS,CAAC,GAAG,CAAC,EAAE;IAC3BwB,EAAE,GAAG5E,MAAM,CAACyE,IAAI,CAAClC,EAAE,EAAE2C,EAAE,CAAC,EAAE,CAAC,CAAC,EAAE3C,EAAE,GAAGqC,EAAE,CAAC,CAAC,CAAC,EAAEM,EAAE,GAAGN,EAAE,CAAC,CAAC,CAAC;IACpDC,EAAE,GAAG7E,MAAM,CAACyE,IAAI,CAAC/B,EAAE,EAAEuC,EAAE,CAAC,EAAE,CAAC,CAAC,EAAEvC,EAAE,GAAGmC,EAAE,CAAC,CAAC,CAAC,EAAEI,EAAE,GAAGJ,EAAE,CAAC,CAAC,CAAC;EACxD;EACA,IAAItD,IAAI,GAAG,EAAE;EACb;AACJ;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;EACI,IAAIuB,GAAG,GAAG,SAAAA,CAAUkB,CAAC,EAAE;IAAE,OAAOnB,IAAI,CAACC,GAAG,CAACkB,CAAC,CAAC;EAAE,CAAC;EAC9Cc,EAAE,GAAG9E,MAAM,CAAC4B,WAAW,CAAC,CAACG,EAAE,EAAEC,EAAE,EAAEC,EAAE,EAAEC,EAAE,CAAC,EAAEW,IAAI,CAACK,GAAG,CAACJ,GAAG,CAACoC,EAAE,CAACvE,CAAC,GAAG4B,EAAE,CAAC5B,CAAC,CAAC,EAAEmC,GAAG,CAACJ,EAAE,CAAC9B,CAAC,GAAG2B,EAAE,CAAC3B,CAAC,CAAC,CAAC,CAAC,CAAC0E,GAAG,CAAC,UAAUC,CAAC,EAAE;IAAE,OAAOzC,GAAG,CAACyC,CAAC,CAAC;EAAE,CAAC,CAAC,EAAE,CAAC,CAAC,EAAExD,EAAE,GAAG+C,EAAE,CAAC,CAAC,CAAC,EAAE9C,EAAE,GAAG8C,EAAE,CAAC,CAAC,CAAC,EAAE7C,EAAE,GAAG6C,EAAE,CAAC,CAAC,CAAC,EAAE5C,EAAE,GAAG4C,EAAE,CAAC,CAAC,CAAC;EAChL,IAAIzC,UAAU,CAACG,YAAY,EAAE;IACzBuC,EAAE,GAAG/E,MAAM,CAAC,CAACkC,EAAE,EAAEH,EAAE,EAAEC,EAAE,EAAEC,EAAE,CAAC,EAAE,CAAC,CAAC,EAAEF,EAAE,GAAGgD,EAAE,CAAC,CAAC,CAAC,EAAE/C,EAAE,GAAG+C,EAAE,CAAC,CAAC,CAAC,EAAE9C,EAAE,GAAG8C,EAAE,CAAC,CAAC,CAAC,EAAE7C,EAAE,GAAG6C,EAAE,CAAC,CAAC,CAAC;EACpF;EACA,IAAIxC,EAAE,CAAC3B,CAAC,GAAG8B,EAAE,CAAC9B,CAAC,CAAC,aAAa;IACzBW,IAAI,CAACH,IAAI,CAAC,CAAC,GAAG,EAAE8D,EAAE,CAACvE,CAAC,EAAEuE,EAAE,CAACtE,CAAC,GAAGqB,EAAE,CAAC,CAAC;IACjCA,EAAE,KAAK,CAAC,IAAIV,IAAI,CAACH,IAAI,CAAC,CAAC,GAAG,EAAEa,EAAE,EAAEA,EAAE,EAAE,CAAC,EAAE,CAAC,EAAE,CAAC,EAAEiD,EAAE,CAACvE,CAAC,GAAGsB,EAAE,EAAEiD,EAAE,CAACtE,CAAC,CAAC,CAAC;IAC9DW,IAAI,CAACH,IAAI,CAAC,CAAC,GAAG,EAAEmB,EAAE,CAAC5B,CAAC,GAAGuB,EAAE,EAAEK,EAAE,CAAC3B,CAAC,CAAC,CAAC;IACjCsB,EAAE,KAAK,CAAC,IAAIX,IAAI,CAACH,IAAI,CAAC,CAAC,GAAG,EAAEc,EAAE,EAAEA,EAAE,EAAE,CAAC,EAAE,CAAC,EAAE,CAAC,EAAEK,EAAE,CAAC5B,CAAC,EAAE4B,EAAE,CAAC3B,CAAC,GAAGsB,EAAE,CAAC,CAAC;IAC9DX,IAAI,CAACH,IAAI,CAAC,CAAC,GAAG,EAAEsB,EAAE,CAAC/B,CAAC,EAAE+B,EAAE,CAAC9B,CAAC,GAAGmB,EAAE,CAAC,CAAC;IACjCA,EAAE,KAAK,CAAC,IAAIR,IAAI,CAACH,IAAI,CAAC,CAAC,GAAG,EAAEW,EAAE,EAAEA,EAAE,EAAE,CAAC,EAAE,CAAC,EAAE,CAAC,CAAC,YAAYW,EAAE,CAAC/B,CAAC,GAAGoB,EAAE,EAAEW,EAAE,CAAC9B,CAAC,CAAC,CAAC;IACzEW,IAAI,CAACH,IAAI,CAAC,CAAC,GAAG,EAAE6D,EAAE,CAACtE,CAAC,GAAGqB,EAAE,EAAEiD,EAAE,CAACrE,CAAC,CAAC,CAAC;IACjCoB,EAAE,KAAK,CAAC,IAAIT,IAAI,CAACH,IAAI,CAAC,CAAC,GAAG,EAAEY,EAAE,EAAEA,EAAE,EAAE,CAAC,EAAE,CAAC,EAAE,CAAC,EAAEiD,EAAE,CAACtE,CAAC,EAAEsE,EAAE,CAACrE,CAAC,GAAGoB,EAAE,CAAC,CAAC;IAC9DT,IAAI,CAACH,IAAI,CAAC,CAAC,GAAG,EAAE8D,EAAE,CAACvE,CAAC,EAAEuE,EAAE,CAACtE,CAAC,GAAGqB,EAAE,CAAC,CAAC;IACjCV,IAAI,CAACH,IAAI,CAAC,CAAC,GAAG,CAAC,CAAC;EACpB,CAAC,MACI,IAAI8D,EAAE,CAACvE,CAAC,GAAG4B,EAAE,CAAC5B,CAAC,EAAE;IAClBY,IAAI,CAACH,IAAI,CAAC,CAAC,GAAG,EAAE6D,EAAE,CAACtE,CAAC,GAAGqB,EAAE,EAAEiD,EAAE,CAACrE,CAAC,CAAC,CAAC;IACjCoB,EAAE,KAAK,CAAC,IAAIT,IAAI,CAACH,IAAI,CAAC,CAAC,GAAG,EAAEY,EAAE,EAAEA,EAAE,EAAE,CAAC,EAAE,CAAC,EAAE,CAAC,EAAEiD,EAAE,CAACtE,CAAC,EAAEsE,EAAE,CAACrE,CAAC,GAAGoB,EAAE,CAAC,CAAC;IAC9DT,IAAI,CAACH,IAAI,CAAC,CAAC,GAAG,EAAE8D,EAAE,CAACvE,CAAC,EAAEuE,EAAE,CAACtE,CAAC,GAAGqB,EAAE,CAAC,CAAC;IACjCA,EAAE,KAAK,CAAC,IAAIV,IAAI,CAACH,IAAI,CAAC,CAAC,GAAG,EAAEa,EAAE,EAAEA,EAAE,EAAE,CAAC,EAAE,CAAC,EAAE,CAAC,EAAEiD,EAAE,CAACvE,CAAC,GAAGsB,EAAE,EAAEiD,EAAE,CAACtE,CAAC,CAAC,CAAC;IAC9DW,IAAI,CAACH,IAAI,CAAC,CAAC,GAAG,EAAEmB,EAAE,CAAC5B,CAAC,GAAGuB,EAAE,EAAEK,EAAE,CAAC3B,CAAC,CAAC,CAAC;IACjCsB,EAAE,KAAK,CAAC,IAAIX,IAAI,CAACH,IAAI,CAAC,CAAC,GAAG,EAAEc,EAAE,EAAEA,EAAE,EAAE,CAAC,EAAE,CAAC,EAAE,CAAC,EAAEK,EAAE,CAAC5B,CAAC,EAAE4B,EAAE,CAAC3B,CAAC,GAAGsB,EAAE,CAAC,CAAC;IAC9DX,IAAI,CAACH,IAAI,CAAC,CAAC,GAAG,EAAEsB,EAAE,CAAC/B,CAAC,EAAE+B,EAAE,CAAC9B,CAAC,GAAGmB,EAAE,CAAC,CAAC;IACjCA,EAAE,KAAK,CAAC,IAAIR,IAAI,CAACH,IAAI,CAAC,CAAC,GAAG,EAAEW,EAAE,EAAEA,EAAE,EAAE,CAAC,EAAE,CAAC,EAAE,CAAC,EAAEW,EAAE,CAAC/B,CAAC,GAAGoB,EAAE,EAAEW,EAAE,CAAC9B,CAAC,CAAC,CAAC;IAC9DW,IAAI,CAACH,IAAI,CAAC,CAAC,GAAG,EAAE6D,EAAE,CAACtE,CAAC,GAAGqB,EAAE,EAAEiD,EAAE,CAACrE,CAAC,CAAC,CAAC;IACjCW,IAAI,CAACH,IAAI,CAAC,CAAC,GAAG,CAAC,CAAC;EACpB,CAAC,MACI;IACDG,IAAI,CAACH,IAAI,CAAC,CAAC,GAAG,EAAEsB,EAAE,CAAC/B,CAAC,EAAE+B,EAAE,CAAC9B,CAAC,GAAGmB,EAAE,CAAC,CAAC;IACjCA,EAAE,KAAK,CAAC,IAAIR,IAAI,CAACH,IAAI,CAAC,CAAC,GAAG,EAAEW,EAAE,EAAEA,EAAE,EAAE,CAAC,EAAE,CAAC,EAAE,CAAC,EAAEW,EAAE,CAAC/B,CAAC,GAAGoB,EAAE,EAAEW,EAAE,CAAC9B,CAAC,CAAC,CAAC;IAC9DW,IAAI,CAACH,IAAI,CAAC,CAAC,GAAG,EAAE6D,EAAE,CAACtE,CAAC,GAAGqB,EAAE,EAAEiD,EAAE,CAACrE,CAAC,CAAC,CAAC;IACjCoB,EAAE,KAAK,CAAC,IAAIT,IAAI,CAACH,IAAI,CAAC,CAAC,GAAG,EAAEY,EAAE,EAAEA,EAAE,EAAE,CAAC,EAAE,CAAC,EAAE,CAAC,EAAEiD,EAAE,CAACtE,CAAC,EAAEsE,EAAE,CAACrE,CAAC,GAAGoB,EAAE,CAAC,CAAC;IAC9DT,IAAI,CAACH,IAAI,CAAC,CAAC,GAAG,EAAE8D,EAAE,CAACvE,CAAC,EAAEuE,EAAE,CAACtE,CAAC,GAAGqB,EAAE,CAAC,CAAC;IACjCA,EAAE,KAAK,CAAC,IAAIV,IAAI,CAACH,IAAI,CAAC,CAAC,GAAG,EAAEa,EAAE,EAAEA,EAAE,EAAE,CAAC,EAAE,CAAC,EAAE,CAAC,EAAEiD,EAAE,CAACvE,CAAC,GAAGsB,EAAE,EAAEiD,EAAE,CAACtE,CAAC,CAAC,CAAC;IAC9DW,IAAI,CAACH,IAAI,CAAC,CAAC,GAAG,EAAEmB,EAAE,CAAC5B,CAAC,GAAGuB,EAAE,EAAEK,EAAE,CAAC3B,CAAC,CAAC,CAAC;IACjCsB,EAAE,KAAK,CAAC,IAAIX,IAAI,CAACH,IAAI,CAAC,CAAC,GAAG,EAAEc,EAAE,EAAEA,EAAE,EAAE,CAAC,EAAE,CAAC,EAAE,CAAC,EAAEK,EAAE,CAAC5B,CAAC,EAAE4B,EAAE,CAAC3B,CAAC,GAAGsB,EAAE,CAAC,CAAC;IAC9DX,IAAI,CAACH,IAAI,CAAC,CAAC,GAAG,EAAEsB,EAAE,CAAC/B,CAAC,EAAE+B,EAAE,CAAC9B,CAAC,GAAGmB,EAAE,CAAC,CAAC;IACjCR,IAAI,CAACH,IAAI,CAAC,CAAC,GAAG,CAAC,CAAC;EACpB;EACA,OAAOG,IAAI;AACf","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}