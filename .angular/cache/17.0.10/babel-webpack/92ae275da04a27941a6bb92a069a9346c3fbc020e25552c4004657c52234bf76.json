{"ast":null,"code":"import mix from './mix';\nimport isFunction from './is-function';\nvar extend = function (subclass, superclass, overrides, staticOverrides) {\n  // 如果只提供父类构造函数，则自动生成子类构造函数\n  if (!isFunction(superclass)) {\n    overrides = superclass;\n    superclass = subclass;\n    subclass = function () {};\n  }\n  var create = Object.create ? function (proto, c) {\n    return Object.create(proto, {\n      constructor: {\n        value: c\n      }\n    });\n  } : function (proto, c) {\n    function Tmp() {}\n    Tmp.prototype = proto;\n    var o = new Tmp();\n    o.constructor = c;\n    return o;\n  };\n  var superObj = create(superclass.prototype, subclass); // new superclass(),//实例化父类作为子类的prototype\n  subclass.prototype = mix(superObj, subclass.prototype); // 指定子类的prototype\n  subclass.superclass = create(superclass.prototype, superclass);\n  mix(superObj, overrides);\n  mix(subclass, staticOverrides);\n  return subclass;\n};\nexport default extend;","map":{"version":3,"names":["mix","isFunction","extend","subclass","superclass","overrides","staticOverrides","create","Object","proto","c","constructor","value","Tmp","prototype","o","superObj"],"sources":["/Users/obiechina/Documents/ridy-flutter-full-taxi-solution 2/node_modules/@antv/util/esm/extend.js"],"sourcesContent":["import mix from './mix';\nimport isFunction from './is-function';\nvar extend = function (subclass, superclass, overrides, staticOverrides) {\n    // 如果只提供父类构造函数，则自动生成子类构造函数\n    if (!isFunction(superclass)) {\n        overrides = superclass;\n        superclass = subclass;\n        subclass = function () { };\n    }\n    var create = Object.create ?\n        function (proto, c) {\n            return Object.create(proto, {\n                constructor: {\n                    value: c\n                }\n            });\n        } :\n        function (proto, c) {\n            function Tmp() { }\n            Tmp.prototype = proto;\n            var o = new Tmp();\n            o.constructor = c;\n            return o;\n        };\n    var superObj = create(superclass.prototype, subclass); // new superclass(),//实例化父类作为子类的prototype\n    subclass.prototype = mix(superObj, subclass.prototype); // 指定子类的prototype\n    subclass.superclass = create(superclass.prototype, superclass);\n    mix(superObj, overrides);\n    mix(subclass, staticOverrides);\n    return subclass;\n};\nexport default extend;\n"],"mappings":"AAAA,OAAOA,GAAG,MAAM,OAAO;AACvB,OAAOC,UAAU,MAAM,eAAe;AACtC,IAAIC,MAAM,GAAG,SAAAA,CAAUC,QAAQ,EAAEC,UAAU,EAAEC,SAAS,EAAEC,eAAe,EAAE;EACrE;EACA,IAAI,CAACL,UAAU,CAACG,UAAU,CAAC,EAAE;IACzBC,SAAS,GAAGD,UAAU;IACtBA,UAAU,GAAGD,QAAQ;IACrBA,QAAQ,GAAG,SAAAA,CAAA,EAAY,CAAE,CAAC;EAC9B;EACA,IAAII,MAAM,GAAGC,MAAM,CAACD,MAAM,GACtB,UAAUE,KAAK,EAAEC,CAAC,EAAE;IAChB,OAAOF,MAAM,CAACD,MAAM,CAACE,KAAK,EAAE;MACxBE,WAAW,EAAE;QACTC,KAAK,EAAEF;MACX;IACJ,CAAC,CAAC;EACN,CAAC,GACD,UAAUD,KAAK,EAAEC,CAAC,EAAE;IAChB,SAASG,GAAGA,CAAA,EAAG,CAAE;IACjBA,GAAG,CAACC,SAAS,GAAGL,KAAK;IACrB,IAAIM,CAAC,GAAG,IAAIF,GAAG,CAAC,CAAC;IACjBE,CAAC,CAACJ,WAAW,GAAGD,CAAC;IACjB,OAAOK,CAAC;EACZ,CAAC;EACL,IAAIC,QAAQ,GAAGT,MAAM,CAACH,UAAU,CAACU,SAAS,EAAEX,QAAQ,CAAC,CAAC,CAAC;EACvDA,QAAQ,CAACW,SAAS,GAAGd,GAAG,CAACgB,QAAQ,EAAEb,QAAQ,CAACW,SAAS,CAAC,CAAC,CAAC;EACxDX,QAAQ,CAACC,UAAU,GAAGG,MAAM,CAACH,UAAU,CAACU,SAAS,EAAEV,UAAU,CAAC;EAC9DJ,GAAG,CAACgB,QAAQ,EAAEX,SAAS,CAAC;EACxBL,GAAG,CAACG,QAAQ,EAAEG,eAAe,CAAC;EAC9B,OAAOH,QAAQ;AACnB,CAAC;AACD,eAAeD,MAAM","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}