{"ast":null,"code":"import { __assign } from \"tslib\";\nimport { parsePathString } from '@antv/path-util';\nimport { deepMix, get, upperFirst } from '@antv/util';\nimport { convertNormalPath, convertPolarPath } from './util/path';\n/** ShapeFactory 基类 */\nvar ShapeFactoryBase = {\n  /** 坐标系对象 */\n  coordinate: null,\n  /** 默认绘制的 Shape 类型 */\n  defaultShapeType: null,\n  /** 主题样式 */\n  theme: null,\n  /**\n   * 获取 shape 绘制需要的关键点\n   * @param shapeType shape 类型\n   * @param shapePoint 每条数据映射后的坐标点以及 size 数值\n   * @returns 图形关键点信息\n   */\n  getShapePoints: function (shapeType, shapePoint) {\n    var shape = this.getShape(shapeType);\n    if (shape.getPoints) {\n      return shape.getPoints(shapePoint);\n    }\n    return this.getDefaultPoints(shapePoint);\n  },\n  /**\n   * 根据 shape 类型获取具体的 shape 实例\n   * @param shapeType string shape 的类型\n   * @returns\n   */\n  getShape: function (shapeType) {\n    var shape = this[shapeType] || this[this.defaultShapeType];\n    shape.coordinate = this.coordinate;\n    return shape;\n  },\n  /**\n   * 获取 shape 的默认关键点\n   * @override\n   */\n  getDefaultPoints: function () {\n    return [];\n  },\n  /**\n   * 获取 shape 的默认绘制样式 (内置的 shapeFactory 均有注册默认样式)\n   */\n  getDefaultStyle: function (geometryTheme) {\n    return get(geometryTheme, [this.defaultShapeType, 'default', 'style'], {});\n  },\n  /**\n   * 获取 shape 对应的缩略图配置信息。\n   * @param shapeType shape 类型\n   * @param color 颜色\n   * @param isInPolar 是否在极坐标系下\n   * @returns 返回缩略图 marker 配置。\n   */\n  getMarker: function (shapeType, markerCfg) {\n    var shape = this.getShape(shapeType);\n    if (!shape.getMarker) {\n      var defaultShapeType = this.defaultShapeType;\n      shape = this.getShape(defaultShapeType);\n    }\n    var theme = this.theme;\n    var shapeStyle = get(theme, [shapeType, 'default'], {});\n    var markerStyle = shape.getMarker(markerCfg);\n    return deepMix({}, shapeStyle, markerStyle);\n  },\n  /**\n   * 绘制 shape\n   * @override\n   * @param shapeType 绘制的 shape 类型\n   * @param cfg 绘制 shape 需要的信息\n   * @param element Element 实例\n   * @returns\n   */\n  drawShape: function (shapeType, cfg, container) {\n    var shape = this.getShape(shapeType);\n    return shape.draw(cfg, container);\n  }\n};\n/** Shape 基类 */\nvar ShapeBase = {\n  /** 坐标系对象 */\n  coordinate: null,\n  /**\n   * 将归一化的 path 转换成坐标系下的 path\n   * @param path 归一化的路径\n   * @returns\n   */\n  parsePath: function (path) {\n    var coordinate = this.coordinate;\n    var parsedPath = parsePathString(path);\n    if (coordinate.isPolar) {\n      parsedPath = convertPolarPath(coordinate, parsedPath);\n    } else {\n      parsedPath = convertNormalPath(coordinate, parsedPath);\n    }\n    return parsedPath;\n  },\n  /**\n   * 将归一化的坐标转换成画布坐标\n   * @param point 归一化的坐标点数据\n   * @returns\n   */\n  parsePoint: function (point) {\n    var coordinate = this.coordinate;\n    return coordinate.convert(point);\n  },\n  /**\n   * 0～1 points 转 画布 points\n   * @param points 节点集合\n   * @returns\n   */\n  parsePoints: function (points) {\n    var coordinate = this.coordinate;\n    return points.map(function (point) {\n      return coordinate.convert(point);\n    });\n  },\n  /**\n   * 绘制 shape\n   * @override\n   */\n  draw: function (cfg, container) {}\n};\nvar ShapeFactoryMap = {};\n/**\n * 注册 ShapeFactory。\n * @param factoryName  ShapeFactory 名称，对应 Geometry 几何标记名称。\n * @param cfg 注册 ShapeFactory 需要覆写定义的属性。\n * @returns 返回 ShapeFactory 对象。\n */\nexport function registerShapeFactory(factoryName, cfg) {\n  var className = upperFirst(factoryName);\n  var geomObj = __assign(__assign(__assign({}, ShapeFactoryBase), cfg), {\n    geometryType: factoryName\n  });\n  ShapeFactoryMap[className] = geomObj;\n  return geomObj;\n}\n/**\n * 注册 Shape。\n * @param factoryName 对应的 ShapeFactory 名称。\n * @param shapeType 注册的 shape 名称。\n * @param cfg 注册 Shape 需要覆写定义的属性。\n * @returns shape 返回注册的 shape 对象。\n */\nexport function registerShape(factoryName, shapeType, cfg) {\n  var className = upperFirst(factoryName);\n  var factory = ShapeFactoryMap[className];\n  var shapeObj = __assign(__assign({}, ShapeBase), cfg);\n  factory[shapeType] = shapeObj;\n  return shapeObj;\n}\n/**\n * 获取 factoryName 对应的 shapeFactory\n * @param factoryName\n * @returns shape factory\n */\nexport function getShapeFactory(factoryName) {\n  var className = upperFirst(factoryName);\n  return ShapeFactoryMap[className];\n}","map":{"version":3,"names":["__assign","parsePathString","deepMix","get","upperFirst","convertNormalPath","convertPolarPath","ShapeFactoryBase","coordinate","defaultShapeType","theme","getShapePoints","shapeType","shapePoint","shape","getShape","getPoints","getDefaultPoints","getDefaultStyle","geometryTheme","getMarker","markerCfg","shapeStyle","markerStyle","drawShape","cfg","container","draw","ShapeBase","parsePath","path","parsedPath","isPolar","parsePoint","point","convert","parsePoints","points","map","ShapeFactoryMap","registerShapeFactory","factoryName","className","geomObj","geometryType","registerShape","factory","shapeObj","getShapeFactory"],"sources":["/Users/obiechina/Documents/ridy-flutter-full-taxi-solution 2/node_modules/@antv/g2/esm/geometry/shape/base.js"],"sourcesContent":["import { __assign } from \"tslib\";\nimport { parsePathString } from '@antv/path-util';\nimport { deepMix, get, upperFirst } from '@antv/util';\nimport { convertNormalPath, convertPolarPath } from './util/path';\n/** ShapeFactory 基类 */\nvar ShapeFactoryBase = {\n    /** 坐标系对象 */\n    coordinate: null,\n    /** 默认绘制的 Shape 类型 */\n    defaultShapeType: null,\n    /** 主题样式 */\n    theme: null,\n    /**\n     * 获取 shape 绘制需要的关键点\n     * @param shapeType shape 类型\n     * @param shapePoint 每条数据映射后的坐标点以及 size 数值\n     * @returns 图形关键点信息\n     */\n    getShapePoints: function (shapeType, shapePoint) {\n        var shape = this.getShape(shapeType);\n        if (shape.getPoints) {\n            return shape.getPoints(shapePoint);\n        }\n        return this.getDefaultPoints(shapePoint);\n    },\n    /**\n     * 根据 shape 类型获取具体的 shape 实例\n     * @param shapeType string shape 的类型\n     * @returns\n     */\n    getShape: function (shapeType) {\n        var shape = this[shapeType] || this[this.defaultShapeType];\n        shape.coordinate = this.coordinate;\n        return shape;\n    },\n    /**\n     * 获取 shape 的默认关键点\n     * @override\n     */\n    getDefaultPoints: function () {\n        return [];\n    },\n    /**\n     * 获取 shape 的默认绘制样式 (内置的 shapeFactory 均有注册默认样式)\n     */\n    getDefaultStyle: function (geometryTheme) {\n        return get(geometryTheme, [this.defaultShapeType, 'default', 'style'], {});\n    },\n    /**\n     * 获取 shape 对应的缩略图配置信息。\n     * @param shapeType shape 类型\n     * @param color 颜色\n     * @param isInPolar 是否在极坐标系下\n     * @returns 返回缩略图 marker 配置。\n     */\n    getMarker: function (shapeType, markerCfg) {\n        var shape = this.getShape(shapeType);\n        if (!shape.getMarker) {\n            var defaultShapeType = this.defaultShapeType;\n            shape = this.getShape(defaultShapeType);\n        }\n        var theme = this.theme;\n        var shapeStyle = get(theme, [shapeType, 'default'], {});\n        var markerStyle = shape.getMarker(markerCfg);\n        return deepMix({}, shapeStyle, markerStyle);\n    },\n    /**\n     * 绘制 shape\n     * @override\n     * @param shapeType 绘制的 shape 类型\n     * @param cfg 绘制 shape 需要的信息\n     * @param element Element 实例\n     * @returns\n     */\n    drawShape: function (shapeType, cfg, container) {\n        var shape = this.getShape(shapeType);\n        return shape.draw(cfg, container);\n    },\n};\n/** Shape 基类 */\nvar ShapeBase = {\n    /** 坐标系对象 */\n    coordinate: null,\n    /**\n     * 将归一化的 path 转换成坐标系下的 path\n     * @param path 归一化的路径\n     * @returns\n     */\n    parsePath: function (path) {\n        var coordinate = this.coordinate;\n        var parsedPath = parsePathString(path);\n        if (coordinate.isPolar) {\n            parsedPath = convertPolarPath(coordinate, parsedPath);\n        }\n        else {\n            parsedPath = convertNormalPath(coordinate, parsedPath);\n        }\n        return parsedPath;\n    },\n    /**\n     * 将归一化的坐标转换成画布坐标\n     * @param point 归一化的坐标点数据\n     * @returns\n     */\n    parsePoint: function (point) {\n        var coordinate = this.coordinate;\n        return coordinate.convert(point);\n    },\n    /**\n     * 0～1 points 转 画布 points\n     * @param points 节点集合\n     * @returns\n     */\n    parsePoints: function (points) {\n        var coordinate = this.coordinate;\n        return points.map(function (point) {\n            return coordinate.convert(point);\n        });\n    },\n    /**\n     * 绘制 shape\n     * @override\n     */\n    draw: function (cfg, container) { },\n};\nvar ShapeFactoryMap = {};\n/**\n * 注册 ShapeFactory。\n * @param factoryName  ShapeFactory 名称，对应 Geometry 几何标记名称。\n * @param cfg 注册 ShapeFactory 需要覆写定义的属性。\n * @returns 返回 ShapeFactory 对象。\n */\nexport function registerShapeFactory(factoryName, cfg) {\n    var className = upperFirst(factoryName);\n    var geomObj = __assign(__assign(__assign({}, ShapeFactoryBase), cfg), { geometryType: factoryName });\n    ShapeFactoryMap[className] = geomObj;\n    return geomObj;\n}\n/**\n * 注册 Shape。\n * @param factoryName 对应的 ShapeFactory 名称。\n * @param shapeType 注册的 shape 名称。\n * @param cfg 注册 Shape 需要覆写定义的属性。\n * @returns shape 返回注册的 shape 对象。\n */\nexport function registerShape(factoryName, shapeType, cfg) {\n    var className = upperFirst(factoryName);\n    var factory = ShapeFactoryMap[className];\n    var shapeObj = __assign(__assign({}, ShapeBase), cfg);\n    factory[shapeType] = shapeObj;\n    return shapeObj;\n}\n/**\n * 获取 factoryName 对应的 shapeFactory\n * @param factoryName\n * @returns shape factory\n */\nexport function getShapeFactory(factoryName) {\n    var className = upperFirst(factoryName);\n    return ShapeFactoryMap[className];\n}\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}