{"ast":null,"code":"import { __extends } from \"tslib\";\nimport EE from '@antv/event-emitter';\nimport { mix } from '../util/util';\nvar Base = /** @class */function (_super) {\n  __extends(Base, _super);\n  function Base(cfg) {\n    var _this = _super.call(this) || this;\n    /**\n     * 是否被销毁\n     * @type {boolean}\n     */\n    _this.destroyed = false;\n    var defaultCfg = _this.getDefaultCfg();\n    _this.cfg = mix(defaultCfg, cfg);\n    return _this;\n  }\n  /**\n   * @protected\n   * 默认的配置项\n   * @returns {object} 默认的配置项\n   */\n  Base.prototype.getDefaultCfg = function () {\n    return {};\n  };\n  // 实现接口的方法\n  Base.prototype.get = function (name) {\n    return this.cfg[name];\n  };\n  // 实现接口的方法\n  Base.prototype.set = function (name, value) {\n    this.cfg[name] = value;\n  };\n  // 实现接口的方法\n  Base.prototype.destroy = function () {\n    this.cfg = {\n      destroyed: true\n    };\n    this.off();\n    this.destroyed = true;\n  };\n  return Base;\n}(EE);\nexport default Base;","map":{"version":3,"names":["__extends","EE","mix","Base","_super","cfg","_this","call","destroyed","defaultCfg","getDefaultCfg","prototype","get","name","set","value","destroy","off"],"sources":["/Users/obiechina/Documents/ridy-flutter-full-taxi-solution 2/node_modules/@antv/g-base/esm/abstract/base.js"],"sourcesContent":["import { __extends } from \"tslib\";\nimport EE from '@antv/event-emitter';\nimport { mix } from '../util/util';\nvar Base = /** @class */ (function (_super) {\n    __extends(Base, _super);\n    function Base(cfg) {\n        var _this = _super.call(this) || this;\n        /**\n         * 是否被销毁\n         * @type {boolean}\n         */\n        _this.destroyed = false;\n        var defaultCfg = _this.getDefaultCfg();\n        _this.cfg = mix(defaultCfg, cfg);\n        return _this;\n    }\n    /**\n     * @protected\n     * 默认的配置项\n     * @returns {object} 默认的配置项\n     */\n    Base.prototype.getDefaultCfg = function () {\n        return {};\n    };\n    // 实现接口的方法\n    Base.prototype.get = function (name) {\n        return this.cfg[name];\n    };\n    // 实现接口的方法\n    Base.prototype.set = function (name, value) {\n        this.cfg[name] = value;\n    };\n    // 实现接口的方法\n    Base.prototype.destroy = function () {\n        this.cfg = {\n            destroyed: true,\n        };\n        this.off();\n        this.destroyed = true;\n    };\n    return Base;\n}(EE));\nexport default Base;\n"],"mappings":"AAAA,SAASA,SAAS,QAAQ,OAAO;AACjC,OAAOC,EAAE,MAAM,qBAAqB;AACpC,SAASC,GAAG,QAAQ,cAAc;AAClC,IAAIC,IAAI,GAAG,aAAe,UAAUC,MAAM,EAAE;EACxCJ,SAAS,CAACG,IAAI,EAAEC,MAAM,CAAC;EACvB,SAASD,IAAIA,CAACE,GAAG,EAAE;IACf,IAAIC,KAAK,GAAGF,MAAM,CAACG,IAAI,CAAC,IAAI,CAAC,IAAI,IAAI;IACrC;AACR;AACA;AACA;IACQD,KAAK,CAACE,SAAS,GAAG,KAAK;IACvB,IAAIC,UAAU,GAAGH,KAAK,CAACI,aAAa,CAAC,CAAC;IACtCJ,KAAK,CAACD,GAAG,GAAGH,GAAG,CAACO,UAAU,EAAEJ,GAAG,CAAC;IAChC,OAAOC,KAAK;EAChB;EACA;AACJ;AACA;AACA;AACA;EACIH,IAAI,CAACQ,SAAS,CAACD,aAAa,GAAG,YAAY;IACvC,OAAO,CAAC,CAAC;EACb,CAAC;EACD;EACAP,IAAI,CAACQ,SAAS,CAACC,GAAG,GAAG,UAAUC,IAAI,EAAE;IACjC,OAAO,IAAI,CAACR,GAAG,CAACQ,IAAI,CAAC;EACzB,CAAC;EACD;EACAV,IAAI,CAACQ,SAAS,CAACG,GAAG,GAAG,UAAUD,IAAI,EAAEE,KAAK,EAAE;IACxC,IAAI,CAACV,GAAG,CAACQ,IAAI,CAAC,GAAGE,KAAK;EAC1B,CAAC;EACD;EACAZ,IAAI,CAACQ,SAAS,CAACK,OAAO,GAAG,YAAY;IACjC,IAAI,CAACX,GAAG,GAAG;MACPG,SAAS,EAAE;IACf,CAAC;IACD,IAAI,CAACS,GAAG,CAAC,CAAC;IACV,IAAI,CAACT,SAAS,GAAG,IAAI;EACzB,CAAC;EACD,OAAOL,IAAI;AACf,CAAC,CAACF,EAAE,CAAE;AACN,eAAeE,IAAI","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}