{"ast":null,"code":"import { __assign, __extends, __read, __rest, __spreadArray } from \"tslib\";\nimport { clone, deepMix, each, filter, find, flatten, get, isBoolean, isFunction, isNil, isObject, isString, isUndefined, mix, remove, set, size, uniqueId, isEqual, isPlainObject, reduce } from '@antv/util';\nimport { GROUP_Z_INDEX, LAYER, PLOT_EVENTS, VIEW_LIFE_CIRCLE } from '../constant';\nimport Base from '../base';\nimport { getFacet } from '../facet';\nimport { createInteraction } from '../interaction';\nimport { getTheme } from '../theme';\nimport { BBox } from '../util/bbox';\nimport { getCoordinateClipCfg, isPointInCoordinate } from '../util/coordinate';\nimport { uniq } from '../util/helper';\nimport { findDataByPoint } from '../util/tooltip';\nimport { parsePadding } from '../util/padding';\nimport { getDefaultCategoryScaleRange } from '../util/scale';\nimport { createTheme } from '../theme/util';\nimport { getComponentController, getComponentControllerNames } from './controller';\nimport CoordinateController from './controller/coordinate';\nimport Event from './event';\nimport defaultLayout from './layout';\nimport { ScalePool } from './util/scale-pool';\nimport { PaddingCal } from './layout/padding-cal';\nimport { calculatePadding } from './layout/auto';\nimport { defaultSyncViewPadding } from './util/sync-view-padding';\n/**\n * G2 视图 View 类\n */\nvar View = /** @class */function (_super) {\n  __extends(View, _super);\n  function View(props) {\n    var _this = _super.call(this, {\n      visible: props.visible\n    }) || this;\n    /** 所有的子 view。 */\n    _this.views = [];\n    /** 所有的 geometry 实例。 */\n    _this.geometries = [];\n    /** 所有的组件 controllers。 */\n    _this.controllers = [];\n    /** 所有的 Interaction 实例。 */\n    _this.interactions = {};\n    /** 是否对超出坐标系范围的 Geometry 进行剪切 */\n    _this.limitInPlot = false;\n    // 配置信息存储\n    _this.options = {\n      data: [],\n      animate: true // 默认开启动画\n    }; // 初始化为空\n    /** 配置开启的组件插件，默认为全局配置的组件。 */\n    _this.usedControllers = getComponentControllerNames();\n    /** 所有的 scales */\n    _this.scalePool = new ScalePool();\n    /** 布局函数 */\n    _this.layoutFunc = defaultLayout;\n    /** 当前鼠标是否在 plot 内（CoordinateBBox） */\n    _this.isPreMouseInPlot = false;\n    /** 默认标识位，用于判定数据是否更新 */\n    _this.isDataChanged = false;\n    /** 用于判断坐标系范围是否发生变化的标志位 */\n    _this.isCoordinateChanged = false;\n    /** 从当前这个 view 创建的 scale key */\n    _this.createdScaleKeys = new Map();\n    _this.onCanvasEvent = function (evt) {\n      var name = evt.name;\n      if (!name.includes(':')) {\n        // 非委托事件\n        var e = _this.createViewEvent(evt);\n        // 处理 plot 事件\n        _this.doPlotEvent(e);\n        _this.emit(name, e);\n      }\n    };\n    /**\n     * 触发事件之后\n     * @param evt\n     */\n    _this.onDelegateEvents = function (evt) {\n      // 阻止继续冒泡，防止重复事件触发\n      // evt.preventDefault();\n      var name = evt.name;\n      if (!name.includes(':')) {\n        return;\n      }\n      // 事件在 view 嵌套中冒泡（暂不提供阻止冒泡的机制）\n      var e = _this.createViewEvent(evt);\n      // 包含有基本事件、组合事件\n      _this.emit(name, e);\n      // const currentTarget = evt.currentTarget as IShape;\n      // const inheritNames = currentTarget.get('inheritNames');\n      // if (evt.delegateObject || inheritNames) {\n      //   const events = this.getEvents();\n      //   each(inheritNames, (subName) => {\n      //     const eventName = `${subName}:${type}`;\n      //     if (events[eventName]) {\n      //       this.emit(eventName, e);\n      //     }\n      //   });\n      // }\n    };\n\n    var _a = props.id,\n      id = _a === void 0 ? uniqueId('view') : _a,\n      parent = props.parent,\n      canvas = props.canvas,\n      backgroundGroup = props.backgroundGroup,\n      middleGroup = props.middleGroup,\n      foregroundGroup = props.foregroundGroup,\n      _b = props.region,\n      region = _b === void 0 ? {\n        start: {\n          x: 0,\n          y: 0\n        },\n        end: {\n          x: 1,\n          y: 1\n        }\n      } : _b,\n      padding = props.padding,\n      appendPadding = props.appendPadding,\n      theme = props.theme,\n      options = props.options,\n      limitInPlot = props.limitInPlot,\n      syncViewPadding = props.syncViewPadding;\n    _this.parent = parent;\n    _this.canvas = canvas;\n    _this.backgroundGroup = backgroundGroup;\n    _this.middleGroup = middleGroup;\n    _this.foregroundGroup = foregroundGroup;\n    _this.region = region;\n    _this.padding = padding;\n    _this.appendPadding = appendPadding;\n    // 接受父 view 传入的参数\n    _this.options = __assign(__assign({}, _this.options), options);\n    _this.limitInPlot = limitInPlot;\n    _this.id = id;\n    _this.syncViewPadding = syncViewPadding;\n    // 初始化 theme\n    _this.themeObject = isObject(theme) ? deepMix({}, getTheme('default'), createTheme(theme)) : getTheme(theme);\n    _this.init();\n    return _this;\n  }\n  /**\n   * 设置 layout 布局函数\n   * @param layout 布局函数\n   * @returns void\n   */\n  View.prototype.setLayout = function (layout) {\n    this.layoutFunc = layout;\n  };\n  /**\n   * 生命周期：初始化\n   * @returns voids\n   */\n  View.prototype.init = function () {\n    // 计算画布的 viewBBox\n    this.calculateViewBBox();\n    // 事件委托机制\n    this.initEvents();\n    // 初始化组件 controller\n    this.initComponentController();\n    this.initOptions();\n  };\n  /**\n   * 生命周期：渲染流程，渲染过程需要处理数据更新的情况。\n   * render 函数仅仅会处理 view 和子 view。\n   * @param isUpdate 是否触发更新流程。\n   * @param params render 事件参数\n   */\n  View.prototype.render = function (isUpdate, payload) {\n    if (isUpdate === void 0) {\n      isUpdate = false;\n    }\n    this.emit(VIEW_LIFE_CIRCLE.BEFORE_RENDER, Event.fromData(this, VIEW_LIFE_CIRCLE.BEFORE_RENDER, payload));\n    // 递归渲染\n    this.paint(isUpdate);\n    this.emit(VIEW_LIFE_CIRCLE.AFTER_RENDER, Event.fromData(this, VIEW_LIFE_CIRCLE.AFTER_RENDER, payload));\n    if (this.visible === false) {\n      // 用户在初始化的时候声明 visible: false\n      this.changeVisible(false);\n    }\n  };\n  /**\n   * 生命周期：清空图表上所有的绘制内容，但是不销毁图表，chart 仍可使用。\n   * @returns void\n   */\n  View.prototype.clear = function () {\n    var _this = this;\n    this.emit(VIEW_LIFE_CIRCLE.BEFORE_CLEAR);\n    // 1. 清空缓存和计算数据\n    this.filteredData = [];\n    this.coordinateInstance = undefined;\n    this.isDataChanged = false; // 复位\n    this.isCoordinateChanged = false; // 复位\n    // 2. 清空 geometries\n    var geometries = this.geometries;\n    for (var i = 0; i < geometries.length; i++) {\n      geometries[i].clear();\n      // view 中使用 geometry 的时候，还需要清空它的容器，不然下一次 chart.geometry() 的时候，又创建了一个，导致泄露， #2799。\n      geometries[i].container.remove(true);\n      geometries[i].labelsContainer.remove(true);\n    }\n    this.geometries = [];\n    // 3. 清空 controllers\n    var controllers = this.controllers;\n    for (var i = 0; i < controllers.length; i++) {\n      if (controllers[i].name === 'annotation') {\n        // 需要清空配置项\n        controllers[i].clear(true);\n      } else {\n        controllers[i].clear();\n      }\n    }\n    // 4. 删除 scale 缓存\n    this.createdScaleKeys.forEach(function (v, k) {\n      _this.getRootView().scalePool.deleteScale(k);\n    });\n    this.createdScaleKeys.clear();\n    // 递归处理子 view\n    var views = this.views;\n    for (var i = 0; i < views.length; i++) {\n      views[i].clear();\n    }\n    this.emit(VIEW_LIFE_CIRCLE.AFTER_CLEAR);\n  };\n  /**\n   * 生命周期：销毁，完全无法使用。\n   * @returns void\n   */\n  View.prototype.destroy = function () {\n    // 销毁前事件，销毁之后已经没有意义了，所以不抛出事件\n    this.emit(VIEW_LIFE_CIRCLE.BEFORE_DESTROY);\n    var interactions = this.interactions;\n    // 销毁 interactions\n    each(interactions, function (interaction) {\n      if (interaction) {\n        // 有可能已经销毁，设置了 undefined\n        interaction.destroy();\n      }\n    });\n    this.clear();\n    // 销毁 controller 中的组件\n    var controllers = this.controllers;\n    for (var i = 0, len = controllers.length; i < len; i++) {\n      var controller = controllers[i];\n      controller.destroy();\n    }\n    this.backgroundGroup.remove(true);\n    this.middleGroup.remove(true);\n    this.foregroundGroup.remove(true);\n    _super.prototype.destroy.call(this);\n  };\n  /* end 生命周期函数 */\n  /**\n   * 显示或者隐藏整个 view。\n   * @param visible 是否可见\n   * @returns View\n   */\n  View.prototype.changeVisible = function (visible) {\n    _super.prototype.changeVisible.call(this, visible);\n    var geometries = this.geometries;\n    for (var i = 0, len = geometries.length; i < len; i++) {\n      var geometry = geometries[i];\n      geometry.changeVisible(visible);\n    }\n    var controllers = this.controllers;\n    for (var i = 0, len = controllers.length; i < len; i++) {\n      var controller = controllers[i];\n      controller.changeVisible(visible);\n    }\n    this.foregroundGroup.set('visible', visible);\n    this.middleGroup.set('visible', visible);\n    this.backgroundGroup.set('visible', visible);\n    // group.set('visible', visible) 不会触发自动刷新\n    this.getCanvas().draw();\n    return this;\n  };\n  /**\n   * 装载数据源。\n   *\n   * ```ts\n   * view.data([{ city: '杭州', sale: 100 }, { city: '上海', sale: 110 } ]);\n   * ```\n   *\n   * @param data 数据源，json 数组。\n   * @returns View\n   */\n  View.prototype.data = function (data) {\n    set(this.options, 'data', data);\n    this.isDataChanged = true;\n    return this;\n  };\n  /**\n   * @deprecated\n   * This method will be removed at G2 V4.1. Replaced by {@link #data(data)}\n   */\n  View.prototype.source = function (data) {\n    console.warn('This method will be removed at G2 V4.1. Please use chart.data() instead.');\n    return this.data(data);\n  };\n  /**\n   * 设置数据筛选规则。\n   *\n   * ```ts\n   * view.filter('city', (value: any, datum: Datum) => value !== '杭州');\n   *\n   * // 删除 'city' 字段对应的筛选规则。\n   * view.filter('city', null);\n   * ```\n   *\n   * @param field 数据字段\n   * @param condition 筛选规则\n   * @returns View\n   */\n  View.prototype.filter = function (field, condition) {\n    if (isFunction(condition)) {\n      set(this.options, ['filters', field], condition);\n      return this;\n    }\n    // condition 为空，则表示删除过滤条件\n    if (!condition && get(this.options, ['filters', field])) {\n      delete this.options.filters[field];\n    }\n    return this;\n  };\n  View.prototype.axis = function (field, axisOption) {\n    if (isBoolean(field)) {\n      set(this.options, ['axes'], field);\n    } else {\n      set(this.options, ['axes', field], axisOption);\n    }\n    return this;\n  };\n  View.prototype.legend = function (field, legendOption) {\n    if (isBoolean(field)) {\n      set(this.options, ['legends'], field);\n    } else if (isString(field)) {\n      set(this.options, ['legends', field], legendOption);\n      if (isPlainObject(legendOption) && (legendOption === null || legendOption === void 0 ? void 0 : legendOption.selected)) {\n        set(this.options, ['filters', field], function (name) {\n          var _a;\n          return (_a = legendOption === null || legendOption === void 0 ? void 0 : legendOption.selected[name]) !== null && _a !== void 0 ? _a : true;\n        });\n      }\n    } else {\n      // 设置全局的 legend 配置\n      set(this.options, ['legends'], field);\n    }\n    return this;\n  };\n  View.prototype.scale = function (field, scaleOption) {\n    var _this = this;\n    if (isString(field)) {\n      set(this.options, ['scales', field], scaleOption);\n    } else if (isObject(field)) {\n      each(field, function (v, k) {\n        set(_this.options, ['scales', k], v);\n      });\n    }\n    return this;\n  };\n  /**\n   * tooltip 提示信息配置。\n   *\n   * ```ts\n   * view.tooltip(false); // 关闭 tooltip\n   *\n   * view.tooltip({\n   *   shared: true\n   * });\n   * ```\n   *\n   * @param cfg Tooltip 配置，更详细的配置项参考：https://github.com/antvis/component#tooltip\n   * @returns View\n   */\n  View.prototype.tooltip = function (cfg) {\n    set(this.options, 'tooltip', cfg);\n    return this;\n  };\n  /**\n   * 辅助标记配置。\n   *\n   * ```ts\n   * view.annotation().line({\n   *   start: ['min', 85],\n   *   end: ['max', 85],\n   *   style: {\n   *     stroke: '#595959',\n   *     lineWidth: 1,\n   *     lineDash: [3, 3],\n   *   },\n   * });\n   * ```\n   * 更详细的配置项：https://github.com/antvis/component#annotation\n   * @returns [[Annotation]]\n   */\n  View.prototype.annotation = function () {\n    return this.getController('annotation');\n  };\n  /**\n   * @deprecated\n   * This method will be removed at G2 V4.1. Replaced by {@link #guide()}\n   */\n  View.prototype.guide = function () {\n    console.warn('This method will be removed at G2 V4.1. Please use chart.annotation() instead.');\n    return this.annotation();\n  };\n  View.prototype.coordinate = function (type, coordinateCfg) {\n    // 提供语法糖，使用更简单\n    if (isString(type)) {\n      set(this.options, 'coordinate', {\n        type: type,\n        cfg: coordinateCfg\n      });\n    } else {\n      set(this.options, 'coordinate', type);\n    }\n    // 更新 coordinate 配置\n    this.coordinateController.update(this.options.coordinate);\n    return this.coordinateController;\n  };\n  /**\n   * @deprecated\n   * This method will be removed at G2 V4.1. Replaced by {@link #coordinate()}\n   */\n  View.prototype.coord = function (type, coordinateCfg) {\n    console.warn('This method will be removed at G2 V4.1. Please use chart.coordinate() instead.');\n    // @ts-ignore\n    return this.coordinate(type, coordinateCfg);\n  };\n  /**\n   * view 分面绘制。\n   *\n   * ```ts\n   * view.facet('rect', {\n   *   rowField: 'province',\n   *   columnField: 'category',\n   *   eachView: (innerView: View, facet?: FacetData) => {\n   *     innerView.line().position('city*sale');\n   *   },\n   * });\n   * ```\n   *\n   * @param type 分面类型\n   * @param cfg 分面配置， [[FacetCfgMap]]\n   * @returns View\n   */\n  View.prototype.facet = function (type, cfg) {\n    // 先销毁掉之前的分面\n    if (this.facetInstance) {\n      this.facetInstance.destroy();\n    }\n    // 创建新的分面\n    var Ctor = getFacet(type);\n    if (!Ctor) {\n      throw new Error(\"facet '\".concat(type, \"' is not exist!\"));\n    }\n    this.facetInstance = new Ctor(this, __assign(__assign({}, cfg), {\n      type: type\n    }));\n    return this;\n  };\n  /*\n   * 开启或者关闭动画。\n   *\n   * ```ts\n   * view.animate(false);\n   * ```\n   *\n   * @param status 动画状态，true 表示开始，false 表示关闭\n   * @returns View\n   */\n  View.prototype.animate = function (status) {\n    set(this.options, 'animate', status);\n    return this;\n  };\n  /**\n   * 更新配置项，用于配置项式声明。\n   * @param options 配置项\n   */\n  View.prototype.updateOptions = function (options) {\n    this.clear(); // 清空\n    mix(this.options, options);\n    // 需要把已存在的 view 销毁，否则会重复创建\n    // 目前针对配置项还没有特别好的 view 更新机制，为了不影响主流流程，所以在这里直接销毁\n    this.views.forEach(function (view) {\n      return view.destroy();\n    });\n    this.views = [];\n    this.initOptions();\n    // 初始化坐标系大小，保证 padding 计算正确\n    this.coordinateBBox = this.viewBBox;\n    return this;\n  };\n  /**\n   * 往 `view.options` 属性中存储配置项。\n   * @param name 属性名称\n   * @param opt 属性值\n   * @returns view\n   */\n  View.prototype.option = function (name, opt) {\n    // 对于内置的 option，避免覆盖。\n    // name 在原型上，说明可能是内置 API，存在 option 被覆盖的风险，不处理\n    if (View.prototype[name]) {\n      throw new Error(\"Can't use built in variable name \\\"\".concat(name, \"\\\", please change another one.\"));\n    }\n    // 存入到 option 中\n    set(this.options, name, opt);\n    return this;\n  };\n  /**\n   * 设置主题。\n   *\n   * ```ts\n   * view.theme('dark'); // 'dark' 需要事先通过 `registerTheme()` 接口注册完成\n   *\n   * view.theme({ defaultColor: 'red' });\n   * ```\n   *\n   * @param theme 主题名或者主题配置\n   * @returns View\n   */\n  View.prototype.theme = function (theme) {\n    this.themeObject = isObject(theme) ? deepMix({}, this.themeObject, createTheme(theme)) : getTheme(theme);\n    return this;\n  };\n  /* end 一系列传入配置的 API */\n  /**\n   * Call the interaction based on the interaction name\n   *\n   * ```ts\n   * view.interaction('my-interaction', { extra: 'hello world' });\n   * ```\n   * 详细文档可以参考：https://g2.antv.vision/zh/docs/api/general/interaction\n   * @param name interaction name\n   * @param cfg interaction config\n   * @returns\n   */\n  View.prototype.interaction = function (name, cfg) {\n    var existInteraction = this.interactions[name];\n    // 存在则先销毁已有的\n    if (existInteraction) {\n      existInteraction.destroy();\n    }\n    // 新建交互实例\n    var interaction = createInteraction(name, this, cfg);\n    if (interaction) {\n      interaction.init();\n      this.interactions[name] = interaction;\n    }\n    return this;\n  };\n  /**\n   * 移除当前 View 的 interaction\n   * ```ts\n   * view.removeInteraction('my-interaction');\n   * ```\n   * @param name interaction name\n   */\n  View.prototype.removeInteraction = function (name) {\n    var existInteraction = this.interactions[name];\n    // 存在则先销毁已有的\n    if (existInteraction) {\n      existInteraction.destroy();\n      this.interactions[name] = undefined;\n    }\n  };\n  /**\n   * 修改数据，数据更新逻辑，数据更新仅仅影响当前这一层的 view\n   *\n   * ```ts\n   * view.changeData([{ city: '北京', sale: '200' }]);\n   * ```\n   *\n   * @param data\n   * @returns void\n   */\n  View.prototype.changeData = function (data) {\n    this.isDataChanged = true;\n    this.emit(VIEW_LIFE_CIRCLE.BEFORE_CHANGE_DATA, Event.fromData(this, VIEW_LIFE_CIRCLE.BEFORE_CHANGE_DATA, null));\n    // 1. 保存数据\n    this.data(data);\n    // 2. 渲染\n    this.paint(true);\n    // 3. 遍历子 view 进行 change data\n    var views = this.views;\n    for (var i = 0, len = views.length; i < len; i++) {\n      var view = views[i];\n      // FIXME 子 view 有自己的数据的情况，该如何处理？\n      view.changeData(data);\n    }\n    this.emit(VIEW_LIFE_CIRCLE.AFTER_CHANGE_DATA, Event.fromData(this, VIEW_LIFE_CIRCLE.AFTER_CHANGE_DATA, null));\n  };\n  /* View 管理相关的 API */\n  /**\n   * 创建子 view\n   *\n   * ```ts\n   * const innerView = view.createView({\n   *   start: { x: 0, y: 0 },\n   *   end: { x: 0.5, y: 0.5 },\n   *   padding: 8,\n   * });\n   * ```\n   *\n   * @param cfg\n   * @returns View\n   */\n  View.prototype.createView = function (cfg) {\n    // 将会在 4.1 版本中移除递归嵌套 view，仅仅只允许 chart - view 两层。\n    // 这个 API 理论上用户量不多，所以暂时不发大版本，所以先暂时打一个 warning。\n    if (this.parent && this.parent.parent) {\n      // 存在 3 层 结构了\n      console.warn('The view nesting recursive feature will be removed at G2 V4.1. Please avoid to use it.');\n    }\n    // 子 view 共享 options 配置数据\n    var sharedOptions = {\n      data: this.options.data,\n      scales: clone(this.options.scales),\n      axes: clone(this.options.axes),\n      coordinate: clone(this.coordinateController.getOption()),\n      tooltip: clone(this.options.tooltip),\n      legends: clone(this.options.legends),\n      animate: this.options.animate,\n      visible: this.visible\n    };\n    var v = new View(__assign(__assign({\n      parent: this,\n      canvas: this.canvas,\n      // 子 view 共用三层 group\n      backgroundGroup: this.backgroundGroup.addGroup({\n        zIndex: GROUP_Z_INDEX.BG\n      }),\n      middleGroup: this.middleGroup.addGroup({\n        zIndex: GROUP_Z_INDEX.MID\n      }),\n      foregroundGroup: this.foregroundGroup.addGroup({\n        zIndex: GROUP_Z_INDEX.FORE\n      }),\n      theme: this.themeObject,\n      padding: this.padding\n    }, cfg), {\n      options: __assign(__assign({}, sharedOptions), get(cfg, 'options', {}))\n    }));\n    this.views.push(v);\n    return v;\n  };\n  /**\n   * @deprecated\n   * This method will be removed at G2 V4.1. Replaced by {@link #createView()}\n   */\n  View.prototype.view = function (cfg) {\n    console.warn('This method will be removed at G2 V4.1. Please use chart.createView() instead.');\n    return this.createView(cfg);\n  };\n  /**\n   * 删除一个子 view\n   * @param view\n   * @return removedView\n   */\n  View.prototype.removeView = function (view) {\n    var removedView = remove(this.views, function (v) {\n      return v === view;\n    })[0];\n    if (removedView) {\n      removedView.destroy();\n    }\n    return removedView;\n  };\n  /* end View 管理相关的 API */\n  // 一些 get 方法\n  /**\n   * 获取当前坐标系实例。\n   * @returns [[Coordinate]]\n   */\n  View.prototype.getCoordinate = function () {\n    return this.coordinateInstance;\n  };\n  /**\n   * 获取当前 view 的主题配置。\n   * @returns themeObject\n   */\n  View.prototype.getTheme = function () {\n    return this.themeObject;\n  };\n  /**\n   * 获得 x 轴字段的 scale 实例。\n   * @returns view 中 Geometry 对于的 x scale\n   */\n  View.prototype.getXScale = function () {\n    // 拿第一个 Geometry 的 X scale\n    // 隐藏逻辑：一个 view 中的 Geometry 必须 x 字段一致\n    var g = this.geometries[0];\n    return g ? g.getXScale() : null;\n  };\n  /**\n   * 获取 y 轴字段的 scales 实例。\n   * @returns view 中 Geometry 对于的 y scale 数组\n   */\n  View.prototype.getYScales = function () {\n    // 拿到所有的 Geometry 的 Y scale，然后去重\n    var tmpMap = {};\n    var yScales = [];\n    this.geometries.forEach(function (g) {\n      var yScale = g.getYScale();\n      var field = yScale.field;\n      if (!tmpMap[field]) {\n        tmpMap[field] = true;\n        yScales.push(yScale);\n      }\n    });\n    return yScales;\n  };\n  /**\n   * 获取 x 轴或者 y 轴对应的所有 scale 实例。\n   * @param dimType x | y\n   * @returns x 轴或者 y 轴对应的所有 scale 实例。\n   */\n  View.prototype.getScalesByDim = function (dimType) {\n    var geometries = this.geometries;\n    var scales = {};\n    for (var i = 0, len = geometries.length; i < len; i++) {\n      var geometry = geometries[i];\n      var scale = dimType === 'x' ? geometry.getXScale() : geometry.getYScale();\n      if (scale && !scales[scale.field]) {\n        scales[scale.field] = scale;\n      }\n    }\n    return scales;\n  };\n  /**\n   * 根据字段名去获取 scale 实例。\n   * @param field 数据字段名称\n   * @param key id\n   */\n  View.prototype.getScale = function (field, key) {\n    var defaultKey = key ? key : this.getScaleKey(field);\n    // 调用根节点 view 的方法获取\n    return this.getRootView().scalePool.getScale(defaultKey);\n  };\n  /**\n   * @deprecated\n   * This method will be removed at G2 V4.1. Please use `getScale`.\n   */\n  View.prototype.getScaleByField = function (field, key) {\n    return this.getScale(field, key);\n  };\n  /**\n   * 返回所有配置信息。\n   * @returns 所有的 view API 配置。\n   */\n  View.prototype.getOptions = function () {\n    return this.options;\n  };\n  /**\n   * 获取 view 的数据（过滤后的数据）。\n   * @returns 处理过滤器之后的数据。\n   */\n  View.prototype.getData = function () {\n    return this.filteredData;\n  };\n  /**\n   * 获取原始数据\n   * @returns 传入 G2 的原始数据\n   */\n  View.prototype.getOriginalData = function () {\n    return this.options.data;\n  };\n  /**\n   * 获取布局后的边距 padding\n   * @returns\n   */\n  View.prototype.getPadding = function () {\n    return this.autoPadding.getPadding();\n  };\n  /**\n   * 获取当前 view 有的 geometries\n   * @returns\n   */\n  View.prototype.getGeometries = function () {\n    return this.geometries;\n  };\n  /**\n   * 获取 view 中的所有 geome\n   */\n  View.prototype.getElements = function () {\n    return reduce(this.geometries, function (elements, geometry) {\n      return elements.concat(geometry.getElements());\n    }, []);\n  };\n  /**\n   * 根据一定的规则查找 Geometry 的 Elements。\n   *\n   * ```typescript\n   * getElementsBy((element) => {\n   *   const data = element.getData();\n   *\n   *   return data.a === 'a';\n   * });\n   * ```\n   *\n   * @param condition 定义查找规则的回调函数。\n   * @returns\n   */\n  View.prototype.getElementsBy = function (condition) {\n    return this.getElements().filter(function (el) {\n      return condition(el);\n    });\n  };\n  /**\n   * 获得绘制的层级 group。\n   * @param layer 层级名称。\n   * @returns 对应层级的 Group。\n   */\n  View.prototype.getLayer = function (layer) {\n    return layer === LAYER.BG ? this.backgroundGroup : layer === LAYER.MID ? this.middleGroup : layer === LAYER.FORE ? this.foregroundGroup : this.foregroundGroup;\n  };\n  /**\n   * 对外暴露方法，判断一个点是否在绘图区域（即坐标系范围）内部。\n   * @param point 坐标点\n   */\n  View.prototype.isPointInPlot = function (point) {\n    return isPointInCoordinate(this.getCoordinate(), point);\n  };\n  /**\n   * 获得所有的 legend 对应的 attribute 实例。\n   * @returns 维度字段的 Attribute 数组\n   */\n  View.prototype.getLegendAttributes = function () {\n    return flatten(this.geometries.map(function (g) {\n      return g.getGroupAttributes();\n    }));\n  };\n  /**\n   * 获取所有的分组字段的 scale 实例。\n   * @returns 获得分组字段的 scale 实例数组。\n   */\n  View.prototype.getGroupScales = function () {\n    // 拿到所有的 Geometry 的 分组字段 scale，然后打平去重\n    var scales = this.geometries.map(function (g) {\n      return g.getGroupScales();\n    });\n    return uniq(flatten(scales));\n  };\n  /**\n   * 获取 G.Canvas 实例。\n   * @returns G.Canvas 画布实例。\n   */\n  View.prototype.getCanvas = function () {\n    return this.getRootView().canvas;\n  };\n  /**\n   * 获得根节点 view。\n   */\n  View.prototype.getRootView = function () {\n    var v = this;\n    while (true) {\n      if (v.parent) {\n        v = v.parent;\n        continue;\n      }\n      break;\n    }\n    return v;\n  };\n  /**\n   * 获取该数据在可视化后，对应的画布坐标点。\n   * @param data 原始数据记录\n   * @returns 对应的画布坐标点\n   */\n  View.prototype.getXY = function (data) {\n    var coordinate = this.getCoordinate();\n    var xScales = this.getScalesByDim('x');\n    var yScales = this.getScalesByDim('y');\n    var x;\n    var y;\n    each(data, function (value, key) {\n      if (xScales[key]) {\n        x = xScales[key].scale(value);\n      }\n      if (yScales[key]) {\n        y = yScales[key].scale(value);\n      }\n    });\n    if (!isNil(x) && !isNil(y)) {\n      return coordinate.convert({\n        x: x,\n        y: y\n      });\n    }\n  };\n  /**\n   * 获取 name 对应的 controller 实例\n   * @param name\n   */\n  View.prototype.getController = function (name) {\n    return find(this.controllers, function (c) {\n      return c.name === name;\n    });\n  };\n  /**\n   * 显示 point 坐标点对应的 tooltip。\n   * @param point 画布坐标点\n   * @returns View\n   */\n  View.prototype.showTooltip = function (point) {\n    var tooltip = this.getController('tooltip');\n    if (tooltip) {\n      tooltip.showTooltip(point);\n    }\n    return this;\n  };\n  /**\n   * 隐藏 tooltip。\n   * @returns View\n   */\n  View.prototype.hideTooltip = function () {\n    var tooltip = this.getController('tooltip');\n    if (tooltip) {\n      tooltip.hideTooltip();\n    }\n    return this;\n  };\n  /**\n   * 将 tooltip 锁定到当前位置不能移动。\n   * @returns View\n   */\n  View.prototype.lockTooltip = function () {\n    var tooltip = this.getController('tooltip');\n    if (tooltip) {\n      tooltip.lockTooltip();\n    }\n    return this;\n  };\n  /**\n   * 将 tooltip 锁定解除。\n   * @returns View\n   */\n  View.prototype.unlockTooltip = function () {\n    var tooltip = this.getController('tooltip');\n    if (tooltip) {\n      tooltip.unlockTooltip();\n    }\n    return this;\n  };\n  /**\n   * 是否锁定 tooltip。\n   * @returns 是否锁定\n   */\n  View.prototype.isTooltipLocked = function () {\n    var tooltip = this.getController('tooltip');\n    return tooltip && tooltip.isTooltipLocked();\n  };\n  /**\n   * 获取当前 point 对应的 tooltip 数据项。\n   * @param point 坐标点\n   * @returns tooltip 数据项\n   */\n  View.prototype.getTooltipItems = function (point) {\n    var tooltip = this.getController('tooltip');\n    return tooltip ? tooltip.getTooltipItems(point) : [];\n  };\n  /**\n   * 获取逼近的点的数据集合\n   * @param point 当前坐标点\n   * @returns  数据\n   */\n  View.prototype.getSnapRecords = function (point) {\n    var geometries = this.geometries;\n    var rst = [];\n    for (var i = 0, len = geometries.length; i < len; i++) {\n      var geom = geometries[i];\n      var dataArray = geom.dataArray;\n      geom.sort(dataArray); // 先进行排序，便于 tooltip 查找\n      var record = void 0;\n      for (var j = 0, dataLen = dataArray.length; j < dataLen; j++) {\n        var data = dataArray[j];\n        record = findDataByPoint(point, data, geom);\n        if (record) {\n          rst.push(record);\n        }\n      }\n    }\n    // 同样递归处理子 views\n    var views = this.views;\n    for (var i = 0, len = views.length; i < len; i++) {\n      var view = views[i];\n      var snapRecords = view.getSnapRecords(point);\n      rst = rst.concat(snapRecords);\n    }\n    return rst;\n  };\n  /**\n   * 获取所有的 pure component 组件，用于布局。\n   */\n  View.prototype.getComponents = function () {\n    var components = [];\n    var controllers = this.controllers;\n    for (var i = 0, len = controllers.length; i < len; i++) {\n      var controller = controllers[i];\n      components = components.concat(controller.getComponents());\n    }\n    return components;\n  };\n  /**\n   * 将 data 数据进行过滤。\n   * @param data\n   * @returns 过滤之后的数据\n   */\n  View.prototype.filterData = function (data) {\n    var filters = this.options.filters;\n    // 不存在 filters，则不需要进行数据过滤\n    if (size(filters) === 0) {\n      return data;\n    }\n    // 存在过滤器，则逐个执行过滤，过滤器之间是 与 的关系\n    return filter(data, function (datum, idx) {\n      // 所有的 filter 字段\n      var fields = Object.keys(filters);\n      // 所有的条件都通过，才算通过\n      return fields.every(function (field) {\n        var condition = filters[field];\n        // condition 返回 true，则保留\n        return condition(datum[field], datum, idx);\n      });\n    });\n  };\n  /**\n   * 对某一个字段进行过滤\n   * @param field\n   * @param data\n   */\n  View.prototype.filterFieldData = function (field, data) {\n    var filters = this.options.filters;\n    var condition = get(filters, field);\n    if (isUndefined(condition)) {\n      return data;\n    }\n    return data.filter(function (datum, idx) {\n      return condition(datum[field], datum, idx);\n    });\n  };\n  /**\n   * 调整 coordinate 的坐标范围。\n   */\n  View.prototype.adjustCoordinate = function () {\n    var _a = this.getCoordinate(),\n      curStart = _a.start,\n      curEnd = _a.end;\n    var start = this.coordinateBBox.bl;\n    var end = this.coordinateBBox.tr;\n    // 在 defaultLayoutFn 中只会在 coordinateBBox 发生变化的时候会调用 adjustCoordinate()，所以不用担心被置位\n    if (isEqual(curStart, start) && isEqual(curEnd, end)) {\n      this.isCoordinateChanged = false;\n      // 如果大小没有变化则不更新\n      return;\n    }\n    this.isCoordinateChanged = true;\n    this.coordinateInstance = this.coordinateController.adjust(start, end);\n  };\n  View.prototype.paint = function (isUpdate) {\n    this.renderDataRecursive(isUpdate);\n    // 处理 sync scale 的逻辑\n    this.syncScale();\n    this.emit(VIEW_LIFE_CIRCLE.BEFORE_PAINT);\n    // 初始化图形、组件位置，计算 padding\n    this.renderPaddingRecursive(isUpdate);\n    // 布局图形、组件\n    this.renderLayoutRecursive(isUpdate);\n    // 背景色 shape\n    this.renderBackgroundStyleShape();\n    // 最终的绘制 render\n    this.renderPaintRecursive(isUpdate);\n    this.emit(VIEW_LIFE_CIRCLE.AFTER_PAINT);\n    this.isDataChanged = false; // 渲染完毕复位\n  };\n  /**\n   * 渲染背景样式的 shape。\n   * 放到 view 中创建的原因是让使用 view 绘制图形的时候，也能够处理背景色\n   */\n  View.prototype.renderBackgroundStyleShape = function () {\n    // 只有根节点才处理\n    if (this.parent) {\n      return;\n    }\n    var background = get(this.themeObject, 'background');\n    // 配置了背景色\n    if (background) {\n      // 1. 不存在则创建\n      if (!this.backgroundStyleRectShape) {\n        this.backgroundStyleRectShape = this.backgroundGroup.addShape('rect', {\n          attrs: {},\n          zIndex: -1,\n          // 背景色 shape 不设置事件捕获\n          capture: false\n        });\n        this.backgroundStyleRectShape.toBack();\n      }\n      // 2. 有了 shape 之后设置背景，位置（更新的时候）\n      var _a = this.viewBBox,\n        x = _a.x,\n        y = _a.y,\n        width = _a.width,\n        height = _a.height;\n      this.backgroundStyleRectShape.attr({\n        fill: background,\n        x: x,\n        y: y,\n        width: width,\n        height: height\n      });\n    } else {\n      // 没有配置背景色\n      if (this.backgroundStyleRectShape) {\n        this.backgroundStyleRectShape.remove(true);\n        this.backgroundStyleRectShape = undefined;\n      }\n    }\n  };\n  /**\n   * 递归计算每个 view 的 padding 值，coordinateBBox 和 coordinateInstance\n   * @param isUpdate\n   */\n  View.prototype.renderPaddingRecursive = function (isUpdate) {\n    // 1. 子 view 大小相对 coordinateBBox，changeSize 的时候需要重新计算\n    this.calculateViewBBox();\n    // 2. 更新 coordinate\n    this.adjustCoordinate();\n    // 3. 初始化组件 component\n    this.initComponents(isUpdate);\n    // 4. 布局计算每隔 view 的 padding 值\n    // 4.1. 自动加 auto padding -> absolute padding，并且增加 appendPadding\n    this.autoPadding = calculatePadding(this).shrink(parsePadding(this.appendPadding));\n    // 4.2. 计算出新的 coordinateBBox，更新 Coordinate\n    // 这里必须保留，原因是后面子 view 的 viewBBox 或根据 parent 的 coordinateBBox\n    this.coordinateBBox = this.viewBBox.shrink(this.autoPadding.getPadding());\n    this.adjustCoordinate();\n    // 刷新 tooltip (tooltip crosshairs 依赖 coordinate 位置)\n    var tooltipController = this.controllers.find(function (c) {\n      return c.name === 'tooltip';\n    });\n    tooltipController.update();\n    // 同样递归处理子 views\n    var views = this.views;\n    for (var i = 0, len = views.length; i < len; i++) {\n      var view = views[i];\n      view.renderPaddingRecursive(isUpdate);\n    }\n  };\n  /**\n   * 递归处理 view 的布局，最终是计算各个 view 的 coordinateBBox 和 coordinateInstance\n   * @param isUpdate\n   */\n  View.prototype.renderLayoutRecursive = function (isUpdate) {\n    // 1. 同步子 view padding\n    // 根据配置获取 padding\n    var syncViewPaddingFn = this.syncViewPadding === true ? defaultSyncViewPadding : isFunction(this.syncViewPadding) ? this.syncViewPadding : undefined;\n    if (syncViewPaddingFn) {\n      syncViewPaddingFn(this, this.views, PaddingCal);\n      // 同步 padding 之后，更新 coordinate\n      this.views.forEach(function (v) {\n        v.coordinateBBox = v.viewBBox.shrink(v.autoPadding.getPadding());\n        v.adjustCoordinate();\n      });\n    }\n    // 3. 将 view 中的组件按照 view padding 移动到对应的位置\n    this.doLayout();\n    // 同样递归处理子 views\n    var views = this.views;\n    for (var i = 0, len = views.length; i < len; i++) {\n      var view = views[i];\n      view.renderLayoutRecursive(isUpdate);\n    }\n  };\n  /**\n   * 最终递归绘制组件和图形\n   * @param isUpdate\n   */\n  View.prototype.renderPaintRecursive = function (isUpdate) {\n    var middleGroup = this.middleGroup;\n    if (this.limitInPlot) {\n      var _a = getCoordinateClipCfg(this.coordinateInstance),\n        type = _a.type,\n        attrs = _a.attrs;\n      middleGroup.setClip({\n        type: type,\n        attrs: attrs\n      });\n    } else {\n      // 清除已有的 clip\n      middleGroup.setClip(undefined);\n    }\n    // 1. 渲染几何标记\n    this.paintGeometries(isUpdate);\n    // 2. 绘制组件\n    this.renderComponents(isUpdate);\n    // 同样递归处理子 views\n    var views = this.views;\n    for (var i = 0, len = views.length; i < len; i++) {\n      var view = views[i];\n      view.renderPaintRecursive(isUpdate);\n    }\n  };\n  // end Get 方法\n  /**\n   * 创建 scale，递归到顶层 view 去创建和缓存 scale\n   * @param field\n   * @param data\n   * @param scaleDef\n   * @param key\n   */\n  View.prototype.createScale = function (field, data, scaleDef, key) {\n    // 1. 合并 field 对应的 scaleDef，合并原则是底层覆盖顶层（就近原则）\n    var currentScaleDef = get(this.options.scales, [field]);\n    var mergedScaleDef = __assign(__assign({}, currentScaleDef), scaleDef);\n    // 2. 是否存在父 view，在则递归，否则创建\n    if (this.parent) {\n      return this.parent.createScale(field, data, mergedScaleDef, key);\n    }\n    // 3. 在根节点 view 通过 scalePool 创建\n    return this.scalePool.createScale(field, data, mergedScaleDef, key);\n  };\n  /**\n   * 递归渲染中的数据处理\n   * @param isUpdate\n   */\n  View.prototype.renderDataRecursive = function (isUpdate) {\n    // 1. 处理数据\n    this.doFilterData();\n    // 2. 创建实例\n    this.createCoordinate();\n    // 3. 初始化 Geometry\n    this.initGeometries(isUpdate);\n    // 4. 处理分面逻辑，最终都是生成子 view 和 geometry\n    this.renderFacet(isUpdate);\n    // 同样递归处理子 views\n    var views = this.views;\n    for (var i = 0, len = views.length; i < len; i++) {\n      var view = views[i];\n      view.renderDataRecursive(isUpdate);\n    }\n  };\n  /**\n   * 计算 region，计算实际的像素范围坐标\n   * @private\n   */\n  View.prototype.calculateViewBBox = function () {\n    var x;\n    var y;\n    var width;\n    var height;\n    if (this.parent) {\n      var bbox = this.parent.coordinateBBox;\n      // 存在 parent， 那么就是通过父容器大小计算\n      x = bbox.x;\n      y = bbox.y;\n      width = bbox.width;\n      height = bbox.height;\n    } else {\n      // 顶层容器，从 canvas 中取值 宽高\n      x = 0;\n      y = 0;\n      width = this.canvas.get('width');\n      height = this.canvas.get('height');\n    }\n    var _a = this.region,\n      start = _a.start,\n      end = _a.end;\n    // 根据 region 计算当前 view 的 bbox 大小。\n    var viewBBox = new BBox(x + width * start.x, y + height * start.y, width * (end.x - start.x), height * (end.y - start.y));\n    if (!this.viewBBox || !this.viewBBox.isEqual(viewBBox)) {\n      // viewBBox 发生变化的时候进行更新\n      this.viewBBox = new BBox(x + width * start.x, y + height * start.y, width * (end.x - start.x), height * (end.y - start.y));\n    }\n    // 初始的 coordinate bbox 大小\n    this.coordinateBBox = this.viewBBox;\n  };\n  /**\n   * 初始化事件机制：G 4.0 底层内置支持 name:event 的机制，那么只要所有组件都有自己的 name 即可。\n   *\n   * G2 的事件只是获取事件委托，然后在 view 嵌套结构中，形成事件冒泡机制。\n   * 当前 view 只委托自己 view 中的 Component 和 Geometry 事件，并向上冒泡\n   * @private\n   */\n  View.prototype.initEvents = function () {\n    // 三层 group 中的 shape 事件都会通过 G 冒泡上来的\n    this.foregroundGroup.on('*', this.onDelegateEvents);\n    this.middleGroup.on('*', this.onDelegateEvents);\n    this.backgroundGroup.on('*', this.onDelegateEvents);\n    this.canvas.on('*', this.onCanvasEvent);\n  };\n  /**\n   * 初始化插件\n   */\n  View.prototype.initComponentController = function () {\n    var usedControllers = this.usedControllers;\n    for (var i = 0, len = usedControllers.length; i < len; i++) {\n      var controllerName = usedControllers[i];\n      var Ctor = getComponentController(controllerName);\n      if (Ctor) {\n        this.controllers.push(new Ctor(this));\n      }\n    }\n  };\n  View.prototype.createViewEvent = function (evt) {\n    var shape = evt.shape,\n      name = evt.name;\n    var data = shape ? shape.get('origin') : null;\n    // 事件在 view 嵌套中冒泡（暂不提供阻止冒泡的机制）\n    var e = new Event(this, evt, data);\n    e.type = name;\n    return e;\n  };\n  /**\n   * 处理 PLOT_EVENTS\n   * plot event 需要处理所有的基础事件，并判断是否在画布中，然后再决定是否要 emit。\n   * 对于 mouseenter、mouseleave 比较特殊，需要做一下数学比较。\n   * @param e\n   */\n  View.prototype.doPlotEvent = function (e) {\n    var type = e.type,\n      x = e.x,\n      y = e.y;\n    var point = {\n      x: x,\n      y: y\n    };\n    var ALL_EVENTS = ['mousedown', 'mouseup', 'mousemove', 'mouseleave', 'mousewheel', 'touchstart', 'touchmove', 'touchend', 'touchcancel', 'click', 'dblclick', 'contextmenu'];\n    if (ALL_EVENTS.includes(type)) {\n      var currentInPlot = this.isPointInPlot(point);\n      var newEvent = e.clone();\n      if (currentInPlot) {\n        var TYPE = \"plot:\".concat(type); // 组合 plot 事件\n        newEvent.type = TYPE;\n        this.emit(TYPE, newEvent);\n        if (type === 'mouseleave' || type === 'touchend') {\n          // 在plot 内部却离开画布\n          this.isPreMouseInPlot = false;\n        }\n      }\n      // 对于 mouseenter, mouseleave 的计算处理\n      if (type === 'mousemove' || type === 'touchmove') {\n        if (this.isPreMouseInPlot && !currentInPlot) {\n          if (type === 'mousemove') {\n            newEvent.type = PLOT_EVENTS.MOUSE_LEAVE;\n            this.emit(PLOT_EVENTS.MOUSE_LEAVE, newEvent);\n          }\n          newEvent.type = PLOT_EVENTS.LEAVE;\n          this.emit(PLOT_EVENTS.LEAVE, newEvent);\n        } else if (!this.isPreMouseInPlot && currentInPlot) {\n          if (type === 'mousemove') {\n            newEvent.type = PLOT_EVENTS.MOUSE_ENTER;\n            this.emit(PLOT_EVENTS.MOUSE_ENTER, newEvent);\n          }\n          newEvent.type = PLOT_EVENTS.ENTER;\n          this.emit(PLOT_EVENTS.ENTER, newEvent);\n        }\n        // 赋新的状态值\n        this.isPreMouseInPlot = currentInPlot;\n      } else if (type === 'mouseleave' || type === 'touchend') {\n        // 可能不在 currentInPlot 中\n        if (this.isPreMouseInPlot) {\n          if (type === 'mouseleave') {\n            newEvent.type = PLOT_EVENTS.MOUSE_LEAVE;\n            this.emit(PLOT_EVENTS.MOUSE_LEAVE, newEvent);\n          }\n          newEvent.type = PLOT_EVENTS.LEAVE;\n          this.emit(PLOT_EVENTS.LEAVE, newEvent);\n          this.isPreMouseInPlot = false;\n        }\n      }\n    }\n  };\n  // view 生命周期 —— 渲染流程\n  /**\n   * 处理筛选器，筛选数据\n   * @private\n   */\n  View.prototype.doFilterData = function () {\n    var data = this.options.data;\n    this.filteredData = this.filterData(data);\n  };\n  /**\n   * 初始化 Geometries\n   * @private\n   */\n  View.prototype.initGeometries = function (isUpdate) {\n    // 初始化图形的之前，先创建 / 更新 scales\n    this.createOrUpdateScales();\n    // 实例化 Geometry，然后 view 将所有的 scale 管理起来\n    var coordinate = this.getCoordinate();\n    var scaleDefs = get(this.options, 'scales', {});\n    var geometries = this.geometries;\n    for (var i = 0, len = geometries.length; i < len; i++) {\n      var geometry = geometries[i];\n      // 保持 scales 引用不要变化\n      geometry.scales = this.getGeometryScales();\n      var cfg = {\n        coordinate: coordinate,\n        scaleDefs: scaleDefs,\n        data: this.filteredData,\n        theme: this.themeObject,\n        isDataChanged: this.isDataChanged,\n        isCoordinateChanged: this.isCoordinateChanged\n      };\n      if (isUpdate) {\n        // 数据发生更新\n        geometry.update(cfg);\n      } else {\n        geometry.init(cfg);\n      }\n    }\n    // Geometry 初始化之后，生成了 scale，然后进行调整 scale 配置\n    this.adjustScales();\n  };\n  /**\n   * 根据 Geometry 的所有字段创建 scales\n   * 如果存在，则更新，不存在则创建\n   */\n  View.prototype.createOrUpdateScales = function () {\n    var fields = this.getScaleFields();\n    var groupedFields = this.getGroupedFields();\n    var _a = this.getOptions(),\n      data = _a.data,\n      _b = _a.scales,\n      scales = _b === void 0 ? {} : _b;\n    var filteredData = this.filteredData;\n    for (var i = 0, len = fields.length; i < len; i++) {\n      var field = fields[i];\n      var scaleDef = scales[field];\n      // 调用方法，递归去创建\n      var key = this.getScaleKey(field);\n      this.createScale(field,\n      // 分组字段的 scale 使用未过滤的数据创建\n      groupedFields.includes(field) ? data : filteredData, scaleDef, key);\n      // 缓存从当前 view 创建的 scale key\n      this.createdScaleKeys.set(key, true);\n    }\n  };\n  /**\n   * 处理 scale 同步逻辑\n   */\n  View.prototype.syncScale = function () {\n    // 最终调用 root view 的\n    this.getRootView().scalePool.sync(this.getCoordinate(), this.theme);\n  };\n  /**\n   * 获得 Geometry 中的 scale 对象\n   */\n  View.prototype.getGeometryScales = function () {\n    var fields = this.getScaleFields();\n    var scales = {};\n    for (var i = 0; i < fields.length; i++) {\n      var field = fields[i];\n      scales[field] = this.getScaleByField(field);\n    }\n    return scales;\n  };\n  View.prototype.getScaleFields = function () {\n    var fields = [];\n    var tmpMap = new Map();\n    var geometries = this.geometries;\n    for (var i = 0; i < geometries.length; i++) {\n      var geometry = geometries[i];\n      var geometryScales = geometry.getScaleFields();\n      uniq(geometryScales, fields, tmpMap);\n    }\n    return fields;\n  };\n  View.prototype.getGroupedFields = function () {\n    var fields = [];\n    var tmpMap = new Map();\n    var geometries = this.geometries;\n    for (var i = 0; i < geometries.length; i++) {\n      var geometry = geometries[i];\n      var groupFields = geometry.getGroupFields();\n      uniq(groupFields, fields, tmpMap);\n    }\n    return fields;\n  };\n  /**\n   * 调整 scale 配置\n   * @private\n   */\n  View.prototype.adjustScales = function () {\n    // 调整目前包括：\n    // 分类 scale，调整 range 范围\n    this.adjustCategoryScaleRange();\n  };\n  /**\n   * 调整分类 scale 的 range，防止超出坐标系外面\n   * @private\n   */\n  View.prototype.adjustCategoryScaleRange = function () {\n    var _this = this;\n    var xyScales = __spreadArray([this.getXScale()], __read(this.getYScales()), false).filter(function (e) {\n      return !!e;\n    });\n    var coordinate = this.getCoordinate();\n    var scaleOptions = this.options.scales;\n    each(xyScales, function (scale) {\n      var field = scale.field,\n        values = scale.values,\n        isCategory = scale.isCategory,\n        isIdentity = scale.isIdentity;\n      // 分类或者 identity 的 scale 才进行处理\n      if (isCategory || isIdentity) {\n        // 存在 value 值，且用户没有配置 range 配置\n        if (values && !get(scaleOptions, [field, 'range'])) {\n          // 更新 range\n          scale.range = getDefaultCategoryScaleRange(scale, coordinate, _this.theme);\n        }\n      }\n    });\n  };\n  /**\n   * 根据 options 配置、Geometry 字段配置，自动生成 components\n   * @param isUpdate 是否是更新\n   * @private\n   */\n  View.prototype.initComponents = function (isUpdate) {\n    // 先全部清空，然后 render\n    var controllers = this.controllers;\n    for (var i = 0; i < controllers.length; i++) {\n      var controller = controllers[i];\n      // 更新则走更新逻辑；否则清空载重绘\n      if (isUpdate) {\n        controller.update();\n      } else {\n        controller.clear();\n        controller.render();\n      }\n    }\n  };\n  View.prototype.doLayout = function () {\n    this.layoutFunc(this);\n  };\n  /**\n   * 创建坐标系\n   * @private\n   */\n  View.prototype.createCoordinate = function () {\n    var start = this.coordinateBBox.bl;\n    var end = this.coordinateBBox.tr;\n    this.coordinateInstance = this.coordinateController.create(start, end);\n  };\n  /**\n   * 根据 options 配置自动渲染 geometry\n   * @private\n   */\n  View.prototype.paintGeometries = function (isUpdate) {\n    var doAnimation = this.options.animate;\n    // geometry 的 paint 阶段\n    var coordinate = this.getCoordinate();\n    var canvasRegion = {\n      x: this.viewBBox.x,\n      y: this.viewBBox.y,\n      minX: this.viewBBox.minX,\n      minY: this.viewBBox.minY,\n      maxX: this.viewBBox.maxX,\n      maxY: this.viewBBox.maxY,\n      width: this.viewBBox.width,\n      height: this.viewBBox.height\n    };\n    var geometries = this.geometries;\n    for (var i = 0; i < geometries.length; i++) {\n      var geometry = geometries[i];\n      geometry.coordinate = coordinate;\n      geometry.canvasRegion = canvasRegion;\n      if (!doAnimation) {\n        // 如果 view 不执行动画，那么 view 下所有的 geometry 都不执行动画\n        geometry.animate(false);\n      }\n      geometry.paint(isUpdate);\n    }\n  };\n  /**\n   * 最后的绘制组件\n   * @param isUpdate\n   */\n  View.prototype.renderComponents = function (isUpdate) {\n    var components = this.getComponents();\n    // 先全部清空，然后 render\n    for (var i = 0; i < components.length; i++) {\n      var co = components[i];\n      co.component.render();\n    }\n  };\n  /**\n   * 渲染分面，会在其中进行数据分面，然后进行子 view 创建\n   * @param isUpdate\n   */\n  View.prototype.renderFacet = function (isUpdate) {\n    if (this.facetInstance) {\n      if (isUpdate) {\n        this.facetInstance.update();\n      } else {\n        this.facetInstance.clear();\n        // 计算分面数据\n        this.facetInstance.init();\n        // 渲染组件和 views\n        this.facetInstance.render();\n      }\n    }\n  };\n  View.prototype.initOptions = function () {\n    var _this = this;\n    var _a = this.options,\n      _b = _a.geometries,\n      geometries = _b === void 0 ? [] : _b,\n      _c = _a.interactions,\n      interactions = _c === void 0 ? [] : _c,\n      _d = _a.views,\n      views = _d === void 0 ? [] : _d,\n      _e = _a.annotations,\n      annotations = _e === void 0 ? [] : _e,\n      coordinate = _a.coordinate,\n      events = _a.events,\n      facets = _a.facets;\n    // 设置坐标系\n    if (this.coordinateController) {\n      // 更新 coordinate controller\n      coordinate && this.coordinateController.update(coordinate);\n    } else {\n      // 创建 coordinate controller\n      this.coordinateController = new CoordinateController(coordinate);\n    }\n    // 创建 geometry 实例\n    for (var i = 0; i < geometries.length; i++) {\n      var geometryOption = geometries[i];\n      this.createGeometry(geometryOption);\n    }\n    // 创建 interactions 实例\n    for (var j = 0; j < interactions.length; j++) {\n      var interactionOption = interactions[j];\n      var type = interactionOption.type,\n        cfg = interactionOption.cfg;\n      this.interaction(type, cfg);\n    }\n    // 创建 view 实例\n    for (var k = 0; k < views.length; k++) {\n      var viewOption = views[k];\n      this.createView(viewOption);\n    }\n    // 设置 annotation\n    var annotationComponent = this.getController('annotation');\n    for (var l = 0; l < annotations.length; l++) {\n      var annotationOption = annotations[l];\n      annotationComponent.annotation(annotationOption);\n    }\n    // 设置 events\n    if (events) {\n      each(events, function (eventCallback, eventName) {\n        _this.on(eventName, eventCallback);\n      });\n    }\n    if (facets) {\n      each(facets, function (facet) {\n        var type = facet.type,\n          rest = __rest(facet, [\"type\"]);\n        _this.facet(type, rest);\n      });\n    }\n  };\n  View.prototype.createGeometry = function (geometryOption) {\n    var type = geometryOption.type,\n      _a = geometryOption.cfg,\n      cfg = _a === void 0 ? {} : _a;\n    if (this[type]) {\n      var geometry_1 = this[type](cfg);\n      each(geometryOption, function (v, k) {\n        if (isFunction(geometry_1[k])) {\n          geometry_1[k](v);\n        }\n      });\n    }\n  };\n  /**\n   * scale key 的创建方式\n   * @param field\n   */\n  View.prototype.getScaleKey = function (field) {\n    return \"\".concat(this.id, \"-\").concat(field);\n  };\n  return View;\n}(Base);\nexport { View };\n/**\n * 注册 geometry 组件\n * @param name\n * @param Ctor\n * @returns Geometry\n */\nexport function registerGeometry(name, Ctor) {\n  // 语法糖，在 view API 上增加原型方法\n  View.prototype[name.toLowerCase()] = function (cfg) {\n    if (cfg === void 0) {\n      cfg = {};\n    }\n    var props = __assign({\n      /** 图形容器 */\n      container: this.middleGroup.addGroup(),\n      labelsContainer: this.foregroundGroup.addGroup()\n    }, cfg);\n    var geometry = new Ctor(props);\n    this.geometries.push(geometry);\n    return geometry;\n  };\n}\nexport default View;","map":{"version":3,"names":["__assign","__extends","__read","__rest","__spreadArray","clone","deepMix","each","filter","find","flatten","get","isBoolean","isFunction","isNil","isObject","isString","isUndefined","mix","remove","set","size","uniqueId","isEqual","isPlainObject","reduce","GROUP_Z_INDEX","LAYER","PLOT_EVENTS","VIEW_LIFE_CIRCLE","Base","getFacet","createInteraction","getTheme","BBox","getCoordinateClipCfg","isPointInCoordinate","uniq","findDataByPoint","parsePadding","getDefaultCategoryScaleRange","createTheme","getComponentController","getComponentControllerNames","CoordinateController","Event","defaultLayout","ScalePool","PaddingCal","calculatePadding","defaultSyncViewPadding","View","_super","props","_this","call","visible","views","geometries","controllers","interactions","limitInPlot","options","data","animate","usedControllers","scalePool","layoutFunc","isPreMouseInPlot","isDataChanged","isCoordinateChanged","createdScaleKeys","Map","onCanvasEvent","evt","name","includes","e","createViewEvent","doPlotEvent","emit","onDelegateEvents","_a","id","parent","canvas","backgroundGroup","middleGroup","foregroundGroup","_b","region","start","x","y","end","padding","appendPadding","theme","syncViewPadding","themeObject","init","prototype","setLayout","layout","calculateViewBBox","initEvents","initComponentController","initOptions","render","isUpdate","payload","BEFORE_RENDER","fromData","paint","AFTER_RENDER","changeVisible","clear","BEFORE_CLEAR","filteredData","coordinateInstance","undefined","i","length","container","labelsContainer","forEach","v","k","getRootView","deleteScale","AFTER_CLEAR","destroy","BEFORE_DESTROY","interaction","len","controller","geometry","getCanvas","draw","source","console","warn","field","condition","filters","axis","axisOption","legend","legendOption","selected","scale","scaleOption","tooltip","cfg","annotation","getController","guide","coordinate","type","coordinateCfg","coordinateController","update","coord","facet","facetInstance","Ctor","Error","concat","status","updateOptions","view","coordinateBBox","viewBBox","option","opt","existInteraction","removeInteraction","changeData","BEFORE_CHANGE_DATA","AFTER_CHANGE_DATA","createView","sharedOptions","scales","axes","getOption","legends","addGroup","zIndex","BG","MID","FORE","push","removeView","removedView","getCoordinate","getXScale","g","getYScales","tmpMap","yScales","yScale","getYScale","getScalesByDim","dimType","getScale","key","defaultKey","getScaleKey","getScaleByField","getOptions","getData","getOriginalData","getPadding","autoPadding","getGeometries","getElements","elements","getElementsBy","el","getLayer","layer","isPointInPlot","point","getLegendAttributes","map","getGroupAttributes","getGroupScales","getXY","xScales","value","convert","c","showTooltip","hideTooltip","lockTooltip","unlockTooltip","isTooltipLocked","getTooltipItems","getSnapRecords","rst","geom","dataArray","sort","record","j","dataLen","snapRecords","getComponents","components","filterData","datum","idx","fields","Object","keys","every","filterFieldData","adjustCoordinate","curStart","curEnd","bl","tr","adjust","renderDataRecursive","syncScale","BEFORE_PAINT","renderPaddingRecursive","renderLayoutRecursive","renderBackgroundStyleShape","renderPaintRecursive","AFTER_PAINT","background","backgroundStyleRectShape","addShape","attrs","capture","toBack","width","height","attr","fill","initComponents","shrink","tooltipController","syncViewPaddingFn","doLayout","setClip","paintGeometries","renderComponents","createScale","scaleDef","currentScaleDef","mergedScaleDef","doFilterData","createCoordinate","initGeometries","renderFacet","bbox","on","controllerName","shape","ALL_EVENTS","currentInPlot","newEvent","TYPE","MOUSE_LEAVE","LEAVE","MOUSE_ENTER","ENTER","createOrUpdateScales","scaleDefs","getGeometryScales","adjustScales","getScaleFields","groupedFields","getGroupedFields","sync","geometryScales","groupFields","getGroupFields","adjustCategoryScaleRange","xyScales","scaleOptions","values","isCategory","isIdentity","range","create","doAnimation","canvasRegion","minX","minY","maxX","maxY","co","component","_c","_d","_e","annotations","events","facets","geometryOption","createGeometry","interactionOption","viewOption","annotationComponent","l","annotationOption","eventCallback","eventName","rest","geometry_1","registerGeometry","toLowerCase"],"sources":["/Users/obiechina/Documents/ridy-flutter-full-taxi-solution 2/node_modules/@antv/g2/esm/chart/view.js"],"sourcesContent":["import { __assign, __extends, __read, __rest, __spreadArray } from \"tslib\";\nimport { clone, deepMix, each, filter, find, flatten, get, isBoolean, isFunction, isNil, isObject, isString, isUndefined, mix, remove, set, size, uniqueId, isEqual, isPlainObject, reduce, } from '@antv/util';\nimport { GROUP_Z_INDEX, LAYER, PLOT_EVENTS, VIEW_LIFE_CIRCLE } from '../constant';\nimport Base from '../base';\nimport { getFacet } from '../facet';\nimport { createInteraction } from '../interaction';\nimport { getTheme } from '../theme';\nimport { BBox } from '../util/bbox';\nimport { getCoordinateClipCfg, isPointInCoordinate } from '../util/coordinate';\nimport { uniq } from '../util/helper';\nimport { findDataByPoint } from '../util/tooltip';\nimport { parsePadding } from '../util/padding';\nimport { getDefaultCategoryScaleRange } from '../util/scale';\nimport { createTheme } from '../theme/util';\nimport { getComponentController, getComponentControllerNames } from './controller';\nimport CoordinateController from './controller/coordinate';\nimport Event from './event';\nimport defaultLayout from './layout';\nimport { ScalePool } from './util/scale-pool';\nimport { PaddingCal } from './layout/padding-cal';\nimport { calculatePadding } from './layout/auto';\nimport { defaultSyncViewPadding } from './util/sync-view-padding';\n/**\n * G2 视图 View 类\n */\nvar View = /** @class */ (function (_super) {\n    __extends(View, _super);\n    function View(props) {\n        var _this = _super.call(this, { visible: props.visible }) || this;\n        /** 所有的子 view。 */\n        _this.views = [];\n        /** 所有的 geometry 实例。 */\n        _this.geometries = [];\n        /** 所有的组件 controllers。 */\n        _this.controllers = [];\n        /** 所有的 Interaction 实例。 */\n        _this.interactions = {};\n        /** 是否对超出坐标系范围的 Geometry 进行剪切 */\n        _this.limitInPlot = false;\n        // 配置信息存储\n        _this.options = {\n            data: [],\n            animate: true, // 默认开启动画\n        }; // 初始化为空\n        /** 配置开启的组件插件，默认为全局配置的组件。 */\n        _this.usedControllers = getComponentControllerNames();\n        /** 所有的 scales */\n        _this.scalePool = new ScalePool();\n        /** 布局函数 */\n        _this.layoutFunc = defaultLayout;\n        /** 当前鼠标是否在 plot 内（CoordinateBBox） */\n        _this.isPreMouseInPlot = false;\n        /** 默认标识位，用于判定数据是否更新 */\n        _this.isDataChanged = false;\n        /** 用于判断坐标系范围是否发生变化的标志位 */\n        _this.isCoordinateChanged = false;\n        /** 从当前这个 view 创建的 scale key */\n        _this.createdScaleKeys = new Map();\n        _this.onCanvasEvent = function (evt) {\n            var name = evt.name;\n            if (!name.includes(':')) {\n                // 非委托事件\n                var e = _this.createViewEvent(evt);\n                // 处理 plot 事件\n                _this.doPlotEvent(e);\n                _this.emit(name, e);\n            }\n        };\n        /**\n         * 触发事件之后\n         * @param evt\n         */\n        _this.onDelegateEvents = function (evt) {\n            // 阻止继续冒泡，防止重复事件触发\n            // evt.preventDefault();\n            var name = evt.name;\n            if (!name.includes(':')) {\n                return;\n            }\n            // 事件在 view 嵌套中冒泡（暂不提供阻止冒泡的机制）\n            var e = _this.createViewEvent(evt);\n            // 包含有基本事件、组合事件\n            _this.emit(name, e);\n            // const currentTarget = evt.currentTarget as IShape;\n            // const inheritNames = currentTarget.get('inheritNames');\n            // if (evt.delegateObject || inheritNames) {\n            //   const events = this.getEvents();\n            //   each(inheritNames, (subName) => {\n            //     const eventName = `${subName}:${type}`;\n            //     if (events[eventName]) {\n            //       this.emit(eventName, e);\n            //     }\n            //   });\n            // }\n        };\n        var _a = props.id, id = _a === void 0 ? uniqueId('view') : _a, parent = props.parent, canvas = props.canvas, backgroundGroup = props.backgroundGroup, middleGroup = props.middleGroup, foregroundGroup = props.foregroundGroup, _b = props.region, region = _b === void 0 ? { start: { x: 0, y: 0 }, end: { x: 1, y: 1 } } : _b, padding = props.padding, appendPadding = props.appendPadding, theme = props.theme, options = props.options, limitInPlot = props.limitInPlot, syncViewPadding = props.syncViewPadding;\n        _this.parent = parent;\n        _this.canvas = canvas;\n        _this.backgroundGroup = backgroundGroup;\n        _this.middleGroup = middleGroup;\n        _this.foregroundGroup = foregroundGroup;\n        _this.region = region;\n        _this.padding = padding;\n        _this.appendPadding = appendPadding;\n        // 接受父 view 传入的参数\n        _this.options = __assign(__assign({}, _this.options), options);\n        _this.limitInPlot = limitInPlot;\n        _this.id = id;\n        _this.syncViewPadding = syncViewPadding;\n        // 初始化 theme\n        _this.themeObject = isObject(theme) ? deepMix({}, getTheme('default'), createTheme(theme)) : getTheme(theme);\n        _this.init();\n        return _this;\n    }\n    /**\n     * 设置 layout 布局函数\n     * @param layout 布局函数\n     * @returns void\n     */\n    View.prototype.setLayout = function (layout) {\n        this.layoutFunc = layout;\n    };\n    /**\n     * 生命周期：初始化\n     * @returns voids\n     */\n    View.prototype.init = function () {\n        // 计算画布的 viewBBox\n        this.calculateViewBBox();\n        // 事件委托机制\n        this.initEvents();\n        // 初始化组件 controller\n        this.initComponentController();\n        this.initOptions();\n    };\n    /**\n     * 生命周期：渲染流程，渲染过程需要处理数据更新的情况。\n     * render 函数仅仅会处理 view 和子 view。\n     * @param isUpdate 是否触发更新流程。\n     * @param params render 事件参数\n     */\n    View.prototype.render = function (isUpdate, payload) {\n        if (isUpdate === void 0) { isUpdate = false; }\n        this.emit(VIEW_LIFE_CIRCLE.BEFORE_RENDER, Event.fromData(this, VIEW_LIFE_CIRCLE.BEFORE_RENDER, payload));\n        // 递归渲染\n        this.paint(isUpdate);\n        this.emit(VIEW_LIFE_CIRCLE.AFTER_RENDER, Event.fromData(this, VIEW_LIFE_CIRCLE.AFTER_RENDER, payload));\n        if (this.visible === false) {\n            // 用户在初始化的时候声明 visible: false\n            this.changeVisible(false);\n        }\n    };\n    /**\n     * 生命周期：清空图表上所有的绘制内容，但是不销毁图表，chart 仍可使用。\n     * @returns void\n     */\n    View.prototype.clear = function () {\n        var _this = this;\n        this.emit(VIEW_LIFE_CIRCLE.BEFORE_CLEAR);\n        // 1. 清空缓存和计算数据\n        this.filteredData = [];\n        this.coordinateInstance = undefined;\n        this.isDataChanged = false; // 复位\n        this.isCoordinateChanged = false; // 复位\n        // 2. 清空 geometries\n        var geometries = this.geometries;\n        for (var i = 0; i < geometries.length; i++) {\n            geometries[i].clear();\n            // view 中使用 geometry 的时候，还需要清空它的容器，不然下一次 chart.geometry() 的时候，又创建了一个，导致泄露， #2799。\n            geometries[i].container.remove(true);\n            geometries[i].labelsContainer.remove(true);\n        }\n        this.geometries = [];\n        // 3. 清空 controllers\n        var controllers = this.controllers;\n        for (var i = 0; i < controllers.length; i++) {\n            if (controllers[i].name === 'annotation') {\n                // 需要清空配置项\n                controllers[i].clear(true);\n            }\n            else {\n                controllers[i].clear();\n            }\n        }\n        // 4. 删除 scale 缓存\n        this.createdScaleKeys.forEach(function (v, k) {\n            _this.getRootView().scalePool.deleteScale(k);\n        });\n        this.createdScaleKeys.clear();\n        // 递归处理子 view\n        var views = this.views;\n        for (var i = 0; i < views.length; i++) {\n            views[i].clear();\n        }\n        this.emit(VIEW_LIFE_CIRCLE.AFTER_CLEAR);\n    };\n    /**\n     * 生命周期：销毁，完全无法使用。\n     * @returns void\n     */\n    View.prototype.destroy = function () {\n        // 销毁前事件，销毁之后已经没有意义了，所以不抛出事件\n        this.emit(VIEW_LIFE_CIRCLE.BEFORE_DESTROY);\n        var interactions = this.interactions;\n        // 销毁 interactions\n        each(interactions, function (interaction) {\n            if (interaction) {\n                // 有可能已经销毁，设置了 undefined\n                interaction.destroy();\n            }\n        });\n        this.clear();\n        // 销毁 controller 中的组件\n        var controllers = this.controllers;\n        for (var i = 0, len = controllers.length; i < len; i++) {\n            var controller = controllers[i];\n            controller.destroy();\n        }\n        this.backgroundGroup.remove(true);\n        this.middleGroup.remove(true);\n        this.foregroundGroup.remove(true);\n        _super.prototype.destroy.call(this);\n    };\n    /* end 生命周期函数 */\n    /**\n     * 显示或者隐藏整个 view。\n     * @param visible 是否可见\n     * @returns View\n     */\n    View.prototype.changeVisible = function (visible) {\n        _super.prototype.changeVisible.call(this, visible);\n        var geometries = this.geometries;\n        for (var i = 0, len = geometries.length; i < len; i++) {\n            var geometry = geometries[i];\n            geometry.changeVisible(visible);\n        }\n        var controllers = this.controllers;\n        for (var i = 0, len = controllers.length; i < len; i++) {\n            var controller = controllers[i];\n            controller.changeVisible(visible);\n        }\n        this.foregroundGroup.set('visible', visible);\n        this.middleGroup.set('visible', visible);\n        this.backgroundGroup.set('visible', visible);\n        // group.set('visible', visible) 不会触发自动刷新\n        this.getCanvas().draw();\n        return this;\n    };\n    /**\n     * 装载数据源。\n     *\n     * ```ts\n     * view.data([{ city: '杭州', sale: 100 }, { city: '上海', sale: 110 } ]);\n     * ```\n     *\n     * @param data 数据源，json 数组。\n     * @returns View\n     */\n    View.prototype.data = function (data) {\n        set(this.options, 'data', data);\n        this.isDataChanged = true;\n        return this;\n    };\n    /**\n     * @deprecated\n     * This method will be removed at G2 V4.1. Replaced by {@link #data(data)}\n     */\n    View.prototype.source = function (data) {\n        console.warn('This method will be removed at G2 V4.1. Please use chart.data() instead.');\n        return this.data(data);\n    };\n    /**\n     * 设置数据筛选规则。\n     *\n     * ```ts\n     * view.filter('city', (value: any, datum: Datum) => value !== '杭州');\n     *\n     * // 删除 'city' 字段对应的筛选规则。\n     * view.filter('city', null);\n     * ```\n     *\n     * @param field 数据字段\n     * @param condition 筛选规则\n     * @returns View\n     */\n    View.prototype.filter = function (field, condition) {\n        if (isFunction(condition)) {\n            set(this.options, ['filters', field], condition);\n            return this;\n        }\n        // condition 为空，则表示删除过滤条件\n        if (!condition && get(this.options, ['filters', field])) {\n            delete this.options.filters[field];\n        }\n        return this;\n    };\n    View.prototype.axis = function (field, axisOption) {\n        if (isBoolean(field)) {\n            set(this.options, ['axes'], field);\n        }\n        else {\n            set(this.options, ['axes', field], axisOption);\n        }\n        return this;\n    };\n    View.prototype.legend = function (field, legendOption) {\n        if (isBoolean(field)) {\n            set(this.options, ['legends'], field);\n        }\n        else if (isString(field)) {\n            set(this.options, ['legends', field], legendOption);\n            if (isPlainObject(legendOption) && (legendOption === null || legendOption === void 0 ? void 0 : legendOption.selected)) {\n                set(this.options, ['filters', field], function (name) {\n                    var _a;\n                    return (_a = legendOption === null || legendOption === void 0 ? void 0 : legendOption.selected[name]) !== null && _a !== void 0 ? _a : true;\n                });\n            }\n        }\n        else {\n            // 设置全局的 legend 配置\n            set(this.options, ['legends'], field);\n        }\n        return this;\n    };\n    View.prototype.scale = function (field, scaleOption) {\n        var _this = this;\n        if (isString(field)) {\n            set(this.options, ['scales', field], scaleOption);\n        }\n        else if (isObject(field)) {\n            each(field, function (v, k) {\n                set(_this.options, ['scales', k], v);\n            });\n        }\n        return this;\n    };\n    /**\n     * tooltip 提示信息配置。\n     *\n     * ```ts\n     * view.tooltip(false); // 关闭 tooltip\n     *\n     * view.tooltip({\n     *   shared: true\n     * });\n     * ```\n     *\n     * @param cfg Tooltip 配置，更详细的配置项参考：https://github.com/antvis/component#tooltip\n     * @returns View\n     */\n    View.prototype.tooltip = function (cfg) {\n        set(this.options, 'tooltip', cfg);\n        return this;\n    };\n    /**\n     * 辅助标记配置。\n     *\n     * ```ts\n     * view.annotation().line({\n     *   start: ['min', 85],\n     *   end: ['max', 85],\n     *   style: {\n     *     stroke: '#595959',\n     *     lineWidth: 1,\n     *     lineDash: [3, 3],\n     *   },\n     * });\n     * ```\n     * 更详细的配置项：https://github.com/antvis/component#annotation\n     * @returns [[Annotation]]\n     */\n    View.prototype.annotation = function () {\n        return this.getController('annotation');\n    };\n    /**\n     * @deprecated\n     * This method will be removed at G2 V4.1. Replaced by {@link #guide()}\n     */\n    View.prototype.guide = function () {\n        console.warn('This method will be removed at G2 V4.1. Please use chart.annotation() instead.');\n        return this.annotation();\n    };\n    View.prototype.coordinate = function (type, coordinateCfg) {\n        // 提供语法糖，使用更简单\n        if (isString(type)) {\n            set(this.options, 'coordinate', { type: type, cfg: coordinateCfg });\n        }\n        else {\n            set(this.options, 'coordinate', type);\n        }\n        // 更新 coordinate 配置\n        this.coordinateController.update(this.options.coordinate);\n        return this.coordinateController;\n    };\n    /**\n     * @deprecated\n     * This method will be removed at G2 V4.1. Replaced by {@link #coordinate()}\n     */\n    View.prototype.coord = function (type, coordinateCfg) {\n        console.warn('This method will be removed at G2 V4.1. Please use chart.coordinate() instead.');\n        // @ts-ignore\n        return this.coordinate(type, coordinateCfg);\n    };\n    /**\n     * view 分面绘制。\n     *\n     * ```ts\n     * view.facet('rect', {\n     *   rowField: 'province',\n     *   columnField: 'category',\n     *   eachView: (innerView: View, facet?: FacetData) => {\n     *     innerView.line().position('city*sale');\n     *   },\n     * });\n     * ```\n     *\n     * @param type 分面类型\n     * @param cfg 分面配置， [[FacetCfgMap]]\n     * @returns View\n     */\n    View.prototype.facet = function (type, cfg) {\n        // 先销毁掉之前的分面\n        if (this.facetInstance) {\n            this.facetInstance.destroy();\n        }\n        // 创建新的分面\n        var Ctor = getFacet(type);\n        if (!Ctor) {\n            throw new Error(\"facet '\".concat(type, \"' is not exist!\"));\n        }\n        this.facetInstance = new Ctor(this, __assign(__assign({}, cfg), { type: type }));\n        return this;\n    };\n    /*\n     * 开启或者关闭动画。\n     *\n     * ```ts\n     * view.animate(false);\n     * ```\n     *\n     * @param status 动画状态，true 表示开始，false 表示关闭\n     * @returns View\n     */\n    View.prototype.animate = function (status) {\n        set(this.options, 'animate', status);\n        return this;\n    };\n    /**\n     * 更新配置项，用于配置项式声明。\n     * @param options 配置项\n     */\n    View.prototype.updateOptions = function (options) {\n        this.clear(); // 清空\n        mix(this.options, options);\n        // 需要把已存在的 view 销毁，否则会重复创建\n        // 目前针对配置项还没有特别好的 view 更新机制，为了不影响主流流程，所以在这里直接销毁\n        this.views.forEach(function (view) { return view.destroy(); });\n        this.views = [];\n        this.initOptions();\n        // 初始化坐标系大小，保证 padding 计算正确\n        this.coordinateBBox = this.viewBBox;\n        return this;\n    };\n    /**\n     * 往 `view.options` 属性中存储配置项。\n     * @param name 属性名称\n     * @param opt 属性值\n     * @returns view\n     */\n    View.prototype.option = function (name, opt) {\n        // 对于内置的 option，避免覆盖。\n        // name 在原型上，说明可能是内置 API，存在 option 被覆盖的风险，不处理\n        if (View.prototype[name]) {\n            throw new Error(\"Can't use built in variable name \\\"\".concat(name, \"\\\", please change another one.\"));\n        }\n        // 存入到 option 中\n        set(this.options, name, opt);\n        return this;\n    };\n    /**\n     * 设置主题。\n     *\n     * ```ts\n     * view.theme('dark'); // 'dark' 需要事先通过 `registerTheme()` 接口注册完成\n     *\n     * view.theme({ defaultColor: 'red' });\n     * ```\n     *\n     * @param theme 主题名或者主题配置\n     * @returns View\n     */\n    View.prototype.theme = function (theme) {\n        this.themeObject = isObject(theme) ? deepMix({}, this.themeObject, createTheme(theme)) : getTheme(theme);\n        return this;\n    };\n    /* end 一系列传入配置的 API */\n    /**\n     * Call the interaction based on the interaction name\n     *\n     * ```ts\n     * view.interaction('my-interaction', { extra: 'hello world' });\n     * ```\n     * 详细文档可以参考：https://g2.antv.vision/zh/docs/api/general/interaction\n     * @param name interaction name\n     * @param cfg interaction config\n     * @returns\n     */\n    View.prototype.interaction = function (name, cfg) {\n        var existInteraction = this.interactions[name];\n        // 存在则先销毁已有的\n        if (existInteraction) {\n            existInteraction.destroy();\n        }\n        // 新建交互实例\n        var interaction = createInteraction(name, this, cfg);\n        if (interaction) {\n            interaction.init();\n            this.interactions[name] = interaction;\n        }\n        return this;\n    };\n    /**\n     * 移除当前 View 的 interaction\n     * ```ts\n     * view.removeInteraction('my-interaction');\n     * ```\n     * @param name interaction name\n     */\n    View.prototype.removeInteraction = function (name) {\n        var existInteraction = this.interactions[name];\n        // 存在则先销毁已有的\n        if (existInteraction) {\n            existInteraction.destroy();\n            this.interactions[name] = undefined;\n        }\n    };\n    /**\n     * 修改数据，数据更新逻辑，数据更新仅仅影响当前这一层的 view\n     *\n     * ```ts\n     * view.changeData([{ city: '北京', sale: '200' }]);\n     * ```\n     *\n     * @param data\n     * @returns void\n     */\n    View.prototype.changeData = function (data) {\n        this.isDataChanged = true;\n        this.emit(VIEW_LIFE_CIRCLE.BEFORE_CHANGE_DATA, Event.fromData(this, VIEW_LIFE_CIRCLE.BEFORE_CHANGE_DATA, null));\n        // 1. 保存数据\n        this.data(data);\n        // 2. 渲染\n        this.paint(true);\n        // 3. 遍历子 view 进行 change data\n        var views = this.views;\n        for (var i = 0, len = views.length; i < len; i++) {\n            var view = views[i];\n            // FIXME 子 view 有自己的数据的情况，该如何处理？\n            view.changeData(data);\n        }\n        this.emit(VIEW_LIFE_CIRCLE.AFTER_CHANGE_DATA, Event.fromData(this, VIEW_LIFE_CIRCLE.AFTER_CHANGE_DATA, null));\n    };\n    /* View 管理相关的 API */\n    /**\n     * 创建子 view\n     *\n     * ```ts\n     * const innerView = view.createView({\n     *   start: { x: 0, y: 0 },\n     *   end: { x: 0.5, y: 0.5 },\n     *   padding: 8,\n     * });\n     * ```\n     *\n     * @param cfg\n     * @returns View\n     */\n    View.prototype.createView = function (cfg) {\n        // 将会在 4.1 版本中移除递归嵌套 view，仅仅只允许 chart - view 两层。\n        // 这个 API 理论上用户量不多，所以暂时不发大版本，所以先暂时打一个 warning。\n        if (this.parent && this.parent.parent) {\n            // 存在 3 层 结构了\n            console.warn('The view nesting recursive feature will be removed at G2 V4.1. Please avoid to use it.');\n        }\n        // 子 view 共享 options 配置数据\n        var sharedOptions = {\n            data: this.options.data,\n            scales: clone(this.options.scales),\n            axes: clone(this.options.axes),\n            coordinate: clone(this.coordinateController.getOption()),\n            tooltip: clone(this.options.tooltip),\n            legends: clone(this.options.legends),\n            animate: this.options.animate,\n            visible: this.visible,\n        };\n        var v = new View(__assign(__assign({ parent: this, canvas: this.canvas, \n            // 子 view 共用三层 group\n            backgroundGroup: this.backgroundGroup.addGroup({ zIndex: GROUP_Z_INDEX.BG }), middleGroup: this.middleGroup.addGroup({ zIndex: GROUP_Z_INDEX.MID }), foregroundGroup: this.foregroundGroup.addGroup({ zIndex: GROUP_Z_INDEX.FORE }), theme: this.themeObject, padding: this.padding }, cfg), { options: __assign(__assign({}, sharedOptions), get(cfg, 'options', {})) }));\n        this.views.push(v);\n        return v;\n    };\n    /**\n     * @deprecated\n     * This method will be removed at G2 V4.1. Replaced by {@link #createView()}\n     */\n    View.prototype.view = function (cfg) {\n        console.warn('This method will be removed at G2 V4.1. Please use chart.createView() instead.');\n        return this.createView(cfg);\n    };\n    /**\n     * 删除一个子 view\n     * @param view\n     * @return removedView\n     */\n    View.prototype.removeView = function (view) {\n        var removedView = remove(this.views, function (v) { return v === view; })[0];\n        if (removedView) {\n            removedView.destroy();\n        }\n        return removedView;\n    };\n    /* end View 管理相关的 API */\n    // 一些 get 方法\n    /**\n     * 获取当前坐标系实例。\n     * @returns [[Coordinate]]\n     */\n    View.prototype.getCoordinate = function () {\n        return this.coordinateInstance;\n    };\n    /**\n     * 获取当前 view 的主题配置。\n     * @returns themeObject\n     */\n    View.prototype.getTheme = function () {\n        return this.themeObject;\n    };\n    /**\n     * 获得 x 轴字段的 scale 实例。\n     * @returns view 中 Geometry 对于的 x scale\n     */\n    View.prototype.getXScale = function () {\n        // 拿第一个 Geometry 的 X scale\n        // 隐藏逻辑：一个 view 中的 Geometry 必须 x 字段一致\n        var g = this.geometries[0];\n        return g ? g.getXScale() : null;\n    };\n    /**\n     * 获取 y 轴字段的 scales 实例。\n     * @returns view 中 Geometry 对于的 y scale 数组\n     */\n    View.prototype.getYScales = function () {\n        // 拿到所有的 Geometry 的 Y scale，然后去重\n        var tmpMap = {};\n        var yScales = [];\n        this.geometries.forEach(function (g) {\n            var yScale = g.getYScale();\n            var field = yScale.field;\n            if (!tmpMap[field]) {\n                tmpMap[field] = true;\n                yScales.push(yScale);\n            }\n        });\n        return yScales;\n    };\n    /**\n     * 获取 x 轴或者 y 轴对应的所有 scale 实例。\n     * @param dimType x | y\n     * @returns x 轴或者 y 轴对应的所有 scale 实例。\n     */\n    View.prototype.getScalesByDim = function (dimType) {\n        var geometries = this.geometries;\n        var scales = {};\n        for (var i = 0, len = geometries.length; i < len; i++) {\n            var geometry = geometries[i];\n            var scale = dimType === 'x' ? geometry.getXScale() : geometry.getYScale();\n            if (scale && !scales[scale.field]) {\n                scales[scale.field] = scale;\n            }\n        }\n        return scales;\n    };\n    /**\n     * 根据字段名去获取 scale 实例。\n     * @param field 数据字段名称\n     * @param key id\n     */\n    View.prototype.getScale = function (field, key) {\n        var defaultKey = key ? key : this.getScaleKey(field);\n        // 调用根节点 view 的方法获取\n        return this.getRootView().scalePool.getScale(defaultKey);\n    };\n    /**\n     * @deprecated\n     * This method will be removed at G2 V4.1. Please use `getScale`.\n     */\n    View.prototype.getScaleByField = function (field, key) {\n        return this.getScale(field, key);\n    };\n    /**\n     * 返回所有配置信息。\n     * @returns 所有的 view API 配置。\n     */\n    View.prototype.getOptions = function () {\n        return this.options;\n    };\n    /**\n     * 获取 view 的数据（过滤后的数据）。\n     * @returns 处理过滤器之后的数据。\n     */\n    View.prototype.getData = function () {\n        return this.filteredData;\n    };\n    /**\n     * 获取原始数据\n     * @returns 传入 G2 的原始数据\n     */\n    View.prototype.getOriginalData = function () {\n        return this.options.data;\n    };\n    /**\n     * 获取布局后的边距 padding\n     * @returns\n     */\n    View.prototype.getPadding = function () {\n        return this.autoPadding.getPadding();\n    };\n    /**\n     * 获取当前 view 有的 geometries\n     * @returns\n     */\n    View.prototype.getGeometries = function () {\n        return this.geometries;\n    };\n    /**\n     * 获取 view 中的所有 geome\n     */\n    View.prototype.getElements = function () {\n        return reduce(this.geometries, function (elements, geometry) {\n            return elements.concat(geometry.getElements());\n        }, []);\n    };\n    /**\n     * 根据一定的规则查找 Geometry 的 Elements。\n     *\n     * ```typescript\n     * getElementsBy((element) => {\n     *   const data = element.getData();\n     *\n     *   return data.a === 'a';\n     * });\n     * ```\n     *\n     * @param condition 定义查找规则的回调函数。\n     * @returns\n     */\n    View.prototype.getElementsBy = function (condition) {\n        return this.getElements().filter(function (el) { return condition(el); });\n    };\n    /**\n     * 获得绘制的层级 group。\n     * @param layer 层级名称。\n     * @returns 对应层级的 Group。\n     */\n    View.prototype.getLayer = function (layer) {\n        return layer === LAYER.BG\n            ? this.backgroundGroup\n            : layer === LAYER.MID\n                ? this.middleGroup\n                : layer === LAYER.FORE\n                    ? this.foregroundGroup\n                    : this.foregroundGroup;\n    };\n    /**\n     * 对外暴露方法，判断一个点是否在绘图区域（即坐标系范围）内部。\n     * @param point 坐标点\n     */\n    View.prototype.isPointInPlot = function (point) {\n        return isPointInCoordinate(this.getCoordinate(), point);\n    };\n    /**\n     * 获得所有的 legend 对应的 attribute 实例。\n     * @returns 维度字段的 Attribute 数组\n     */\n    View.prototype.getLegendAttributes = function () {\n        return flatten(this.geometries.map(function (g) { return g.getGroupAttributes(); }));\n    };\n    /**\n     * 获取所有的分组字段的 scale 实例。\n     * @returns 获得分组字段的 scale 实例数组。\n     */\n    View.prototype.getGroupScales = function () {\n        // 拿到所有的 Geometry 的 分组字段 scale，然后打平去重\n        var scales = this.geometries.map(function (g) { return g.getGroupScales(); });\n        return uniq(flatten(scales));\n    };\n    /**\n     * 获取 G.Canvas 实例。\n     * @returns G.Canvas 画布实例。\n     */\n    View.prototype.getCanvas = function () {\n        return this.getRootView().canvas;\n    };\n    /**\n     * 获得根节点 view。\n     */\n    View.prototype.getRootView = function () {\n        var v = this;\n        while (true) {\n            if (v.parent) {\n                v = v.parent;\n                continue;\n            }\n            break;\n        }\n        return v;\n    };\n    /**\n     * 获取该数据在可视化后，对应的画布坐标点。\n     * @param data 原始数据记录\n     * @returns 对应的画布坐标点\n     */\n    View.prototype.getXY = function (data) {\n        var coordinate = this.getCoordinate();\n        var xScales = this.getScalesByDim('x');\n        var yScales = this.getScalesByDim('y');\n        var x;\n        var y;\n        each(data, function (value, key) {\n            if (xScales[key]) {\n                x = xScales[key].scale(value);\n            }\n            if (yScales[key]) {\n                y = yScales[key].scale(value);\n            }\n        });\n        if (!isNil(x) && !isNil(y)) {\n            return coordinate.convert({ x: x, y: y });\n        }\n    };\n    /**\n     * 获取 name 对应的 controller 实例\n     * @param name\n     */\n    View.prototype.getController = function (name) {\n        return find(this.controllers, function (c) { return c.name === name; });\n    };\n    /**\n     * 显示 point 坐标点对应的 tooltip。\n     * @param point 画布坐标点\n     * @returns View\n     */\n    View.prototype.showTooltip = function (point) {\n        var tooltip = this.getController('tooltip');\n        if (tooltip) {\n            tooltip.showTooltip(point);\n        }\n        return this;\n    };\n    /**\n     * 隐藏 tooltip。\n     * @returns View\n     */\n    View.prototype.hideTooltip = function () {\n        var tooltip = this.getController('tooltip');\n        if (tooltip) {\n            tooltip.hideTooltip();\n        }\n        return this;\n    };\n    /**\n     * 将 tooltip 锁定到当前位置不能移动。\n     * @returns View\n     */\n    View.prototype.lockTooltip = function () {\n        var tooltip = this.getController('tooltip');\n        if (tooltip) {\n            tooltip.lockTooltip();\n        }\n        return this;\n    };\n    /**\n     * 将 tooltip 锁定解除。\n     * @returns View\n     */\n    View.prototype.unlockTooltip = function () {\n        var tooltip = this.getController('tooltip');\n        if (tooltip) {\n            tooltip.unlockTooltip();\n        }\n        return this;\n    };\n    /**\n     * 是否锁定 tooltip。\n     * @returns 是否锁定\n     */\n    View.prototype.isTooltipLocked = function () {\n        var tooltip = this.getController('tooltip');\n        return tooltip && tooltip.isTooltipLocked();\n    };\n    /**\n     * 获取当前 point 对应的 tooltip 数据项。\n     * @param point 坐标点\n     * @returns tooltip 数据项\n     */\n    View.prototype.getTooltipItems = function (point) {\n        var tooltip = this.getController('tooltip');\n        return tooltip ? tooltip.getTooltipItems(point) : [];\n    };\n    /**\n     * 获取逼近的点的数据集合\n     * @param point 当前坐标点\n     * @returns  数据\n     */\n    View.prototype.getSnapRecords = function (point) {\n        var geometries = this.geometries;\n        var rst = [];\n        for (var i = 0, len = geometries.length; i < len; i++) {\n            var geom = geometries[i];\n            var dataArray = geom.dataArray;\n            geom.sort(dataArray); // 先进行排序，便于 tooltip 查找\n            var record = void 0;\n            for (var j = 0, dataLen = dataArray.length; j < dataLen; j++) {\n                var data = dataArray[j];\n                record = findDataByPoint(point, data, geom);\n                if (record) {\n                    rst.push(record);\n                }\n            }\n        }\n        // 同样递归处理子 views\n        var views = this.views;\n        for (var i = 0, len = views.length; i < len; i++) {\n            var view = views[i];\n            var snapRecords = view.getSnapRecords(point);\n            rst = rst.concat(snapRecords);\n        }\n        return rst;\n    };\n    /**\n     * 获取所有的 pure component 组件，用于布局。\n     */\n    View.prototype.getComponents = function () {\n        var components = [];\n        var controllers = this.controllers;\n        for (var i = 0, len = controllers.length; i < len; i++) {\n            var controller = controllers[i];\n            components = components.concat(controller.getComponents());\n        }\n        return components;\n    };\n    /**\n     * 将 data 数据进行过滤。\n     * @param data\n     * @returns 过滤之后的数据\n     */\n    View.prototype.filterData = function (data) {\n        var filters = this.options.filters;\n        // 不存在 filters，则不需要进行数据过滤\n        if (size(filters) === 0) {\n            return data;\n        }\n        // 存在过滤器，则逐个执行过滤，过滤器之间是 与 的关系\n        return filter(data, function (datum, idx) {\n            // 所有的 filter 字段\n            var fields = Object.keys(filters);\n            // 所有的条件都通过，才算通过\n            return fields.every(function (field) {\n                var condition = filters[field];\n                // condition 返回 true，则保留\n                return condition(datum[field], datum, idx);\n            });\n        });\n    };\n    /**\n     * 对某一个字段进行过滤\n     * @param field\n     * @param data\n     */\n    View.prototype.filterFieldData = function (field, data) {\n        var filters = this.options.filters;\n        var condition = get(filters, field);\n        if (isUndefined(condition)) {\n            return data;\n        }\n        return data.filter(function (datum, idx) { return condition(datum[field], datum, idx); });\n    };\n    /**\n     * 调整 coordinate 的坐标范围。\n     */\n    View.prototype.adjustCoordinate = function () {\n        var _a = this.getCoordinate(), curStart = _a.start, curEnd = _a.end;\n        var start = this.coordinateBBox.bl;\n        var end = this.coordinateBBox.tr;\n        // 在 defaultLayoutFn 中只会在 coordinateBBox 发生变化的时候会调用 adjustCoordinate()，所以不用担心被置位\n        if (isEqual(curStart, start) && isEqual(curEnd, end)) {\n            this.isCoordinateChanged = false;\n            // 如果大小没有变化则不更新\n            return;\n        }\n        this.isCoordinateChanged = true;\n        this.coordinateInstance = this.coordinateController.adjust(start, end);\n    };\n    View.prototype.paint = function (isUpdate) {\n        this.renderDataRecursive(isUpdate);\n        // 处理 sync scale 的逻辑\n        this.syncScale();\n        this.emit(VIEW_LIFE_CIRCLE.BEFORE_PAINT);\n        // 初始化图形、组件位置，计算 padding\n        this.renderPaddingRecursive(isUpdate);\n        // 布局图形、组件\n        this.renderLayoutRecursive(isUpdate);\n        // 背景色 shape\n        this.renderBackgroundStyleShape();\n        // 最终的绘制 render\n        this.renderPaintRecursive(isUpdate);\n        this.emit(VIEW_LIFE_CIRCLE.AFTER_PAINT);\n        this.isDataChanged = false; // 渲染完毕复位\n    };\n    /**\n     * 渲染背景样式的 shape。\n     * 放到 view 中创建的原因是让使用 view 绘制图形的时候，也能够处理背景色\n     */\n    View.prototype.renderBackgroundStyleShape = function () {\n        // 只有根节点才处理\n        if (this.parent) {\n            return;\n        }\n        var background = get(this.themeObject, 'background');\n        // 配置了背景色\n        if (background) {\n            // 1. 不存在则创建\n            if (!this.backgroundStyleRectShape) {\n                this.backgroundStyleRectShape = this.backgroundGroup.addShape('rect', {\n                    attrs: {},\n                    zIndex: -1,\n                    // 背景色 shape 不设置事件捕获\n                    capture: false,\n                });\n                this.backgroundStyleRectShape.toBack();\n            }\n            // 2. 有了 shape 之后设置背景，位置（更新的时候）\n            var _a = this.viewBBox, x = _a.x, y = _a.y, width = _a.width, height = _a.height;\n            this.backgroundStyleRectShape.attr({\n                fill: background,\n                x: x,\n                y: y,\n                width: width,\n                height: height,\n            });\n        }\n        else {\n            // 没有配置背景色\n            if (this.backgroundStyleRectShape) {\n                this.backgroundStyleRectShape.remove(true);\n                this.backgroundStyleRectShape = undefined;\n            }\n        }\n    };\n    /**\n     * 递归计算每个 view 的 padding 值，coordinateBBox 和 coordinateInstance\n     * @param isUpdate\n     */\n    View.prototype.renderPaddingRecursive = function (isUpdate) {\n        // 1. 子 view 大小相对 coordinateBBox，changeSize 的时候需要重新计算\n        this.calculateViewBBox();\n        // 2. 更新 coordinate\n        this.adjustCoordinate();\n        // 3. 初始化组件 component\n        this.initComponents(isUpdate);\n        // 4. 布局计算每隔 view 的 padding 值\n        // 4.1. 自动加 auto padding -> absolute padding，并且增加 appendPadding\n        this.autoPadding = calculatePadding(this).shrink(parsePadding(this.appendPadding));\n        // 4.2. 计算出新的 coordinateBBox，更新 Coordinate\n        // 这里必须保留，原因是后面子 view 的 viewBBox 或根据 parent 的 coordinateBBox\n        this.coordinateBBox = this.viewBBox.shrink(this.autoPadding.getPadding());\n        this.adjustCoordinate();\n        // 刷新 tooltip (tooltip crosshairs 依赖 coordinate 位置)\n        var tooltipController = this.controllers.find(function (c) { return c.name === 'tooltip'; });\n        tooltipController.update();\n        // 同样递归处理子 views\n        var views = this.views;\n        for (var i = 0, len = views.length; i < len; i++) {\n            var view = views[i];\n            view.renderPaddingRecursive(isUpdate);\n        }\n    };\n    /**\n     * 递归处理 view 的布局，最终是计算各个 view 的 coordinateBBox 和 coordinateInstance\n     * @param isUpdate\n     */\n    View.prototype.renderLayoutRecursive = function (isUpdate) {\n        // 1. 同步子 view padding\n        // 根据配置获取 padding\n        var syncViewPaddingFn = this.syncViewPadding === true\n            ? defaultSyncViewPadding\n            : isFunction(this.syncViewPadding)\n                ? this.syncViewPadding\n                : undefined;\n        if (syncViewPaddingFn) {\n            syncViewPaddingFn(this, this.views, PaddingCal);\n            // 同步 padding 之后，更新 coordinate\n            this.views.forEach(function (v) {\n                v.coordinateBBox = v.viewBBox.shrink(v.autoPadding.getPadding());\n                v.adjustCoordinate();\n            });\n        }\n        // 3. 将 view 中的组件按照 view padding 移动到对应的位置\n        this.doLayout();\n        // 同样递归处理子 views\n        var views = this.views;\n        for (var i = 0, len = views.length; i < len; i++) {\n            var view = views[i];\n            view.renderLayoutRecursive(isUpdate);\n        }\n    };\n    /**\n     * 最终递归绘制组件和图形\n     * @param isUpdate\n     */\n    View.prototype.renderPaintRecursive = function (isUpdate) {\n        var middleGroup = this.middleGroup;\n        if (this.limitInPlot) {\n            var _a = getCoordinateClipCfg(this.coordinateInstance), type = _a.type, attrs = _a.attrs;\n            middleGroup.setClip({\n                type: type,\n                attrs: attrs,\n            });\n        }\n        else {\n            // 清除已有的 clip\n            middleGroup.setClip(undefined);\n        }\n        // 1. 渲染几何标记\n        this.paintGeometries(isUpdate);\n        // 2. 绘制组件\n        this.renderComponents(isUpdate);\n        // 同样递归处理子 views\n        var views = this.views;\n        for (var i = 0, len = views.length; i < len; i++) {\n            var view = views[i];\n            view.renderPaintRecursive(isUpdate);\n        }\n    };\n    // end Get 方法\n    /**\n     * 创建 scale，递归到顶层 view 去创建和缓存 scale\n     * @param field\n     * @param data\n     * @param scaleDef\n     * @param key\n     */\n    View.prototype.createScale = function (field, data, scaleDef, key) {\n        // 1. 合并 field 对应的 scaleDef，合并原则是底层覆盖顶层（就近原则）\n        var currentScaleDef = get(this.options.scales, [field]);\n        var mergedScaleDef = __assign(__assign({}, currentScaleDef), scaleDef);\n        // 2. 是否存在父 view，在则递归，否则创建\n        if (this.parent) {\n            return this.parent.createScale(field, data, mergedScaleDef, key);\n        }\n        // 3. 在根节点 view 通过 scalePool 创建\n        return this.scalePool.createScale(field, data, mergedScaleDef, key);\n    };\n    /**\n     * 递归渲染中的数据处理\n     * @param isUpdate\n     */\n    View.prototype.renderDataRecursive = function (isUpdate) {\n        // 1. 处理数据\n        this.doFilterData();\n        // 2. 创建实例\n        this.createCoordinate();\n        // 3. 初始化 Geometry\n        this.initGeometries(isUpdate);\n        // 4. 处理分面逻辑，最终都是生成子 view 和 geometry\n        this.renderFacet(isUpdate);\n        // 同样递归处理子 views\n        var views = this.views;\n        for (var i = 0, len = views.length; i < len; i++) {\n            var view = views[i];\n            view.renderDataRecursive(isUpdate);\n        }\n    };\n    /**\n     * 计算 region，计算实际的像素范围坐标\n     * @private\n     */\n    View.prototype.calculateViewBBox = function () {\n        var x;\n        var y;\n        var width;\n        var height;\n        if (this.parent) {\n            var bbox = this.parent.coordinateBBox;\n            // 存在 parent， 那么就是通过父容器大小计算\n            x = bbox.x;\n            y = bbox.y;\n            width = bbox.width;\n            height = bbox.height;\n        }\n        else {\n            // 顶层容器，从 canvas 中取值 宽高\n            x = 0;\n            y = 0;\n            width = this.canvas.get('width');\n            height = this.canvas.get('height');\n        }\n        var _a = this.region, start = _a.start, end = _a.end;\n        // 根据 region 计算当前 view 的 bbox 大小。\n        var viewBBox = new BBox(x + width * start.x, y + height * start.y, width * (end.x - start.x), height * (end.y - start.y));\n        if (!this.viewBBox || !this.viewBBox.isEqual(viewBBox)) {\n            // viewBBox 发生变化的时候进行更新\n            this.viewBBox = new BBox(x + width * start.x, y + height * start.y, width * (end.x - start.x), height * (end.y - start.y));\n        }\n        // 初始的 coordinate bbox 大小\n        this.coordinateBBox = this.viewBBox;\n    };\n    /**\n     * 初始化事件机制：G 4.0 底层内置支持 name:event 的机制，那么只要所有组件都有自己的 name 即可。\n     *\n     * G2 的事件只是获取事件委托，然后在 view 嵌套结构中，形成事件冒泡机制。\n     * 当前 view 只委托自己 view 中的 Component 和 Geometry 事件，并向上冒泡\n     * @private\n     */\n    View.prototype.initEvents = function () {\n        // 三层 group 中的 shape 事件都会通过 G 冒泡上来的\n        this.foregroundGroup.on('*', this.onDelegateEvents);\n        this.middleGroup.on('*', this.onDelegateEvents);\n        this.backgroundGroup.on('*', this.onDelegateEvents);\n        this.canvas.on('*', this.onCanvasEvent);\n    };\n    /**\n     * 初始化插件\n     */\n    View.prototype.initComponentController = function () {\n        var usedControllers = this.usedControllers;\n        for (var i = 0, len = usedControllers.length; i < len; i++) {\n            var controllerName = usedControllers[i];\n            var Ctor = getComponentController(controllerName);\n            if (Ctor) {\n                this.controllers.push(new Ctor(this));\n            }\n        }\n    };\n    View.prototype.createViewEvent = function (evt) {\n        var shape = evt.shape, name = evt.name;\n        var data = shape ? shape.get('origin') : null;\n        // 事件在 view 嵌套中冒泡（暂不提供阻止冒泡的机制）\n        var e = new Event(this, evt, data);\n        e.type = name;\n        return e;\n    };\n    /**\n     * 处理 PLOT_EVENTS\n     * plot event 需要处理所有的基础事件，并判断是否在画布中，然后再决定是否要 emit。\n     * 对于 mouseenter、mouseleave 比较特殊，需要做一下数学比较。\n     * @param e\n     */\n    View.prototype.doPlotEvent = function (e) {\n        var type = e.type, x = e.x, y = e.y;\n        var point = { x: x, y: y };\n        var ALL_EVENTS = [\n            'mousedown',\n            'mouseup',\n            'mousemove',\n            'mouseleave',\n            'mousewheel',\n            'touchstart',\n            'touchmove',\n            'touchend',\n            'touchcancel',\n            'click',\n            'dblclick',\n            'contextmenu',\n        ];\n        if (ALL_EVENTS.includes(type)) {\n            var currentInPlot = this.isPointInPlot(point);\n            var newEvent = e.clone();\n            if (currentInPlot) {\n                var TYPE = \"plot:\".concat(type); // 组合 plot 事件\n                newEvent.type = TYPE;\n                this.emit(TYPE, newEvent);\n                if (type === 'mouseleave' || type === 'touchend') {\n                    // 在plot 内部却离开画布\n                    this.isPreMouseInPlot = false;\n                }\n            }\n            // 对于 mouseenter, mouseleave 的计算处理\n            if (type === 'mousemove' || type === 'touchmove') {\n                if (this.isPreMouseInPlot && !currentInPlot) {\n                    if (type === 'mousemove') {\n                        newEvent.type = PLOT_EVENTS.MOUSE_LEAVE;\n                        this.emit(PLOT_EVENTS.MOUSE_LEAVE, newEvent);\n                    }\n                    newEvent.type = PLOT_EVENTS.LEAVE;\n                    this.emit(PLOT_EVENTS.LEAVE, newEvent);\n                }\n                else if (!this.isPreMouseInPlot && currentInPlot) {\n                    if (type === 'mousemove') {\n                        newEvent.type = PLOT_EVENTS.MOUSE_ENTER;\n                        this.emit(PLOT_EVENTS.MOUSE_ENTER, newEvent);\n                    }\n                    newEvent.type = PLOT_EVENTS.ENTER;\n                    this.emit(PLOT_EVENTS.ENTER, newEvent);\n                }\n                // 赋新的状态值\n                this.isPreMouseInPlot = currentInPlot;\n            }\n            else if (type === 'mouseleave' || type === 'touchend') {\n                // 可能不在 currentInPlot 中\n                if (this.isPreMouseInPlot) {\n                    if (type === 'mouseleave') {\n                        newEvent.type = PLOT_EVENTS.MOUSE_LEAVE;\n                        this.emit(PLOT_EVENTS.MOUSE_LEAVE, newEvent);\n                    }\n                    newEvent.type = PLOT_EVENTS.LEAVE;\n                    this.emit(PLOT_EVENTS.LEAVE, newEvent);\n                    this.isPreMouseInPlot = false;\n                }\n            }\n        }\n    };\n    // view 生命周期 —— 渲染流程\n    /**\n     * 处理筛选器，筛选数据\n     * @private\n     */\n    View.prototype.doFilterData = function () {\n        var data = this.options.data;\n        this.filteredData = this.filterData(data);\n    };\n    /**\n     * 初始化 Geometries\n     * @private\n     */\n    View.prototype.initGeometries = function (isUpdate) {\n        // 初始化图形的之前，先创建 / 更新 scales\n        this.createOrUpdateScales();\n        // 实例化 Geometry，然后 view 将所有的 scale 管理起来\n        var coordinate = this.getCoordinate();\n        var scaleDefs = get(this.options, 'scales', {});\n        var geometries = this.geometries;\n        for (var i = 0, len = geometries.length; i < len; i++) {\n            var geometry = geometries[i];\n            // 保持 scales 引用不要变化\n            geometry.scales = this.getGeometryScales();\n            var cfg = {\n                coordinate: coordinate,\n                scaleDefs: scaleDefs,\n                data: this.filteredData,\n                theme: this.themeObject,\n                isDataChanged: this.isDataChanged,\n                isCoordinateChanged: this.isCoordinateChanged,\n            };\n            if (isUpdate) {\n                // 数据发生更新\n                geometry.update(cfg);\n            }\n            else {\n                geometry.init(cfg);\n            }\n        }\n        // Geometry 初始化之后，生成了 scale，然后进行调整 scale 配置\n        this.adjustScales();\n    };\n    /**\n     * 根据 Geometry 的所有字段创建 scales\n     * 如果存在，则更新，不存在则创建\n     */\n    View.prototype.createOrUpdateScales = function () {\n        var fields = this.getScaleFields();\n        var groupedFields = this.getGroupedFields();\n        var _a = this.getOptions(), data = _a.data, _b = _a.scales, scales = _b === void 0 ? {} : _b;\n        var filteredData = this.filteredData;\n        for (var i = 0, len = fields.length; i < len; i++) {\n            var field = fields[i];\n            var scaleDef = scales[field];\n            // 调用方法，递归去创建\n            var key = this.getScaleKey(field);\n            this.createScale(field, \n            // 分组字段的 scale 使用未过滤的数据创建\n            groupedFields.includes(field) ? data : filteredData, scaleDef, key);\n            // 缓存从当前 view 创建的 scale key\n            this.createdScaleKeys.set(key, true);\n        }\n    };\n    /**\n     * 处理 scale 同步逻辑\n     */\n    View.prototype.syncScale = function () {\n        // 最终调用 root view 的\n        this.getRootView().scalePool.sync(this.getCoordinate(), this.theme);\n    };\n    /**\n     * 获得 Geometry 中的 scale 对象\n     */\n    View.prototype.getGeometryScales = function () {\n        var fields = this.getScaleFields();\n        var scales = {};\n        for (var i = 0; i < fields.length; i++) {\n            var field = fields[i];\n            scales[field] = this.getScaleByField(field);\n        }\n        return scales;\n    };\n    View.prototype.getScaleFields = function () {\n        var fields = [];\n        var tmpMap = new Map();\n        var geometries = this.geometries;\n        for (var i = 0; i < geometries.length; i++) {\n            var geometry = geometries[i];\n            var geometryScales = geometry.getScaleFields();\n            uniq(geometryScales, fields, tmpMap);\n        }\n        return fields;\n    };\n    View.prototype.getGroupedFields = function () {\n        var fields = [];\n        var tmpMap = new Map();\n        var geometries = this.geometries;\n        for (var i = 0; i < geometries.length; i++) {\n            var geometry = geometries[i];\n            var groupFields = geometry.getGroupFields();\n            uniq(groupFields, fields, tmpMap);\n        }\n        return fields;\n    };\n    /**\n     * 调整 scale 配置\n     * @private\n     */\n    View.prototype.adjustScales = function () {\n        // 调整目前包括：\n        // 分类 scale，调整 range 范围\n        this.adjustCategoryScaleRange();\n    };\n    /**\n     * 调整分类 scale 的 range，防止超出坐标系外面\n     * @private\n     */\n    View.prototype.adjustCategoryScaleRange = function () {\n        var _this = this;\n        var xyScales = __spreadArray([this.getXScale()], __read(this.getYScales()), false).filter(function (e) { return !!e; });\n        var coordinate = this.getCoordinate();\n        var scaleOptions = this.options.scales;\n        each(xyScales, function (scale) {\n            var field = scale.field, values = scale.values, isCategory = scale.isCategory, isIdentity = scale.isIdentity;\n            // 分类或者 identity 的 scale 才进行处理\n            if (isCategory || isIdentity) {\n                // 存在 value 值，且用户没有配置 range 配置\n                if (values && !get(scaleOptions, [field, 'range'])) {\n                    // 更新 range\n                    scale.range = getDefaultCategoryScaleRange(scale, coordinate, _this.theme);\n                }\n            }\n        });\n    };\n    /**\n     * 根据 options 配置、Geometry 字段配置，自动生成 components\n     * @param isUpdate 是否是更新\n     * @private\n     */\n    View.prototype.initComponents = function (isUpdate) {\n        // 先全部清空，然后 render\n        var controllers = this.controllers;\n        for (var i = 0; i < controllers.length; i++) {\n            var controller = controllers[i];\n            // 更新则走更新逻辑；否则清空载重绘\n            if (isUpdate) {\n                controller.update();\n            }\n            else {\n                controller.clear();\n                controller.render();\n            }\n        }\n    };\n    View.prototype.doLayout = function () {\n        this.layoutFunc(this);\n    };\n    /**\n     * 创建坐标系\n     * @private\n     */\n    View.prototype.createCoordinate = function () {\n        var start = this.coordinateBBox.bl;\n        var end = this.coordinateBBox.tr;\n        this.coordinateInstance = this.coordinateController.create(start, end);\n    };\n    /**\n     * 根据 options 配置自动渲染 geometry\n     * @private\n     */\n    View.prototype.paintGeometries = function (isUpdate) {\n        var doAnimation = this.options.animate;\n        // geometry 的 paint 阶段\n        var coordinate = this.getCoordinate();\n        var canvasRegion = {\n            x: this.viewBBox.x,\n            y: this.viewBBox.y,\n            minX: this.viewBBox.minX,\n            minY: this.viewBBox.minY,\n            maxX: this.viewBBox.maxX,\n            maxY: this.viewBBox.maxY,\n            width: this.viewBBox.width,\n            height: this.viewBBox.height,\n        };\n        var geometries = this.geometries;\n        for (var i = 0; i < geometries.length; i++) {\n            var geometry = geometries[i];\n            geometry.coordinate = coordinate;\n            geometry.canvasRegion = canvasRegion;\n            if (!doAnimation) {\n                // 如果 view 不执行动画，那么 view 下所有的 geometry 都不执行动画\n                geometry.animate(false);\n            }\n            geometry.paint(isUpdate);\n        }\n    };\n    /**\n     * 最后的绘制组件\n     * @param isUpdate\n     */\n    View.prototype.renderComponents = function (isUpdate) {\n        var components = this.getComponents();\n        // 先全部清空，然后 render\n        for (var i = 0; i < components.length; i++) {\n            var co = components[i];\n            co.component.render();\n        }\n    };\n    /**\n     * 渲染分面，会在其中进行数据分面，然后进行子 view 创建\n     * @param isUpdate\n     */\n    View.prototype.renderFacet = function (isUpdate) {\n        if (this.facetInstance) {\n            if (isUpdate) {\n                this.facetInstance.update();\n            }\n            else {\n                this.facetInstance.clear();\n                // 计算分面数据\n                this.facetInstance.init();\n                // 渲染组件和 views\n                this.facetInstance.render();\n            }\n        }\n    };\n    View.prototype.initOptions = function () {\n        var _this = this;\n        var _a = this.options, _b = _a.geometries, geometries = _b === void 0 ? [] : _b, _c = _a.interactions, interactions = _c === void 0 ? [] : _c, _d = _a.views, views = _d === void 0 ? [] : _d, _e = _a.annotations, annotations = _e === void 0 ? [] : _e, coordinate = _a.coordinate, events = _a.events, facets = _a.facets;\n        // 设置坐标系\n        if (this.coordinateController) {\n            // 更新 coordinate controller\n            coordinate && this.coordinateController.update(coordinate);\n        }\n        else {\n            // 创建 coordinate controller\n            this.coordinateController = new CoordinateController(coordinate);\n        }\n        // 创建 geometry 实例\n        for (var i = 0; i < geometries.length; i++) {\n            var geometryOption = geometries[i];\n            this.createGeometry(geometryOption);\n        }\n        // 创建 interactions 实例\n        for (var j = 0; j < interactions.length; j++) {\n            var interactionOption = interactions[j];\n            var type = interactionOption.type, cfg = interactionOption.cfg;\n            this.interaction(type, cfg);\n        }\n        // 创建 view 实例\n        for (var k = 0; k < views.length; k++) {\n            var viewOption = views[k];\n            this.createView(viewOption);\n        }\n        // 设置 annotation\n        var annotationComponent = this.getController('annotation');\n        for (var l = 0; l < annotations.length; l++) {\n            var annotationOption = annotations[l];\n            annotationComponent.annotation(annotationOption);\n        }\n        // 设置 events\n        if (events) {\n            each(events, function (eventCallback, eventName) {\n                _this.on(eventName, eventCallback);\n            });\n        }\n        if (facets) {\n            each(facets, function (facet) {\n                var type = facet.type, rest = __rest(facet, [\"type\"]);\n                _this.facet(type, rest);\n            });\n        }\n    };\n    View.prototype.createGeometry = function (geometryOption) {\n        var type = geometryOption.type, _a = geometryOption.cfg, cfg = _a === void 0 ? {} : _a;\n        if (this[type]) {\n            var geometry_1 = this[type](cfg);\n            each(geometryOption, function (v, k) {\n                if (isFunction(geometry_1[k])) {\n                    geometry_1[k](v);\n                }\n            });\n        }\n    };\n    /**\n     * scale key 的创建方式\n     * @param field\n     */\n    View.prototype.getScaleKey = function (field) {\n        return \"\".concat(this.id, \"-\").concat(field);\n    };\n    return View;\n}(Base));\nexport { View };\n/**\n * 注册 geometry 组件\n * @param name\n * @param Ctor\n * @returns Geometry\n */\nexport function registerGeometry(name, Ctor) {\n    // 语法糖，在 view API 上增加原型方法\n    View.prototype[name.toLowerCase()] = function (cfg) {\n        if (cfg === void 0) { cfg = {}; }\n        var props = __assign({ \n            /** 图形容器 */\n            container: this.middleGroup.addGroup(), labelsContainer: this.foregroundGroup.addGroup() }, cfg);\n        var geometry = new Ctor(props);\n        this.geometries.push(geometry);\n        return geometry;\n    };\n}\nexport default View;\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}