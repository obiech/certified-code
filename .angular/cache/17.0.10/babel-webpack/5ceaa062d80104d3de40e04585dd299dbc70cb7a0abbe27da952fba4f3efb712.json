{"ast":null,"code":"import { __extends } from \"tslib\";\nimport * as _ from '@antv/util';\nimport { GAP } from '../constant';\nimport Adjust from './adjust';\nfunction randomNumber(min, max) {\n  return (max - min) * Math.random() + min;\n}\nvar Jitter = /** @class */function (_super) {\n  __extends(Jitter, _super);\n  function Jitter() {\n    return _super !== null && _super.apply(this, arguments) || this;\n  }\n  Jitter.prototype.process = function (groupDataArray) {\n    var groupedDataArray = _.clone(groupDataArray);\n    // 之前分组之后的数据，然后有合并回去（和分组前可以理解成是一样的）\n    var mergeData = _.flatten(groupedDataArray);\n    // 返回值\n    this.adjustData(groupedDataArray, mergeData);\n    return groupedDataArray;\n  };\n  /**\n   * 当前数据分组（index）中，按照维度 dim 进行 jitter 调整\n   * @param dim\n   * @param values\n   * @param dataArray\n   */\n  Jitter.prototype.adjustDim = function (dim, values, dataArray) {\n    var _this = this;\n    // 在每一个分组中，将数据再按照 dim 分组，用于散列\n    var groupDataArray = this.groupData(dataArray, dim);\n    return _.each(groupDataArray, function (data, dimValue) {\n      return _this.adjustGroup(data, dim, parseFloat(dimValue), values);\n    });\n  };\n  // 随机出来的字段值\n  Jitter.prototype.getAdjustOffset = function (range) {\n    var pre = range.pre,\n      next = range.next;\n    // 随机的范围\n    var margin = (next - pre) * GAP;\n    return randomNumber(pre + margin, next - margin);\n  };\n  // adjust group data\n  Jitter.prototype.adjustGroup = function (group, dim, dimValue, values) {\n    var _this = this;\n    // 调整范围\n    var range = this.getAdjustRange(dim, dimValue, values);\n    _.each(group, function (data) {\n      data[dim] = _this.getAdjustOffset(range); // 获取调整的位置\n    });\n\n    return group;\n  };\n  return Jitter;\n}(Adjust);\nexport default Jitter;","map":{"version":3,"names":["__extends","_","GAP","Adjust","randomNumber","min","max","Math","random","Jitter","_super","apply","arguments","prototype","process","groupDataArray","groupedDataArray","clone","mergeData","flatten","adjustData","adjustDim","dim","values","dataArray","_this","groupData","each","data","dimValue","adjustGroup","parseFloat","getAdjustOffset","range","pre","next","margin","group","getAdjustRange"],"sources":["/Users/obiechina/Documents/ridy-flutter-full-taxi-solution 2/node_modules/@antv/adjust/esm/adjusts/jitter.js"],"sourcesContent":["import { __extends } from \"tslib\";\nimport * as _ from '@antv/util';\nimport { GAP } from '../constant';\nimport Adjust from './adjust';\nfunction randomNumber(min, max) {\n    return (max - min) * Math.random() + min;\n}\nvar Jitter = /** @class */ (function (_super) {\n    __extends(Jitter, _super);\n    function Jitter() {\n        return _super !== null && _super.apply(this, arguments) || this;\n    }\n    Jitter.prototype.process = function (groupDataArray) {\n        var groupedDataArray = _.clone(groupDataArray);\n        // 之前分组之后的数据，然后有合并回去（和分组前可以理解成是一样的）\n        var mergeData = _.flatten(groupedDataArray);\n        // 返回值\n        this.adjustData(groupedDataArray, mergeData);\n        return groupedDataArray;\n    };\n    /**\n     * 当前数据分组（index）中，按照维度 dim 进行 jitter 调整\n     * @param dim\n     * @param values\n     * @param dataArray\n     */\n    Jitter.prototype.adjustDim = function (dim, values, dataArray) {\n        var _this = this;\n        // 在每一个分组中，将数据再按照 dim 分组，用于散列\n        var groupDataArray = this.groupData(dataArray, dim);\n        return _.each(groupDataArray, function (data, dimValue) {\n            return _this.adjustGroup(data, dim, parseFloat(dimValue), values);\n        });\n    };\n    // 随机出来的字段值\n    Jitter.prototype.getAdjustOffset = function (range) {\n        var pre = range.pre, next = range.next;\n        // 随机的范围\n        var margin = (next - pre) * GAP;\n        return randomNumber(pre + margin, next - margin);\n    };\n    // adjust group data\n    Jitter.prototype.adjustGroup = function (group, dim, dimValue, values) {\n        var _this = this;\n        // 调整范围\n        var range = this.getAdjustRange(dim, dimValue, values);\n        _.each(group, function (data) {\n            data[dim] = _this.getAdjustOffset(range); // 获取调整的位置\n        });\n        return group;\n    };\n    return Jitter;\n}(Adjust));\nexport default Jitter;\n"],"mappings":"AAAA,SAASA,SAAS,QAAQ,OAAO;AACjC,OAAO,KAAKC,CAAC,MAAM,YAAY;AAC/B,SAASC,GAAG,QAAQ,aAAa;AACjC,OAAOC,MAAM,MAAM,UAAU;AAC7B,SAASC,YAAYA,CAACC,GAAG,EAAEC,GAAG,EAAE;EAC5B,OAAO,CAACA,GAAG,GAAGD,GAAG,IAAIE,IAAI,CAACC,MAAM,CAAC,CAAC,GAAGH,GAAG;AAC5C;AACA,IAAII,MAAM,GAAG,aAAe,UAAUC,MAAM,EAAE;EAC1CV,SAAS,CAACS,MAAM,EAAEC,MAAM,CAAC;EACzB,SAASD,MAAMA,CAAA,EAAG;IACd,OAAOC,MAAM,KAAK,IAAI,IAAIA,MAAM,CAACC,KAAK,CAAC,IAAI,EAAEC,SAAS,CAAC,IAAI,IAAI;EACnE;EACAH,MAAM,CAACI,SAAS,CAACC,OAAO,GAAG,UAAUC,cAAc,EAAE;IACjD,IAAIC,gBAAgB,GAAGf,CAAC,CAACgB,KAAK,CAACF,cAAc,CAAC;IAC9C;IACA,IAAIG,SAAS,GAAGjB,CAAC,CAACkB,OAAO,CAACH,gBAAgB,CAAC;IAC3C;IACA,IAAI,CAACI,UAAU,CAACJ,gBAAgB,EAAEE,SAAS,CAAC;IAC5C,OAAOF,gBAAgB;EAC3B,CAAC;EACD;AACJ;AACA;AACA;AACA;AACA;EACIP,MAAM,CAACI,SAAS,CAACQ,SAAS,GAAG,UAAUC,GAAG,EAAEC,MAAM,EAAEC,SAAS,EAAE;IAC3D,IAAIC,KAAK,GAAG,IAAI;IAChB;IACA,IAAIV,cAAc,GAAG,IAAI,CAACW,SAAS,CAACF,SAAS,EAAEF,GAAG,CAAC;IACnD,OAAOrB,CAAC,CAAC0B,IAAI,CAACZ,cAAc,EAAE,UAAUa,IAAI,EAAEC,QAAQ,EAAE;MACpD,OAAOJ,KAAK,CAACK,WAAW,CAACF,IAAI,EAAEN,GAAG,EAAES,UAAU,CAACF,QAAQ,CAAC,EAAEN,MAAM,CAAC;IACrE,CAAC,CAAC;EACN,CAAC;EACD;EACAd,MAAM,CAACI,SAAS,CAACmB,eAAe,GAAG,UAAUC,KAAK,EAAE;IAChD,IAAIC,GAAG,GAAGD,KAAK,CAACC,GAAG;MAAEC,IAAI,GAAGF,KAAK,CAACE,IAAI;IACtC;IACA,IAAIC,MAAM,GAAG,CAACD,IAAI,GAAGD,GAAG,IAAIhC,GAAG;IAC/B,OAAOE,YAAY,CAAC8B,GAAG,GAAGE,MAAM,EAAED,IAAI,GAAGC,MAAM,CAAC;EACpD,CAAC;EACD;EACA3B,MAAM,CAACI,SAAS,CAACiB,WAAW,GAAG,UAAUO,KAAK,EAAEf,GAAG,EAAEO,QAAQ,EAAEN,MAAM,EAAE;IACnE,IAAIE,KAAK,GAAG,IAAI;IAChB;IACA,IAAIQ,KAAK,GAAG,IAAI,CAACK,cAAc,CAAChB,GAAG,EAAEO,QAAQ,EAAEN,MAAM,CAAC;IACtDtB,CAAC,CAAC0B,IAAI,CAACU,KAAK,EAAE,UAAUT,IAAI,EAAE;MAC1BA,IAAI,CAACN,GAAG,CAAC,GAAGG,KAAK,CAACO,eAAe,CAACC,KAAK,CAAC,CAAC,CAAC;IAC9C,CAAC,CAAC;;IACF,OAAOI,KAAK;EAChB,CAAC;EACD,OAAO5B,MAAM;AACjB,CAAC,CAACN,MAAM,CAAE;AACV,eAAeM,MAAM","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}