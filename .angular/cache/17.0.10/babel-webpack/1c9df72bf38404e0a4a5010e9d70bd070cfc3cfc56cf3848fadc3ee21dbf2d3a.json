{"ast":null,"code":"import { __assign, __awaiter, __generator, __read, __spreadArray } from \"tslib\";\nimport { deepMix, each, get, isArray, isFunction, isNil, isNumber, isUndefined } from '@antv/util';\nimport { FIELD_ORIGIN } from '../../constant';\nimport { getDefaultAnimateCfg } from '../../animate';\nimport { getPolygonCentroid } from '../../util/graphics';\nimport Labels from '../../component/labels';\nfunction avg(arr) {\n  var sum = 0;\n  each(arr, function (value) {\n    sum += value;\n  });\n  return sum / arr.length;\n}\n/**\n * Geometry Label 基类，用于生成 Geometry 下所有 label 的配置项信息\n */\nvar GeometryLabel = /** @class */function () {\n  function GeometryLabel(geometry) {\n    this.geometry = geometry;\n  }\n  GeometryLabel.prototype.getLabelItems = function (mapppingArray) {\n    var _this = this;\n    var items = [];\n    var labelCfgs = this.getLabelCfgs(mapppingArray);\n    // 获取 label 相关的 x，y 的值，获取具体的 x, y，防止存在数组\n    each(mapppingArray, function (mappingData, index) {\n      var labelCfg = labelCfgs[index];\n      if (!labelCfg || isNil(mappingData.x) || isNil(mappingData.y)) {\n        items.push(null);\n        return;\n      }\n      var labelContent = !isArray(labelCfg.content) ? [labelCfg.content] : labelCfg.content;\n      labelCfg.content = labelContent;\n      var total = labelContent.length;\n      each(labelContent, function (content, subIndex) {\n        if (isNil(content) || content === '') {\n          items.push(null);\n          return;\n        }\n        var item = __assign(__assign({}, labelCfg), _this.getLabelPoint(labelCfg, mappingData, subIndex));\n        if (!item.textAlign) {\n          item.textAlign = _this.getLabelAlign(item, subIndex, total);\n        }\n        if (item.offset <= 0) {\n          item.labelLine = null;\n        }\n        items.push(item);\n      });\n    });\n    return items;\n  };\n  GeometryLabel.prototype.render = function (mappingArray, isUpdate) {\n    if (isUpdate === void 0) {\n      isUpdate = false;\n    }\n    return __awaiter(this, void 0, void 0, function () {\n      var labelItems, labelsRenderer, shapes;\n      return __generator(this, function (_a) {\n        switch (_a.label) {\n          case 0:\n            labelItems = this.getLabelItems(mappingArray);\n            labelsRenderer = this.getLabelsRenderer();\n            shapes = this.getGeometryShapes();\n            // 渲染文本\n            return [4 /*yield*/, labelsRenderer.render(labelItems, shapes, isUpdate)];\n          case 1:\n            // 渲染文本\n            _a.sent();\n            return [2 /*return*/];\n        }\n      });\n    });\n  };\n\n  GeometryLabel.prototype.clear = function () {\n    var labelsRenderer = this.labelsRenderer;\n    if (labelsRenderer) {\n      labelsRenderer.clear();\n    }\n  };\n  GeometryLabel.prototype.destroy = function () {\n    var labelsRenderer = this.labelsRenderer;\n    if (labelsRenderer) {\n      labelsRenderer.destroy();\n    }\n    this.labelsRenderer = null;\n  };\n  // geometry 更新之后，对应的 Coordinate 也会更新，为了获取到最新鲜的 Coordinate，故使用方法获取\n  GeometryLabel.prototype.getCoordinate = function () {\n    return this.geometry.coordinate;\n  };\n  /**\n   * 获取 label 的默认配置\n   */\n  GeometryLabel.prototype.getDefaultLabelCfg = function (offset, position) {\n    var geometry = this.geometry;\n    var type = geometry.type,\n      theme = geometry.theme;\n    if (type === 'polygon' || type === 'interval' && position === 'middle' || offset < 0 && !['line', 'point', 'path'].includes(type)) {\n      // polygon 或者 (interval 且 middle) 或者 offset 小于 0 时，文本展示在图形内部，将其颜色设置为 白色\n      return get(theme, 'innerLabels', {});\n    }\n    return get(theme, 'labels', {});\n  };\n  /**\n   * 获取当前 label 的最终配置\n   * @param labelCfg\n   */\n  GeometryLabel.prototype.getThemedLabelCfg = function (labelCfg) {\n    var geometry = this.geometry;\n    var defaultLabelCfg = this.getDefaultLabelCfg();\n    var type = geometry.type,\n      theme = geometry.theme;\n    var themedLabelCfg;\n    if (type === 'polygon' || labelCfg.offset < 0 && !['line', 'point', 'path'].includes(type)) {\n      // polygon 或者 offset 小于 0 时，文本展示在图形内部，将其颜色设置为 白色\n      themedLabelCfg = deepMix({}, defaultLabelCfg, theme.innerLabels, labelCfg);\n    } else {\n      themedLabelCfg = deepMix({}, defaultLabelCfg, theme.labels, labelCfg);\n    }\n    return themedLabelCfg;\n  };\n  /**\n   * 设置 label 位置\n   * @param labelPointCfg\n   * @param mappingData\n   * @param index\n   * @param position\n   */\n  GeometryLabel.prototype.setLabelPosition = function (labelPointCfg, mappingData, index, position) {};\n  /**\n   * @desc 获取 label offset\n   */\n  GeometryLabel.prototype.getLabelOffset = function (offset) {\n    var coordinate = this.getCoordinate();\n    var vector = this.getOffsetVector(offset);\n    return coordinate.isTransposed ? vector[0] : vector[1];\n  };\n  /**\n   * 获取每个 label 的偏移量 (矢量)\n   * @param labelCfg\n   * @param index\n   * @param total\n   * @return {Point} offsetPoint\n   */\n  GeometryLabel.prototype.getLabelOffsetPoint = function (labelCfg, index, total) {\n    var offset = labelCfg.offset;\n    var coordinate = this.getCoordinate();\n    var transposed = coordinate.isTransposed;\n    var dim = transposed ? 'x' : 'y';\n    var factor = transposed ? 1 : -1; // y 方向上越大，像素的坐标越小，所以transposed时将系数变成\n    var offsetPoint = {\n      x: 0,\n      y: 0\n    };\n    if (index > 0 || total === 1) {\n      // 判断是否小于0\n      offsetPoint[dim] = offset * factor;\n    } else {\n      offsetPoint[dim] = offset * factor * -1;\n    }\n    return offsetPoint;\n  };\n  /**\n   * 获取每个 label 的位置\n   * @param labelCfg\n   * @param mappingData\n   * @param index\n   * @returns label point\n   */\n  GeometryLabel.prototype.getLabelPoint = function (labelCfg, mappingData, index) {\n    var coordinate = this.getCoordinate();\n    var total = labelCfg.content.length;\n    function getDimValue(value, idx, isAvg) {\n      if (isAvg === void 0) {\n        isAvg = false;\n      }\n      var v = value;\n      if (isArray(v)) {\n        if (labelCfg.content.length === 1) {\n          if (isAvg) {\n            v = avg(v);\n          } else {\n            // 如果仅一个 label，多个 y, 取最后一个 y\n            if (v.length <= 2) {\n              v = v[value.length - 1];\n            } else {\n              v = avg(v);\n            }\n          }\n        } else {\n          v = v[idx];\n        }\n      }\n      return v;\n    }\n    var label = {\n      content: labelCfg.content[index],\n      x: 0,\n      y: 0,\n      start: {\n        x: 0,\n        y: 0\n      },\n      color: '#fff'\n    };\n    var shape = isArray(mappingData.shape) ? mappingData.shape[0] : mappingData.shape;\n    var isFunnel = shape === 'funnel' || shape === 'pyramid';\n    // 多边形场景，多用于地图\n    if (this.geometry.type === 'polygon') {\n      var centroid = getPolygonCentroid(mappingData.x, mappingData.y);\n      label.x = centroid[0];\n      label.y = centroid[1];\n    } else if (this.geometry.type === 'interval' && !isFunnel) {\n      // 对直方图的label X 方向的位置居中\n      label.x = getDimValue(mappingData.x, index, true);\n      label.y = getDimValue(mappingData.y, index);\n    } else {\n      label.x = getDimValue(mappingData.x, index);\n      label.y = getDimValue(mappingData.y, index);\n    }\n    // 处理漏斗图文本位置\n    if (isFunnel) {\n      var nextPoints = get(mappingData, 'nextPoints');\n      var points = get(mappingData, 'points');\n      if (nextPoints) {\n        // 非漏斗图底部\n        var point1 = coordinate.convert(points[1]);\n        var point2 = coordinate.convert(nextPoints[1]);\n        label.x = (point1.x + point2.x) / 2;\n        label.y = (point1.y + point2.y) / 2;\n      } else if (shape === 'pyramid') {\n        var point1 = coordinate.convert(points[1]);\n        var point2 = coordinate.convert(points[2]);\n        label.x = (point1.x + point2.x) / 2;\n        label.y = (point1.y + point2.y) / 2;\n      }\n    }\n    if (labelCfg.position) {\n      // 如果 label 支持 position 属性\n      this.setLabelPosition(label, mappingData, index, labelCfg.position);\n    }\n    var offsetPoint = this.getLabelOffsetPoint(labelCfg, index, total);\n    label.start = {\n      x: label.x,\n      y: label.y\n    };\n    label.x += offsetPoint.x;\n    label.y += offsetPoint.y;\n    label.color = mappingData.color;\n    return label;\n  };\n  /**\n   * 获取文本的对齐方式\n   * @param item\n   * @param index\n   * @param total\n   * @returns\n   */\n  GeometryLabel.prototype.getLabelAlign = function (item, index, total) {\n    var align = 'center';\n    var coordinate = this.getCoordinate();\n    if (coordinate.isTransposed) {\n      var offset = item.offset;\n      if (offset < 0) {\n        align = 'right';\n      } else if (offset === 0) {\n        align = 'center';\n      } else {\n        align = 'left';\n      }\n      if (total > 1 && index === 0) {\n        if (align === 'right') {\n          align = 'left';\n        } else if (align === 'left') {\n          align = 'right';\n        }\n      }\n    }\n    return align;\n  };\n  /**\n   * 获取每一个 label 的唯一 id\n   * @param mappingData label 对应的图形的绘制数据\n   */\n  GeometryLabel.prototype.getLabelId = function (mappingData) {\n    var geometry = this.geometry;\n    var type = geometry.type;\n    var xScale = geometry.getXScale();\n    var yScale = geometry.getYScale();\n    var origin = mappingData[FIELD_ORIGIN]; // 原始数据\n    var labelId = geometry.getElementId(mappingData);\n    if (type === 'line' || type === 'area') {\n      // 折线图以及区域图，一条线会对应一组数据，即多个 labels，为了区分这些 labels，需要在 line id 的前提下加上 x 字段值\n      labelId += \" \".concat(origin[xScale.field]);\n    } else if (type === 'path') {\n      // path 路径图，无序，有可能存在相同 x 不同 y 的情况，需要通过 x y 来确定唯一 id\n      labelId += \" \".concat(origin[xScale.field], \"-\").concat(origin[yScale.field]);\n    }\n    return labelId;\n  };\n  // 获取 labels 组件\n  GeometryLabel.prototype.getLabelsRenderer = function () {\n    var _a = this.geometry,\n      labelsContainer = _a.labelsContainer,\n      labelOption = _a.labelOption,\n      canvasRegion = _a.canvasRegion,\n      animateOption = _a.animateOption;\n    var coordinate = this.geometry.coordinate;\n    var labelsRenderer = this.labelsRenderer;\n    if (!labelsRenderer) {\n      labelsRenderer = new Labels({\n        container: labelsContainer,\n        layout: get(labelOption, ['cfg', 'layout'], {\n          type: this.defaultLayout\n        })\n      });\n      this.labelsRenderer = labelsRenderer;\n    }\n    labelsRenderer.region = canvasRegion;\n    // 设置动画配置，如果 geometry 的动画关闭了，那么 label 的动画也会关闭\n    labelsRenderer.animate = animateOption ? getDefaultAnimateCfg('label', coordinate) : false;\n    return labelsRenderer;\n  };\n  GeometryLabel.prototype.getLabelCfgs = function (mapppingArray) {\n    var _this = this;\n    var geometry = this.geometry;\n    var labelOption = geometry.labelOption,\n      scales = geometry.scales,\n      coordinate = geometry.coordinate;\n    var _a = labelOption,\n      fields = _a.fields,\n      callback = _a.callback,\n      cfg = _a.cfg;\n    var labelScales = fields.map(function (field) {\n      return scales[field];\n    });\n    var labelCfgs = [];\n    each(mapppingArray, function (mappingData, index) {\n      var origin = mappingData[FIELD_ORIGIN]; // 原始数据\n      var originText = _this.getLabelText(origin, labelScales);\n      var callbackCfg;\n      if (callback) {\n        // 当同时配置了 callback 和 cfg 时，以 callback 为准\n        var originValues = fields.map(function (field) {\n          return origin[field];\n        });\n        callbackCfg = callback.apply(void 0, __spreadArray([], __read(originValues), false));\n        if (isNil(callbackCfg)) {\n          labelCfgs.push(null);\n          return;\n        }\n      }\n      var labelCfg = __assign(__assign({\n        id: _this.getLabelId(mappingData),\n        elementId: _this.geometry.getElementId(mappingData),\n        data: origin,\n        // 存储原始数据\n        mappingData: mappingData,\n        // 存储映射后的数据,\n        coordinate: coordinate\n      }, cfg), callbackCfg);\n      if (isFunction(labelCfg.position)) {\n        labelCfg.position = labelCfg.position(origin, mappingData, index);\n      }\n      var offset = _this.getLabelOffset(labelCfg.offset || 0);\n      // defaultCfg 需要判断 innerLabels & labels\n      var defaultLabelCfg = _this.getDefaultLabelCfg(offset, labelCfg.position);\n      // labelCfg priority: defaultCfg < cfg < callbackCfg\n      labelCfg = deepMix({}, defaultLabelCfg, labelCfg);\n      // 获取最终的 offset\n      labelCfg.offset = _this.getLabelOffset(labelCfg.offset || 0);\n      var content = labelCfg.content;\n      if (isFunction(content)) {\n        labelCfg.content = content(origin, mappingData, index);\n      } else if (isUndefined(content)) {\n        // 用户未配置 content，则默认为映射的第一个字段的值\n        labelCfg.content = originText[0];\n      }\n      labelCfgs.push(labelCfg);\n    });\n    return labelCfgs;\n  };\n  GeometryLabel.prototype.getLabelText = function (origin, scales) {\n    var labelTexts = [];\n    each(scales, function (scale) {\n      var value = origin[scale.field];\n      if (isArray(value)) {\n        value = value.map(function (subVal) {\n          return scale.getText(subVal);\n        });\n      } else {\n        value = scale.getText(value);\n      }\n      if (isNil(value) || value === '') {\n        labelTexts.push(null);\n      } else {\n        labelTexts.push(value);\n      }\n    });\n    return labelTexts;\n  };\n  GeometryLabel.prototype.getOffsetVector = function (offset) {\n    if (offset === void 0) {\n      offset = 0;\n    }\n    var coordinate = this.getCoordinate();\n    var actualOffset = 0;\n    if (isNumber(offset)) {\n      actualOffset = offset;\n    }\n    // 如果 x,y 翻转，则偏移 x，否则偏移 y\n    return coordinate.isTransposed ? coordinate.applyMatrix(actualOffset, 0) : coordinate.applyMatrix(0, actualOffset);\n  };\n  GeometryLabel.prototype.getGeometryShapes = function () {\n    var geometry = this.geometry;\n    var shapes = {};\n    each(geometry.elementsMap, function (element, id) {\n      shapes[id] = element.shape;\n    });\n    // 因为有可能 shape 还在进行动画，导致 shape.getBBox() 获取到的值不是最终态，所以需要从 offscreenGroup 获取\n    each(geometry.getOffscreenGroup().getChildren(), function (child) {\n      var id = geometry.getElementId(child.get('origin').mappingData);\n      shapes[id] = child;\n    });\n    return shapes;\n  };\n  return GeometryLabel;\n}();\nexport default GeometryLabel;","map":{"version":3,"names":["__assign","__awaiter","__generator","__read","__spreadArray","deepMix","each","get","isArray","isFunction","isNil","isNumber","isUndefined","FIELD_ORIGIN","getDefaultAnimateCfg","getPolygonCentroid","Labels","avg","arr","sum","value","length","GeometryLabel","geometry","prototype","getLabelItems","mapppingArray","_this","items","labelCfgs","getLabelCfgs","mappingData","index","labelCfg","x","y","push","labelContent","content","total","subIndex","item","getLabelPoint","textAlign","getLabelAlign","offset","labelLine","render","mappingArray","isUpdate","labelItems","labelsRenderer","shapes","_a","label","getLabelsRenderer","getGeometryShapes","sent","clear","destroy","getCoordinate","coordinate","getDefaultLabelCfg","position","type","theme","includes","getThemedLabelCfg","defaultLabelCfg","themedLabelCfg","innerLabels","labels","setLabelPosition","labelPointCfg","getLabelOffset","vector","getOffsetVector","isTransposed","getLabelOffsetPoint","transposed","dim","factor","offsetPoint","getDimValue","idx","isAvg","v","start","color","shape","isFunnel","centroid","nextPoints","points","point1","convert","point2","align","getLabelId","xScale","getXScale","yScale","getYScale","origin","labelId","getElementId","concat","field","labelsContainer","labelOption","canvasRegion","animateOption","container","layout","defaultLayout","region","animate","scales","fields","callback","cfg","labelScales","map","originText","getLabelText","callbackCfg","originValues","apply","id","elementId","data","labelTexts","scale","subVal","getText","actualOffset","applyMatrix","elementsMap","element","getOffscreenGroup","getChildren","child"],"sources":["/Users/obiechina/Documents/ridy-flutter-full-taxi-solution 2/node_modules/@antv/g2/esm/geometry/label/base.js"],"sourcesContent":["import { __assign, __awaiter, __generator, __read, __spreadArray } from \"tslib\";\nimport { deepMix, each, get, isArray, isFunction, isNil, isNumber, isUndefined } from '@antv/util';\nimport { FIELD_ORIGIN } from '../../constant';\nimport { getDefaultAnimateCfg } from '../../animate';\nimport { getPolygonCentroid } from '../../util/graphics';\nimport Labels from '../../component/labels';\nfunction avg(arr) {\n    var sum = 0;\n    each(arr, function (value) {\n        sum += value;\n    });\n    return sum / arr.length;\n}\n/**\n * Geometry Label 基类，用于生成 Geometry 下所有 label 的配置项信息\n */\nvar GeometryLabel = /** @class */ (function () {\n    function GeometryLabel(geometry) {\n        this.geometry = geometry;\n    }\n    GeometryLabel.prototype.getLabelItems = function (mapppingArray) {\n        var _this = this;\n        var items = [];\n        var labelCfgs = this.getLabelCfgs(mapppingArray);\n        // 获取 label 相关的 x，y 的值，获取具体的 x, y，防止存在数组\n        each(mapppingArray, function (mappingData, index) {\n            var labelCfg = labelCfgs[index];\n            if (!labelCfg || isNil(mappingData.x) || isNil(mappingData.y)) {\n                items.push(null);\n                return;\n            }\n            var labelContent = !isArray(labelCfg.content) ? [labelCfg.content] : labelCfg.content;\n            labelCfg.content = labelContent;\n            var total = labelContent.length;\n            each(labelContent, function (content, subIndex) {\n                if (isNil(content) || content === '') {\n                    items.push(null);\n                    return;\n                }\n                var item = __assign(__assign({}, labelCfg), _this.getLabelPoint(labelCfg, mappingData, subIndex));\n                if (!item.textAlign) {\n                    item.textAlign = _this.getLabelAlign(item, subIndex, total);\n                }\n                if (item.offset <= 0) {\n                    item.labelLine = null;\n                }\n                items.push(item);\n            });\n        });\n        return items;\n    };\n    GeometryLabel.prototype.render = function (mappingArray, isUpdate) {\n        if (isUpdate === void 0) { isUpdate = false; }\n        return __awaiter(this, void 0, void 0, function () {\n            var labelItems, labelsRenderer, shapes;\n            return __generator(this, function (_a) {\n                switch (_a.label) {\n                    case 0:\n                        labelItems = this.getLabelItems(mappingArray);\n                        labelsRenderer = this.getLabelsRenderer();\n                        shapes = this.getGeometryShapes();\n                        // 渲染文本\n                        return [4 /*yield*/, labelsRenderer.render(labelItems, shapes, isUpdate)];\n                    case 1:\n                        // 渲染文本\n                        _a.sent();\n                        return [2 /*return*/];\n                }\n            });\n        });\n    };\n    GeometryLabel.prototype.clear = function () {\n        var labelsRenderer = this.labelsRenderer;\n        if (labelsRenderer) {\n            labelsRenderer.clear();\n        }\n    };\n    GeometryLabel.prototype.destroy = function () {\n        var labelsRenderer = this.labelsRenderer;\n        if (labelsRenderer) {\n            labelsRenderer.destroy();\n        }\n        this.labelsRenderer = null;\n    };\n    // geometry 更新之后，对应的 Coordinate 也会更新，为了获取到最新鲜的 Coordinate，故使用方法获取\n    GeometryLabel.prototype.getCoordinate = function () {\n        return this.geometry.coordinate;\n    };\n    /**\n     * 获取 label 的默认配置\n     */\n    GeometryLabel.prototype.getDefaultLabelCfg = function (offset, position) {\n        var geometry = this.geometry;\n        var type = geometry.type, theme = geometry.theme;\n        if (type === 'polygon' ||\n            (type === 'interval' && position === 'middle') ||\n            (offset < 0 && !['line', 'point', 'path'].includes(type))) {\n            // polygon 或者 (interval 且 middle) 或者 offset 小于 0 时，文本展示在图形内部，将其颜色设置为 白色\n            return get(theme, 'innerLabels', {});\n        }\n        return get(theme, 'labels', {});\n    };\n    /**\n     * 获取当前 label 的最终配置\n     * @param labelCfg\n     */\n    GeometryLabel.prototype.getThemedLabelCfg = function (labelCfg) {\n        var geometry = this.geometry;\n        var defaultLabelCfg = this.getDefaultLabelCfg();\n        var type = geometry.type, theme = geometry.theme;\n        var themedLabelCfg;\n        if (type === 'polygon' || (labelCfg.offset < 0 && !['line', 'point', 'path'].includes(type))) {\n            // polygon 或者 offset 小于 0 时，文本展示在图形内部，将其颜色设置为 白色\n            themedLabelCfg = deepMix({}, defaultLabelCfg, theme.innerLabels, labelCfg);\n        }\n        else {\n            themedLabelCfg = deepMix({}, defaultLabelCfg, theme.labels, labelCfg);\n        }\n        return themedLabelCfg;\n    };\n    /**\n     * 设置 label 位置\n     * @param labelPointCfg\n     * @param mappingData\n     * @param index\n     * @param position\n     */\n    GeometryLabel.prototype.setLabelPosition = function (labelPointCfg, mappingData, index, position) { };\n    /**\n     * @desc 获取 label offset\n     */\n    GeometryLabel.prototype.getLabelOffset = function (offset) {\n        var coordinate = this.getCoordinate();\n        var vector = this.getOffsetVector(offset);\n        return coordinate.isTransposed ? vector[0] : vector[1];\n    };\n    /**\n     * 获取每个 label 的偏移量 (矢量)\n     * @param labelCfg\n     * @param index\n     * @param total\n     * @return {Point} offsetPoint\n     */\n    GeometryLabel.prototype.getLabelOffsetPoint = function (labelCfg, index, total) {\n        var offset = labelCfg.offset;\n        var coordinate = this.getCoordinate();\n        var transposed = coordinate.isTransposed;\n        var dim = transposed ? 'x' : 'y';\n        var factor = transposed ? 1 : -1; // y 方向上越大，像素的坐标越小，所以transposed时将系数变成\n        var offsetPoint = {\n            x: 0,\n            y: 0,\n        };\n        if (index > 0 || total === 1) {\n            // 判断是否小于0\n            offsetPoint[dim] = offset * factor;\n        }\n        else {\n            offsetPoint[dim] = offset * factor * -1;\n        }\n        return offsetPoint;\n    };\n    /**\n     * 获取每个 label 的位置\n     * @param labelCfg\n     * @param mappingData\n     * @param index\n     * @returns label point\n     */\n    GeometryLabel.prototype.getLabelPoint = function (labelCfg, mappingData, index) {\n        var coordinate = this.getCoordinate();\n        var total = labelCfg.content.length;\n        function getDimValue(value, idx, isAvg) {\n            if (isAvg === void 0) { isAvg = false; }\n            var v = value;\n            if (isArray(v)) {\n                if (labelCfg.content.length === 1) {\n                    if (isAvg) {\n                        v = avg(v);\n                    }\n                    else {\n                        // 如果仅一个 label，多个 y, 取最后一个 y\n                        if (v.length <= 2) {\n                            v = v[value.length - 1];\n                        }\n                        else {\n                            v = avg(v);\n                        }\n                    }\n                }\n                else {\n                    v = v[idx];\n                }\n            }\n            return v;\n        }\n        var label = {\n            content: labelCfg.content[index],\n            x: 0,\n            y: 0,\n            start: { x: 0, y: 0 },\n            color: '#fff',\n        };\n        var shape = isArray(mappingData.shape) ? mappingData.shape[0] : mappingData.shape;\n        var isFunnel = shape === 'funnel' || shape === 'pyramid';\n        // 多边形场景，多用于地图\n        if (this.geometry.type === 'polygon') {\n            var centroid = getPolygonCentroid(mappingData.x, mappingData.y);\n            label.x = centroid[0];\n            label.y = centroid[1];\n        }\n        else if (this.geometry.type === 'interval' && !isFunnel) {\n            // 对直方图的label X 方向的位置居中\n            label.x = getDimValue(mappingData.x, index, true);\n            label.y = getDimValue(mappingData.y, index);\n        }\n        else {\n            label.x = getDimValue(mappingData.x, index);\n            label.y = getDimValue(mappingData.y, index);\n        }\n        // 处理漏斗图文本位置\n        if (isFunnel) {\n            var nextPoints = get(mappingData, 'nextPoints');\n            var points = get(mappingData, 'points');\n            if (nextPoints) {\n                // 非漏斗图底部\n                var point1 = coordinate.convert(points[1]);\n                var point2 = coordinate.convert(nextPoints[1]);\n                label.x = (point1.x + point2.x) / 2;\n                label.y = (point1.y + point2.y) / 2;\n            }\n            else if (shape === 'pyramid') {\n                var point1 = coordinate.convert(points[1]);\n                var point2 = coordinate.convert(points[2]);\n                label.x = (point1.x + point2.x) / 2;\n                label.y = (point1.y + point2.y) / 2;\n            }\n        }\n        if (labelCfg.position) {\n            // 如果 label 支持 position 属性\n            this.setLabelPosition(label, mappingData, index, labelCfg.position);\n        }\n        var offsetPoint = this.getLabelOffsetPoint(labelCfg, index, total);\n        label.start = { x: label.x, y: label.y };\n        label.x += offsetPoint.x;\n        label.y += offsetPoint.y;\n        label.color = mappingData.color;\n        return label;\n    };\n    /**\n     * 获取文本的对齐方式\n     * @param item\n     * @param index\n     * @param total\n     * @returns\n     */\n    GeometryLabel.prototype.getLabelAlign = function (item, index, total) {\n        var align = 'center';\n        var coordinate = this.getCoordinate();\n        if (coordinate.isTransposed) {\n            var offset = item.offset;\n            if (offset < 0) {\n                align = 'right';\n            }\n            else if (offset === 0) {\n                align = 'center';\n            }\n            else {\n                align = 'left';\n            }\n            if (total > 1 && index === 0) {\n                if (align === 'right') {\n                    align = 'left';\n                }\n                else if (align === 'left') {\n                    align = 'right';\n                }\n            }\n        }\n        return align;\n    };\n    /**\n     * 获取每一个 label 的唯一 id\n     * @param mappingData label 对应的图形的绘制数据\n     */\n    GeometryLabel.prototype.getLabelId = function (mappingData) {\n        var geometry = this.geometry;\n        var type = geometry.type;\n        var xScale = geometry.getXScale();\n        var yScale = geometry.getYScale();\n        var origin = mappingData[FIELD_ORIGIN]; // 原始数据\n        var labelId = geometry.getElementId(mappingData);\n        if (type === 'line' || type === 'area') {\n            // 折线图以及区域图，一条线会对应一组数据，即多个 labels，为了区分这些 labels，需要在 line id 的前提下加上 x 字段值\n            labelId += \" \".concat(origin[xScale.field]);\n        }\n        else if (type === 'path') {\n            // path 路径图，无序，有可能存在相同 x 不同 y 的情况，需要通过 x y 来确定唯一 id\n            labelId += \" \".concat(origin[xScale.field], \"-\").concat(origin[yScale.field]);\n        }\n        return labelId;\n    };\n    // 获取 labels 组件\n    GeometryLabel.prototype.getLabelsRenderer = function () {\n        var _a = this.geometry, labelsContainer = _a.labelsContainer, labelOption = _a.labelOption, canvasRegion = _a.canvasRegion, animateOption = _a.animateOption;\n        var coordinate = this.geometry.coordinate;\n        var labelsRenderer = this.labelsRenderer;\n        if (!labelsRenderer) {\n            labelsRenderer = new Labels({\n                container: labelsContainer,\n                layout: get(labelOption, ['cfg', 'layout'], {\n                    type: this.defaultLayout,\n                }),\n            });\n            this.labelsRenderer = labelsRenderer;\n        }\n        labelsRenderer.region = canvasRegion;\n        // 设置动画配置，如果 geometry 的动画关闭了，那么 label 的动画也会关闭\n        labelsRenderer.animate = animateOption ? getDefaultAnimateCfg('label', coordinate) : false;\n        return labelsRenderer;\n    };\n    GeometryLabel.prototype.getLabelCfgs = function (mapppingArray) {\n        var _this = this;\n        var geometry = this.geometry;\n        var labelOption = geometry.labelOption, scales = geometry.scales, coordinate = geometry.coordinate;\n        var _a = labelOption, fields = _a.fields, callback = _a.callback, cfg = _a.cfg;\n        var labelScales = fields.map(function (field) {\n            return scales[field];\n        });\n        var labelCfgs = [];\n        each(mapppingArray, function (mappingData, index) {\n            var origin = mappingData[FIELD_ORIGIN]; // 原始数据\n            var originText = _this.getLabelText(origin, labelScales);\n            var callbackCfg;\n            if (callback) {\n                // 当同时配置了 callback 和 cfg 时，以 callback 为准\n                var originValues = fields.map(function (field) { return origin[field]; });\n                callbackCfg = callback.apply(void 0, __spreadArray([], __read(originValues), false));\n                if (isNil(callbackCfg)) {\n                    labelCfgs.push(null);\n                    return;\n                }\n            }\n            var labelCfg = __assign(__assign({ id: _this.getLabelId(mappingData), elementId: _this.geometry.getElementId(mappingData), data: origin, // 存储原始数据\n                mappingData: mappingData, // 存储映射后的数据,\n                coordinate: coordinate }, cfg), callbackCfg);\n            if (isFunction(labelCfg.position)) {\n                labelCfg.position = labelCfg.position(origin, mappingData, index);\n            }\n            var offset = _this.getLabelOffset(labelCfg.offset || 0);\n            // defaultCfg 需要判断 innerLabels & labels\n            var defaultLabelCfg = _this.getDefaultLabelCfg(offset, labelCfg.position);\n            // labelCfg priority: defaultCfg < cfg < callbackCfg\n            labelCfg = deepMix({}, defaultLabelCfg, labelCfg);\n            // 获取最终的 offset\n            labelCfg.offset = _this.getLabelOffset(labelCfg.offset || 0);\n            var content = labelCfg.content;\n            if (isFunction(content)) {\n                labelCfg.content = content(origin, mappingData, index);\n            }\n            else if (isUndefined(content)) {\n                // 用户未配置 content，则默认为映射的第一个字段的值\n                labelCfg.content = originText[0];\n            }\n            labelCfgs.push(labelCfg);\n        });\n        return labelCfgs;\n    };\n    GeometryLabel.prototype.getLabelText = function (origin, scales) {\n        var labelTexts = [];\n        each(scales, function (scale) {\n            var value = origin[scale.field];\n            if (isArray(value)) {\n                value = value.map(function (subVal) {\n                    return scale.getText(subVal);\n                });\n            }\n            else {\n                value = scale.getText(value);\n            }\n            if (isNil(value) || value === '') {\n                labelTexts.push(null);\n            }\n            else {\n                labelTexts.push(value);\n            }\n        });\n        return labelTexts;\n    };\n    GeometryLabel.prototype.getOffsetVector = function (offset) {\n        if (offset === void 0) { offset = 0; }\n        var coordinate = this.getCoordinate();\n        var actualOffset = 0;\n        if (isNumber(offset)) {\n            actualOffset = offset;\n        }\n        // 如果 x,y 翻转，则偏移 x，否则偏移 y\n        return coordinate.isTransposed ? coordinate.applyMatrix(actualOffset, 0) : coordinate.applyMatrix(0, actualOffset);\n    };\n    GeometryLabel.prototype.getGeometryShapes = function () {\n        var geometry = this.geometry;\n        var shapes = {};\n        each(geometry.elementsMap, function (element, id) {\n            shapes[id] = element.shape;\n        });\n        // 因为有可能 shape 还在进行动画，导致 shape.getBBox() 获取到的值不是最终态，所以需要从 offscreenGroup 获取\n        each(geometry.getOffscreenGroup().getChildren(), function (child) {\n            var id = geometry.getElementId(child.get('origin').mappingData);\n            shapes[id] = child;\n        });\n        return shapes;\n    };\n    return GeometryLabel;\n}());\nexport default GeometryLabel;\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}