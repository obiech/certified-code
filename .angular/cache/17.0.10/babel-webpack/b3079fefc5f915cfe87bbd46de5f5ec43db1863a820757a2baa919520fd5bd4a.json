{"ast":null,"code":"import { __read } from \"tslib\";\nimport { deepMix, each, every, get, isNil, isNumber } from '@antv/util';\nimport { LAYER } from '../constant';\nimport { getAxisOption } from '../util/axis';\n/**\n * facet 基类\n *  - 定义生命周期，方便自定义 facet\n *  - 提供基础的生命流程方法\n *\n * 生命周期：\n *\n * 初始化 init\n * 1. 初始化容器\n * 2. 数据分面，生成分面布局信息\n *\n * 渲染阶段 render\n * 1. view 创建\n * 2. title\n * 3. axis\n *\n * 清除阶段 clear\n * 1. 清除 view\n *\n * 销毁阶段 destroy\n * 1. clear\n * 2. 清除事件\n * 3. 清除 group\n */\nvar Facet = /** @class */function () {\n  function Facet(view, cfg) {\n    /** 是否销毁 */\n    this.destroyed = false;\n    /** 分面之后的所有分面数据结构 */\n    this.facets = [];\n    this.view = view;\n    this.cfg = deepMix({}, this.getDefaultCfg(), cfg);\n  }\n  /**\n   * 初始化过程\n   */\n  Facet.prototype.init = function () {\n    // 初始化容器\n    if (!this.container) {\n      this.container = this.createContainer();\n    }\n    // 生成分面布局信息\n    var data = this.view.getData();\n    this.facets = this.generateFacets(data);\n  };\n  /**\n   * 渲染分面，由上层 view 调用。包括：\n   *  - 分面 view\n   *  - 轴\n   *  - title\n   *\n   *  子类可以复写，添加一些其他组件，比如滚动条等\n   */\n  Facet.prototype.render = function () {\n    this.renderViews();\n  };\n  /**\n   * 更新 facet\n   */\n  Facet.prototype.update = function () {\n    // 其实不用做任何事情，因为 facet 最终生成的 View 和 Geometry 都在父 view 的更新中处理了\n  };\n  /**\n   * 清空，clear 之后如果还需要使用，需要重新调用 init 初始化过程\n   * 一般在数据有变更的时候调用，重新进行数据的分面逻辑\n   */\n  Facet.prototype.clear = function () {\n    this.clearFacetViews();\n  };\n  /**\n   * 销毁\n   */\n  Facet.prototype.destroy = function () {\n    this.clear();\n    if (this.container) {\n      this.container.remove(true);\n      this.container = undefined;\n    }\n    this.destroyed = true;\n    this.view = undefined;\n    this.facets = [];\n  };\n  /**\n   * 根据 facet 生成 view，可以给上层自定义使用\n   * @param facet\n   */\n  Facet.prototype.facetToView = function (facet) {\n    var region = facet.region,\n      data = facet.data,\n      _a = facet.padding,\n      padding = _a === void 0 ? this.cfg.padding : _a;\n    var view = this.view.createView({\n      region: region,\n      padding: padding\n    });\n    // 设置分面的数据\n    view.data(data || []);\n    facet.view = view;\n    // 前置钩子\n    this.beforeEachView(view, facet);\n    var eachView = this.cfg.eachView;\n    if (eachView) {\n      eachView(view, facet);\n    }\n    // 后置钩子\n    this.afterEachView(view, facet);\n    return view;\n  };\n  // 创建容器\n  Facet.prototype.createContainer = function () {\n    var foregroundGroup = this.view.getLayer(LAYER.FORE);\n    return foregroundGroup.addGroup();\n  };\n  /**\n   * 初始化 view\n   */\n  Facet.prototype.renderViews = function () {\n    this.createFacetViews();\n  };\n  /**\n   * 创建 分面 view\n   */\n  Facet.prototype.createFacetViews = function () {\n    var _this = this;\n    // 使用分面数据 创建分面 view\n    return this.facets.map(function (facet) {\n      return _this.facetToView(facet);\n    });\n  };\n  /**\n   * 从 view 中清除 facetView\n   */\n  Facet.prototype.clearFacetViews = function () {\n    var _this = this;\n    // 从 view 中移除分面 view\n    each(this.facets, function (facet) {\n      if (facet.view) {\n        _this.view.removeView(facet.view);\n        facet.view = undefined;\n      }\n    });\n  };\n  /**\n   * 解析 spacing\n   */\n  Facet.prototype.parseSpacing = function () {\n    /**\n     * @example\n     *\n     * // 仅使用百分比或像素值\n     * // 横向间隔为 10%，纵向间隔为 10%\n     * ['10%', '10%']\n     * // 横向间隔为 10px，纵向间隔为 10px\n     * [10, 10]\n     *\n     * // 同时使用百分比和像素值\n     * ['10%', 10]\n     * // 横向间隔为 10%，纵向间隔为 10px\n     */\n    var _a = this.view.viewBBox,\n      width = _a.width,\n      height = _a.height;\n    var spacing = this.cfg.spacing;\n    return spacing.map(function (s, idx) {\n      if (isNumber(s)) return s / (idx === 0 ? width : height);else return parseFloat(s) / 100;\n    });\n  };\n  // 其他一些提供给子类使用的方法\n  /**\n   * 获取这个字段对应的所有值，数组\n   * @protected\n   * @param data 数据\n   * @param field 字段名\n   * @return 字段对应的值\n   */\n  Facet.prototype.getFieldValues = function (data, field) {\n    var rst = [];\n    var cache = {};\n    // 去重、去除 Nil 值\n    each(data, function (d) {\n      var value = d[field];\n      if (!isNil(value) && !cache[value]) {\n        rst.push(value);\n        cache[value] = true;\n      }\n    });\n    return rst;\n  };\n  /**\n   * 获得每个分面的 region，平分区域\n   * @param rows row 总数\n   * @param cols col 总数\n   * @param xIndex x 方向 index\n   * @param yIndex y 方向 index\n   */\n  Facet.prototype.getRegion = function (rows, cols, xIndex, yIndex) {\n    var _a = __read(this.parseSpacing(), 2),\n      xSpacing = _a[0],\n      ySpacing = _a[1];\n    // 每两个分面区域横向间隔xSPacing, 纵向间隔ySpacing\n    // 每个分面区域的横纵占比\n    /**\n     * ratio * num + spacing * (num - 1) = 1\n     * => ratio = (1 - (spacing * (num - 1))) / num\n     *          = (1 + spacing) / num - spacing\n     *\n     * num 对应 cols/rows\n     * spacing 对应 xSpacing/ySpacing\n     */\n    var xRatio = (1 + xSpacing) / (cols === 0 ? 1 : cols) - xSpacing;\n    var yRatio = (1 + ySpacing) / (rows === 0 ? 1 : rows) - ySpacing;\n    // 得到第 index 个分面区域百分比位置\n    var start = {\n      x: (xRatio + xSpacing) * xIndex,\n      y: (yRatio + ySpacing) * yIndex\n    };\n    var end = {\n      x: start.x + xRatio,\n      y: start.y + yRatio\n    };\n    return {\n      start: start,\n      end: end\n    };\n  };\n  Facet.prototype.getDefaultCfg = function () {\n    return {\n      eachView: undefined,\n      showTitle: true,\n      spacing: [0, 0],\n      padding: 10,\n      fields: []\n    };\n  };\n  /**\n   * 默认的 title 样式，因为有的分面是 title，有的分面配置是 columnTitle、rowTitle\n   */\n  Facet.prototype.getDefaultTitleCfg = function () {\n    // @ts-ignore\n    var fontFamily = this.view.getTheme().fontFamily;\n    return {\n      style: {\n        fontSize: 14,\n        fill: '#666',\n        fontFamily: fontFamily\n      }\n    };\n  };\n  /**\n   * 处理 axis 的默认配置\n   * @param view\n   * @param facet\n   */\n  Facet.prototype.processAxis = function (view, facet) {\n    var options = view.getOptions();\n    var coordinateOption = options.coordinate;\n    var geometries = view.geometries;\n    var coordinateType = get(coordinateOption, 'type', 'rect');\n    if (coordinateType === 'rect' && geometries.length) {\n      if (isNil(options.axes)) {\n        // @ts-ignore\n        options.axes = {};\n      }\n      var axes = options.axes;\n      var _a = __read(geometries[0].getXYFields(), 2),\n        x = _a[0],\n        y = _a[1];\n      var xOption = getAxisOption(axes, x);\n      var yOption = getAxisOption(axes, y);\n      if (xOption !== false) {\n        options.axes[x] = this.getXAxisOption(x, axes, xOption, facet);\n      }\n      if (yOption !== false) {\n        options.axes[y] = this.getYAxisOption(y, axes, yOption, facet);\n      }\n    }\n  };\n  /**\n   * 获取分面数据\n   * @param conditions\n   */\n  Facet.prototype.getFacetDataFilter = function (conditions) {\n    return function (datum) {\n      // 过滤出全部满足条件的数据\n      return every(conditions, function (condition) {\n        var field = condition.field,\n          value = condition.value;\n        if (!isNil(value) && field) {\n          return datum[field] === value;\n        }\n        return true;\n      });\n    };\n  };\n  return Facet;\n}();\nexport { Facet };","map":{"version":3,"names":["__read","deepMix","each","every","get","isNil","isNumber","LAYER","getAxisOption","Facet","view","cfg","destroyed","facets","getDefaultCfg","prototype","init","container","createContainer","data","getData","generateFacets","render","renderViews","update","clear","clearFacetViews","destroy","remove","undefined","facetToView","facet","region","_a","padding","createView","beforeEachView","eachView","afterEachView","foregroundGroup","getLayer","FORE","addGroup","createFacetViews","_this","map","removeView","parseSpacing","viewBBox","width","height","spacing","s","idx","parseFloat","getFieldValues","field","rst","cache","d","value","push","getRegion","rows","cols","xIndex","yIndex","xSpacing","ySpacing","xRatio","yRatio","start","x","y","end","showTitle","fields","getDefaultTitleCfg","fontFamily","getTheme","style","fontSize","fill","processAxis","options","getOptions","coordinateOption","coordinate","geometries","coordinateType","length","axes","getXYFields","xOption","yOption","getXAxisOption","getYAxisOption","getFacetDataFilter","conditions","datum","condition"],"sources":["/Users/obiechina/Documents/ridy-flutter-full-taxi-solution 2/node_modules/@antv/g2/esm/facet/facet.js"],"sourcesContent":["import { __read } from \"tslib\";\nimport { deepMix, each, every, get, isNil, isNumber } from '@antv/util';\nimport { LAYER } from '../constant';\nimport { getAxisOption } from '../util/axis';\n/**\n * facet 基类\n *  - 定义生命周期，方便自定义 facet\n *  - 提供基础的生命流程方法\n *\n * 生命周期：\n *\n * 初始化 init\n * 1. 初始化容器\n * 2. 数据分面，生成分面布局信息\n *\n * 渲染阶段 render\n * 1. view 创建\n * 2. title\n * 3. axis\n *\n * 清除阶段 clear\n * 1. 清除 view\n *\n * 销毁阶段 destroy\n * 1. clear\n * 2. 清除事件\n * 3. 清除 group\n */\nvar Facet = /** @class */ (function () {\n    function Facet(view, cfg) {\n        /** 是否销毁 */\n        this.destroyed = false;\n        /** 分面之后的所有分面数据结构 */\n        this.facets = [];\n        this.view = view;\n        this.cfg = deepMix({}, this.getDefaultCfg(), cfg);\n    }\n    /**\n     * 初始化过程\n     */\n    Facet.prototype.init = function () {\n        // 初始化容器\n        if (!this.container) {\n            this.container = this.createContainer();\n        }\n        // 生成分面布局信息\n        var data = this.view.getData();\n        this.facets = this.generateFacets(data);\n    };\n    /**\n     * 渲染分面，由上层 view 调用。包括：\n     *  - 分面 view\n     *  - 轴\n     *  - title\n     *\n     *  子类可以复写，添加一些其他组件，比如滚动条等\n     */\n    Facet.prototype.render = function () {\n        this.renderViews();\n    };\n    /**\n     * 更新 facet\n     */\n    Facet.prototype.update = function () {\n        // 其实不用做任何事情，因为 facet 最终生成的 View 和 Geometry 都在父 view 的更新中处理了\n    };\n    /**\n     * 清空，clear 之后如果还需要使用，需要重新调用 init 初始化过程\n     * 一般在数据有变更的时候调用，重新进行数据的分面逻辑\n     */\n    Facet.prototype.clear = function () {\n        this.clearFacetViews();\n    };\n    /**\n     * 销毁\n     */\n    Facet.prototype.destroy = function () {\n        this.clear();\n        if (this.container) {\n            this.container.remove(true);\n            this.container = undefined;\n        }\n        this.destroyed = true;\n        this.view = undefined;\n        this.facets = [];\n    };\n    /**\n     * 根据 facet 生成 view，可以给上层自定义使用\n     * @param facet\n     */\n    Facet.prototype.facetToView = function (facet) {\n        var region = facet.region, data = facet.data, _a = facet.padding, padding = _a === void 0 ? this.cfg.padding : _a;\n        var view = this.view.createView({\n            region: region,\n            padding: padding,\n        });\n        // 设置分面的数据\n        view.data(data || []);\n        facet.view = view;\n        // 前置钩子\n        this.beforeEachView(view, facet);\n        var eachView = this.cfg.eachView;\n        if (eachView) {\n            eachView(view, facet);\n        }\n        // 后置钩子\n        this.afterEachView(view, facet);\n        return view;\n    };\n    // 创建容器\n    Facet.prototype.createContainer = function () {\n        var foregroundGroup = this.view.getLayer(LAYER.FORE);\n        return foregroundGroup.addGroup();\n    };\n    /**\n     * 初始化 view\n     */\n    Facet.prototype.renderViews = function () {\n        this.createFacetViews();\n    };\n    /**\n     * 创建 分面 view\n     */\n    Facet.prototype.createFacetViews = function () {\n        var _this = this;\n        // 使用分面数据 创建分面 view\n        return this.facets.map(function (facet) {\n            return _this.facetToView(facet);\n        });\n    };\n    /**\n     * 从 view 中清除 facetView\n     */\n    Facet.prototype.clearFacetViews = function () {\n        var _this = this;\n        // 从 view 中移除分面 view\n        each(this.facets, function (facet) {\n            if (facet.view) {\n                _this.view.removeView(facet.view);\n                facet.view = undefined;\n            }\n        });\n    };\n    /**\n     * 解析 spacing\n     */\n    Facet.prototype.parseSpacing = function () {\n        /**\n         * @example\n         *\n         * // 仅使用百分比或像素值\n         * // 横向间隔为 10%，纵向间隔为 10%\n         * ['10%', '10%']\n         * // 横向间隔为 10px，纵向间隔为 10px\n         * [10, 10]\n         *\n         * // 同时使用百分比和像素值\n         * ['10%', 10]\n         * // 横向间隔为 10%，纵向间隔为 10px\n         */\n        var _a = this.view.viewBBox, width = _a.width, height = _a.height;\n        var spacing = this.cfg.spacing;\n        return spacing.map(function (s, idx) {\n            if (isNumber(s))\n                return s / (idx === 0 ? width : height);\n            else\n                return parseFloat(s) / 100;\n        });\n    };\n    // 其他一些提供给子类使用的方法\n    /**\n     * 获取这个字段对应的所有值，数组\n     * @protected\n     * @param data 数据\n     * @param field 字段名\n     * @return 字段对应的值\n     */\n    Facet.prototype.getFieldValues = function (data, field) {\n        var rst = [];\n        var cache = {};\n        // 去重、去除 Nil 值\n        each(data, function (d) {\n            var value = d[field];\n            if (!isNil(value) && !cache[value]) {\n                rst.push(value);\n                cache[value] = true;\n            }\n        });\n        return rst;\n    };\n    /**\n     * 获得每个分面的 region，平分区域\n     * @param rows row 总数\n     * @param cols col 总数\n     * @param xIndex x 方向 index\n     * @param yIndex y 方向 index\n     */\n    Facet.prototype.getRegion = function (rows, cols, xIndex, yIndex) {\n        var _a = __read(this.parseSpacing(), 2), xSpacing = _a[0], ySpacing = _a[1];\n        // 每两个分面区域横向间隔xSPacing, 纵向间隔ySpacing\n        // 每个分面区域的横纵占比\n        /**\n         * ratio * num + spacing * (num - 1) = 1\n         * => ratio = (1 - (spacing * (num - 1))) / num\n         *          = (1 + spacing) / num - spacing\n         *\n         * num 对应 cols/rows\n         * spacing 对应 xSpacing/ySpacing\n         */\n        var xRatio = (1 + xSpacing) / (cols === 0 ? 1 : cols) - xSpacing;\n        var yRatio = (1 + ySpacing) / (rows === 0 ? 1 : rows) - ySpacing;\n        // 得到第 index 个分面区域百分比位置\n        var start = {\n            x: (xRatio + xSpacing) * xIndex,\n            y: (yRatio + ySpacing) * yIndex,\n        };\n        var end = {\n            x: start.x + xRatio,\n            y: start.y + yRatio,\n        };\n        return { start: start, end: end };\n    };\n    Facet.prototype.getDefaultCfg = function () {\n        return {\n            eachView: undefined,\n            showTitle: true,\n            spacing: [0, 0],\n            padding: 10,\n            fields: [],\n        };\n    };\n    /**\n     * 默认的 title 样式，因为有的分面是 title，有的分面配置是 columnTitle、rowTitle\n     */\n    Facet.prototype.getDefaultTitleCfg = function () {\n        // @ts-ignore\n        var fontFamily = this.view.getTheme().fontFamily;\n        return {\n            style: {\n                fontSize: 14,\n                fill: '#666',\n                fontFamily: fontFamily,\n            },\n        };\n    };\n    /**\n     * 处理 axis 的默认配置\n     * @param view\n     * @param facet\n     */\n    Facet.prototype.processAxis = function (view, facet) {\n        var options = view.getOptions();\n        var coordinateOption = options.coordinate;\n        var geometries = view.geometries;\n        var coordinateType = get(coordinateOption, 'type', 'rect');\n        if (coordinateType === 'rect' && geometries.length) {\n            if (isNil(options.axes)) {\n                // @ts-ignore\n                options.axes = {};\n            }\n            var axes = options.axes;\n            var _a = __read(geometries[0].getXYFields(), 2), x = _a[0], y = _a[1];\n            var xOption = getAxisOption(axes, x);\n            var yOption = getAxisOption(axes, y);\n            if (xOption !== false) {\n                options.axes[x] = this.getXAxisOption(x, axes, xOption, facet);\n            }\n            if (yOption !== false) {\n                options.axes[y] = this.getYAxisOption(y, axes, yOption, facet);\n            }\n        }\n    };\n    /**\n     * 获取分面数据\n     * @param conditions\n     */\n    Facet.prototype.getFacetDataFilter = function (conditions) {\n        return function (datum) {\n            // 过滤出全部满足条件的数据\n            return every(conditions, function (condition) {\n                var field = condition.field, value = condition.value;\n                if (!isNil(value) && field) {\n                    return datum[field] === value;\n                }\n                return true;\n            });\n        };\n    };\n    return Facet;\n}());\nexport { Facet };\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}