{"ast":null,"code":"import isString from './is-string';\nimport toString from './to-string';\nimport { default as measureTextWidth } from './measure-text-width';\n/**\n * 获取文本的 ... 文本。\n * 算法（减少每次 measureText 的长度，measureText 的性能跟字符串时间相关）：\n * 1. 先通过 STEP 逐步计算，找到最后一个小于 maxWidth 的字符串\n * 2. 然后对最后这个字符串二分计算\n * @param text 需要计算的文本, 由于历史原因 除了支持string，还支持空值,number和数组等\n * @param maxWidth 最大宽度\n * @param font 字体\n * @param str 要替换的文本\n */\nexport default (function (text, maxWidth, font, str) {\n  if (str === void 0) {\n    str = '...';\n  }\n  var STEP = 16; // 每次 16，调参工程师\n  var PLACEHOLDER_WIDTH = measureTextWidth(str, font);\n  var leftText = !isString(text) ? toString(text) : text;\n  var leftWidth = maxWidth;\n  var r = []; // 最终的分段字符串\n  var currentText;\n  var currentWidth;\n  if (measureTextWidth(text, font) <= maxWidth) {\n    return text;\n  }\n  // 首先通过 step 计算，找出最大的未超出长度的\n  // eslint-disable-next-line no-constant-condition\n  while (true) {\n    // 更新字符串\n    currentText = leftText.substr(0, STEP);\n    // 计算宽度\n    currentWidth = measureTextWidth(currentText, font);\n    // 超出剩余宽度，则停止\n    if (currentWidth + PLACEHOLDER_WIDTH > leftWidth) {\n      if (currentWidth > leftWidth) {\n        break;\n      }\n    }\n    r.push(currentText);\n    // 没有超出，则计算剩余宽度\n    leftWidth -= currentWidth;\n    leftText = leftText.substr(STEP);\n    // 字符串整体没有超出\n    if (!leftText) {\n      return r.join('');\n    }\n  }\n  // 最下的最后一个 STEP，使用 1 递增（用二分效果更高）\n  // eslint-disable-next-line no-constant-condition\n  while (true) {\n    // 更新字符串\n    currentText = leftText.substr(0, 1);\n    // 计算宽度\n    currentWidth = measureTextWidth(currentText, font);\n    // 超出剩余宽度，则停止\n    if (currentWidth + PLACEHOLDER_WIDTH > leftWidth) {\n      break;\n    }\n    r.push(currentText);\n    // 没有超出，则计算剩余宽度\n    leftWidth -= currentWidth;\n    leftText = leftText.substr(1);\n    if (!leftText) {\n      return r.join('');\n    }\n  }\n  return \"\" + r.join('') + str;\n});","map":{"version":3,"names":["isString","toString","default","measureTextWidth","text","maxWidth","font","str","STEP","PLACEHOLDER_WIDTH","leftText","leftWidth","r","currentText","currentWidth","substr","push","join"],"sources":["/Users/obiechina/Documents/ridy-flutter-full-taxi-solution 2/node_modules/@antv/util/esm/get-ellipsis-text.js"],"sourcesContent":["import isString from './is-string';\nimport toString from './to-string';\nimport { default as measureTextWidth } from './measure-text-width';\n/**\n * 获取文本的 ... 文本。\n * 算法（减少每次 measureText 的长度，measureText 的性能跟字符串时间相关）：\n * 1. 先通过 STEP 逐步计算，找到最后一个小于 maxWidth 的字符串\n * 2. 然后对最后这个字符串二分计算\n * @param text 需要计算的文本, 由于历史原因 除了支持string，还支持空值,number和数组等\n * @param maxWidth 最大宽度\n * @param font 字体\n * @param str 要替换的文本\n */\nexport default (function (text, maxWidth, font, str) {\n    if (str === void 0) { str = '...'; }\n    var STEP = 16; // 每次 16，调参工程师\n    var PLACEHOLDER_WIDTH = measureTextWidth(str, font);\n    var leftText = !isString(text) ? toString(text) : text;\n    var leftWidth = maxWidth;\n    var r = []; // 最终的分段字符串\n    var currentText;\n    var currentWidth;\n    if (measureTextWidth(text, font) <= maxWidth) {\n        return text;\n    }\n    // 首先通过 step 计算，找出最大的未超出长度的\n    // eslint-disable-next-line no-constant-condition\n    while (true) {\n        // 更新字符串\n        currentText = leftText.substr(0, STEP);\n        // 计算宽度\n        currentWidth = measureTextWidth(currentText, font);\n        // 超出剩余宽度，则停止\n        if (currentWidth + PLACEHOLDER_WIDTH > leftWidth) {\n            if (currentWidth > leftWidth) {\n                break;\n            }\n        }\n        r.push(currentText);\n        // 没有超出，则计算剩余宽度\n        leftWidth -= currentWidth;\n        leftText = leftText.substr(STEP);\n        // 字符串整体没有超出\n        if (!leftText) {\n            return r.join('');\n        }\n    }\n    // 最下的最后一个 STEP，使用 1 递增（用二分效果更高）\n    // eslint-disable-next-line no-constant-condition\n    while (true) {\n        // 更新字符串\n        currentText = leftText.substr(0, 1);\n        // 计算宽度\n        currentWidth = measureTextWidth(currentText, font);\n        // 超出剩余宽度，则停止\n        if (currentWidth + PLACEHOLDER_WIDTH > leftWidth) {\n            break;\n        }\n        r.push(currentText);\n        // 没有超出，则计算剩余宽度\n        leftWidth -= currentWidth;\n        leftText = leftText.substr(1);\n        if (!leftText) {\n            return r.join('');\n        }\n    }\n    return \"\" + r.join('') + str;\n});\n"],"mappings":"AAAA,OAAOA,QAAQ,MAAM,aAAa;AAClC,OAAOC,QAAQ,MAAM,aAAa;AAClC,SAASC,OAAO,IAAIC,gBAAgB,QAAQ,sBAAsB;AAClE;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,gBAAgB,UAAUC,IAAI,EAAEC,QAAQ,EAAEC,IAAI,EAAEC,GAAG,EAAE;EACjD,IAAIA,GAAG,KAAK,KAAK,CAAC,EAAE;IAAEA,GAAG,GAAG,KAAK;EAAE;EACnC,IAAIC,IAAI,GAAG,EAAE,CAAC,CAAC;EACf,IAAIC,iBAAiB,GAAGN,gBAAgB,CAACI,GAAG,EAAED,IAAI,CAAC;EACnD,IAAII,QAAQ,GAAG,CAACV,QAAQ,CAACI,IAAI,CAAC,GAAGH,QAAQ,CAACG,IAAI,CAAC,GAAGA,IAAI;EACtD,IAAIO,SAAS,GAAGN,QAAQ;EACxB,IAAIO,CAAC,GAAG,EAAE,CAAC,CAAC;EACZ,IAAIC,WAAW;EACf,IAAIC,YAAY;EAChB,IAAIX,gBAAgB,CAACC,IAAI,EAAEE,IAAI,CAAC,IAAID,QAAQ,EAAE;IAC1C,OAAOD,IAAI;EACf;EACA;EACA;EACA,OAAO,IAAI,EAAE;IACT;IACAS,WAAW,GAAGH,QAAQ,CAACK,MAAM,CAAC,CAAC,EAAEP,IAAI,CAAC;IACtC;IACAM,YAAY,GAAGX,gBAAgB,CAACU,WAAW,EAAEP,IAAI,CAAC;IAClD;IACA,IAAIQ,YAAY,GAAGL,iBAAiB,GAAGE,SAAS,EAAE;MAC9C,IAAIG,YAAY,GAAGH,SAAS,EAAE;QAC1B;MACJ;IACJ;IACAC,CAAC,CAACI,IAAI,CAACH,WAAW,CAAC;IACnB;IACAF,SAAS,IAAIG,YAAY;IACzBJ,QAAQ,GAAGA,QAAQ,CAACK,MAAM,CAACP,IAAI,CAAC;IAChC;IACA,IAAI,CAACE,QAAQ,EAAE;MACX,OAAOE,CAAC,CAACK,IAAI,CAAC,EAAE,CAAC;IACrB;EACJ;EACA;EACA;EACA,OAAO,IAAI,EAAE;IACT;IACAJ,WAAW,GAAGH,QAAQ,CAACK,MAAM,CAAC,CAAC,EAAE,CAAC,CAAC;IACnC;IACAD,YAAY,GAAGX,gBAAgB,CAACU,WAAW,EAAEP,IAAI,CAAC;IAClD;IACA,IAAIQ,YAAY,GAAGL,iBAAiB,GAAGE,SAAS,EAAE;MAC9C;IACJ;IACAC,CAAC,CAACI,IAAI,CAACH,WAAW,CAAC;IACnB;IACAF,SAAS,IAAIG,YAAY;IACzBJ,QAAQ,GAAGA,QAAQ,CAACK,MAAM,CAAC,CAAC,CAAC;IAC7B,IAAI,CAACL,QAAQ,EAAE;MACX,OAAOE,CAAC,CAACK,IAAI,CAAC,EAAE,CAAC;IACrB;EACJ;EACA,OAAO,EAAE,GAAGL,CAAC,CAACK,IAAI,CAAC,EAAE,CAAC,GAAGV,GAAG;AAChC,CAAC","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}