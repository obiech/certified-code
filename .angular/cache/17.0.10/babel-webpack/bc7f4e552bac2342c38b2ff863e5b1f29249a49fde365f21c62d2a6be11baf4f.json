{"ast":null,"code":"import { __extends } from \"tslib\";\nimport { AbstractCanvas } from '@antv/g-base';\nimport { getShape } from './util/hit';\nimport * as Shape from './shape';\nimport Group from './group';\nimport { each, getPixelRatio, requestAnimationFrame, clearAnimationFrame } from './util/util';\nimport { applyAttrsToContext, drawChildren, getMergedRegion, mergeView, checkRefresh, clearChanged } from './util/draw';\nvar Canvas = /** @class */function (_super) {\n  __extends(Canvas, _super);\n  function Canvas() {\n    return _super !== null && _super.apply(this, arguments) || this;\n  }\n  Canvas.prototype.getDefaultCfg = function () {\n    var cfg = _super.prototype.getDefaultCfg.call(this);\n    // 设置渲染引擎为 canvas，只读属性\n    cfg['renderer'] = 'canvas';\n    // 是否自动绘制，不需要用户调用 draw 方法\n    cfg['autoDraw'] = true;\n    // 是否允许局部刷新图表\n    cfg['localRefresh'] = true;\n    cfg['refreshElements'] = [];\n    // 是否在视图内自动裁剪\n    cfg['clipView'] = true;\n    // 是否使用快速拾取的方案，默认为 false，上层可以打开\n    cfg['quickHit'] = false;\n    return cfg;\n  };\n  /**\n   * 一些方法调用会引起画布变化\n   * @param {ChangeType} changeType 改变的类型\n   */\n  Canvas.prototype.onCanvasChange = function (changeType) {\n    /**\n     * 触发画布更新的三种 changeType\n     * 1. attr: 修改画布的绘图属性\n     * 2. sort: 画布排序，图形的层次会发生变化\n     * 3. changeSize: 改变画布大小\n     */\n    if (changeType === 'attr' || changeType === 'sort' || changeType === 'changeSize') {\n      this.set('refreshElements', [this]);\n      this.draw();\n    }\n  };\n  Canvas.prototype.getShapeBase = function () {\n    return Shape;\n  };\n  Canvas.prototype.getGroupBase = function () {\n    return Group;\n  };\n  /**\n   * 获取屏幕像素比\n   */\n  Canvas.prototype.getPixelRatio = function () {\n    var pixelRatio = this.get('pixelRatio') || getPixelRatio();\n    // 不足 1 的取 1，超出 1 的取整\n    return pixelRatio >= 1 ? Math.ceil(pixelRatio) : 1;\n  };\n  Canvas.prototype.getViewRange = function () {\n    return {\n      minX: 0,\n      minY: 0,\n      maxX: this.cfg.width,\n      maxY: this.cfg.height\n    };\n  };\n  // 复写基类的方法生成标签\n  Canvas.prototype.createDom = function () {\n    var element = document.createElement('canvas');\n    var context = element.getContext('2d');\n    // 缓存 context 对象\n    this.set('context', context);\n    return element;\n  };\n  Canvas.prototype.setDOMSize = function (width, height) {\n    _super.prototype.setDOMSize.call(this, width, height);\n    var context = this.get('context');\n    var el = this.get('el');\n    var pixelRatio = this.getPixelRatio();\n    el.width = pixelRatio * width;\n    el.height = pixelRatio * height;\n    // 设置 canvas 元素的宽度和高度，会重置缩放，因此 context.scale 需要在每次设置宽、高后调用\n    if (pixelRatio > 1) {\n      context.scale(pixelRatio, pixelRatio);\n    }\n  };\n  // 复写基类方法\n  Canvas.prototype.clear = function () {\n    _super.prototype.clear.call(this);\n    this._clearFrame(); // 需要清理掉延迟绘制的帧\n    var context = this.get('context');\n    var element = this.get('el');\n    context.clearRect(0, 0, element.width, element.height);\n  };\n  Canvas.prototype.getShape = function (x, y) {\n    var shape;\n    if (this.get('quickHit')) {\n      shape = getShape(this, x, y);\n    } else {\n      shape = _super.prototype.getShape.call(this, x, y, null);\n    }\n    return shape;\n  };\n  // 对绘制区域边缘取整，避免浮点数问题\n  Canvas.prototype._getRefreshRegion = function () {\n    var elements = this.get('refreshElements');\n    var viewRegion = this.getViewRange();\n    var region;\n    // 如果是当前画布整体发生了变化，则直接重绘整个画布\n    if (elements.length && elements[0] === this) {\n      region = viewRegion;\n    } else {\n      region = getMergedRegion(elements);\n      if (region) {\n        region.minX = Math.floor(region.minX);\n        region.minY = Math.floor(region.minY);\n        region.maxX = Math.ceil(region.maxX);\n        region.maxY = Math.ceil(region.maxY);\n        region.maxY += 1; // 在很多环境下字体的高低会不一致，附加一像素，避免残影\n        var clipView = this.get('clipView');\n        // 自动裁剪不在 view 内的区域\n        if (clipView) {\n          region = mergeView(region, viewRegion);\n        }\n      }\n    }\n    return region;\n  };\n  /**\n   * 刷新图形元素，这里仅仅是放入队列，下次绘制时进行绘制\n   * @param {IElement} element 图形元素\n   */\n  Canvas.prototype.refreshElement = function (element) {\n    var refreshElements = this.get('refreshElements');\n    refreshElements.push(element);\n    // if (this.get('autoDraw')) {\n    //   this._startDraw();\n    // }\n  };\n  // 清理还在进行的绘制\n  Canvas.prototype._clearFrame = function () {\n    var drawFrame = this.get('drawFrame');\n    if (drawFrame) {\n      // 如果全部渲染时，存在局部渲染，则抛弃掉局部渲染\n      clearAnimationFrame(drawFrame);\n      this.set('drawFrame', null);\n      this.set('refreshElements', []);\n    }\n  };\n  // 手工调用绘制接口\n  Canvas.prototype.draw = function () {\n    var drawFrame = this.get('drawFrame');\n    if (this.get('autoDraw') && drawFrame) {\n      return;\n    }\n    this._startDraw();\n  };\n  // 绘制所有图形\n  Canvas.prototype._drawAll = function () {\n    var context = this.get('context');\n    var element = this.get('el');\n    var children = this.getChildren();\n    context.clearRect(0, 0, element.width, element.height);\n    applyAttrsToContext(context, this);\n    drawChildren(context, children);\n    // 对于 https://github.com/antvis/g/issues/422 的场景，全局渲染的模式下也会记录更新的元素队列，因此全局渲染完后也需要置空\n    this.set('refreshElements', []);\n  };\n  // 绘制局部\n  Canvas.prototype._drawRegion = function () {\n    var context = this.get('context');\n    var refreshElements = this.get('refreshElements');\n    var children = this.getChildren();\n    var region = this._getRefreshRegion();\n    // 需要注意可能没有 region 的场景\n    // 一般发生在设置了 localRefresh ,在没有图形发生变化的情况下，用户调用了 draw\n    if (region) {\n      // 清理指定区域\n      context.clearRect(region.minX, region.minY, region.maxX - region.minX, region.maxY - region.minY);\n      // 保存上下文，设置 clip\n      context.save();\n      context.beginPath();\n      context.rect(region.minX, region.minY, region.maxX - region.minX, region.maxY - region.minY);\n      context.clip();\n      applyAttrsToContext(context, this);\n      // 确认更新的元素，这个优化可以提升 10 倍左右的性能，10W 个带有 group 的节点，局部渲染会从 90ms 下降到 5-6 ms\n      checkRefresh(this, children, region);\n      // 绘制子元素\n      drawChildren(context, children, region);\n      context.restore();\n    } else if (refreshElements.length) {\n      // 防止发生改变的 elements 没有 region 的场景，这会发生在多个情况下\n      // 1. 空的 group\n      // 2. 所有 elements 没有在绘图区域\n      // 3. group 下面的 elements 隐藏掉\n      // 如果不进行清理 hasChanged 的状态会不正确\n      clearChanged(refreshElements);\n    }\n    each(refreshElements, function (element) {\n      if (element.get('hasChanged')) {\n        // 在视窗外的 Group 元素会加入到更新队列里，但实际却没有执行 draw() 逻辑，也就没有清除 hasChanged 标记\n        // 即已经重绘完、但 hasChanged 标记没有清除的元素，需要统一清除掉。主要是 Group 存在问题，具体原因待排查\n        element.set('hasChanged', false);\n      }\n    });\n    this.set('refreshElements', []);\n  };\n  // 触发绘制\n  Canvas.prototype._startDraw = function () {\n    var _this = this;\n    var drawFrame = this.get('drawFrame');\n    var drawFrameCallback = this.get('drawFrameCallback');\n    if (!drawFrame) {\n      drawFrame = requestAnimationFrame(function () {\n        if (_this.get('localRefresh')) {\n          _this._drawRegion();\n        } else {\n          _this._drawAll();\n        }\n        _this.set('drawFrame', null);\n        if (drawFrameCallback) {\n          drawFrameCallback();\n        }\n      });\n      this.set('drawFrame', drawFrame);\n    }\n  };\n  Canvas.prototype.skipDraw = function () {};\n  Canvas.prototype.removeDom = function () {\n    var el = this.get('el');\n    // 需要清理 canvas 画布内容，否则ios下 创建的canvas垃圾未回收，导致Total canvas memory use exceeds问题\n    // 相关问题列表\n    // https://stackoverflow.com/questions/52532614/total-canvas-memory-use-exceeds-the-maximum-limit-safari-12\n    // https://github.com/openlayers/openlayers/issues/9291\n    el.width = 0;\n    el.height = 0;\n    el.parentNode.removeChild(el);\n  };\n  return Canvas;\n}(AbstractCanvas);\nexport default Canvas;","map":{"version":3,"names":["__extends","AbstractCanvas","getShape","Shape","Group","each","getPixelRatio","requestAnimationFrame","clearAnimationFrame","applyAttrsToContext","drawChildren","getMergedRegion","mergeView","checkRefresh","clearChanged","Canvas","_super","apply","arguments","prototype","getDefaultCfg","cfg","call","onCanvasChange","changeType","set","draw","getShapeBase","getGroupBase","pixelRatio","get","Math","ceil","getViewRange","minX","minY","maxX","width","maxY","height","createDom","element","document","createElement","context","getContext","setDOMSize","el","scale","clear","_clearFrame","clearRect","x","y","shape","_getRefreshRegion","elements","viewRegion","region","length","floor","clipView","refreshElement","refreshElements","push","drawFrame","_startDraw","_drawAll","children","getChildren","_drawRegion","save","beginPath","rect","clip","restore","_this","drawFrameCallback","skipDraw","removeDom","parentNode","removeChild"],"sources":["/Users/obiechina/Documents/ridy-flutter-full-taxi-solution 2/node_modules/@antv/g-canvas/esm/canvas.js"],"sourcesContent":["import { __extends } from \"tslib\";\nimport { AbstractCanvas } from '@antv/g-base';\nimport { getShape } from './util/hit';\nimport * as Shape from './shape';\nimport Group from './group';\nimport { each, getPixelRatio, requestAnimationFrame, clearAnimationFrame } from './util/util';\nimport { applyAttrsToContext, drawChildren, getMergedRegion, mergeView, checkRefresh, clearChanged } from './util/draw';\nvar Canvas = /** @class */ (function (_super) {\n    __extends(Canvas, _super);\n    function Canvas() {\n        return _super !== null && _super.apply(this, arguments) || this;\n    }\n    Canvas.prototype.getDefaultCfg = function () {\n        var cfg = _super.prototype.getDefaultCfg.call(this);\n        // 设置渲染引擎为 canvas，只读属性\n        cfg['renderer'] = 'canvas';\n        // 是否自动绘制，不需要用户调用 draw 方法\n        cfg['autoDraw'] = true;\n        // 是否允许局部刷新图表\n        cfg['localRefresh'] = true;\n        cfg['refreshElements'] = [];\n        // 是否在视图内自动裁剪\n        cfg['clipView'] = true;\n        // 是否使用快速拾取的方案，默认为 false，上层可以打开\n        cfg['quickHit'] = false;\n        return cfg;\n    };\n    /**\n     * 一些方法调用会引起画布变化\n     * @param {ChangeType} changeType 改变的类型\n     */\n    Canvas.prototype.onCanvasChange = function (changeType) {\n        /**\n         * 触发画布更新的三种 changeType\n         * 1. attr: 修改画布的绘图属性\n         * 2. sort: 画布排序，图形的层次会发生变化\n         * 3. changeSize: 改变画布大小\n         */\n        if (changeType === 'attr' || changeType === 'sort' || changeType === 'changeSize') {\n            this.set('refreshElements', [this]);\n            this.draw();\n        }\n    };\n    Canvas.prototype.getShapeBase = function () {\n        return Shape;\n    };\n    Canvas.prototype.getGroupBase = function () {\n        return Group;\n    };\n    /**\n     * 获取屏幕像素比\n     */\n    Canvas.prototype.getPixelRatio = function () {\n        var pixelRatio = this.get('pixelRatio') || getPixelRatio();\n        // 不足 1 的取 1，超出 1 的取整\n        return pixelRatio >= 1 ? Math.ceil(pixelRatio) : 1;\n    };\n    Canvas.prototype.getViewRange = function () {\n        return {\n            minX: 0,\n            minY: 0,\n            maxX: this.cfg.width,\n            maxY: this.cfg.height,\n        };\n    };\n    // 复写基类的方法生成标签\n    Canvas.prototype.createDom = function () {\n        var element = document.createElement('canvas');\n        var context = element.getContext('2d');\n        // 缓存 context 对象\n        this.set('context', context);\n        return element;\n    };\n    Canvas.prototype.setDOMSize = function (width, height) {\n        _super.prototype.setDOMSize.call(this, width, height);\n        var context = this.get('context');\n        var el = this.get('el');\n        var pixelRatio = this.getPixelRatio();\n        el.width = pixelRatio * width;\n        el.height = pixelRatio * height;\n        // 设置 canvas 元素的宽度和高度，会重置缩放，因此 context.scale 需要在每次设置宽、高后调用\n        if (pixelRatio > 1) {\n            context.scale(pixelRatio, pixelRatio);\n        }\n    };\n    // 复写基类方法\n    Canvas.prototype.clear = function () {\n        _super.prototype.clear.call(this);\n        this._clearFrame(); // 需要清理掉延迟绘制的帧\n        var context = this.get('context');\n        var element = this.get('el');\n        context.clearRect(0, 0, element.width, element.height);\n    };\n    Canvas.prototype.getShape = function (x, y) {\n        var shape;\n        if (this.get('quickHit')) {\n            shape = getShape(this, x, y);\n        }\n        else {\n            shape = _super.prototype.getShape.call(this, x, y, null);\n        }\n        return shape;\n    };\n    // 对绘制区域边缘取整，避免浮点数问题\n    Canvas.prototype._getRefreshRegion = function () {\n        var elements = this.get('refreshElements');\n        var viewRegion = this.getViewRange();\n        var region;\n        // 如果是当前画布整体发生了变化，则直接重绘整个画布\n        if (elements.length && elements[0] === this) {\n            region = viewRegion;\n        }\n        else {\n            region = getMergedRegion(elements);\n            if (region) {\n                region.minX = Math.floor(region.minX);\n                region.minY = Math.floor(region.minY);\n                region.maxX = Math.ceil(region.maxX);\n                region.maxY = Math.ceil(region.maxY);\n                region.maxY += 1; // 在很多环境下字体的高低会不一致，附加一像素，避免残影\n                var clipView = this.get('clipView');\n                // 自动裁剪不在 view 内的区域\n                if (clipView) {\n                    region = mergeView(region, viewRegion);\n                }\n            }\n        }\n        return region;\n    };\n    /**\n     * 刷新图形元素，这里仅仅是放入队列，下次绘制时进行绘制\n     * @param {IElement} element 图形元素\n     */\n    Canvas.prototype.refreshElement = function (element) {\n        var refreshElements = this.get('refreshElements');\n        refreshElements.push(element);\n        // if (this.get('autoDraw')) {\n        //   this._startDraw();\n        // }\n    };\n    // 清理还在进行的绘制\n    Canvas.prototype._clearFrame = function () {\n        var drawFrame = this.get('drawFrame');\n        if (drawFrame) {\n            // 如果全部渲染时，存在局部渲染，则抛弃掉局部渲染\n            clearAnimationFrame(drawFrame);\n            this.set('drawFrame', null);\n            this.set('refreshElements', []);\n        }\n    };\n    // 手工调用绘制接口\n    Canvas.prototype.draw = function () {\n        var drawFrame = this.get('drawFrame');\n        if (this.get('autoDraw') && drawFrame) {\n            return;\n        }\n        this._startDraw();\n    };\n    // 绘制所有图形\n    Canvas.prototype._drawAll = function () {\n        var context = this.get('context');\n        var element = this.get('el');\n        var children = this.getChildren();\n        context.clearRect(0, 0, element.width, element.height);\n        applyAttrsToContext(context, this);\n        drawChildren(context, children);\n        // 对于 https://github.com/antvis/g/issues/422 的场景，全局渲染的模式下也会记录更新的元素队列，因此全局渲染完后也需要置空\n        this.set('refreshElements', []);\n    };\n    // 绘制局部\n    Canvas.prototype._drawRegion = function () {\n        var context = this.get('context');\n        var refreshElements = this.get('refreshElements');\n        var children = this.getChildren();\n        var region = this._getRefreshRegion();\n        // 需要注意可能没有 region 的场景\n        // 一般发生在设置了 localRefresh ,在没有图形发生变化的情况下，用户调用了 draw\n        if (region) {\n            // 清理指定区域\n            context.clearRect(region.minX, region.minY, region.maxX - region.minX, region.maxY - region.minY);\n            // 保存上下文，设置 clip\n            context.save();\n            context.beginPath();\n            context.rect(region.minX, region.minY, region.maxX - region.minX, region.maxY - region.minY);\n            context.clip();\n            applyAttrsToContext(context, this);\n            // 确认更新的元素，这个优化可以提升 10 倍左右的性能，10W 个带有 group 的节点，局部渲染会从 90ms 下降到 5-6 ms\n            checkRefresh(this, children, region);\n            // 绘制子元素\n            drawChildren(context, children, region);\n            context.restore();\n        }\n        else if (refreshElements.length) {\n            // 防止发生改变的 elements 没有 region 的场景，这会发生在多个情况下\n            // 1. 空的 group\n            // 2. 所有 elements 没有在绘图区域\n            // 3. group 下面的 elements 隐藏掉\n            // 如果不进行清理 hasChanged 的状态会不正确\n            clearChanged(refreshElements);\n        }\n        each(refreshElements, function (element) {\n            if (element.get('hasChanged')) {\n                // 在视窗外的 Group 元素会加入到更新队列里，但实际却没有执行 draw() 逻辑，也就没有清除 hasChanged 标记\n                // 即已经重绘完、但 hasChanged 标记没有清除的元素，需要统一清除掉。主要是 Group 存在问题，具体原因待排查\n                element.set('hasChanged', false);\n            }\n        });\n        this.set('refreshElements', []);\n    };\n    // 触发绘制\n    Canvas.prototype._startDraw = function () {\n        var _this = this;\n        var drawFrame = this.get('drawFrame');\n        var drawFrameCallback = this.get('drawFrameCallback');\n        if (!drawFrame) {\n            drawFrame = requestAnimationFrame(function () {\n                if (_this.get('localRefresh')) {\n                    _this._drawRegion();\n                }\n                else {\n                    _this._drawAll();\n                }\n                _this.set('drawFrame', null);\n                if (drawFrameCallback) {\n                    drawFrameCallback();\n                }\n            });\n            this.set('drawFrame', drawFrame);\n        }\n    };\n    Canvas.prototype.skipDraw = function () { };\n    Canvas.prototype.removeDom = function () {\n        var el = this.get('el');\n        // 需要清理 canvas 画布内容，否则ios下 创建的canvas垃圾未回收，导致Total canvas memory use exceeds问题\n        // 相关问题列表\n        // https://stackoverflow.com/questions/52532614/total-canvas-memory-use-exceeds-the-maximum-limit-safari-12\n        // https://github.com/openlayers/openlayers/issues/9291\n        el.width = 0;\n        el.height = 0;\n        el.parentNode.removeChild(el);\n    };\n    return Canvas;\n}(AbstractCanvas));\nexport default Canvas;\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}