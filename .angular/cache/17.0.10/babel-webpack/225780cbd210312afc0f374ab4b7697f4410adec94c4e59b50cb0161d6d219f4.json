{"ast":null,"code":"import { __extends } from \"tslib\";\nimport { each, isDate, isNil, isNumber, isString } from '@antv/util';\nimport { timeFormat, toTimeStamp } from '../util/time';\nimport Linear from './linear';\n/**\n * 时间度量\n * @class\n */\nvar Time = /** @class */function (_super) {\n  __extends(Time, _super);\n  function Time() {\n    var _this = _super !== null && _super.apply(this, arguments) || this;\n    _this.type = 'time';\n    return _this;\n  }\n  /**\n   * @override\n   */\n  Time.prototype.getText = function (value, index) {\n    var numberValue = this.translate(value);\n    var formatter = this.formatter;\n    return formatter ? formatter(numberValue, index) : timeFormat(numberValue, this.mask);\n  };\n  /**\n   * @override\n   */\n  Time.prototype.scale = function (value) {\n    var v = value;\n    if (isString(v) || isDate(v)) {\n      v = this.translate(v);\n    }\n    return _super.prototype.scale.call(this, v);\n  };\n  /**\n   * 将时间转换成数字\n   * @override\n   */\n  Time.prototype.translate = function (v) {\n    return toTimeStamp(v);\n  };\n  Time.prototype.initCfg = function () {\n    this.tickMethod = 'time-pretty';\n    this.mask = 'YYYY-MM-DD';\n    this.tickCount = 7;\n    this.nice = false;\n  };\n  Time.prototype.setDomain = function () {\n    var values = this.values;\n    // 是否设置了 min, max，而不是直接取 this.min, this.max\n    var minConfig = this.getConfig('min');\n    var maxConfig = this.getConfig('max');\n    // 如果设置了 min,max 则转换成时间戳\n    if (!isNil(minConfig) || !isNumber(minConfig)) {\n      this.min = this.translate(this.min);\n    }\n    if (!isNil(maxConfig) || !isNumber(maxConfig)) {\n      this.max = this.translate(this.max);\n    }\n    // 没有设置 min, max 时\n    if (values && values.length) {\n      // 重新计算最大最小值\n      var timeStamps_1 = [];\n      var min_1 = Infinity; // 最小值\n      var secondMin_1 = min_1; // 次小值\n      var max_1 = 0;\n      // 使用一个循环，计算min,max,secondMin\n      each(values, function (v) {\n        var timeStamp = toTimeStamp(v);\n        if (isNaN(timeStamp)) {\n          throw new TypeError(\"Invalid Time: \" + v + \" in time scale!\");\n        }\n        if (min_1 > timeStamp) {\n          secondMin_1 = min_1;\n          min_1 = timeStamp;\n        } else if (secondMin_1 > timeStamp) {\n          secondMin_1 = timeStamp;\n        }\n        if (max_1 < timeStamp) {\n          max_1 = timeStamp;\n        }\n        timeStamps_1.push(timeStamp);\n      });\n      // 存在多个值时，设置最小间距\n      if (values.length > 1) {\n        this.minTickInterval = secondMin_1 - min_1;\n      }\n      if (isNil(minConfig)) {\n        this.min = min_1;\n      }\n      if (isNil(maxConfig)) {\n        this.max = max_1;\n      }\n    }\n  };\n  return Time;\n}(Linear);\nexport default Time;","map":{"version":3,"names":["__extends","each","isDate","isNil","isNumber","isString","timeFormat","toTimeStamp","Linear","Time","_super","_this","apply","arguments","type","prototype","getText","value","index","numberValue","translate","formatter","mask","scale","v","call","initCfg","tickMethod","tickCount","nice","setDomain","values","minConfig","getConfig","maxConfig","min","max","length","timeStamps_1","min_1","Infinity","secondMin_1","max_1","timeStamp","isNaN","TypeError","push","minTickInterval"],"sources":["/Users/obiechina/Documents/ridy-flutter-full-taxi-solution 2/node_modules/@antv/scale/esm/continuous/time.js"],"sourcesContent":["import { __extends } from \"tslib\";\nimport { each, isDate, isNil, isNumber, isString } from '@antv/util';\nimport { timeFormat, toTimeStamp } from '../util/time';\nimport Linear from './linear';\n/**\n * 时间度量\n * @class\n */\nvar Time = /** @class */ (function (_super) {\n    __extends(Time, _super);\n    function Time() {\n        var _this = _super !== null && _super.apply(this, arguments) || this;\n        _this.type = 'time';\n        return _this;\n    }\n    /**\n     * @override\n     */\n    Time.prototype.getText = function (value, index) {\n        var numberValue = this.translate(value);\n        var formatter = this.formatter;\n        return formatter ? formatter(numberValue, index) : timeFormat(numberValue, this.mask);\n    };\n    /**\n     * @override\n     */\n    Time.prototype.scale = function (value) {\n        var v = value;\n        if (isString(v) || isDate(v)) {\n            v = this.translate(v);\n        }\n        return _super.prototype.scale.call(this, v);\n    };\n    /**\n     * 将时间转换成数字\n     * @override\n     */\n    Time.prototype.translate = function (v) {\n        return toTimeStamp(v);\n    };\n    Time.prototype.initCfg = function () {\n        this.tickMethod = 'time-pretty';\n        this.mask = 'YYYY-MM-DD';\n        this.tickCount = 7;\n        this.nice = false;\n    };\n    Time.prototype.setDomain = function () {\n        var values = this.values;\n        // 是否设置了 min, max，而不是直接取 this.min, this.max\n        var minConfig = this.getConfig('min');\n        var maxConfig = this.getConfig('max');\n        // 如果设置了 min,max 则转换成时间戳\n        if (!isNil(minConfig) || !isNumber(minConfig)) {\n            this.min = this.translate(this.min);\n        }\n        if (!isNil(maxConfig) || !isNumber(maxConfig)) {\n            this.max = this.translate(this.max);\n        }\n        // 没有设置 min, max 时\n        if (values && values.length) {\n            // 重新计算最大最小值\n            var timeStamps_1 = [];\n            var min_1 = Infinity; // 最小值\n            var secondMin_1 = min_1; // 次小值\n            var max_1 = 0;\n            // 使用一个循环，计算min,max,secondMin\n            each(values, function (v) {\n                var timeStamp = toTimeStamp(v);\n                if (isNaN(timeStamp)) {\n                    throw new TypeError(\"Invalid Time: \" + v + \" in time scale!\");\n                }\n                if (min_1 > timeStamp) {\n                    secondMin_1 = min_1;\n                    min_1 = timeStamp;\n                }\n                else if (secondMin_1 > timeStamp) {\n                    secondMin_1 = timeStamp;\n                }\n                if (max_1 < timeStamp) {\n                    max_1 = timeStamp;\n                }\n                timeStamps_1.push(timeStamp);\n            });\n            // 存在多个值时，设置最小间距\n            if (values.length > 1) {\n                this.minTickInterval = secondMin_1 - min_1;\n            }\n            if (isNil(minConfig)) {\n                this.min = min_1;\n            }\n            if (isNil(maxConfig)) {\n                this.max = max_1;\n            }\n        }\n    };\n    return Time;\n}(Linear));\nexport default Time;\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}