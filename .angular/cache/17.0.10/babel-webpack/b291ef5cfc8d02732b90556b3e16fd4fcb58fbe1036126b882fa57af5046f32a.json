{"ast":null,"code":"import { __assign } from \"tslib\";\nimport { each, isEmpty, isEqual, last } from '@antv/util';\nimport { registerShape, registerShapeFactory } from '../base';\nimport { getStyle } from '../util/get-style';\nfunction getPath(points) {\n  var flag = points[0];\n  var i = 1;\n  var path = [['M', flag.x, flag.y]];\n  while (i < points.length) {\n    var c = points[i];\n    if (c.x !== points[i - 1].x || c.y !== points[i - 1].y) {\n      path.push(['L', c.x, c.y]);\n      if (c.x === flag.x && c.y === flag.y && i < points.length - 1) {\n        flag = points[i + 1];\n        path.push(['Z']);\n        path.push(['M', flag.x, flag.y]);\n        i++;\n      }\n    }\n    i++;\n  }\n  if (!isEqual(last(path), flag)) {\n    path.push(['L', flag.x, flag.y]);\n  }\n  path.push(['Z']);\n  return path;\n}\nvar PolygonShapeFactory = registerShapeFactory('polygon', {\n  defaultShapeType: 'polygon',\n  getDefaultPoints: function (pointInfo) {\n    var points = [];\n    each(pointInfo.x, function (subX, index) {\n      var subY = pointInfo.y[index];\n      points.push({\n        x: subX,\n        y: subY\n      });\n    });\n    return points;\n  }\n});\nregisterShape('polygon', 'polygon', {\n  draw: function (cfg, container) {\n    if (!isEmpty(cfg.points)) {\n      var shapeAttrs = getStyle(cfg, true, true);\n      var path = this.parsePath(getPath(cfg.points));\n      return container.addShape('path', {\n        attrs: __assign(__assign({}, shapeAttrs), {\n          path: path\n        }),\n        name: 'polygon'\n      });\n    }\n  },\n  getMarker: function (markerCfg) {\n    var color = markerCfg.color;\n    return {\n      symbol: 'square',\n      style: {\n        r: 4,\n        fill: color\n      }\n    };\n  }\n});\nexport default PolygonShapeFactory;","map":{"version":3,"names":["__assign","each","isEmpty","isEqual","last","registerShape","registerShapeFactory","getStyle","getPath","points","flag","i","path","x","y","length","c","push","PolygonShapeFactory","defaultShapeType","getDefaultPoints","pointInfo","subX","index","subY","draw","cfg","container","shapeAttrs","parsePath","addShape","attrs","name","getMarker","markerCfg","color","symbol","style","r","fill"],"sources":["/Users/obiechina/Documents/ridy-flutter-full-taxi-solution 2/node_modules/@antv/g2/esm/geometry/shape/polygon/index.js"],"sourcesContent":["import { __assign } from \"tslib\";\nimport { each, isEmpty, isEqual, last } from '@antv/util';\nimport { registerShape, registerShapeFactory } from '../base';\nimport { getStyle } from '../util/get-style';\nfunction getPath(points) {\n    var flag = points[0];\n    var i = 1;\n    var path = [['M', flag.x, flag.y]];\n    while (i < points.length) {\n        var c = points[i];\n        if (c.x !== points[i - 1].x || c.y !== points[i - 1].y) {\n            path.push(['L', c.x, c.y]);\n            if (c.x === flag.x && c.y === flag.y && i < points.length - 1) {\n                flag = points[i + 1];\n                path.push(['Z']);\n                path.push(['M', flag.x, flag.y]);\n                i++;\n            }\n        }\n        i++;\n    }\n    if (!isEqual(last(path), flag)) {\n        path.push(['L', flag.x, flag.y]);\n    }\n    path.push(['Z']);\n    return path;\n}\nvar PolygonShapeFactory = registerShapeFactory('polygon', {\n    defaultShapeType: 'polygon',\n    getDefaultPoints: function (pointInfo) {\n        var points = [];\n        each(pointInfo.x, function (subX, index) {\n            var subY = pointInfo.y[index];\n            points.push({\n                x: subX,\n                y: subY,\n            });\n        });\n        return points;\n    },\n});\nregisterShape('polygon', 'polygon', {\n    draw: function (cfg, container) {\n        if (!isEmpty(cfg.points)) {\n            var shapeAttrs = getStyle(cfg, true, true);\n            var path = this.parsePath(getPath(cfg.points));\n            return container.addShape('path', {\n                attrs: __assign(__assign({}, shapeAttrs), { path: path }),\n                name: 'polygon',\n            });\n        }\n    },\n    getMarker: function (markerCfg) {\n        var color = markerCfg.color;\n        return {\n            symbol: 'square',\n            style: {\n                r: 4,\n                fill: color,\n            },\n        };\n    },\n});\nexport default PolygonShapeFactory;\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}