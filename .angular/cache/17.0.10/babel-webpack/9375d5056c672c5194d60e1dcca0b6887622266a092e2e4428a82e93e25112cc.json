{"ast":null,"code":"import { __extends, __values } from \"tslib\";\nimport { FIELD_ORIGIN } from '../constant';\nimport Geometry from './base';\nimport Element from './element';\n/** 引入对应的 ShapeFactory */\nimport './shape/line';\nimport { isModelChange } from './util/is-model-change';\nimport { diff } from './util/diff';\n/**\n * Path 几何标记。\n * 用于绘制路径图等。\n */\nvar Path = /** @class */function (_super) {\n  __extends(Path, _super);\n  function Path(cfg) {\n    var _this = _super.call(this, cfg) || this;\n    _this.type = 'path';\n    _this.shapeType = 'line';\n    var _a = cfg.connectNulls,\n      connectNulls = _a === void 0 ? false : _a,\n      _b = cfg.showSinglePoint,\n      showSinglePoint = _b === void 0 ? true : _b;\n    _this.connectNulls = connectNulls;\n    _this.showSinglePoint = showSinglePoint;\n    return _this;\n  }\n  /**\n   * 创建所有的 Element 实例，对于 Path、Line、Area，一组数据对应一个 Element。\n   * @param mappingData\n   * @param [isUpdate]\n   * @returns elements\n   */\n  Path.prototype.updateElements = function (mappingDataArray, isUpdate) {\n    var e_1, _a, e_2, _b, e_3, _c;\n    if (isUpdate === void 0) {\n      isUpdate = false;\n    }\n    // Path 的每个 element 对应一组数据\n    var keyData = new Map();\n    var keyIndex = new Map();\n    var keys = [];\n    var index = 0;\n    for (var i = 0; i < mappingDataArray.length; i++) {\n      var mappingData = mappingDataArray[i];\n      var key = this.getElementId(mappingData);\n      keys.push(key);\n      keyData.set(key, mappingData);\n      keyIndex.set(key, index);\n      index++;\n    }\n    this.elements = new Array(index);\n    var _d = diff(this.lastElementsMap, keys),\n      added = _d.added,\n      updated = _d.updated,\n      removed = _d.removed;\n    try {\n      for (var added_1 = __values(added), added_1_1 = added_1.next(); !added_1_1.done; added_1_1 = added_1.next()) {\n        var key = added_1_1.value;\n        var mappingData = keyData.get(key);\n        var shapeFactory = this.getShapeFactory();\n        var shapeCfg = this.getShapeInfo(mappingData);\n        var i = keyIndex.get(key);\n        var element = new Element({\n          shapeFactory: shapeFactory,\n          container: this.container,\n          offscreenGroup: this.getOffscreenGroup(),\n          elementIndex: i\n        });\n        element.geometry = this;\n        element.animate = this.animateOption;\n        element.draw(shapeCfg, isUpdate); // 绘制 shape\n        this.elementsMap[key] = element;\n        this.elements[i] = element;\n      }\n    } catch (e_1_1) {\n      e_1 = {\n        error: e_1_1\n      };\n    } finally {\n      try {\n        if (added_1_1 && !added_1_1.done && (_a = added_1.return)) _a.call(added_1);\n      } finally {\n        if (e_1) throw e_1.error;\n      }\n    }\n    try {\n      for (var updated_1 = __values(updated), updated_1_1 = updated_1.next(); !updated_1_1.done; updated_1_1 = updated_1.next()) {\n        var key = updated_1_1.value;\n        var mappingData = keyData.get(key);\n        var element = this.lastElementsMap[key];\n        var i = keyIndex.get(key);\n        var shapeCfg = this.getShapeInfo(mappingData);\n        var preShapeCfg = element.getModel();\n        if (this.isCoordinateChanged || isModelChange(preShapeCfg, shapeCfg)) {\n          element.animate = this.animateOption;\n          // 通过绘制数据的变更来判断是否需要更新，因为用户有可能会修改图形属性映射\n          element.update(shapeCfg); // 更新对应的 element\n        }\n\n        this.elementsMap[key] = element;\n        this.elements[i] = element;\n      }\n    } catch (e_2_1) {\n      e_2 = {\n        error: e_2_1\n      };\n    } finally {\n      try {\n        if (updated_1_1 && !updated_1_1.done && (_b = updated_1.return)) _b.call(updated_1);\n      } finally {\n        if (e_2) throw e_2.error;\n      }\n    }\n    try {\n      for (var removed_1 = __values(removed), removed_1_1 = removed_1.next(); !removed_1_1.done; removed_1_1 = removed_1.next()) {\n        var key = removed_1_1.value;\n        var element = this.lastElementsMap[key];\n        // 更新动画配置，用户有可能在更新之前有对动画进行配置操作\n        element.animate = this.animateOption;\n        element.destroy();\n      }\n    } catch (e_3_1) {\n      e_3 = {\n        error: e_3_1\n      };\n    } finally {\n      try {\n        if (removed_1_1 && !removed_1_1.done && (_c = removed_1.return)) _c.call(removed_1);\n      } finally {\n        if (e_3) throw e_3.error;\n      }\n    }\n  };\n  /**\n   * 获取组成一条线（一组数据）的所有点以及数据\n   * @param mappingData 映射后的数组\n   */\n  Path.prototype.getPointsAndData = function (mappingData) {\n    var points = [];\n    var data = [];\n    for (var i = 0, len = mappingData.length; i < len; i++) {\n      var obj = mappingData[i];\n      points.push({\n        x: obj.x,\n        y: obj.y\n      });\n      data.push(obj[FIELD_ORIGIN]);\n    }\n    return {\n      points: points,\n      data: data\n    };\n  };\n  Path.prototype.getShapeInfo = function (mappingData) {\n    var shapeCfg = this.getDrawCfg(mappingData[0]);\n    var _a = this.getPointsAndData(mappingData),\n      points = _a.points,\n      data = _a.data;\n    shapeCfg.mappingData = mappingData;\n    shapeCfg.data = data;\n    shapeCfg.isStack = !!this.getAdjust('stack');\n    shapeCfg.points = points;\n    shapeCfg.connectNulls = this.connectNulls;\n    shapeCfg.showSinglePoint = this.showSinglePoint;\n    return shapeCfg;\n  };\n  return Path;\n}(Geometry);\nexport default Path;","map":{"version":3,"names":["__extends","__values","FIELD_ORIGIN","Geometry","Element","isModelChange","diff","Path","_super","cfg","_this","call","type","shapeType","_a","connectNulls","_b","showSinglePoint","prototype","updateElements","mappingDataArray","isUpdate","e_1","e_2","e_3","_c","keyData","Map","keyIndex","keys","index","i","length","mappingData","key","getElementId","push","set","elements","Array","_d","lastElementsMap","added","updated","removed","added_1","added_1_1","next","done","value","get","shapeFactory","getShapeFactory","shapeCfg","getShapeInfo","element","container","offscreenGroup","getOffscreenGroup","elementIndex","geometry","animate","animateOption","draw","elementsMap","e_1_1","error","return","updated_1","updated_1_1","preShapeCfg","getModel","isCoordinateChanged","update","e_2_1","removed_1","removed_1_1","destroy","e_3_1","getPointsAndData","points","data","len","obj","x","y","getDrawCfg","isStack","getAdjust"],"sources":["/Users/obiechina/Documents/ridy-flutter-full-taxi-solution 2/node_modules/@antv/g2/esm/geometry/path.js"],"sourcesContent":["import { __extends, __values } from \"tslib\";\nimport { FIELD_ORIGIN } from '../constant';\nimport Geometry from './base';\nimport Element from './element';\n/** 引入对应的 ShapeFactory */\nimport './shape/line';\nimport { isModelChange } from './util/is-model-change';\nimport { diff } from './util/diff';\n/**\n * Path 几何标记。\n * 用于绘制路径图等。\n */\nvar Path = /** @class */ (function (_super) {\n    __extends(Path, _super);\n    function Path(cfg) {\n        var _this = _super.call(this, cfg) || this;\n        _this.type = 'path';\n        _this.shapeType = 'line';\n        var _a = cfg.connectNulls, connectNulls = _a === void 0 ? false : _a, _b = cfg.showSinglePoint, showSinglePoint = _b === void 0 ? true : _b;\n        _this.connectNulls = connectNulls;\n        _this.showSinglePoint = showSinglePoint;\n        return _this;\n    }\n    /**\n     * 创建所有的 Element 实例，对于 Path、Line、Area，一组数据对应一个 Element。\n     * @param mappingData\n     * @param [isUpdate]\n     * @returns elements\n     */\n    Path.prototype.updateElements = function (mappingDataArray, isUpdate) {\n        var e_1, _a, e_2, _b, e_3, _c;\n        if (isUpdate === void 0) { isUpdate = false; }\n        // Path 的每个 element 对应一组数据\n        var keyData = new Map();\n        var keyIndex = new Map();\n        var keys = [];\n        var index = 0;\n        for (var i = 0; i < mappingDataArray.length; i++) {\n            var mappingData = mappingDataArray[i];\n            var key = this.getElementId(mappingData);\n            keys.push(key);\n            keyData.set(key, mappingData);\n            keyIndex.set(key, index);\n            index++;\n        }\n        this.elements = new Array(index);\n        var _d = diff(this.lastElementsMap, keys), added = _d.added, updated = _d.updated, removed = _d.removed;\n        try {\n            for (var added_1 = __values(added), added_1_1 = added_1.next(); !added_1_1.done; added_1_1 = added_1.next()) {\n                var key = added_1_1.value;\n                var mappingData = keyData.get(key);\n                var shapeFactory = this.getShapeFactory();\n                var shapeCfg = this.getShapeInfo(mappingData);\n                var i = keyIndex.get(key);\n                var element = new Element({\n                    shapeFactory: shapeFactory,\n                    container: this.container,\n                    offscreenGroup: this.getOffscreenGroup(),\n                    elementIndex: i,\n                });\n                element.geometry = this;\n                element.animate = this.animateOption;\n                element.draw(shapeCfg, isUpdate); // 绘制 shape\n                this.elementsMap[key] = element;\n                this.elements[i] = element;\n            }\n        }\n        catch (e_1_1) { e_1 = { error: e_1_1 }; }\n        finally {\n            try {\n                if (added_1_1 && !added_1_1.done && (_a = added_1.return)) _a.call(added_1);\n            }\n            finally { if (e_1) throw e_1.error; }\n        }\n        try {\n            for (var updated_1 = __values(updated), updated_1_1 = updated_1.next(); !updated_1_1.done; updated_1_1 = updated_1.next()) {\n                var key = updated_1_1.value;\n                var mappingData = keyData.get(key);\n                var element = this.lastElementsMap[key];\n                var i = keyIndex.get(key);\n                var shapeCfg = this.getShapeInfo(mappingData);\n                var preShapeCfg = element.getModel();\n                if (this.isCoordinateChanged || isModelChange(preShapeCfg, shapeCfg)) {\n                    element.animate = this.animateOption;\n                    // 通过绘制数据的变更来判断是否需要更新，因为用户有可能会修改图形属性映射\n                    element.update(shapeCfg); // 更新对应的 element\n                }\n                this.elementsMap[key] = element;\n                this.elements[i] = element;\n            }\n        }\n        catch (e_2_1) { e_2 = { error: e_2_1 }; }\n        finally {\n            try {\n                if (updated_1_1 && !updated_1_1.done && (_b = updated_1.return)) _b.call(updated_1);\n            }\n            finally { if (e_2) throw e_2.error; }\n        }\n        try {\n            for (var removed_1 = __values(removed), removed_1_1 = removed_1.next(); !removed_1_1.done; removed_1_1 = removed_1.next()) {\n                var key = removed_1_1.value;\n                var element = this.lastElementsMap[key];\n                // 更新动画配置，用户有可能在更新之前有对动画进行配置操作\n                element.animate = this.animateOption;\n                element.destroy();\n            }\n        }\n        catch (e_3_1) { e_3 = { error: e_3_1 }; }\n        finally {\n            try {\n                if (removed_1_1 && !removed_1_1.done && (_c = removed_1.return)) _c.call(removed_1);\n            }\n            finally { if (e_3) throw e_3.error; }\n        }\n    };\n    /**\n     * 获取组成一条线（一组数据）的所有点以及数据\n     * @param mappingData 映射后的数组\n     */\n    Path.prototype.getPointsAndData = function (mappingData) {\n        var points = [];\n        var data = [];\n        for (var i = 0, len = mappingData.length; i < len; i++) {\n            var obj = mappingData[i];\n            points.push({\n                x: obj.x,\n                y: obj.y,\n            });\n            data.push(obj[FIELD_ORIGIN]);\n        }\n        return {\n            points: points,\n            data: data,\n        };\n    };\n    Path.prototype.getShapeInfo = function (mappingData) {\n        var shapeCfg = this.getDrawCfg(mappingData[0]);\n        var _a = this.getPointsAndData(mappingData), points = _a.points, data = _a.data;\n        shapeCfg.mappingData = mappingData;\n        shapeCfg.data = data;\n        shapeCfg.isStack = !!this.getAdjust('stack');\n        shapeCfg.points = points;\n        shapeCfg.connectNulls = this.connectNulls;\n        shapeCfg.showSinglePoint = this.showSinglePoint;\n        return shapeCfg;\n    };\n    return Path;\n}(Geometry));\nexport default Path;\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}