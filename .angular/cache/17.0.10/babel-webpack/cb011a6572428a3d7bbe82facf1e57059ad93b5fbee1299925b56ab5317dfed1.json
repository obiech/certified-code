{"ast":null,"code":"import { __extends } from \"tslib\";\nimport { each } from '@antv/util';\nimport { clearList } from './list-highlight-util';\nimport ListState from './list-state';\nvar STATUS_UNACTIVE = 'inactive';\nvar STATUS_ACTIVE = 'active';\n/**\n * highlight Action 的效果是 active 和 inactive 两个状态的组合\n * @class\n * @ignore\n */\nvar ListHighlight = /** @class */function (_super) {\n  __extends(ListHighlight, _super);\n  function ListHighlight() {\n    var _this = _super !== null && _super.apply(this, arguments) || this;\n    _this.stateName = STATUS_ACTIVE;\n    _this.ignoreItemStates = ['unchecked']; // 当存在 unchecked 状态时不触发\n    return _this;\n  }\n  // 如果 item.name 匹配，则设置 highlight 以及取消\n  ListHighlight.prototype.setItemsState = function (list, name, enable) {\n    this.setHighlightBy(list, function (item) {\n      return item.name === name;\n    }, enable);\n  };\n  // 单个 item 设置状态\n  ListHighlight.prototype.setItemState = function (list, item, enable) {\n    var items = list.getItems();\n    this.setHighlightBy(list, function (el) {\n      return el === item;\n    }, enable);\n  };\n  // 根据条件设置 highlight\n  ListHighlight.prototype.setHighlightBy = function (list, callback, enable) {\n    var items = list.getItems();\n    if (enable) {\n      // 设置 highlight 时，保留之前已经 Highlight 的项\n      each(items, function (item) {\n        if (callback(item)) {\n          if (list.hasState(item, STATUS_UNACTIVE)) {\n            list.setItemState(item, STATUS_UNACTIVE, false);\n          }\n          list.setItemState(item, STATUS_ACTIVE, true);\n        } else if (!list.hasState(item, STATUS_ACTIVE)) {\n          list.setItemState(item, STATUS_UNACTIVE, true);\n        }\n      });\n    } else {\n      var activeItems = list.getItemsByState(STATUS_ACTIVE);\n      var allCancel_1 = true;\n      // 检测 activeItems 是否要全部取消\n      each(activeItems, function (item) {\n        if (!callback(item)) {\n          allCancel_1 = false;\n          return false;\n        }\n      });\n      if (allCancel_1) {\n        this.clear();\n      } else {\n        // 如果不是都要取消 highlight, 则设置匹配的 element 的状态为 unactive\n        // 其他 element 状态不变\n        each(items, function (item) {\n          if (callback(item)) {\n            if (list.hasState(item, STATUS_ACTIVE)) {\n              list.setItemState(item, STATUS_ACTIVE, false);\n            }\n            list.setItemState(item, STATUS_UNACTIVE, true);\n          }\n        });\n      }\n    }\n  };\n  /**\n   * highlight 图例项（坐标轴文本）\n   */\n  ListHighlight.prototype.highlight = function () {\n    this.setState();\n  };\n  // 需要全部清理 active 和 unactive\n  ListHighlight.prototype.clear = function () {\n    var triggerInfo = this.getTriggerListInfo();\n    if (triggerInfo) {\n      clearList(triggerInfo.list);\n    } else {\n      // 如果不是 component 的事件触发，则所有满足触发条件的组件都清除该状态\n      var components = this.getAllowComponents();\n      each(components, function (component) {\n        component.clearItemsState(STATUS_ACTIVE);\n        component.clearItemsState(STATUS_UNACTIVE);\n      });\n    }\n  };\n  return ListHighlight;\n}(ListState);\nexport default ListHighlight;","map":{"version":3,"names":["__extends","each","clearList","ListState","STATUS_UNACTIVE","STATUS_ACTIVE","ListHighlight","_super","_this","apply","arguments","stateName","ignoreItemStates","prototype","setItemsState","list","name","enable","setHighlightBy","item","setItemState","items","getItems","el","callback","hasState","activeItems","getItemsByState","allCancel_1","clear","highlight","setState","triggerInfo","getTriggerListInfo","components","getAllowComponents","component","clearItemsState"],"sources":["/Users/obiechina/Documents/ridy-flutter-full-taxi-solution 2/node_modules/@antv/g2/esm/interaction/action/component/list-highlight.js"],"sourcesContent":["import { __extends } from \"tslib\";\nimport { each } from '@antv/util';\nimport { clearList } from './list-highlight-util';\nimport ListState from './list-state';\nvar STATUS_UNACTIVE = 'inactive';\nvar STATUS_ACTIVE = 'active';\n/**\n * highlight Action 的效果是 active 和 inactive 两个状态的组合\n * @class\n * @ignore\n */\nvar ListHighlight = /** @class */ (function (_super) {\n    __extends(ListHighlight, _super);\n    function ListHighlight() {\n        var _this = _super !== null && _super.apply(this, arguments) || this;\n        _this.stateName = STATUS_ACTIVE;\n        _this.ignoreItemStates = ['unchecked']; // 当存在 unchecked 状态时不触发\n        return _this;\n    }\n    // 如果 item.name 匹配，则设置 highlight 以及取消\n    ListHighlight.prototype.setItemsState = function (list, name, enable) {\n        this.setHighlightBy(list, function (item) { return item.name === name; }, enable);\n    };\n    // 单个 item 设置状态\n    ListHighlight.prototype.setItemState = function (list, item, enable) {\n        var items = list.getItems();\n        this.setHighlightBy(list, function (el) { return el === item; }, enable);\n    };\n    // 根据条件设置 highlight\n    ListHighlight.prototype.setHighlightBy = function (list, callback, enable) {\n        var items = list.getItems();\n        if (enable) {\n            // 设置 highlight 时，保留之前已经 Highlight 的项\n            each(items, function (item) {\n                if (callback(item)) {\n                    if (list.hasState(item, STATUS_UNACTIVE)) {\n                        list.setItemState(item, STATUS_UNACTIVE, false);\n                    }\n                    list.setItemState(item, STATUS_ACTIVE, true);\n                }\n                else if (!list.hasState(item, STATUS_ACTIVE)) {\n                    list.setItemState(item, STATUS_UNACTIVE, true);\n                }\n            });\n        }\n        else {\n            var activeItems = list.getItemsByState(STATUS_ACTIVE);\n            var allCancel_1 = true;\n            // 检测 activeItems 是否要全部取消\n            each(activeItems, function (item) {\n                if (!callback(item)) {\n                    allCancel_1 = false;\n                    return false;\n                }\n            });\n            if (allCancel_1) {\n                this.clear();\n            }\n            else {\n                // 如果不是都要取消 highlight, 则设置匹配的 element 的状态为 unactive\n                // 其他 element 状态不变\n                each(items, function (item) {\n                    if (callback(item)) {\n                        if (list.hasState(item, STATUS_ACTIVE)) {\n                            list.setItemState(item, STATUS_ACTIVE, false);\n                        }\n                        list.setItemState(item, STATUS_UNACTIVE, true);\n                    }\n                });\n            }\n        }\n    };\n    /**\n     * highlight 图例项（坐标轴文本）\n     */\n    ListHighlight.prototype.highlight = function () {\n        this.setState();\n    };\n    // 需要全部清理 active 和 unactive\n    ListHighlight.prototype.clear = function () {\n        var triggerInfo = this.getTriggerListInfo();\n        if (triggerInfo) {\n            clearList(triggerInfo.list);\n        }\n        else {\n            // 如果不是 component 的事件触发，则所有满足触发条件的组件都清除该状态\n            var components = this.getAllowComponents();\n            each(components, function (component) {\n                component.clearItemsState(STATUS_ACTIVE);\n                component.clearItemsState(STATUS_UNACTIVE);\n            });\n        }\n    };\n    return ListHighlight;\n}(ListState));\nexport default ListHighlight;\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}