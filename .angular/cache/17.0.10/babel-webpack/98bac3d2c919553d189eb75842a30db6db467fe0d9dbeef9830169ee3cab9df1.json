{"ast":null,"code":"import { distance, getBBoxByArray } from './util';\nimport * as vec2 from 'gl-matrix/vec2';\nexport default {\n  /**\n   * 计算线段的包围盒\n   * @param {number} x1 起始点 x\n   * @param {number} y1 起始点 y\n   * @param {number} x2 结束点 x\n   * @param {number} y2 结束点 y\n   * @return {object} 包围盒对象\n   */\n  box: function (x1, y1, x2, y2) {\n    return getBBoxByArray([x1, x2], [y1, y2]);\n  },\n  /**\n   * 线段的长度\n   * @param {number} x1 起始点 x\n   * @param {number} y1 起始点 y\n   * @param {number} x2 结束点 x\n   * @param {number} y2 结束点 y\n   * @return {number} 距离\n   */\n  length: function (x1, y1, x2, y2) {\n    return distance(x1, y1, x2, y2);\n  },\n  /**\n   * 根据比例获取点\n   * @param {number} x1 起始点 x\n   * @param {number} y1 起始点 y\n   * @param {number} x2 结束点 x\n   * @param {number} y2 结束点 y\n   * @param {number} t 指定比例\n   * @return {object} 包含 x, y 的点\n   */\n  pointAt: function (x1, y1, x2, y2, t) {\n    return {\n      x: (1 - t) * x1 + t * x2,\n      y: (1 - t) * y1 + t * y2\n    };\n  },\n  /**\n   * 点到线段的距离\n   * @param {number} x1 起始点 x\n   * @param {number} y1 起始点 y\n   * @param {number} x2 结束点 x\n   * @param {number} y2 结束点 y\n   * @param {number} x  测试点 x\n   * @param {number} y  测试点 y\n   * @return {number} 距离\n   */\n  pointDistance: function (x1, y1, x2, y2, x, y) {\n    // 投影距离 x1, y1 的向量，假设 p, p1, p2 三个点，投影点为 a\n    // p1a = p1p.p1p2/|p1p2| * (p1p 的单位向量)\n    var cross = (x2 - x1) * (x - x1) + (y2 - y1) * (y - y1);\n    if (cross < 0) {\n      return distance(x1, y1, x, y);\n    }\n    var lengthSquare = (x2 - x1) * (x2 - x1) + (y2 - y1) * (y2 - y1);\n    if (cross > lengthSquare) {\n      return distance(x2, y2, x, y);\n    }\n    return this.pointToLine(x1, y1, x2, y2, x, y);\n  },\n  /**\n   * 点到直线的距离，而不是点到线段的距离\n   * @param {number} x1 起始点 x\n   * @param {number} y1 起始点 y\n   * @param {number} x2 结束点 x\n   * @param {number} y2 结束点 y\n   * @param {number} x  测试点 x\n   * @param {number} y  测试点 y\n   * @return {number} 距离\n   */\n  pointToLine: function (x1, y1, x2, y2, x, y) {\n    var d = [x2 - x1, y2 - y1];\n    // 如果端点相等，则判定点到点的距离\n    if (vec2.exactEquals(d, [0, 0])) {\n      return Math.sqrt((x - x1) * (x - x1) + (y - y1) * (y - y1));\n    }\n    var u = [-d[1], d[0]];\n    vec2.normalize(u, u);\n    var a = [x - x1, y - y1];\n    return Math.abs(vec2.dot(a, u));\n  },\n  /**\n   * 线段的角度\n   * @param {number} x1 起始点 x\n   * @param {number} y1 起始点 y\n   * @param {number} x2 结束点 x\n   * @param {number} y2 结束点 y\n   * @return {number} 导数\n   */\n  tangentAngle: function (x1, y1, x2, y2) {\n    return Math.atan2(y2 - y1, x2 - x1);\n  }\n};","map":{"version":3,"names":["distance","getBBoxByArray","vec2","box","x1","y1","x2","y2","length","pointAt","t","x","y","pointDistance","cross","lengthSquare","pointToLine","d","exactEquals","Math","sqrt","u","normalize","a","abs","dot","tangentAngle","atan2"],"sources":["/Users/obiechina/Documents/ridy-flutter-full-taxi-solution 2/node_modules/@antv/g-math/esm/line.js"],"sourcesContent":["import { distance, getBBoxByArray } from './util';\nimport * as vec2 from 'gl-matrix/vec2';\nexport default {\n    /**\n     * 计算线段的包围盒\n     * @param {number} x1 起始点 x\n     * @param {number} y1 起始点 y\n     * @param {number} x2 结束点 x\n     * @param {number} y2 结束点 y\n     * @return {object} 包围盒对象\n     */\n    box: function (x1, y1, x2, y2) {\n        return getBBoxByArray([x1, x2], [y1, y2]);\n    },\n    /**\n     * 线段的长度\n     * @param {number} x1 起始点 x\n     * @param {number} y1 起始点 y\n     * @param {number} x2 结束点 x\n     * @param {number} y2 结束点 y\n     * @return {number} 距离\n     */\n    length: function (x1, y1, x2, y2) {\n        return distance(x1, y1, x2, y2);\n    },\n    /**\n     * 根据比例获取点\n     * @param {number} x1 起始点 x\n     * @param {number} y1 起始点 y\n     * @param {number} x2 结束点 x\n     * @param {number} y2 结束点 y\n     * @param {number} t 指定比例\n     * @return {object} 包含 x, y 的点\n     */\n    pointAt: function (x1, y1, x2, y2, t) {\n        return {\n            x: (1 - t) * x1 + t * x2,\n            y: (1 - t) * y1 + t * y2,\n        };\n    },\n    /**\n     * 点到线段的距离\n     * @param {number} x1 起始点 x\n     * @param {number} y1 起始点 y\n     * @param {number} x2 结束点 x\n     * @param {number} y2 结束点 y\n     * @param {number} x  测试点 x\n     * @param {number} y  测试点 y\n     * @return {number} 距离\n     */\n    pointDistance: function (x1, y1, x2, y2, x, y) {\n        // 投影距离 x1, y1 的向量，假设 p, p1, p2 三个点，投影点为 a\n        // p1a = p1p.p1p2/|p1p2| * (p1p 的单位向量)\n        var cross = (x2 - x1) * (x - x1) + (y2 - y1) * (y - y1);\n        if (cross < 0) {\n            return distance(x1, y1, x, y);\n        }\n        var lengthSquare = (x2 - x1) * (x2 - x1) + (y2 - y1) * (y2 - y1);\n        if (cross > lengthSquare) {\n            return distance(x2, y2, x, y);\n        }\n        return this.pointToLine(x1, y1, x2, y2, x, y);\n    },\n    /**\n     * 点到直线的距离，而不是点到线段的距离\n     * @param {number} x1 起始点 x\n     * @param {number} y1 起始点 y\n     * @param {number} x2 结束点 x\n     * @param {number} y2 结束点 y\n     * @param {number} x  测试点 x\n     * @param {number} y  测试点 y\n     * @return {number} 距离\n     */\n    pointToLine: function (x1, y1, x2, y2, x, y) {\n        var d = [x2 - x1, y2 - y1];\n        // 如果端点相等，则判定点到点的距离\n        if (vec2.exactEquals(d, [0, 0])) {\n            return Math.sqrt((x - x1) * (x - x1) + (y - y1) * (y - y1));\n        }\n        var u = [-d[1], d[0]];\n        vec2.normalize(u, u);\n        var a = [x - x1, y - y1];\n        return Math.abs(vec2.dot(a, u));\n    },\n    /**\n     * 线段的角度\n     * @param {number} x1 起始点 x\n     * @param {number} y1 起始点 y\n     * @param {number} x2 结束点 x\n     * @param {number} y2 结束点 y\n     * @return {number} 导数\n     */\n    tangentAngle: function (x1, y1, x2, y2) {\n        return Math.atan2(y2 - y1, x2 - x1);\n    },\n};\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}