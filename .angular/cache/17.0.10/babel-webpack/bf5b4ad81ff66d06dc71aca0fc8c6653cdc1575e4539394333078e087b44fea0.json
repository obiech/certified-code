{"ast":null,"code":"import { __extends } from \"tslib\";\nimport { AbstractGroup } from '@antv/g-base';\nimport { each } from '@antv/util';\nimport * as Shape from './shape';\nimport { drawChildren, refreshElement } from './util/draw';\nimport { setClip, setTransform } from './util/svg';\nimport { SVG_ATTR_MAP } from './constant';\nimport { createSVGElement } from './util/dom';\nvar Group = /** @class */function (_super) {\n  __extends(Group, _super);\n  function Group() {\n    return _super !== null && _super.apply(this, arguments) || this;\n  }\n  // SVG 中分组对应实体标签 <g>\n  Group.prototype.isEntityGroup = function () {\n    return true;\n  };\n  Group.prototype.createDom = function () {\n    var element = createSVGElement('g');\n    this.set('el', element);\n    var parent = this.getParent();\n    if (parent) {\n      var parentNode = parent.get('el');\n      if (parentNode) {\n        parentNode.appendChild(element);\n      } else {\n        // parentNode maybe null for group\n        parentNode = parent.createDom();\n        parent.set('el', parentNode);\n        parentNode.appendChild(element);\n      }\n    }\n    return element;\n  };\n  // 覆盖基类的 afterAttrsChange 方法\n  Group.prototype.afterAttrsChange = function (targetAttrs) {\n    _super.prototype.afterAttrsChange.call(this, targetAttrs);\n    var canvas = this.get('canvas');\n    // 只有挂载到画布下，才对元素进行实际渲染\n    if (canvas && canvas.get('autoDraw')) {\n      var context = canvas.get('context');\n      this.createPath(context, targetAttrs);\n    }\n  };\n  /**\n   * 一些方法调用会引起画布变化\n   * @param {ChangeType} changeType 改变的类型\n   */\n  Group.prototype.onCanvasChange = function (changeType) {\n    refreshElement(this, changeType);\n  };\n  Group.prototype.getShapeBase = function () {\n    return Shape;\n  };\n  Group.prototype.getGroupBase = function () {\n    return Group;\n  };\n  Group.prototype.draw = function (context) {\n    var children = this.getChildren();\n    var el = this.get('el');\n    if (this.get('destroyed')) {\n      if (el) {\n        el.parentNode.removeChild(el);\n      }\n    } else {\n      if (!el) {\n        this.createDom();\n      }\n      setClip(this, context);\n      this.createPath(context);\n      if (children.length) {\n        drawChildren(context, children);\n      }\n    }\n  };\n  /**\n   * 绘制分组的路径\n   * @param {Defs} context 上下文\n   * @param {ShapeAttrs} targetAttrs 渲染的目标属性\n   */\n  Group.prototype.createPath = function (context, targetAttrs) {\n    var attrs = this.attr();\n    var el = this.get('el');\n    each(targetAttrs || attrs, function (value, attr) {\n      if (SVG_ATTR_MAP[attr]) {\n        el.setAttribute(SVG_ATTR_MAP[attr], value);\n      }\n    });\n    setTransform(this);\n  };\n  return Group;\n}(AbstractGroup);\nexport default Group;","map":{"version":3,"names":["__extends","AbstractGroup","each","Shape","drawChildren","refreshElement","setClip","setTransform","SVG_ATTR_MAP","createSVGElement","Group","_super","apply","arguments","prototype","isEntityGroup","createDom","element","set","parent","getParent","parentNode","get","appendChild","afterAttrsChange","targetAttrs","call","canvas","context","createPath","onCanvasChange","changeType","getShapeBase","getGroupBase","draw","children","getChildren","el","removeChild","length","attrs","attr","value","setAttribute"],"sources":["/Users/obiechina/Documents/ridy-flutter-full-taxi-solution 2/node_modules/@antv/g-svg/esm/group.js"],"sourcesContent":["import { __extends } from \"tslib\";\nimport { AbstractGroup } from '@antv/g-base';\nimport { each } from '@antv/util';\nimport * as Shape from './shape';\nimport { drawChildren, refreshElement } from './util/draw';\nimport { setClip, setTransform } from './util/svg';\nimport { SVG_ATTR_MAP } from './constant';\nimport { createSVGElement } from './util/dom';\nvar Group = /** @class */ (function (_super) {\n    __extends(Group, _super);\n    function Group() {\n        return _super !== null && _super.apply(this, arguments) || this;\n    }\n    // SVG 中分组对应实体标签 <g>\n    Group.prototype.isEntityGroup = function () {\n        return true;\n    };\n    Group.prototype.createDom = function () {\n        var element = createSVGElement('g');\n        this.set('el', element);\n        var parent = this.getParent();\n        if (parent) {\n            var parentNode = parent.get('el');\n            if (parentNode) {\n                parentNode.appendChild(element);\n            }\n            else {\n                // parentNode maybe null for group\n                parentNode = parent.createDom();\n                parent.set('el', parentNode);\n                parentNode.appendChild(element);\n            }\n        }\n        return element;\n    };\n    // 覆盖基类的 afterAttrsChange 方法\n    Group.prototype.afterAttrsChange = function (targetAttrs) {\n        _super.prototype.afterAttrsChange.call(this, targetAttrs);\n        var canvas = this.get('canvas');\n        // 只有挂载到画布下，才对元素进行实际渲染\n        if (canvas && canvas.get('autoDraw')) {\n            var context = canvas.get('context');\n            this.createPath(context, targetAttrs);\n        }\n    };\n    /**\n     * 一些方法调用会引起画布变化\n     * @param {ChangeType} changeType 改变的类型\n     */\n    Group.prototype.onCanvasChange = function (changeType) {\n        refreshElement(this, changeType);\n    };\n    Group.prototype.getShapeBase = function () {\n        return Shape;\n    };\n    Group.prototype.getGroupBase = function () {\n        return Group;\n    };\n    Group.prototype.draw = function (context) {\n        var children = this.getChildren();\n        var el = this.get('el');\n        if (this.get('destroyed')) {\n            if (el) {\n                el.parentNode.removeChild(el);\n            }\n        }\n        else {\n            if (!el) {\n                this.createDom();\n            }\n            setClip(this, context);\n            this.createPath(context);\n            if (children.length) {\n                drawChildren(context, children);\n            }\n        }\n    };\n    /**\n     * 绘制分组的路径\n     * @param {Defs} context 上下文\n     * @param {ShapeAttrs} targetAttrs 渲染的目标属性\n     */\n    Group.prototype.createPath = function (context, targetAttrs) {\n        var attrs = this.attr();\n        var el = this.get('el');\n        each(targetAttrs || attrs, function (value, attr) {\n            if (SVG_ATTR_MAP[attr]) {\n                el.setAttribute(SVG_ATTR_MAP[attr], value);\n            }\n        });\n        setTransform(this);\n    };\n    return Group;\n}(AbstractGroup));\nexport default Group;\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}