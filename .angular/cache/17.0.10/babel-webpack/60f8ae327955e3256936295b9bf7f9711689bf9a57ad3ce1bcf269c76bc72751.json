{"ast":null,"code":"/*\n * 抽取pathSegment中的关键点\n * M,L,A,Q,H,V一个端点\n * Q, S抽取一个端点，一个控制点\n * C抽取一个端点，两个控制点\n */\nfunction _getSegmentPoints(segment) {\n  var points = [];\n  switch (segment[0]) {\n    case 'M':\n      points.push([segment[1], segment[2]]);\n      break;\n    case 'L':\n      points.push([segment[1], segment[2]]);\n      break;\n    case 'A':\n      points.push([segment[6], segment[7]]);\n      break;\n    case 'Q':\n      points.push([segment[3], segment[4]]);\n      points.push([segment[1], segment[2]]);\n      break;\n    case 'T':\n      points.push([segment[1], segment[2]]);\n      break;\n    case 'C':\n      points.push([segment[5], segment[6]]);\n      points.push([segment[1], segment[2]]);\n      points.push([segment[3], segment[4]]);\n      break;\n    case 'S':\n      points.push([segment[3], segment[4]]);\n      points.push([segment[1], segment[2]]);\n      break;\n    case 'H':\n      points.push([segment[1], segment[1]]);\n      break;\n    case 'V':\n      points.push([segment[1], segment[1]]);\n      break;\n    default:\n  }\n  return points;\n}\n// 将两个点均分成count个点\nfunction _splitPoints(points, former, count) {\n  var result = [].concat(points);\n  var index;\n  var t = 1 / (count + 1);\n  var formerEnd = _getSegmentPoints(former)[0];\n  for (var i = 1; i <= count; i++) {\n    t *= i;\n    index = Math.floor(points.length * t);\n    if (index === 0) {\n      result.unshift([formerEnd[0] * t + points[index][0] * (1 - t), formerEnd[1] * t + points[index][1] * (1 - t)]);\n    } else {\n      result.splice(index, 0, [formerEnd[0] * t + points[index][0] * (1 - t), formerEnd[1] * t + points[index][1] * (1 - t)]);\n    }\n  }\n  return result;\n}\nexport default function formatPath(fromPath, toPath) {\n  if (fromPath.length <= 1) {\n    return fromPath;\n  }\n  var points;\n  for (var i = 0; i < toPath.length; i++) {\n    if (fromPath[i][0] !== toPath[i][0]) {\n      // 获取fromPath的pathSegment的端点，根据toPath的指令对其改造\n      points = _getSegmentPoints(fromPath[i]);\n      switch (toPath[i][0]) {\n        case 'M':\n          fromPath[i] = ['M'].concat(points[0]);\n          break;\n        case 'L':\n          fromPath[i] = ['L'].concat(points[0]);\n          break;\n        case 'A':\n          fromPath[i] = [].concat(toPath[i]);\n          fromPath[i][6] = points[0][0];\n          fromPath[i][7] = points[0][1];\n          break;\n        case 'Q':\n          if (points.length < 2) {\n            if (i > 0) {\n              points = _splitPoints(points, fromPath[i - 1], 1);\n            } else {\n              fromPath[i] = toPath[i];\n              break;\n            }\n          }\n          fromPath[i] = ['Q'].concat(points.reduce(function (arr, i) {\n            return arr.concat(i);\n          }, []));\n          break;\n        case 'T':\n          fromPath[i] = ['T'].concat(points[0]);\n          break;\n        case 'C':\n          if (points.length < 3) {\n            if (i > 0) {\n              points = _splitPoints(points, fromPath[i - 1], 2);\n            } else {\n              fromPath[i] = toPath[i];\n              break;\n            }\n          }\n          fromPath[i] = ['C'].concat(points.reduce(function (arr, i) {\n            return arr.concat(i);\n          }, []));\n          break;\n        case 'S':\n          if (points.length < 2) {\n            if (i > 0) {\n              points = _splitPoints(points, fromPath[i - 1], 1);\n            } else {\n              fromPath[i] = toPath[i];\n              break;\n            }\n          }\n          fromPath[i] = ['S'].concat(points.reduce(function (arr, i) {\n            return arr.concat(i);\n          }, []));\n          break;\n        default:\n          fromPath[i] = toPath[i];\n      }\n    }\n  }\n  return fromPath;\n}","map":{"version":3,"names":["_getSegmentPoints","segment","points","push","_splitPoints","former","count","result","concat","index","t","formerEnd","i","Math","floor","length","unshift","splice","formatPath","fromPath","toPath","reduce","arr"],"sources":["/Users/obiechina/Documents/ridy-flutter-full-taxi-solution 2/node_modules/@antv/path-util/esm/format-path.js"],"sourcesContent":["/*\n * 抽取pathSegment中的关键点\n * M,L,A,Q,H,V一个端点\n * Q, S抽取一个端点，一个控制点\n * C抽取一个端点，两个控制点\n */\nfunction _getSegmentPoints(segment) {\n    var points = [];\n    switch (segment[0]) {\n        case 'M':\n            points.push([segment[1], segment[2]]);\n            break;\n        case 'L':\n            points.push([segment[1], segment[2]]);\n            break;\n        case 'A':\n            points.push([segment[6], segment[7]]);\n            break;\n        case 'Q':\n            points.push([segment[3], segment[4]]);\n            points.push([segment[1], segment[2]]);\n            break;\n        case 'T':\n            points.push([segment[1], segment[2]]);\n            break;\n        case 'C':\n            points.push([segment[5], segment[6]]);\n            points.push([segment[1], segment[2]]);\n            points.push([segment[3], segment[4]]);\n            break;\n        case 'S':\n            points.push([segment[3], segment[4]]);\n            points.push([segment[1], segment[2]]);\n            break;\n        case 'H':\n            points.push([segment[1], segment[1]]);\n            break;\n        case 'V':\n            points.push([segment[1], segment[1]]);\n            break;\n        default:\n    }\n    return points;\n}\n// 将两个点均分成count个点\nfunction _splitPoints(points, former, count) {\n    var result = [].concat(points);\n    var index;\n    var t = 1 / (count + 1);\n    var formerEnd = _getSegmentPoints(former)[0];\n    for (var i = 1; i <= count; i++) {\n        t *= i;\n        index = Math.floor(points.length * t);\n        if (index === 0) {\n            result.unshift([formerEnd[0] * t + points[index][0] * (1 - t), formerEnd[1] * t + points[index][1] * (1 - t)]);\n        }\n        else {\n            result.splice(index, 0, [formerEnd[0] * t + points[index][0] * (1 - t), formerEnd[1] * t + points[index][1] * (1 - t)]);\n        }\n    }\n    return result;\n}\nexport default function formatPath(fromPath, toPath) {\n    if (fromPath.length <= 1) {\n        return fromPath;\n    }\n    var points;\n    for (var i = 0; i < toPath.length; i++) {\n        if (fromPath[i][0] !== toPath[i][0]) {\n            // 获取fromPath的pathSegment的端点，根据toPath的指令对其改造\n            points = _getSegmentPoints(fromPath[i]);\n            switch (toPath[i][0]) {\n                case 'M':\n                    fromPath[i] = ['M'].concat(points[0]);\n                    break;\n                case 'L':\n                    fromPath[i] = ['L'].concat(points[0]);\n                    break;\n                case 'A':\n                    fromPath[i] = [].concat(toPath[i]);\n                    fromPath[i][6] = points[0][0];\n                    fromPath[i][7] = points[0][1];\n                    break;\n                case 'Q':\n                    if (points.length < 2) {\n                        if (i > 0) {\n                            points = _splitPoints(points, fromPath[i - 1], 1);\n                        }\n                        else {\n                            fromPath[i] = toPath[i];\n                            break;\n                        }\n                    }\n                    fromPath[i] = ['Q'].concat(points.reduce(function (arr, i) { return arr.concat(i); }, []));\n                    break;\n                case 'T':\n                    fromPath[i] = ['T'].concat(points[0]);\n                    break;\n                case 'C':\n                    if (points.length < 3) {\n                        if (i > 0) {\n                            points = _splitPoints(points, fromPath[i - 1], 2);\n                        }\n                        else {\n                            fromPath[i] = toPath[i];\n                            break;\n                        }\n                    }\n                    fromPath[i] = ['C'].concat(points.reduce(function (arr, i) { return arr.concat(i); }, []));\n                    break;\n                case 'S':\n                    if (points.length < 2) {\n                        if (i > 0) {\n                            points = _splitPoints(points, fromPath[i - 1], 1);\n                        }\n                        else {\n                            fromPath[i] = toPath[i];\n                            break;\n                        }\n                    }\n                    fromPath[i] = ['S'].concat(points.reduce(function (arr, i) { return arr.concat(i); }, []));\n                    break;\n                default:\n                    fromPath[i] = toPath[i];\n            }\n        }\n    }\n    return fromPath;\n}\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}