{"ast":null,"code":"import { __assign } from \"tslib\";\nimport { each, max, map, isArray } from '@antv/util';\nimport { registerShape, registerShapeFactory } from '../base';\nimport { getViolinPath } from '../util/get-path-points';\nimport { getStyle } from '../util/get-style';\nfunction normalizeSize(arr) {\n  if (!isArray(arr)) {\n    return [];\n  }\n  var maxValue = max(arr);\n  return map(arr, function (num) {\n    return num / maxValue;\n  });\n}\nvar ViolinShapeFactory = registerShapeFactory('violin', {\n  defaultShapeType: 'violin',\n  getDefaultPoints: function (pointInfo) {\n    var radius = pointInfo.size / 2;\n    var points = [];\n    var sizeArr = normalizeSize(pointInfo._size);\n    each(pointInfo.y, function (y, index) {\n      var offset = sizeArr[index] * radius;\n      var isMin = index === 0;\n      var isMax = index === pointInfo.y.length - 1;\n      points.push({\n        isMin: isMin,\n        isMax: isMax,\n        x: pointInfo.x - offset,\n        y: y\n      });\n      points.unshift({\n        isMin: isMin,\n        isMax: isMax,\n        x: pointInfo.x + offset,\n        y: y\n      });\n    });\n    return points;\n  }\n});\nregisterShape('violin', 'violin', {\n  draw: function (cfg, container) {\n    var shapeAttrs = getStyle(cfg, true, true);\n    var path = this.parsePath(getViolinPath(cfg.points));\n    return container.addShape('path', {\n      attrs: __assign(__assign({}, shapeAttrs), {\n        path: path\n      }),\n      name: 'violin'\n    });\n  },\n  getMarker: function (markerCfg) {\n    var color = markerCfg.color;\n    return {\n      symbol: 'circle',\n      style: {\n        r: 4,\n        fill: color\n      }\n    };\n  }\n});\nexport default ViolinShapeFactory;","map":{"version":3,"names":["__assign","each","max","map","isArray","registerShape","registerShapeFactory","getViolinPath","getStyle","normalizeSize","arr","maxValue","num","ViolinShapeFactory","defaultShapeType","getDefaultPoints","pointInfo","radius","size","points","sizeArr","_size","y","index","offset","isMin","isMax","length","push","x","unshift","draw","cfg","container","shapeAttrs","path","parsePath","addShape","attrs","name","getMarker","markerCfg","color","symbol","style","r","fill"],"sources":["/Users/obiechina/Documents/ridy-flutter-full-taxi-solution 2/node_modules/@antv/g2/esm/geometry/shape/violin/index.js"],"sourcesContent":["import { __assign } from \"tslib\";\nimport { each, max, map, isArray } from '@antv/util';\nimport { registerShape, registerShapeFactory } from '../base';\nimport { getViolinPath } from '../util/get-path-points';\nimport { getStyle } from '../util/get-style';\nfunction normalizeSize(arr) {\n    if (!isArray(arr)) {\n        return [];\n    }\n    var maxValue = max(arr);\n    return map(arr, function (num) { return num / maxValue; });\n}\nvar ViolinShapeFactory = registerShapeFactory('violin', {\n    defaultShapeType: 'violin',\n    getDefaultPoints: function (pointInfo) {\n        var radius = pointInfo.size / 2;\n        var points = [];\n        var sizeArr = normalizeSize(pointInfo._size);\n        each(pointInfo.y, function (y, index) {\n            var offset = sizeArr[index] * radius;\n            var isMin = index === 0;\n            var isMax = index === pointInfo.y.length - 1;\n            points.push({\n                isMin: isMin,\n                isMax: isMax,\n                x: pointInfo.x - offset,\n                y: y,\n            });\n            points.unshift({\n                isMin: isMin,\n                isMax: isMax,\n                x: pointInfo.x + offset,\n                y: y,\n            });\n        });\n        return points;\n    },\n});\nregisterShape('violin', 'violin', {\n    draw: function (cfg, container) {\n        var shapeAttrs = getStyle(cfg, true, true);\n        var path = this.parsePath(getViolinPath(cfg.points));\n        return container.addShape('path', {\n            attrs: __assign(__assign({}, shapeAttrs), { path: path }),\n            name: 'violin',\n        });\n    },\n    getMarker: function (markerCfg) {\n        var color = markerCfg.color;\n        return {\n            symbol: 'circle',\n            style: {\n                r: 4,\n                fill: color,\n            },\n        };\n    },\n});\nexport default ViolinShapeFactory;\n"],"mappings":"AAAA,SAASA,QAAQ,QAAQ,OAAO;AAChC,SAASC,IAAI,EAAEC,GAAG,EAAEC,GAAG,EAAEC,OAAO,QAAQ,YAAY;AACpD,SAASC,aAAa,EAAEC,oBAAoB,QAAQ,SAAS;AAC7D,SAASC,aAAa,QAAQ,yBAAyB;AACvD,SAASC,QAAQ,QAAQ,mBAAmB;AAC5C,SAASC,aAAaA,CAACC,GAAG,EAAE;EACxB,IAAI,CAACN,OAAO,CAACM,GAAG,CAAC,EAAE;IACf,OAAO,EAAE;EACb;EACA,IAAIC,QAAQ,GAAGT,GAAG,CAACQ,GAAG,CAAC;EACvB,OAAOP,GAAG,CAACO,GAAG,EAAE,UAAUE,GAAG,EAAE;IAAE,OAAOA,GAAG,GAAGD,QAAQ;EAAE,CAAC,CAAC;AAC9D;AACA,IAAIE,kBAAkB,GAAGP,oBAAoB,CAAC,QAAQ,EAAE;EACpDQ,gBAAgB,EAAE,QAAQ;EAC1BC,gBAAgB,EAAE,SAAAA,CAAUC,SAAS,EAAE;IACnC,IAAIC,MAAM,GAAGD,SAAS,CAACE,IAAI,GAAG,CAAC;IAC/B,IAAIC,MAAM,GAAG,EAAE;IACf,IAAIC,OAAO,GAAGX,aAAa,CAACO,SAAS,CAACK,KAAK,CAAC;IAC5CpB,IAAI,CAACe,SAAS,CAACM,CAAC,EAAE,UAAUA,CAAC,EAAEC,KAAK,EAAE;MAClC,IAAIC,MAAM,GAAGJ,OAAO,CAACG,KAAK,CAAC,GAAGN,MAAM;MACpC,IAAIQ,KAAK,GAAGF,KAAK,KAAK,CAAC;MACvB,IAAIG,KAAK,GAAGH,KAAK,KAAKP,SAAS,CAACM,CAAC,CAACK,MAAM,GAAG,CAAC;MAC5CR,MAAM,CAACS,IAAI,CAAC;QACRH,KAAK,EAAEA,KAAK;QACZC,KAAK,EAAEA,KAAK;QACZG,CAAC,EAAEb,SAAS,CAACa,CAAC,GAAGL,MAAM;QACvBF,CAAC,EAAEA;MACP,CAAC,CAAC;MACFH,MAAM,CAACW,OAAO,CAAC;QACXL,KAAK,EAAEA,KAAK;QACZC,KAAK,EAAEA,KAAK;QACZG,CAAC,EAAEb,SAAS,CAACa,CAAC,GAAGL,MAAM;QACvBF,CAAC,EAAEA;MACP,CAAC,CAAC;IACN,CAAC,CAAC;IACF,OAAOH,MAAM;EACjB;AACJ,CAAC,CAAC;AACFd,aAAa,CAAC,QAAQ,EAAE,QAAQ,EAAE;EAC9B0B,IAAI,EAAE,SAAAA,CAAUC,GAAG,EAAEC,SAAS,EAAE;IAC5B,IAAIC,UAAU,GAAG1B,QAAQ,CAACwB,GAAG,EAAE,IAAI,EAAE,IAAI,CAAC;IAC1C,IAAIG,IAAI,GAAG,IAAI,CAACC,SAAS,CAAC7B,aAAa,CAACyB,GAAG,CAACb,MAAM,CAAC,CAAC;IACpD,OAAOc,SAAS,CAACI,QAAQ,CAAC,MAAM,EAAE;MAC9BC,KAAK,EAAEtC,QAAQ,CAACA,QAAQ,CAAC,CAAC,CAAC,EAAEkC,UAAU,CAAC,EAAE;QAAEC,IAAI,EAAEA;MAAK,CAAC,CAAC;MACzDI,IAAI,EAAE;IACV,CAAC,CAAC;EACN,CAAC;EACDC,SAAS,EAAE,SAAAA,CAAUC,SAAS,EAAE;IAC5B,IAAIC,KAAK,GAAGD,SAAS,CAACC,KAAK;IAC3B,OAAO;MACHC,MAAM,EAAE,QAAQ;MAChBC,KAAK,EAAE;QACHC,CAAC,EAAE,CAAC;QACJC,IAAI,EAAEJ;MACV;IACJ,CAAC;EACL;AACJ,CAAC,CAAC;AACF,eAAe7B,kBAAkB","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}