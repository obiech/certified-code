{"ast":null,"code":"import { __assign, __extends, __rest } from \"tslib\";\nimport { difference, each, isNil, keys, mix, pick } from '@antv/util';\nimport { propagationDelegate } from '../util/event';\nimport { applyMatrix2BBox, getMatrixByTranslate } from '../util/matrix';\nimport { getBBoxWithClip, updateClip } from '../util/util';\nimport Component from './component';\nvar STATUS_UPDATE = 'update_status';\nvar COPY_PROPERTIES = ['visible', 'tip', 'delegateObject']; // 更新对象时需要复制的属性\nvar COPY_PROPERTIES_EXCLUDES = ['container', 'group', 'shapesMap', 'isRegister', 'isUpdating', 'destroyed']; // 更新子组件时排除的属性\nvar GroupComponent = /** @class */function (_super) {\n  __extends(GroupComponent, _super);\n  function GroupComponent() {\n    return _super !== null && _super.apply(this, arguments) || this;\n  }\n  GroupComponent.prototype.getDefaultCfg = function () {\n    var cfg = _super.prototype.getDefaultCfg.call(this);\n    return __assign(__assign({}, cfg), {\n      container: null,\n      /**\n       * @private\n       * 缓存图形的 Map\n       */\n      shapesMap: {},\n      group: null,\n      capture: true,\n      /**\n       * @private 组件或者图形是否允许注册\n       * @type {false}\n       */\n      isRegister: false,\n      /**\n       * @private 是否正在更新\n       * @type {false}\n       */\n      isUpdating: false,\n      /**\n       * @private\n       * 是否初始状态，一旦 render，update 后，这个状态就变成 false, clear 后恢复\n       */\n      isInit: true\n    });\n  };\n  GroupComponent.prototype.remove = function () {\n    this.clear();\n    var group = this.get('group');\n    group.remove();\n  };\n  GroupComponent.prototype.clear = function () {\n    var group = this.get('group');\n    group.clear();\n    this.set('shapesMap', {});\n    this.clearOffScreenCache();\n    this.set('isInit', true);\n  };\n  GroupComponent.prototype.getChildComponentById = function (id) {\n    var group = this.getElementById(id);\n    var inst = group && group.get('component');\n    return inst;\n  };\n  GroupComponent.prototype.getElementById = function (id) {\n    return this.get('shapesMap')[id];\n  };\n  GroupComponent.prototype.getElementByLocalId = function (localId) {\n    var id = this.getElementId(localId);\n    return this.getElementById(id);\n  };\n  GroupComponent.prototype.getElementsByName = function (name) {\n    var rst = [];\n    each(this.get('shapesMap'), function (elem) {\n      if (elem.get('name') === name) {\n        rst.push(elem);\n      }\n    });\n    return rst;\n  };\n  GroupComponent.prototype.getContainer = function () {\n    return this.get('container');\n  };\n  GroupComponent.prototype.updateInner = function (cfg) {\n    // this.updateInner();\n    // this.set('isUpdating', false);\n    this.offScreenRender();\n    if (this.get('updateAutoRender')) {\n      this.render();\n    }\n  };\n  GroupComponent.prototype.render = function () {\n    var offScreenGroup = this.get('offScreenGroup');\n    if (!offScreenGroup) {\n      offScreenGroup = this.offScreenRender();\n    }\n    var group = this.get('group');\n    this.updateElements(offScreenGroup, group);\n    this.deleteElements();\n    this.applyOffset();\n    if (!this.get('eventInitted')) {\n      this.initEvent();\n      this.set('eventInitted', true);\n    }\n    this.set('isInit', false);\n  };\n  GroupComponent.prototype.show = function () {\n    var group = this.get('group');\n    group.show();\n    this.set('visible', true);\n  };\n  GroupComponent.prototype.hide = function () {\n    var group = this.get('group');\n    group.hide();\n    this.set('visible', false);\n  };\n  GroupComponent.prototype.setCapture = function (capture) {\n    var group = this.get('group');\n    group.set('capture', capture);\n    this.set('capture', capture);\n  };\n  GroupComponent.prototype.destroy = function () {\n    this.removeEvent();\n    this.remove();\n    _super.prototype.destroy.call(this);\n  };\n  GroupComponent.prototype.getBBox = function () {\n    return this.get('group').getCanvasBBox();\n  };\n  GroupComponent.prototype.getLayoutBBox = function () {\n    var group = this.get('group');\n    // 防止被 clear 了，offScreenBBox 不存在\n    var bbox = this.getInnerLayoutBBox();\n    var matrix = group.getTotalMatrix();\n    if (matrix) {\n      bbox = applyMatrix2BBox(matrix, bbox);\n    }\n    return bbox; // 默认返回 getBBox，不同的组件内部单独实现\n  };\n  // 复写 on, off, emit 透传到 group\n  GroupComponent.prototype.on = function (evt, callback, once) {\n    var group = this.get('group');\n    group.on(evt, callback, once);\n    return this;\n  };\n  GroupComponent.prototype.off = function (evt, callback) {\n    var group = this.get('group');\n    group && group.off(evt, callback);\n    return this;\n  };\n  GroupComponent.prototype.emit = function (eventName, eventObject) {\n    var group = this.get('group');\n    group.emit(eventName, eventObject);\n  };\n  GroupComponent.prototype.init = function () {\n    _super.prototype.init.call(this);\n    if (!this.get('group')) {\n      this.initGroup();\n    }\n    this.offScreenRender(); // 绘制离屏 group\n  };\n  // 获取组件内部布局占的包围盒\n  GroupComponent.prototype.getInnerLayoutBBox = function () {\n    return this.get('offScreenBBox') || this.get('group').getBBox();\n  };\n  // 抛出委托对象\n  GroupComponent.prototype.delegateEmit = function (eventName, eventObject) {\n    var group = this.get('group');\n    eventObject.target = group;\n    group.emit(eventName, eventObject);\n    propagationDelegate(group, eventName, eventObject);\n  };\n  // 创建离屏的 group ,不添加在 canvas 中\n  GroupComponent.prototype.createOffScreenGroup = function () {\n    var group = this.get('group');\n    var GroupClass = group.getGroupBase(); // 获取分组的构造函数\n    var newGroup = new GroupClass({\n      delegateObject: this.getDelegateObject()\n    });\n    return newGroup;\n  };\n  // 应用 offset\n  GroupComponent.prototype.applyOffset = function () {\n    var offsetX = this.get('offsetX');\n    var offsetY = this.get('offsetY');\n    this.moveElementTo(this.get('group'), {\n      x: offsetX,\n      y: offsetY\n    });\n  };\n  GroupComponent.prototype.initGroup = function () {\n    var container = this.get('container');\n    this.set('group', container.addGroup({\n      id: this.get('id'),\n      name: this.get('name'),\n      capture: this.get('capture'),\n      visible: this.get('visible'),\n      isComponent: true,\n      component: this,\n      delegateObject: this.getDelegateObject()\n    }));\n  };\n  // 离屏渲染\n  GroupComponent.prototype.offScreenRender = function () {\n    this.clearOffScreenCache();\n    var offScreenGroup = this.createOffScreenGroup();\n    this.renderInner(offScreenGroup);\n    this.set('offScreenGroup', offScreenGroup);\n    // 包含包围盒的 bbox\n    this.set('offScreenBBox', getBBoxWithClip(offScreenGroup));\n    return offScreenGroup;\n  };\n  /**\n   * @protected\n   * 在组件上添加分组，主要解决 isReigeter 的问题\n   * @param {IGroup} parent 父元素\n   * @param {object} cfg    分组的配置项\n   */\n  GroupComponent.prototype.addGroup = function (parent, cfg) {\n    this.appendDelegateObject(parent, cfg);\n    var group = parent.addGroup(cfg);\n    if (this.get('isRegister')) {\n      this.registerElement(group);\n    }\n    return group;\n  };\n  /**\n   * @protected\n   * 在组件上添加图形，主要解决 isReigeter 的问题\n   * @param {IGroup} parent 父元素\n   * @param {object} cfg    分组的配置项\n   */\n  GroupComponent.prototype.addShape = function (parent, cfg) {\n    this.appendDelegateObject(parent, cfg);\n    var shape = parent.addShape(cfg);\n    if (this.get('isRegister')) {\n      this.registerElement(shape);\n    }\n    return shape;\n  };\n  /**\n   * 在组件上添加子组件\n   *\n   * @param parent 父元素\n   * @param cfg 子组件配置项\n   */\n  GroupComponent.prototype.addComponent = function (parent, cfg) {\n    var id = cfg.id,\n      Ctor = cfg.component,\n      restCfg = __rest(cfg, [\"id\", \"component\"]);\n    // @ts-ignore\n    var inst = new Ctor(__assign(__assign({}, restCfg), {\n      id: id,\n      container: parent,\n      updateAutoRender: this.get('updateAutoRender')\n    }));\n    inst.init();\n    inst.render();\n    if (this.get('isRegister')) {\n      this.registerElement(inst.get('group'));\n    }\n    return inst;\n  };\n  GroupComponent.prototype.initEvent = function () {};\n  GroupComponent.prototype.removeEvent = function () {\n    var group = this.get('group');\n    group.off();\n  };\n  GroupComponent.prototype.getElementId = function (localId) {\n    var id = this.get('id'); // 组件的 Id\n    var name = this.get('name'); // 组件的名称\n    return id + \"-\" + name + \"-\" + localId;\n  };\n  GroupComponent.prototype.registerElement = function (element) {\n    var id = element.get('id');\n    this.get('shapesMap')[id] = element;\n  };\n  GroupComponent.prototype.unregisterElement = function (element) {\n    var id = element.get('id');\n    delete this.get('shapesMap')[id];\n  };\n  // 移动元素\n  GroupComponent.prototype.moveElementTo = function (element, point) {\n    var matrix = getMatrixByTranslate(point);\n    element.attr('matrix', matrix);\n  };\n  /**\n   * 图形元素新出现时的动画，默认图形从透明度 0 到当前透明度\n   * @protected\n   * @param {string} elmentName 图形元素名称\n   * @param {IElement} newElement  新的图形元素\n   * @param {object} animateCfg 动画的配置项\n   */\n  GroupComponent.prototype.addAnimation = function (elmentName, newElement, animateCfg) {\n    // 缓存透明度\n    var originOpacity = newElement.attr('opacity');\n    if (isNil(originOpacity)) {\n      originOpacity = 1;\n    }\n    newElement.attr('opacity', 0);\n    newElement.animate({\n      opacity: originOpacity\n    }, animateCfg);\n  };\n  /**\n   * 图形元素新出现时的动画，默认图形从透明度 0 到当前透明度\n   * @protected\n   * @param {string} elmentName 图形元素名称\n   * @param {IElement} originElement 要删除的图形元素\n   * @param {object} animateCfg 动画的配置项\n   */\n  GroupComponent.prototype.removeAnimation = function (elementName, originElement, animateCfg) {\n    originElement.animate({\n      opacity: 0\n    }, animateCfg);\n  };\n  /**\n   * 图形元素的更新动画\n   * @param {string} elmentName 图形元素名称\n   * @param {IElement} originElement 现有的图形元素\n   * @param {object} newAttrs  新的图形元素\n   * @param {object} animateCfg 动画的配置项\n   */\n  GroupComponent.prototype.updateAnimation = function (elementName, originElement, newAttrs, animateCfg) {\n    originElement.animate(newAttrs, animateCfg);\n  };\n  // 更新组件的图形\n  GroupComponent.prototype.updateElements = function (newGroup, originGroup) {\n    var _this = this;\n    var animate = this.get('animate');\n    var animateOption = this.get('animateOption');\n    var children = newGroup.getChildren().slice(0); // 创建一个新数组，防止添加到 originGroup 时， children 变动\n    var preElement; // 前面已经匹配到的图形元素，用于\n    each(children, function (element) {\n      var elementId = element.get('id');\n      var originElement = _this.getElementById(elementId);\n      var elementName = element.get('name');\n      if (originElement) {\n        if (element.get('isComponent')) {\n          // 嵌套子组件更新\n          var childComponent = element.get('component');\n          var origChildComponent = originElement.get('component');\n          var newCfg = pick(childComponent.cfg, difference(keys(childComponent.cfg), COPY_PROPERTIES_EXCLUDES));\n          origChildComponent.update(newCfg);\n          originElement.set(STATUS_UPDATE, 'update');\n        } else {\n          var replaceAttrs = _this.getReplaceAttrs(originElement, element);\n          // 更新\n          if (animate && animateOption.update) {\n            // 没有动画\n            _this.updateAnimation(elementName, originElement, replaceAttrs, animateOption.update);\n          } else {\n            // originElement.attrs = replaceAttrs; // 直接替换\n            originElement.attr(replaceAttrs);\n          }\n          // 如果是分组，则继续执行\n          if (element.isGroup()) {\n            _this.updateElements(element, originElement);\n          }\n          // 复制属性\n          each(COPY_PROPERTIES, function (name) {\n            originElement.set(name, element.get(name));\n          });\n          updateClip(originElement, element);\n          preElement = originElement;\n          // 执行完更新后设置状态位为更新\n          originElement.set(STATUS_UPDATE, 'update');\n        }\n      } else {\n        // 没有对应的图形，则插入当前图形\n        originGroup.add(element); // 应该在 group 加个 insertAt 的方法\n        var siblings = originGroup.getChildren(); // 兄弟节点\n        siblings.splice(siblings.length - 1, 1); // 先从数组中移除，然后放到合适的位置\n        if (preElement) {\n          // 前面已经有更新的图形或者插入的图形，则在这个图形后面插入\n          var index = siblings.indexOf(preElement);\n          siblings.splice(index + 1, 0, element); // 在已经更新的图形元素后面插入\n        } else {\n          siblings.unshift(element);\n        }\n        _this.registerElement(element); // 注册节点\n        element.set(STATUS_UPDATE, 'add'); // 执行完更新后设置状态位为添加\n        if (element.get('isComponent')) {\n          // 直接新增子组件container属性，实例不变\n          var childComponent = element.get('component');\n          childComponent.set('container', originGroup);\n        } else if (element.isGroup()) {\n          // 如果元素是新增加的元素，则遍历注册所有的子节点\n          _this.registerNewGroup(element);\n        }\n        preElement = element;\n        if (animate) {\n          var animateCfg = _this.get('isInit') ? animateOption.appear : animateOption.enter;\n          if (animateCfg) {\n            _this.addAnimation(elementName, element, animateCfg);\n          }\n        }\n      }\n    });\n  };\n  GroupComponent.prototype.clearUpdateStatus = function (group) {\n    var children = group.getChildren();\n    each(children, function (el) {\n      el.set(STATUS_UPDATE, null); // 清理掉更新状态\n    });\n  };\n  // 清理离屏缓存\n  GroupComponent.prototype.clearOffScreenCache = function () {\n    var offScreenGroup = this.get('offScreenGroup');\n    if (offScreenGroup) {\n      // 销毁原先的离线 Group\n      offScreenGroup.destroy();\n    }\n    this.set('offScreenGroup', null);\n    this.set('offScreenBBox', null);\n  };\n  // private updateInner() {\n  //   const group = this.get('group');\n  //   const newGroup = this.createOffScreenGroup();\n  //   this.renderInner(newGroup);\n  //   this.applyOffset();\n  //   this.updateElements(newGroup, group);\n  //   this.deleteElements();\n  //   newGroup.destroy(); // 销毁虚拟分组\n  // }\n  // 获取发生委托时的对象，在事件中抛出\n  GroupComponent.prototype.getDelegateObject = function () {\n    var _a;\n    var name = this.get('name');\n    var delegateObject = (_a = {}, _a[name] = this, _a.component = this, _a);\n    return delegateObject;\n  };\n  // 附加委托信息，用于事件\n  GroupComponent.prototype.appendDelegateObject = function (parent, cfg) {\n    var parentObject = parent.get('delegateObject');\n    if (!cfg.delegateObject) {\n      cfg.delegateObject = {};\n    }\n    mix(cfg.delegateObject, parentObject); // 将父元素上的委托信息复制到自身\n  };\n  // 获取需要替换的属性，如果原先图形元素存在，而新图形不存在，则设置 undefined\n  GroupComponent.prototype.getReplaceAttrs = function (originElement, newElement) {\n    var originAttrs = originElement.attr();\n    var newAttrs = newElement.attr();\n    each(originAttrs, function (v, k) {\n      if (newAttrs[k] === undefined) {\n        newAttrs[k] = undefined;\n      }\n    });\n    return newAttrs;\n  };\n  GroupComponent.prototype.registerNewGroup = function (group) {\n    var _this = this;\n    var children = group.getChildren();\n    each(children, function (element) {\n      _this.registerElement(element); // 注册节点\n      element.set(STATUS_UPDATE, 'add'); // 执行完更新后设置状态位为添加\n      if (element.isGroup()) {\n        _this.registerNewGroup(element);\n      }\n    });\n  };\n  // 移除多余的元素\n  GroupComponent.prototype.deleteElements = function () {\n    var _this = this;\n    var shapesMap = this.get('shapesMap');\n    var deleteArray = [];\n    // 遍历获取需要删除的图形元素\n    each(shapesMap, function (element, id) {\n      if (!element.get(STATUS_UPDATE) || element.destroyed) {\n        deleteArray.push([id, element]);\n      } else {\n        element.set(STATUS_UPDATE, null); // 清理掉更新状态\n      }\n    });\n\n    var animate = this.get('animate');\n    var animateOption = this.get('animateOption');\n    // 删除图形元素\n    each(deleteArray, function (item) {\n      var id = item[0],\n        element = item[1];\n      if (!element.destroyed) {\n        var elementName = element.get('name');\n        if (animate && animateOption.leave) {\n          // 需要动画结束时移除图形\n          var callbackAnimCfg = mix({\n            callback: function () {\n              _this.removeElement(element);\n            }\n          }, animateOption.leave);\n          _this.removeAnimation(elementName, element, callbackAnimCfg);\n        } else {\n          _this.removeElement(element);\n        }\n      }\n      delete shapesMap[id]; // 从缓存中移除\n    });\n  };\n\n  GroupComponent.prototype.removeElement = function (element) {\n    if (element.get('isGroup')) {\n      var component = element.get('component');\n      if (component) {\n        component.destroy();\n      }\n    }\n    element.remove();\n  };\n  return GroupComponent;\n}(Component);\nexport default GroupComponent;","map":{"version":3,"names":["__assign","__extends","__rest","difference","each","isNil","keys","mix","pick","propagationDelegate","applyMatrix2BBox","getMatrixByTranslate","getBBoxWithClip","updateClip","Component","STATUS_UPDATE","COPY_PROPERTIES","COPY_PROPERTIES_EXCLUDES","GroupComponent","_super","apply","arguments","prototype","getDefaultCfg","cfg","call","container","shapesMap","group","capture","isRegister","isUpdating","isInit","remove","clear","get","set","clearOffScreenCache","getChildComponentById","id","getElementById","inst","getElementByLocalId","localId","getElementId","getElementsByName","name","rst","elem","push","getContainer","updateInner","offScreenRender","render","offScreenGroup","updateElements","deleteElements","applyOffset","initEvent","show","hide","setCapture","destroy","removeEvent","getBBox","getCanvasBBox","getLayoutBBox","bbox","getInnerLayoutBBox","matrix","getTotalMatrix","on","evt","callback","once","off","emit","eventName","eventObject","init","initGroup","delegateEmit","target","createOffScreenGroup","GroupClass","getGroupBase","newGroup","delegateObject","getDelegateObject","offsetX","offsetY","moveElementTo","x","y","addGroup","visible","isComponent","component","renderInner","parent","appendDelegateObject","registerElement","addShape","shape","addComponent","Ctor","restCfg","updateAutoRender","element","unregisterElement","point","attr","addAnimation","elmentName","newElement","animateCfg","originOpacity","animate","opacity","removeAnimation","elementName","originElement","updateAnimation","newAttrs","originGroup","_this","animateOption","children","getChildren","slice","preElement","elementId","childComponent","origChildComponent","newCfg","update","replaceAttrs","getReplaceAttrs","isGroup","add","siblings","splice","length","index","indexOf","unshift","registerNewGroup","appear","enter","clearUpdateStatus","el","_a","parentObject","originAttrs","v","k","undefined","deleteArray","destroyed","item","leave","callbackAnimCfg","removeElement"],"sources":["/Users/obiechina/Documents/ridy-flutter-full-taxi-solution 2/node_modules/@antv/component/esm/abstract/group-component.js"],"sourcesContent":["import { __assign, __extends, __rest } from \"tslib\";\nimport { difference, each, isNil, keys, mix, pick } from '@antv/util';\nimport { propagationDelegate } from '../util/event';\nimport { applyMatrix2BBox, getMatrixByTranslate } from '../util/matrix';\nimport { getBBoxWithClip, updateClip } from '../util/util';\nimport Component from './component';\nvar STATUS_UPDATE = 'update_status';\nvar COPY_PROPERTIES = ['visible', 'tip', 'delegateObject']; // 更新对象时需要复制的属性\nvar COPY_PROPERTIES_EXCLUDES = ['container', 'group', 'shapesMap', 'isRegister', 'isUpdating', 'destroyed']; // 更新子组件时排除的属性\nvar GroupComponent = /** @class */ (function (_super) {\n    __extends(GroupComponent, _super);\n    function GroupComponent() {\n        return _super !== null && _super.apply(this, arguments) || this;\n    }\n    GroupComponent.prototype.getDefaultCfg = function () {\n        var cfg = _super.prototype.getDefaultCfg.call(this);\n        return __assign(__assign({}, cfg), { container: null, \n            /**\n             * @private\n             * 缓存图形的 Map\n             */\n            shapesMap: {}, group: null, capture: true, \n            /**\n             * @private 组件或者图形是否允许注册\n             * @type {false}\n             */\n            isRegister: false, \n            /**\n             * @private 是否正在更新\n             * @type {false}\n             */\n            isUpdating: false, \n            /**\n             * @private\n             * 是否初始状态，一旦 render，update 后，这个状态就变成 false, clear 后恢复\n             */\n            isInit: true });\n    };\n    GroupComponent.prototype.remove = function () {\n        this.clear();\n        var group = this.get('group');\n        group.remove();\n    };\n    GroupComponent.prototype.clear = function () {\n        var group = this.get('group');\n        group.clear();\n        this.set('shapesMap', {});\n        this.clearOffScreenCache();\n        this.set('isInit', true);\n    };\n    GroupComponent.prototype.getChildComponentById = function (id) {\n        var group = this.getElementById(id);\n        var inst = group && group.get('component');\n        return inst;\n    };\n    GroupComponent.prototype.getElementById = function (id) {\n        return this.get('shapesMap')[id];\n    };\n    GroupComponent.prototype.getElementByLocalId = function (localId) {\n        var id = this.getElementId(localId);\n        return this.getElementById(id);\n    };\n    GroupComponent.prototype.getElementsByName = function (name) {\n        var rst = [];\n        each(this.get('shapesMap'), function (elem) {\n            if (elem.get('name') === name) {\n                rst.push(elem);\n            }\n        });\n        return rst;\n    };\n    GroupComponent.prototype.getContainer = function () {\n        return this.get('container');\n    };\n    GroupComponent.prototype.updateInner = function (cfg) {\n        // this.updateInner();\n        // this.set('isUpdating', false);\n        this.offScreenRender();\n        if (this.get('updateAutoRender')) {\n            this.render();\n        }\n    };\n    GroupComponent.prototype.render = function () {\n        var offScreenGroup = this.get('offScreenGroup');\n        if (!offScreenGroup) {\n            offScreenGroup = this.offScreenRender();\n        }\n        var group = this.get('group');\n        this.updateElements(offScreenGroup, group);\n        this.deleteElements();\n        this.applyOffset();\n        if (!this.get('eventInitted')) {\n            this.initEvent();\n            this.set('eventInitted', true);\n        }\n        this.set('isInit', false);\n    };\n    GroupComponent.prototype.show = function () {\n        var group = this.get('group');\n        group.show();\n        this.set('visible', true);\n    };\n    GroupComponent.prototype.hide = function () {\n        var group = this.get('group');\n        group.hide();\n        this.set('visible', false);\n    };\n    GroupComponent.prototype.setCapture = function (capture) {\n        var group = this.get('group');\n        group.set('capture', capture);\n        this.set('capture', capture);\n    };\n    GroupComponent.prototype.destroy = function () {\n        this.removeEvent();\n        this.remove();\n        _super.prototype.destroy.call(this);\n    };\n    GroupComponent.prototype.getBBox = function () {\n        return this.get('group').getCanvasBBox();\n    };\n    GroupComponent.prototype.getLayoutBBox = function () {\n        var group = this.get('group');\n        // 防止被 clear 了，offScreenBBox 不存在\n        var bbox = this.getInnerLayoutBBox();\n        var matrix = group.getTotalMatrix();\n        if (matrix) {\n            bbox = applyMatrix2BBox(matrix, bbox);\n        }\n        return bbox; // 默认返回 getBBox，不同的组件内部单独实现\n    };\n    // 复写 on, off, emit 透传到 group\n    GroupComponent.prototype.on = function (evt, callback, once) {\n        var group = this.get('group');\n        group.on(evt, callback, once);\n        return this;\n    };\n    GroupComponent.prototype.off = function (evt, callback) {\n        var group = this.get('group');\n        group && group.off(evt, callback);\n        return this;\n    };\n    GroupComponent.prototype.emit = function (eventName, eventObject) {\n        var group = this.get('group');\n        group.emit(eventName, eventObject);\n    };\n    GroupComponent.prototype.init = function () {\n        _super.prototype.init.call(this);\n        if (!this.get('group')) {\n            this.initGroup();\n        }\n        this.offScreenRender(); // 绘制离屏 group\n    };\n    // 获取组件内部布局占的包围盒\n    GroupComponent.prototype.getInnerLayoutBBox = function () {\n        return this.get('offScreenBBox') || this.get('group').getBBox();\n    };\n    // 抛出委托对象\n    GroupComponent.prototype.delegateEmit = function (eventName, eventObject) {\n        var group = this.get('group');\n        eventObject.target = group;\n        group.emit(eventName, eventObject);\n        propagationDelegate(group, eventName, eventObject);\n    };\n    // 创建离屏的 group ,不添加在 canvas 中\n    GroupComponent.prototype.createOffScreenGroup = function () {\n        var group = this.get('group');\n        var GroupClass = group.getGroupBase(); // 获取分组的构造函数\n        var newGroup = new GroupClass({\n            delegateObject: this.getDelegateObject(),\n        });\n        return newGroup;\n    };\n    // 应用 offset\n    GroupComponent.prototype.applyOffset = function () {\n        var offsetX = this.get('offsetX');\n        var offsetY = this.get('offsetY');\n        this.moveElementTo(this.get('group'), {\n            x: offsetX,\n            y: offsetY,\n        });\n    };\n    GroupComponent.prototype.initGroup = function () {\n        var container = this.get('container');\n        this.set('group', container.addGroup({\n            id: this.get('id'),\n            name: this.get('name'),\n            capture: this.get('capture'),\n            visible: this.get('visible'),\n            isComponent: true,\n            component: this,\n            delegateObject: this.getDelegateObject(),\n        }));\n    };\n    // 离屏渲染\n    GroupComponent.prototype.offScreenRender = function () {\n        this.clearOffScreenCache();\n        var offScreenGroup = this.createOffScreenGroup();\n        this.renderInner(offScreenGroup);\n        this.set('offScreenGroup', offScreenGroup);\n        // 包含包围盒的 bbox\n        this.set('offScreenBBox', getBBoxWithClip(offScreenGroup));\n        return offScreenGroup;\n    };\n    /**\n     * @protected\n     * 在组件上添加分组，主要解决 isReigeter 的问题\n     * @param {IGroup} parent 父元素\n     * @param {object} cfg    分组的配置项\n     */\n    GroupComponent.prototype.addGroup = function (parent, cfg) {\n        this.appendDelegateObject(parent, cfg);\n        var group = parent.addGroup(cfg);\n        if (this.get('isRegister')) {\n            this.registerElement(group);\n        }\n        return group;\n    };\n    /**\n     * @protected\n     * 在组件上添加图形，主要解决 isReigeter 的问题\n     * @param {IGroup} parent 父元素\n     * @param {object} cfg    分组的配置项\n     */\n    GroupComponent.prototype.addShape = function (parent, cfg) {\n        this.appendDelegateObject(parent, cfg);\n        var shape = parent.addShape(cfg);\n        if (this.get('isRegister')) {\n            this.registerElement(shape);\n        }\n        return shape;\n    };\n    /**\n     * 在组件上添加子组件\n     *\n     * @param parent 父元素\n     * @param cfg 子组件配置项\n     */\n    GroupComponent.prototype.addComponent = function (parent, cfg) {\n        var id = cfg.id, Ctor = cfg.component, restCfg = __rest(cfg, [\"id\", \"component\"]);\n        // @ts-ignore\n        var inst = new Ctor(__assign(__assign({}, restCfg), { id: id, container: parent, updateAutoRender: this.get('updateAutoRender') }));\n        inst.init();\n        inst.render();\n        if (this.get('isRegister')) {\n            this.registerElement(inst.get('group'));\n        }\n        return inst;\n    };\n    GroupComponent.prototype.initEvent = function () { };\n    GroupComponent.prototype.removeEvent = function () {\n        var group = this.get('group');\n        group.off();\n    };\n    GroupComponent.prototype.getElementId = function (localId) {\n        var id = this.get('id'); // 组件的 Id\n        var name = this.get('name'); // 组件的名称\n        return id + \"-\" + name + \"-\" + localId;\n    };\n    GroupComponent.prototype.registerElement = function (element) {\n        var id = element.get('id');\n        this.get('shapesMap')[id] = element;\n    };\n    GroupComponent.prototype.unregisterElement = function (element) {\n        var id = element.get('id');\n        delete this.get('shapesMap')[id];\n    };\n    // 移动元素\n    GroupComponent.prototype.moveElementTo = function (element, point) {\n        var matrix = getMatrixByTranslate(point);\n        element.attr('matrix', matrix);\n    };\n    /**\n     * 图形元素新出现时的动画，默认图形从透明度 0 到当前透明度\n     * @protected\n     * @param {string} elmentName 图形元素名称\n     * @param {IElement} newElement  新的图形元素\n     * @param {object} animateCfg 动画的配置项\n     */\n    GroupComponent.prototype.addAnimation = function (elmentName, newElement, animateCfg) {\n        // 缓存透明度\n        var originOpacity = newElement.attr('opacity');\n        if (isNil(originOpacity)) {\n            originOpacity = 1;\n        }\n        newElement.attr('opacity', 0);\n        newElement.animate({ opacity: originOpacity }, animateCfg);\n    };\n    /**\n     * 图形元素新出现时的动画，默认图形从透明度 0 到当前透明度\n     * @protected\n     * @param {string} elmentName 图形元素名称\n     * @param {IElement} originElement 要删除的图形元素\n     * @param {object} animateCfg 动画的配置项\n     */\n    GroupComponent.prototype.removeAnimation = function (elementName, originElement, animateCfg) {\n        originElement.animate({ opacity: 0 }, animateCfg);\n    };\n    /**\n     * 图形元素的更新动画\n     * @param {string} elmentName 图形元素名称\n     * @param {IElement} originElement 现有的图形元素\n     * @param {object} newAttrs  新的图形元素\n     * @param {object} animateCfg 动画的配置项\n     */\n    GroupComponent.prototype.updateAnimation = function (elementName, originElement, newAttrs, animateCfg) {\n        originElement.animate(newAttrs, animateCfg);\n    };\n    // 更新组件的图形\n    GroupComponent.prototype.updateElements = function (newGroup, originGroup) {\n        var _this = this;\n        var animate = this.get('animate');\n        var animateOption = this.get('animateOption');\n        var children = newGroup.getChildren().slice(0); // 创建一个新数组，防止添加到 originGroup 时， children 变动\n        var preElement; // 前面已经匹配到的图形元素，用于\n        each(children, function (element) {\n            var elementId = element.get('id');\n            var originElement = _this.getElementById(elementId);\n            var elementName = element.get('name');\n            if (originElement) {\n                if (element.get('isComponent')) {\n                    // 嵌套子组件更新\n                    var childComponent = element.get('component');\n                    var origChildComponent = originElement.get('component');\n                    var newCfg = pick(childComponent.cfg, difference(keys(childComponent.cfg), COPY_PROPERTIES_EXCLUDES));\n                    origChildComponent.update(newCfg);\n                    originElement.set(STATUS_UPDATE, 'update');\n                }\n                else {\n                    var replaceAttrs = _this.getReplaceAttrs(originElement, element);\n                    // 更新\n                    if (animate && animateOption.update) {\n                        // 没有动画\n                        _this.updateAnimation(elementName, originElement, replaceAttrs, animateOption.update);\n                    }\n                    else {\n                        // originElement.attrs = replaceAttrs; // 直接替换\n                        originElement.attr(replaceAttrs);\n                    }\n                    // 如果是分组，则继续执行\n                    if (element.isGroup()) {\n                        _this.updateElements(element, originElement);\n                    }\n                    // 复制属性\n                    each(COPY_PROPERTIES, function (name) {\n                        originElement.set(name, element.get(name));\n                    });\n                    updateClip(originElement, element);\n                    preElement = originElement;\n                    // 执行完更新后设置状态位为更新\n                    originElement.set(STATUS_UPDATE, 'update');\n                }\n            }\n            else {\n                // 没有对应的图形，则插入当前图形\n                originGroup.add(element); // 应该在 group 加个 insertAt 的方法\n                var siblings = originGroup.getChildren(); // 兄弟节点\n                siblings.splice(siblings.length - 1, 1); // 先从数组中移除，然后放到合适的位置\n                if (preElement) {\n                    // 前面已经有更新的图形或者插入的图形，则在这个图形后面插入\n                    var index = siblings.indexOf(preElement);\n                    siblings.splice(index + 1, 0, element); // 在已经更新的图形元素后面插入\n                }\n                else {\n                    siblings.unshift(element);\n                }\n                _this.registerElement(element); // 注册节点\n                element.set(STATUS_UPDATE, 'add'); // 执行完更新后设置状态位为添加\n                if (element.get('isComponent')) {\n                    // 直接新增子组件container属性，实例不变\n                    var childComponent = element.get('component');\n                    childComponent.set('container', originGroup);\n                }\n                else if (element.isGroup()) {\n                    // 如果元素是新增加的元素，则遍历注册所有的子节点\n                    _this.registerNewGroup(element);\n                }\n                preElement = element;\n                if (animate) {\n                    var animateCfg = _this.get('isInit') ? animateOption.appear : animateOption.enter;\n                    if (animateCfg) {\n                        _this.addAnimation(elementName, element, animateCfg);\n                    }\n                }\n            }\n        });\n    };\n    GroupComponent.prototype.clearUpdateStatus = function (group) {\n        var children = group.getChildren();\n        each(children, function (el) {\n            el.set(STATUS_UPDATE, null); // 清理掉更新状态\n        });\n    };\n    // 清理离屏缓存\n    GroupComponent.prototype.clearOffScreenCache = function () {\n        var offScreenGroup = this.get('offScreenGroup');\n        if (offScreenGroup) {\n            // 销毁原先的离线 Group\n            offScreenGroup.destroy();\n        }\n        this.set('offScreenGroup', null);\n        this.set('offScreenBBox', null);\n    };\n    // private updateInner() {\n    //   const group = this.get('group');\n    //   const newGroup = this.createOffScreenGroup();\n    //   this.renderInner(newGroup);\n    //   this.applyOffset();\n    //   this.updateElements(newGroup, group);\n    //   this.deleteElements();\n    //   newGroup.destroy(); // 销毁虚拟分组\n    // }\n    // 获取发生委托时的对象，在事件中抛出\n    GroupComponent.prototype.getDelegateObject = function () {\n        var _a;\n        var name = this.get('name');\n        var delegateObject = (_a = {},\n            _a[name] = this,\n            _a.component = this,\n            _a);\n        return delegateObject;\n    };\n    // 附加委托信息，用于事件\n    GroupComponent.prototype.appendDelegateObject = function (parent, cfg) {\n        var parentObject = parent.get('delegateObject');\n        if (!cfg.delegateObject) {\n            cfg.delegateObject = {};\n        }\n        mix(cfg.delegateObject, parentObject); // 将父元素上的委托信息复制到自身\n    };\n    // 获取需要替换的属性，如果原先图形元素存在，而新图形不存在，则设置 undefined\n    GroupComponent.prototype.getReplaceAttrs = function (originElement, newElement) {\n        var originAttrs = originElement.attr();\n        var newAttrs = newElement.attr();\n        each(originAttrs, function (v, k) {\n            if (newAttrs[k] === undefined) {\n                newAttrs[k] = undefined;\n            }\n        });\n        return newAttrs;\n    };\n    GroupComponent.prototype.registerNewGroup = function (group) {\n        var _this = this;\n        var children = group.getChildren();\n        each(children, function (element) {\n            _this.registerElement(element); // 注册节点\n            element.set(STATUS_UPDATE, 'add'); // 执行完更新后设置状态位为添加\n            if (element.isGroup()) {\n                _this.registerNewGroup(element);\n            }\n        });\n    };\n    // 移除多余的元素\n    GroupComponent.prototype.deleteElements = function () {\n        var _this = this;\n        var shapesMap = this.get('shapesMap');\n        var deleteArray = [];\n        // 遍历获取需要删除的图形元素\n        each(shapesMap, function (element, id) {\n            if (!element.get(STATUS_UPDATE) || element.destroyed) {\n                deleteArray.push([id, element]);\n            }\n            else {\n                element.set(STATUS_UPDATE, null); // 清理掉更新状态\n            }\n        });\n        var animate = this.get('animate');\n        var animateOption = this.get('animateOption');\n        // 删除图形元素\n        each(deleteArray, function (item) {\n            var id = item[0], element = item[1];\n            if (!element.destroyed) {\n                var elementName = element.get('name');\n                if (animate && animateOption.leave) {\n                    // 需要动画结束时移除图形\n                    var callbackAnimCfg = mix({\n                        callback: function () {\n                            _this.removeElement(element);\n                        },\n                    }, animateOption.leave);\n                    _this.removeAnimation(elementName, element, callbackAnimCfg);\n                }\n                else {\n                    _this.removeElement(element);\n                }\n            }\n            delete shapesMap[id]; // 从缓存中移除\n        });\n    };\n    GroupComponent.prototype.removeElement = function (element) {\n        if (element.get('isGroup')) {\n            var component = element.get('component');\n            if (component) {\n                component.destroy();\n            }\n        }\n        element.remove();\n    };\n    return GroupComponent;\n}(Component));\nexport default GroupComponent;\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}