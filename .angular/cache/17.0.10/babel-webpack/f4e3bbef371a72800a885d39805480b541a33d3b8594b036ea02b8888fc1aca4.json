{"ast":null,"code":"import { __extends } from \"tslib\";\nimport Element from './element';\nimport { isFunction, isObject, each, removeFromArray, upperFirst, isAllowCapture } from '../util/util';\nvar SHAPE_MAP = {};\nvar INDEX = '_INDEX';\n/**\n * 设置 canvas\n * @param {IElement} element 元素\n * @param {ICanvas}  canvas  画布\n */\nfunction setCanvas(element, canvas) {\n  element.set('canvas', canvas);\n  if (element.isGroup()) {\n    var children = element.get('children');\n    if (children.length) {\n      children.forEach(function (child) {\n        setCanvas(child, canvas);\n      });\n    }\n  }\n}\n/**\n * 设置 timeline\n * @param {IElement} element  元素\n * @param {Timeline} timeline 时间轴\n */\nfunction setTimeline(element, timeline) {\n  element.set('timeline', timeline);\n  if (element.isGroup()) {\n    var children = element.get('children');\n    if (children.length) {\n      children.forEach(function (child) {\n        setTimeline(child, timeline);\n      });\n    }\n  }\n}\nfunction contains(container, element) {\n  var children = container.getChildren();\n  return children.indexOf(element) >= 0;\n}\nfunction removeChild(container, element, destroy) {\n  if (destroy === void 0) {\n    destroy = true;\n  }\n  // 不再调用 element.remove() 方法，会出现循环调用\n  if (destroy) {\n    element.destroy();\n  } else {\n    element.set('parent', null);\n    element.set('canvas', null);\n  }\n  removeFromArray(container.getChildren(), element);\n}\nfunction getComparer(compare) {\n  return function (left, right) {\n    var result = compare(left, right);\n    return result === 0 ? left[INDEX] - right[INDEX] : result;\n  };\n}\nvar Container = /** @class */function (_super) {\n  __extends(Container, _super);\n  function Container() {\n    return _super !== null && _super.apply(this, arguments) || this;\n  }\n  Container.prototype.isCanvas = function () {\n    return false;\n  };\n  // 根据子节点确定 BBox\n  Container.prototype.getBBox = function () {\n    // 所有的值可能在画布的可视区外\n    var minX = Infinity;\n    var maxX = -Infinity;\n    var minY = Infinity;\n    var maxY = -Infinity;\n    // 将可见元素、图形以及不为空的图形分组筛选出来，用于包围盒合并\n    var children = this.getChildren().filter(function (child) {\n      return child.get('visible') && (!child.isGroup() || child.isGroup() && child.getChildren().length > 0);\n    });\n    if (children.length > 0) {\n      each(children, function (child) {\n        var _a = child.getBBox(),\n          childMinX = _a.minX,\n          childMaxX = _a.maxX,\n          childMinY = _a.minY,\n          childMaxY = _a.maxY;\n        if (childMinX < minX) {\n          minX = childMinX;\n        }\n        if (childMaxX > maxX) {\n          maxX = childMaxX;\n        }\n        if (childMinY < minY) {\n          minY = childMinY;\n        }\n        if (childMaxY > maxY) {\n          maxY = childMaxY;\n        }\n      });\n    } else {\n      minX = 0;\n      maxX = 0;\n      minY = 0;\n      maxY = 0;\n    }\n    var box = {\n      x: minX,\n      y: minY,\n      minX: minX,\n      minY: minY,\n      maxX: maxX,\n      maxY: maxY,\n      width: maxX - minX,\n      height: maxY - minY\n    };\n    return box;\n  };\n  // 获取画布的包围盒\n  Container.prototype.getCanvasBBox = function () {\n    var minX = Infinity;\n    var maxX = -Infinity;\n    var minY = Infinity;\n    var maxY = -Infinity;\n    // 将可见元素、图形以及不为空的图形分组筛选出来，用于包围盒合并\n    var children = this.getChildren().filter(function (child) {\n      return child.get('visible') && (!child.isGroup() || child.isGroup() && child.getChildren().length > 0);\n    });\n    if (children.length > 0) {\n      each(children, function (child) {\n        var _a = child.getCanvasBBox(),\n          childMinX = _a.minX,\n          childMaxX = _a.maxX,\n          childMinY = _a.minY,\n          childMaxY = _a.maxY;\n        if (childMinX < minX) {\n          minX = childMinX;\n        }\n        if (childMaxX > maxX) {\n          maxX = childMaxX;\n        }\n        if (childMinY < minY) {\n          minY = childMinY;\n        }\n        if (childMaxY > maxY) {\n          maxY = childMaxY;\n        }\n      });\n    } else {\n      minX = 0;\n      maxX = 0;\n      minY = 0;\n      maxY = 0;\n    }\n    var box = {\n      x: minX,\n      y: minY,\n      minX: minX,\n      minY: minY,\n      maxX: maxX,\n      maxY: maxY,\n      width: maxX - minX,\n      height: maxY - minY\n    };\n    return box;\n  };\n  Container.prototype.getDefaultCfg = function () {\n    var cfg = _super.prototype.getDefaultCfg.call(this);\n    cfg['children'] = [];\n    return cfg;\n  };\n  Container.prototype.onAttrChange = function (name, value, originValue) {\n    _super.prototype.onAttrChange.call(this, name, value, originValue);\n    if (name === 'matrix') {\n      var totalMatrix = this.getTotalMatrix();\n      this._applyChildrenMarix(totalMatrix);\n    }\n  };\n  // 不但应用到自己身上还要应用于子元素\n  Container.prototype.applyMatrix = function (matrix) {\n    var preTotalMatrix = this.getTotalMatrix();\n    _super.prototype.applyMatrix.call(this, matrix);\n    var totalMatrix = this.getTotalMatrix();\n    // totalMatrix 没有发生变化时，这里仅考虑两者都为 null 时\n    // 不继续向下传递矩阵\n    if (totalMatrix === preTotalMatrix) {\n      return;\n    }\n    this._applyChildrenMarix(totalMatrix);\n  };\n  // 在子元素上设置矩阵\n  Container.prototype._applyChildrenMarix = function (totalMatrix) {\n    var children = this.getChildren();\n    each(children, function (child) {\n      child.applyMatrix(totalMatrix);\n    });\n  };\n  // 兼容老版本的接口\n  Container.prototype.addShape = function () {\n    var args = [];\n    for (var _i = 0; _i < arguments.length; _i++) {\n      args[_i] = arguments[_i];\n    }\n    var type = args[0];\n    var cfg = args[1];\n    if (isObject(type)) {\n      cfg = type;\n    } else {\n      cfg['type'] = type;\n    }\n    var shapeType = SHAPE_MAP[cfg.type];\n    if (!shapeType) {\n      shapeType = upperFirst(cfg.type);\n      SHAPE_MAP[cfg.type] = shapeType;\n    }\n    var ShapeBase = this.getShapeBase();\n    var shape = new ShapeBase[shapeType](cfg);\n    this.add(shape);\n    return shape;\n  };\n  Container.prototype.addGroup = function () {\n    var args = [];\n    for (var _i = 0; _i < arguments.length; _i++) {\n      args[_i] = arguments[_i];\n    }\n    var groupClass = args[0],\n      cfg = args[1];\n    var group;\n    if (isFunction(groupClass)) {\n      if (cfg) {\n        group = new groupClass(cfg);\n      } else {\n        group = new groupClass({\n          // canvas,\n          parent: this\n        });\n      }\n    } else {\n      var tmpCfg = groupClass || {};\n      var TmpGroupClass = this.getGroupBase();\n      group = new TmpGroupClass(tmpCfg);\n    }\n    this.add(group);\n    return group;\n  };\n  Container.prototype.getCanvas = function () {\n    var canvas;\n    if (this.isCanvas()) {\n      canvas = this;\n    } else {\n      canvas = this.get('canvas');\n    }\n    return canvas;\n  };\n  Container.prototype.getShape = function (x, y, ev) {\n    // 如果不支持拾取，则直接返回\n    if (!isAllowCapture(this)) {\n      return null;\n    }\n    var children = this.getChildren();\n    var shape;\n    // 如果容器是 group\n    if (!this.isCanvas()) {\n      var v = [x, y, 1];\n      // 将 x, y 转换成对应于 group 的局部坐标\n      v = this.invertFromMatrix(v);\n      if (!this.isClipped(v[0], v[1])) {\n        shape = this._findShape(children, v[0], v[1], ev);\n      }\n    } else {\n      shape = this._findShape(children, x, y, ev);\n    }\n    return shape;\n  };\n  Container.prototype._findShape = function (children, x, y, ev) {\n    var shape = null;\n    for (var i = children.length - 1; i >= 0; i--) {\n      var child = children[i];\n      if (isAllowCapture(child)) {\n        if (child.isGroup()) {\n          shape = child.getShape(x, y, ev);\n        } else if (child.isHit(x, y)) {\n          shape = child;\n        }\n      }\n      if (shape) {\n        break;\n      }\n    }\n    return shape;\n  };\n  Container.prototype.add = function (element) {\n    var canvas = this.getCanvas();\n    var children = this.getChildren();\n    var timeline = this.get('timeline');\n    var preParent = element.getParent();\n    if (preParent) {\n      removeChild(preParent, element, false);\n    }\n    element.set('parent', this);\n    if (canvas) {\n      setCanvas(element, canvas);\n    }\n    if (timeline) {\n      setTimeline(element, timeline);\n    }\n    children.push(element);\n    element.onCanvasChange('add');\n    this._applyElementMatrix(element);\n  };\n  // 将当前容器的矩阵应用到子元素\n  Container.prototype._applyElementMatrix = function (element) {\n    var totalMatrix = this.getTotalMatrix();\n    // 添加图形或者分组时，需要把当前图元的矩阵设置进去\n    if (totalMatrix) {\n      element.applyMatrix(totalMatrix);\n    }\n  };\n  Container.prototype.getChildren = function () {\n    return this.get('children') || [];\n  };\n  Container.prototype.sort = function () {\n    var children = this.getChildren();\n    // 稳定排序\n    each(children, function (child, index) {\n      child[INDEX] = index;\n      return child;\n    });\n    children.sort(getComparer(function (obj1, obj2) {\n      return obj1.get('zIndex') - obj2.get('zIndex');\n    }));\n    this.onCanvasChange('sort');\n  };\n  Container.prototype.clear = function () {\n    this.set('clearing', true);\n    if (this.destroyed) {\n      return;\n    }\n    var children = this.getChildren();\n    for (var i = children.length - 1; i >= 0; i--) {\n      children[i].destroy(); // 销毁子元素\n    }\n\n    this.set('children', []);\n    this.onCanvasChange('clear');\n    this.set('clearing', false);\n  };\n  Container.prototype.destroy = function () {\n    if (this.get('destroyed')) {\n      return;\n    }\n    this.clear();\n    _super.prototype.destroy.call(this);\n  };\n  /**\n   * 获取第一个子元素\n   * @return {IElement} 第一个元素\n   */\n  Container.prototype.getFirst = function () {\n    return this.getChildByIndex(0);\n  };\n  /**\n   * 获取最后一个子元素\n   * @return {IElement} 元素\n   */\n  Container.prototype.getLast = function () {\n    var children = this.getChildren();\n    return this.getChildByIndex(children.length - 1);\n  };\n  /**\n   * 根据索引获取子元素\n   * @return {IElement} 第一个元素\n   */\n  Container.prototype.getChildByIndex = function (index) {\n    var children = this.getChildren();\n    return children[index];\n  };\n  /**\n   * 子元素的数量\n   * @return {number} 子元素数量\n   */\n  Container.prototype.getCount = function () {\n    var children = this.getChildren();\n    return children.length;\n  };\n  /**\n   * 是否包含对应元素\n   * @param {IElement} element 元素\n   * @return {boolean}\n   */\n  Container.prototype.contain = function (element) {\n    var children = this.getChildren();\n    return children.indexOf(element) > -1;\n  };\n  /**\n   * 移除对应子元素\n   * @param {IElement} element 子元素\n   * @param {boolean} destroy 是否销毁子元素，默认为 true\n   */\n  Container.prototype.removeChild = function (element, destroy) {\n    if (destroy === void 0) {\n      destroy = true;\n    }\n    if (this.contain(element)) {\n      element.remove(destroy);\n    }\n  };\n  /**\n   * 查找所有匹配的元素\n   * @param  {ElementFilterFn}   fn  匹配函数\n   * @return {IElement[]} 元素数组\n   */\n  Container.prototype.findAll = function (fn) {\n    var rst = [];\n    var children = this.getChildren();\n    each(children, function (element) {\n      if (fn(element)) {\n        rst.push(element);\n      }\n      if (element.isGroup()) {\n        rst = rst.concat(element.findAll(fn));\n      }\n    });\n    return rst;\n  };\n  /**\n   * 查找元素，找到第一个返回\n   * @param  {ElementFilterFn} fn    匹配函数\n   * @return {IElement|null} 元素，可以为空\n   */\n  Container.prototype.find = function (fn) {\n    var rst = null;\n    var children = this.getChildren();\n    each(children, function (element) {\n      if (fn(element)) {\n        rst = element;\n      } else if (element.isGroup()) {\n        rst = element.find(fn);\n      }\n      if (rst) {\n        return false;\n      }\n    });\n    return rst;\n  };\n  /**\n   * 根据 ID 查找元素\n   * @param {string} id 元素 id\n   * @return {IElement|null} 元素\n   */\n  Container.prototype.findById = function (id) {\n    return this.find(function (element) {\n      return element.get('id') === id;\n    });\n  };\n  /**\n   * 该方法即将废弃，不建议使用\n   * 根据 className 查找元素\n   * TODO: 该方式定义暂时只给 G6 3.3 以后的版本使用，待 G6 中的 findByClassName 方法移除后，G 也需要同步移除\n   * @param {string} className 元素 className\n   * @return {IElement | null} 元素\n   */\n  Container.prototype.findByClassName = function (className) {\n    return this.find(function (element) {\n      return element.get('className') === className;\n    });\n  };\n  /**\n   * 根据 name 查找元素列表\n   * @param {string}      name 元素名称\n   * @return {IElement[]} 元素\n   */\n  Container.prototype.findAllByName = function (name) {\n    return this.findAll(function (element) {\n      return element.get('name') === name;\n    });\n  };\n  return Container;\n}(Element);\nexport default Container;","map":{"version":3,"names":["__extends","Element","isFunction","isObject","each","removeFromArray","upperFirst","isAllowCapture","SHAPE_MAP","INDEX","setCanvas","element","canvas","set","isGroup","children","get","length","forEach","child","setTimeline","timeline","contains","container","getChildren","indexOf","removeChild","destroy","getComparer","compare","left","right","result","Container","_super","apply","arguments","prototype","isCanvas","getBBox","minX","Infinity","maxX","minY","maxY","filter","_a","childMinX","childMaxX","childMinY","childMaxY","box","x","y","width","height","getCanvasBBox","getDefaultCfg","cfg","call","onAttrChange","name","value","originValue","totalMatrix","getTotalMatrix","_applyChildrenMarix","applyMatrix","matrix","preTotalMatrix","addShape","args","_i","type","shapeType","ShapeBase","getShapeBase","shape","add","addGroup","groupClass","group","parent","tmpCfg","TmpGroupClass","getGroupBase","getCanvas","getShape","ev","v","invertFromMatrix","isClipped","_findShape","i","isHit","preParent","getParent","push","onCanvasChange","_applyElementMatrix","sort","index","obj1","obj2","clear","destroyed","getFirst","getChildByIndex","getLast","getCount","contain","remove","findAll","fn","rst","concat","find","findById","id","findByClassName","className","findAllByName"],"sources":["/Users/obiechina/Documents/ridy-flutter-full-taxi-solution 2/node_modules/@antv/g-base/esm/abstract/container.js"],"sourcesContent":["import { __extends } from \"tslib\";\nimport Element from './element';\nimport { isFunction, isObject, each, removeFromArray, upperFirst, isAllowCapture } from '../util/util';\nvar SHAPE_MAP = {};\nvar INDEX = '_INDEX';\n/**\n * 设置 canvas\n * @param {IElement} element 元素\n * @param {ICanvas}  canvas  画布\n */\nfunction setCanvas(element, canvas) {\n    element.set('canvas', canvas);\n    if (element.isGroup()) {\n        var children = element.get('children');\n        if (children.length) {\n            children.forEach(function (child) {\n                setCanvas(child, canvas);\n            });\n        }\n    }\n}\n/**\n * 设置 timeline\n * @param {IElement} element  元素\n * @param {Timeline} timeline 时间轴\n */\nfunction setTimeline(element, timeline) {\n    element.set('timeline', timeline);\n    if (element.isGroup()) {\n        var children = element.get('children');\n        if (children.length) {\n            children.forEach(function (child) {\n                setTimeline(child, timeline);\n            });\n        }\n    }\n}\nfunction contains(container, element) {\n    var children = container.getChildren();\n    return children.indexOf(element) >= 0;\n}\nfunction removeChild(container, element, destroy) {\n    if (destroy === void 0) { destroy = true; }\n    // 不再调用 element.remove() 方法，会出现循环调用\n    if (destroy) {\n        element.destroy();\n    }\n    else {\n        element.set('parent', null);\n        element.set('canvas', null);\n    }\n    removeFromArray(container.getChildren(), element);\n}\nfunction getComparer(compare) {\n    return function (left, right) {\n        var result = compare(left, right);\n        return result === 0 ? left[INDEX] - right[INDEX] : result;\n    };\n}\nvar Container = /** @class */ (function (_super) {\n    __extends(Container, _super);\n    function Container() {\n        return _super !== null && _super.apply(this, arguments) || this;\n    }\n    Container.prototype.isCanvas = function () {\n        return false;\n    };\n    // 根据子节点确定 BBox\n    Container.prototype.getBBox = function () {\n        // 所有的值可能在画布的可视区外\n        var minX = Infinity;\n        var maxX = -Infinity;\n        var minY = Infinity;\n        var maxY = -Infinity;\n        // 将可见元素、图形以及不为空的图形分组筛选出来，用于包围盒合并\n        var children = this.getChildren().filter(function (child) {\n            return child.get('visible') && (!child.isGroup() || (child.isGroup() && child.getChildren().length > 0));\n        });\n        if (children.length > 0) {\n            each(children, function (child) {\n                var _a = child.getBBox(), childMinX = _a.minX, childMaxX = _a.maxX, childMinY = _a.minY, childMaxY = _a.maxY;\n                if (childMinX < minX) {\n                    minX = childMinX;\n                }\n                if (childMaxX > maxX) {\n                    maxX = childMaxX;\n                }\n                if (childMinY < minY) {\n                    minY = childMinY;\n                }\n                if (childMaxY > maxY) {\n                    maxY = childMaxY;\n                }\n            });\n        }\n        else {\n            minX = 0;\n            maxX = 0;\n            minY = 0;\n            maxY = 0;\n        }\n        var box = {\n            x: minX,\n            y: minY,\n            minX: minX,\n            minY: minY,\n            maxX: maxX,\n            maxY: maxY,\n            width: maxX - minX,\n            height: maxY - minY,\n        };\n        return box;\n    };\n    // 获取画布的包围盒\n    Container.prototype.getCanvasBBox = function () {\n        var minX = Infinity;\n        var maxX = -Infinity;\n        var minY = Infinity;\n        var maxY = -Infinity;\n        // 将可见元素、图形以及不为空的图形分组筛选出来，用于包围盒合并\n        var children = this.getChildren().filter(function (child) {\n            return child.get('visible') && (!child.isGroup() || (child.isGroup() && child.getChildren().length > 0));\n        });\n        if (children.length > 0) {\n            each(children, function (child) {\n                var _a = child.getCanvasBBox(), childMinX = _a.minX, childMaxX = _a.maxX, childMinY = _a.minY, childMaxY = _a.maxY;\n                if (childMinX < minX) {\n                    minX = childMinX;\n                }\n                if (childMaxX > maxX) {\n                    maxX = childMaxX;\n                }\n                if (childMinY < minY) {\n                    minY = childMinY;\n                }\n                if (childMaxY > maxY) {\n                    maxY = childMaxY;\n                }\n            });\n        }\n        else {\n            minX = 0;\n            maxX = 0;\n            minY = 0;\n            maxY = 0;\n        }\n        var box = {\n            x: minX,\n            y: minY,\n            minX: minX,\n            minY: minY,\n            maxX: maxX,\n            maxY: maxY,\n            width: maxX - minX,\n            height: maxY - minY,\n        };\n        return box;\n    };\n    Container.prototype.getDefaultCfg = function () {\n        var cfg = _super.prototype.getDefaultCfg.call(this);\n        cfg['children'] = [];\n        return cfg;\n    };\n    Container.prototype.onAttrChange = function (name, value, originValue) {\n        _super.prototype.onAttrChange.call(this, name, value, originValue);\n        if (name === 'matrix') {\n            var totalMatrix = this.getTotalMatrix();\n            this._applyChildrenMarix(totalMatrix);\n        }\n    };\n    // 不但应用到自己身上还要应用于子元素\n    Container.prototype.applyMatrix = function (matrix) {\n        var preTotalMatrix = this.getTotalMatrix();\n        _super.prototype.applyMatrix.call(this, matrix);\n        var totalMatrix = this.getTotalMatrix();\n        // totalMatrix 没有发生变化时，这里仅考虑两者都为 null 时\n        // 不继续向下传递矩阵\n        if (totalMatrix === preTotalMatrix) {\n            return;\n        }\n        this._applyChildrenMarix(totalMatrix);\n    };\n    // 在子元素上设置矩阵\n    Container.prototype._applyChildrenMarix = function (totalMatrix) {\n        var children = this.getChildren();\n        each(children, function (child) {\n            child.applyMatrix(totalMatrix);\n        });\n    };\n    // 兼容老版本的接口\n    Container.prototype.addShape = function () {\n        var args = [];\n        for (var _i = 0; _i < arguments.length; _i++) {\n            args[_i] = arguments[_i];\n        }\n        var type = args[0];\n        var cfg = args[1];\n        if (isObject(type)) {\n            cfg = type;\n        }\n        else {\n            cfg['type'] = type;\n        }\n        var shapeType = SHAPE_MAP[cfg.type];\n        if (!shapeType) {\n            shapeType = upperFirst(cfg.type);\n            SHAPE_MAP[cfg.type] = shapeType;\n        }\n        var ShapeBase = this.getShapeBase();\n        var shape = new ShapeBase[shapeType](cfg);\n        this.add(shape);\n        return shape;\n    };\n    Container.prototype.addGroup = function () {\n        var args = [];\n        for (var _i = 0; _i < arguments.length; _i++) {\n            args[_i] = arguments[_i];\n        }\n        var groupClass = args[0], cfg = args[1];\n        var group;\n        if (isFunction(groupClass)) {\n            if (cfg) {\n                group = new groupClass(cfg);\n            }\n            else {\n                group = new groupClass({\n                    // canvas,\n                    parent: this,\n                });\n            }\n        }\n        else {\n            var tmpCfg = groupClass || {};\n            var TmpGroupClass = this.getGroupBase();\n            group = new TmpGroupClass(tmpCfg);\n        }\n        this.add(group);\n        return group;\n    };\n    Container.prototype.getCanvas = function () {\n        var canvas;\n        if (this.isCanvas()) {\n            canvas = this;\n        }\n        else {\n            canvas = this.get('canvas');\n        }\n        return canvas;\n    };\n    Container.prototype.getShape = function (x, y, ev) {\n        // 如果不支持拾取，则直接返回\n        if (!isAllowCapture(this)) {\n            return null;\n        }\n        var children = this.getChildren();\n        var shape;\n        // 如果容器是 group\n        if (!this.isCanvas()) {\n            var v = [x, y, 1];\n            // 将 x, y 转换成对应于 group 的局部坐标\n            v = this.invertFromMatrix(v);\n            if (!this.isClipped(v[0], v[1])) {\n                shape = this._findShape(children, v[0], v[1], ev);\n            }\n        }\n        else {\n            shape = this._findShape(children, x, y, ev);\n        }\n        return shape;\n    };\n    Container.prototype._findShape = function (children, x, y, ev) {\n        var shape = null;\n        for (var i = children.length - 1; i >= 0; i--) {\n            var child = children[i];\n            if (isAllowCapture(child)) {\n                if (child.isGroup()) {\n                    shape = child.getShape(x, y, ev);\n                }\n                else if (child.isHit(x, y)) {\n                    shape = child;\n                }\n            }\n            if (shape) {\n                break;\n            }\n        }\n        return shape;\n    };\n    Container.prototype.add = function (element) {\n        var canvas = this.getCanvas();\n        var children = this.getChildren();\n        var timeline = this.get('timeline');\n        var preParent = element.getParent();\n        if (preParent) {\n            removeChild(preParent, element, false);\n        }\n        element.set('parent', this);\n        if (canvas) {\n            setCanvas(element, canvas);\n        }\n        if (timeline) {\n            setTimeline(element, timeline);\n        }\n        children.push(element);\n        element.onCanvasChange('add');\n        this._applyElementMatrix(element);\n    };\n    // 将当前容器的矩阵应用到子元素\n    Container.prototype._applyElementMatrix = function (element) {\n        var totalMatrix = this.getTotalMatrix();\n        // 添加图形或者分组时，需要把当前图元的矩阵设置进去\n        if (totalMatrix) {\n            element.applyMatrix(totalMatrix);\n        }\n    };\n    Container.prototype.getChildren = function () {\n        return (this.get('children') || []);\n    };\n    Container.prototype.sort = function () {\n        var children = this.getChildren();\n        // 稳定排序\n        each(children, function (child, index) {\n            child[INDEX] = index;\n            return child;\n        });\n        children.sort(getComparer(function (obj1, obj2) {\n            return obj1.get('zIndex') - obj2.get('zIndex');\n        }));\n        this.onCanvasChange('sort');\n    };\n    Container.prototype.clear = function () {\n        this.set('clearing', true);\n        if (this.destroyed) {\n            return;\n        }\n        var children = this.getChildren();\n        for (var i = children.length - 1; i >= 0; i--) {\n            children[i].destroy(); // 销毁子元素\n        }\n        this.set('children', []);\n        this.onCanvasChange('clear');\n        this.set('clearing', false);\n    };\n    Container.prototype.destroy = function () {\n        if (this.get('destroyed')) {\n            return;\n        }\n        this.clear();\n        _super.prototype.destroy.call(this);\n    };\n    /**\n     * 获取第一个子元素\n     * @return {IElement} 第一个元素\n     */\n    Container.prototype.getFirst = function () {\n        return this.getChildByIndex(0);\n    };\n    /**\n     * 获取最后一个子元素\n     * @return {IElement} 元素\n     */\n    Container.prototype.getLast = function () {\n        var children = this.getChildren();\n        return this.getChildByIndex(children.length - 1);\n    };\n    /**\n     * 根据索引获取子元素\n     * @return {IElement} 第一个元素\n     */\n    Container.prototype.getChildByIndex = function (index) {\n        var children = this.getChildren();\n        return children[index];\n    };\n    /**\n     * 子元素的数量\n     * @return {number} 子元素数量\n     */\n    Container.prototype.getCount = function () {\n        var children = this.getChildren();\n        return children.length;\n    };\n    /**\n     * 是否包含对应元素\n     * @param {IElement} element 元素\n     * @return {boolean}\n     */\n    Container.prototype.contain = function (element) {\n        var children = this.getChildren();\n        return children.indexOf(element) > -1;\n    };\n    /**\n     * 移除对应子元素\n     * @param {IElement} element 子元素\n     * @param {boolean} destroy 是否销毁子元素，默认为 true\n     */\n    Container.prototype.removeChild = function (element, destroy) {\n        if (destroy === void 0) { destroy = true; }\n        if (this.contain(element)) {\n            element.remove(destroy);\n        }\n    };\n    /**\n     * 查找所有匹配的元素\n     * @param  {ElementFilterFn}   fn  匹配函数\n     * @return {IElement[]} 元素数组\n     */\n    Container.prototype.findAll = function (fn) {\n        var rst = [];\n        var children = this.getChildren();\n        each(children, function (element) {\n            if (fn(element)) {\n                rst.push(element);\n            }\n            if (element.isGroup()) {\n                rst = rst.concat(element.findAll(fn));\n            }\n        });\n        return rst;\n    };\n    /**\n     * 查找元素，找到第一个返回\n     * @param  {ElementFilterFn} fn    匹配函数\n     * @return {IElement|null} 元素，可以为空\n     */\n    Container.prototype.find = function (fn) {\n        var rst = null;\n        var children = this.getChildren();\n        each(children, function (element) {\n            if (fn(element)) {\n                rst = element;\n            }\n            else if (element.isGroup()) {\n                rst = element.find(fn);\n            }\n            if (rst) {\n                return false;\n            }\n        });\n        return rst;\n    };\n    /**\n     * 根据 ID 查找元素\n     * @param {string} id 元素 id\n     * @return {IElement|null} 元素\n     */\n    Container.prototype.findById = function (id) {\n        return this.find(function (element) {\n            return element.get('id') === id;\n        });\n    };\n    /**\n     * 该方法即将废弃，不建议使用\n     * 根据 className 查找元素\n     * TODO: 该方式定义暂时只给 G6 3.3 以后的版本使用，待 G6 中的 findByClassName 方法移除后，G 也需要同步移除\n     * @param {string} className 元素 className\n     * @return {IElement | null} 元素\n     */\n    Container.prototype.findByClassName = function (className) {\n        return this.find(function (element) {\n            return element.get('className') === className;\n        });\n    };\n    /**\n     * 根据 name 查找元素列表\n     * @param {string}      name 元素名称\n     * @return {IElement[]} 元素\n     */\n    Container.prototype.findAllByName = function (name) {\n        return this.findAll(function (element) {\n            return element.get('name') === name;\n        });\n    };\n    return Container;\n}(Element));\nexport default Container;\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}