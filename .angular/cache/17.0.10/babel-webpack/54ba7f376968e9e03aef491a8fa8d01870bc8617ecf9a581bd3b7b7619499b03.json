{"ast":null,"code":"import { __assign, __extends } from \"tslib\";\nimport { AbstractCanvas } from '@antv/g-base';\nimport { SHAPE_TO_TAGS } from './constant';\nimport { drawChildren } from './util/draw';\nimport { setTransform, setClip } from './util/svg';\nimport { sortDom, createSVGElement } from './util/dom';\nimport * as Shape from './shape';\nimport Group from './group';\nimport Defs from './defs';\nvar Canvas = /** @class */function (_super) {\n  __extends(Canvas, _super);\n  function Canvas(cfg) {\n    return _super.call(this, __assign(__assign({}, cfg), {\n      autoDraw: true,\n      // 设置渲染引擎为 canvas，只读属性\n      renderer: 'svg'\n    })) || this;\n  }\n  Canvas.prototype.getShapeBase = function () {\n    return Shape;\n  };\n  Canvas.prototype.getGroupBase = function () {\n    return Group;\n  };\n  // 覆盖 Container 中通过遍历的方式获取 shape 对象的逻辑，直接走 SVG 的 dom 拾取即可\n  Canvas.prototype.getShape = function (x, y, ev) {\n    var target = ev.target || ev.srcElement;\n    if (!SHAPE_TO_TAGS[target.tagName]) {\n      var parent_1 = target.parentNode;\n      while (parent_1 && !SHAPE_TO_TAGS[parent_1.tagName]) {\n        parent_1 = parent_1.parentNode;\n      }\n      target = parent_1;\n    }\n    return this.find(function (child) {\n      return child.get('el') === target;\n    });\n  };\n  // 复写基类的方法生成标签\n  Canvas.prototype.createDom = function () {\n    var element = createSVGElement('svg');\n    var context = new Defs(element);\n    element.setAttribute('width', \"\" + this.get('width'));\n    element.setAttribute('height', \"\" + this.get('height'));\n    // 缓存 context 对象\n    this.set('context', context);\n    return element;\n  };\n  /**\n   * 一些方法调用会引起画布变化\n   * @param {ChangeType} changeType 改变的类型\n   */\n  Canvas.prototype.onCanvasChange = function (changeType) {\n    var context = this.get('context');\n    var el = this.get('el');\n    if (changeType === 'sort') {\n      var children_1 = this.get('children');\n      if (children_1 && children_1.length) {\n        sortDom(this, function (a, b) {\n          return children_1.indexOf(a) - children_1.indexOf(b) ? 1 : 0;\n        });\n      }\n    } else if (changeType === 'clear') {\n      // el maybe null for canvas\n      if (el) {\n        // 清空 SVG 元素\n        el.innerHTML = '';\n        var defsEl = context.el;\n        // 清空 defs 元素\n        defsEl.innerHTML = '';\n        // 将清空后的 defs 元素挂载到 el 下\n        el.appendChild(defsEl);\n      }\n    } else if (changeType === 'matrix') {\n      setTransform(this);\n    } else if (changeType === 'clip') {\n      setClip(this, context);\n    } else if (changeType === 'changeSize') {\n      el.setAttribute('width', \"\" + this.get('width'));\n      el.setAttribute('height', \"\" + this.get('height'));\n    }\n  };\n  // 复写基类的 draw 方法\n  Canvas.prototype.draw = function () {\n    var context = this.get('context');\n    var children = this.getChildren();\n    setClip(this, context);\n    if (children.length) {\n      drawChildren(context, children);\n    }\n  };\n  return Canvas;\n}(AbstractCanvas);\nexport default Canvas;","map":{"version":3,"names":["__assign","__extends","AbstractCanvas","SHAPE_TO_TAGS","drawChildren","setTransform","setClip","sortDom","createSVGElement","Shape","Group","Defs","Canvas","_super","cfg","call","autoDraw","renderer","prototype","getShapeBase","getGroupBase","getShape","x","y","ev","target","srcElement","tagName","parent_1","parentNode","find","child","get","createDom","element","context","setAttribute","set","onCanvasChange","changeType","el","children_1","length","a","b","indexOf","innerHTML","defsEl","appendChild","draw","children","getChildren"],"sources":["/Users/obiechina/Documents/ridy-flutter-full-taxi-solution 2/node_modules/@antv/g-svg/esm/canvas.js"],"sourcesContent":["import { __assign, __extends } from \"tslib\";\nimport { AbstractCanvas } from '@antv/g-base';\nimport { SHAPE_TO_TAGS } from './constant';\nimport { drawChildren } from './util/draw';\nimport { setTransform, setClip } from './util/svg';\nimport { sortDom, createSVGElement } from './util/dom';\nimport * as Shape from './shape';\nimport Group from './group';\nimport Defs from './defs';\nvar Canvas = /** @class */ (function (_super) {\n    __extends(Canvas, _super);\n    function Canvas(cfg) {\n        return _super.call(this, __assign(__assign({}, cfg), { autoDraw: true, \n            // 设置渲染引擎为 canvas，只读属性\n            renderer: 'svg' })) || this;\n    }\n    Canvas.prototype.getShapeBase = function () {\n        return Shape;\n    };\n    Canvas.prototype.getGroupBase = function () {\n        return Group;\n    };\n    // 覆盖 Container 中通过遍历的方式获取 shape 对象的逻辑，直接走 SVG 的 dom 拾取即可\n    Canvas.prototype.getShape = function (x, y, ev) {\n        var target = ev.target || ev.srcElement;\n        if (!SHAPE_TO_TAGS[target.tagName]) {\n            var parent_1 = target.parentNode;\n            while (parent_1 && !SHAPE_TO_TAGS[parent_1.tagName]) {\n                parent_1 = parent_1.parentNode;\n            }\n            target = parent_1;\n        }\n        return this.find(function (child) { return child.get('el') === target; });\n    };\n    // 复写基类的方法生成标签\n    Canvas.prototype.createDom = function () {\n        var element = createSVGElement('svg');\n        var context = new Defs(element);\n        element.setAttribute('width', \"\" + this.get('width'));\n        element.setAttribute('height', \"\" + this.get('height'));\n        // 缓存 context 对象\n        this.set('context', context);\n        return element;\n    };\n    /**\n     * 一些方法调用会引起画布变化\n     * @param {ChangeType} changeType 改变的类型\n     */\n    Canvas.prototype.onCanvasChange = function (changeType) {\n        var context = this.get('context');\n        var el = this.get('el');\n        if (changeType === 'sort') {\n            var children_1 = this.get('children');\n            if (children_1 && children_1.length) {\n                sortDom(this, function (a, b) {\n                    return children_1.indexOf(a) - children_1.indexOf(b) ? 1 : 0;\n                });\n            }\n        }\n        else if (changeType === 'clear') {\n            // el maybe null for canvas\n            if (el) {\n                // 清空 SVG 元素\n                el.innerHTML = '';\n                var defsEl = context.el;\n                // 清空 defs 元素\n                defsEl.innerHTML = '';\n                // 将清空后的 defs 元素挂载到 el 下\n                el.appendChild(defsEl);\n            }\n        }\n        else if (changeType === 'matrix') {\n            setTransform(this);\n        }\n        else if (changeType === 'clip') {\n            setClip(this, context);\n        }\n        else if (changeType === 'changeSize') {\n            el.setAttribute('width', \"\" + this.get('width'));\n            el.setAttribute('height', \"\" + this.get('height'));\n        }\n    };\n    // 复写基类的 draw 方法\n    Canvas.prototype.draw = function () {\n        var context = this.get('context');\n        var children = this.getChildren();\n        setClip(this, context);\n        if (children.length) {\n            drawChildren(context, children);\n        }\n    };\n    return Canvas;\n}(AbstractCanvas));\nexport default Canvas;\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}